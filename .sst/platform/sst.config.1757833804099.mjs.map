{
  "version": 3,
  "sources": ["<define:$app>", "<define:$cli>", "src/shim/run.js", "src/components/link.ts", "src/components/error.ts", "src/components/linkable.ts", "src/components/component.ts", "src/components/naming.ts", "src/config.ts", "src/auto/run.ts", "../../sst.config.ts", "src/components/aws/index.ts", "src/components/aws/analog.ts", "src/components/aws/ssr-site.ts", "src/components/aws/cdn.ts", "src/components/aws/dns-validated-certificate.ts", "src/components/aws/https-redirect.ts", "src/components/aws/bucket.ts", "src/components/duration.ts", "src/components/aws/helpers/arn.ts", "src/components/aws/bucket-lambda-subscriber.ts", "src/components/aws/helpers/function-builder.ts", "src/components/aws/function.ts", "src/components/rpc/rpc.ts", "src/components/aws/helpers/bootstrap.ts", "src/components/size.ts", "src/components/aws/logging.ts", "src/components/aws/permission.ts", "src/components/aws/vpc.ts", "src/components/aws/vpc-v1.ts", "src/util/lazy.ts", "src/components/aws/efs.ts", "src/components/aws/providers/function-environment-update.ts", "src/util/warn.ts", "src/components/aws/router.ts", "src/components/aws/providers/origin-access-control.ts", "src/components/aws/router-url-route.ts", "src/components/aws/router-base-route.ts", "src/components/aws/providers/kv-routes-update.ts", "src/components/aws/providers/kv-keys.ts", "src/components/aws/router-bucket-route.ts", "src/components/aws/bucket-queue-subscriber.ts", "src/components/aws/queue.ts", "src/components/aws/queue-lambda-subscriber.ts", "src/components/aws/bucket-topic-subscriber.ts", "src/components/aws/bucket-notification.ts", "src/components/aws/sns-topic.ts", "src/components/aws/sns-topic-lambda-subscriber.ts", "src/components/aws/sns-topic-queue-subscriber.ts", "src/components/aws/helpers/subscriber.ts", "src/components/aws/helpers/provider.ts", "src/components/aws/providers/distribution-deployment-waiter.ts", "src/components/aws/providers/hosted-zone-lookup.ts", "src/components/aws/dns.ts", "src/components/aws/providers/bucket-files.ts", "src/components/aws/cron.ts", "src/components/base/base-site.ts", "src/components/base/base-ssr-site.ts", "src/components/aws/helpers/site-builder.ts", "src/util/semaphore.ts", "src/components/aws/linkable.ts", "src/components/aws/providers/distribution-invalidation.ts", "src/components/aws/helpers/quota.ts", "src/components/path.ts", "src/components/aws/apigatewayv1.ts", "src/components/aws/apigatewayv1-lambda-route.ts", "src/components/aws/apigatewayv1-base-route.ts", "src/components/aws/apigatewayv1-authorizer.ts", "src/components/aws/helpers/apigateway-account.ts", "src/components/aws/apigatewayv1-integration-route.ts", "src/components/aws/apigatewayv1-usage-plan.ts", "src/components/aws/apigatewayv1-api-key.ts", "src/components/aws/apigatewayv2.ts", "src/components/aws/apigatewayv2-lambda-route.ts", "src/components/aws/apigatewayv2-base-route.ts", "src/components/aws/apigatewayv2-authorizer.ts", "src/components/aws/apigatewayv2-url-route.ts", "src/components/aws/apigatewayv2-private-route.ts", "src/components/aws/apigateway-websocket.ts", "src/components/aws/apigateway-websocket-route.ts", "src/components/aws/app-sync.ts", "src/components/aws/app-sync-data-source.ts", "src/components/aws/app-sync-resolver.ts", "src/components/aws/app-sync-function.ts", "src/components/aws/astro.ts", "src/util/compare-semver.ts", "src/components/aws/aurora.ts", "src/components/experimental/dev-command.ts", "src/components/aws/providers/rds-role-lookup.ts", "src/components/aws/auth.ts", "src/components/aws/auth-v1.ts", "src/components/aws/bus.ts", "src/components/aws/bus-lambda-subscriber.ts", "src/components/aws/bus-base-subscriber.ts", "src/components/aws/bus-queue-subscriber.ts", "src/components/aws/cluster.ts", "src/components/aws/service.ts", "src/components/aws/fargate.ts", "src/components/aws/helpers/container-builder.ts", "src/components/cpu.ts", "src/components/aws/service-v1.ts", "src/components/aws/cluster-v1.ts", "src/components/aws/task.ts", "src/components/aws/cognito-identity-pool.ts", "src/components/aws/cognito-user-pool.ts", "src/components/aws/cognito-identity-provider.ts", "src/components/aws/cognito-user-pool-client.ts", "src/components/aws/dynamo.ts", "src/components/aws/dynamo-lambda-subscriber.ts", "src/components/aws/email.ts", "src/components/aws/kinesis-stream.ts", "src/components/aws/kinesis-stream-lambda-subscriber.ts", "src/components/aws/nextjs.ts", "src/components/aws/opencontrol.ts", "src/components/aws/open-search.ts", "src/components/aws/postgres.ts", "src/components/aws/postgres-v1.ts", "src/components/aws/mysql.ts", "src/components/aws/realtime.ts", "src/components/aws/realtime-lambda-subscriber.ts", "src/components/aws/react.ts", "src/components/aws/redis.ts", "src/components/aws/redis-v1.ts", "src/components/aws/remix.ts", "src/components/aws/solid-start.ts", "src/components/aws/step-functions.ts", "src/components/aws/step-functions/state.ts", "src/components/aws/step-functions/choice.ts", "src/components/aws/step-functions/fail.ts", "src/components/aws/step-functions/map.ts", "src/components/aws/step-functions/parallel.ts", "src/components/aws/step-functions/pass.ts", "src/components/aws/step-functions/succeed.ts", "src/components/aws/step-functions/task.ts", "src/components/aws/step-functions/wait.ts", "src/components/aws/tan-stack-start.ts", "src/components/aws/nuxt.ts", "src/components/aws/static-site.ts", "src/components/base/base-static-site.ts", "src/components/aws/svelte-kit.ts", "src/components/aws/vector.ts", "src/components/aws/providers/vector-table.ts", "src/components/aws/iam-edit.ts", "src/components/index.ts", "../../eval.ts"],
  "sourcesContent": ["", "", "import * as util from \"@pulumi/pulumi\";\nimport { Link } from \"../components/link\";\nimport { $config } from \"../config\";\nimport { $transform, $asset } from \"../components/component\";\n\nconst $secrets = JSON.parse(process.env.SST_SECRETS || \"{}\");\nconst { output, apply, all, interpolate, concat, jsonParse, jsonStringify } =\n  util;\n\nconst linkable = Link.makeLinkable;\nexport {\n  linkable as \"$linkable\",\n  output as \"$output\",\n  apply as \"$apply\",\n  all as \"$resolve\",\n  interpolate as \"$interpolate\",\n  concat as \"$concat\",\n  jsonParse as \"$jsonParse\",\n  jsonStringify as \"$jsonStringify\",\n  util as \"$util\",\n  $asset as \"$asset\",\n  $config as \"$config\",\n  $transform as \"$transform\",\n  $secrets as \"$secrets\",\n};\n", "import {\n  Input,\n  Output,\n  runtime,\n  output,\n  all,\n  ComponentResource,\n} from \"@pulumi/pulumi\";\nimport { VisibleError } from \"./error.js\";\nimport { Linkable } from \"./linkable.js\";\n\nexport module Link {\n  export interface Definition<\n    Properties extends Record<string, any> = Record<string, any>,\n  > {\n    properties: Properties;\n    include?: {\n      type: string;\n      [key: string]: any;\n    }[];\n  }\n\n  export class Ref extends ComponentResource {\n    constructor(target: string, type: string, properties: any, include?: any) {\n      super(\n        \"sst:sst:LinkRef\",\n        target + \"LinkRef\",\n        {\n          properties,\n          include,\n        },\n        {},\n      );\n      this.registerOutputs({\n        target: target,\n        include,\n        properties: {\n          type: type.replaceAll(\":\", \".\"),\n          ...properties,\n        },\n      });\n    }\n  }\n\n  export function reset() {\n    const links = new Set<string>();\n    // Ensure component names are unique\n    runtime.registerStackTransformation((args) => {\n      const isLinkable =\n        args.type.startsWith(\"sst:\") ||\n        Linkable.wrappedResources.has(args.type);\n      if (isLinkable && !args.opts.parent) {\n        const lcname = args.name.toLowerCase();\n\n        // \"App\" is reserved and cannot be used as a component name.\n        if (lcname === \"app\") {\n          throw new VisibleError(\n            `Component name \"${args.name}\" is reserved. Please choose a different name for your \"${args.type}\" component.`,\n          );\n        }\n\n        // Ensure linkable resources have unique names. This includes all SST components\n        // and non-SST components that are linkable.\n        if (links.has(lcname)) {\n          throw new VisibleError(`Component name ${args.name} is not unique.`);\n        }\n        links.add(lcname);\n      }\n      return {\n        opts: args.opts,\n        props: args.props,\n      };\n    });\n\n    // Create link refs\n    runtime.registerStackTransformation((args) => {\n      const resource = args.resource;\n      process.nextTick(() => {\n        if (Link.isLinkable(resource) && !args.opts.parent) {\n          try {\n            const link = resource.getSSTLink();\n            new Ref(args.name, args.type, link.properties, link.include);\n          } catch (e) {}\n        }\n      });\n      return {\n        opts: args.opts,\n        props: args.props,\n      };\n    });\n  }\n\n  export interface Linkable {\n    urn: Output<string>;\n    getSSTLink(): Definition;\n  }\n\n  export function isLinkable(obj: any): obj is Linkable {\n    return \"getSSTLink\" in obj;\n  }\n\n  export function build(links: any[]) {\n    return links\n      .map((link) => {\n        if (!link)\n          throw new VisibleError(\n            \"An undefined link was passed into a `link` array.\",\n          );\n        return link;\n      })\n      .filter((l) => isLinkable(l))\n      .map((l: Linkable) => {\n        const link = l.getSSTLink();\n        return all([l.urn, link]).apply(([urn, link]) => ({\n          name: urn.split(\"::\").at(-1)!,\n          properties: {\n            ...link.properties,\n            type: urn.split(\"::\").at(-2),\n          },\n        }));\n      });\n  }\n\n  export function getProperties(links?: Input<any[]>) {\n    const linkProperties = output(links ?? []).apply((links) =>\n      links\n        .map((link) => {\n          if (!link)\n            throw new VisibleError(\n              \"An undefined link was passed into a `link` array.\",\n            );\n          return link;\n        })\n        .filter((l) => isLinkable(l))\n        .map((l: Linkable) => ({\n          urn: l.urn,\n          properties: l.getSSTLink().properties,\n        })),\n    );\n\n    return output(linkProperties).apply((e) =>\n      Object.fromEntries(\n        e.map(({ urn, properties }) => {\n          const name = urn.split(\"::\").at(-1)!;\n          const data = {\n            ...properties,\n            type: urn.split(\"::\").at(-2),\n          };\n          return [name, data];\n        }),\n      ),\n    );\n  }\n\n  export function propertiesToEnv(\n    properties: ReturnType<typeof getProperties>,\n  ) {\n    return output(properties).apply((properties) => {\n      const env = Object.fromEntries(\n        Object.entries(properties).map(([key, value]) => {\n          return [`SST_RESOURCE_${key}`, JSON.stringify(value)];\n        }),\n      );\n      env[\"SST_RESOURCE_App\"] = JSON.stringify({\n        name: $app.name,\n        stage: $app.stage,\n      });\n      return env;\n    });\n  }\n\n  export function getInclude<T>(\n    type: string,\n    input?: Input<any[]>,\n  ): Output<T[]> {\n    if (!input) return output([]);\n    return output(input).apply((links) => {\n      return links.filter(isLinkable).flatMap((l: Linkable) => {\n        const link = l.getSSTLink();\n        return (link.include || []).filter((i) => i.type === type) as T[];\n      });\n    });\n  }\n\n  /** @deprecated\n   * Use sst.Linkable.wrap instead.\n   */\n  export function linkable<T>(\n    obj: { new (...args: any[]): T },\n    cb: (resource: T) => Definition,\n  ) {\n    console.warn(\"sst.linkable is deprecated. Use sst.Linkable.wrap instead.\");\n    obj.prototype.getSSTLink = function () {\n      return cb(this);\n    };\n  }\n}\n", "export class VisibleError extends Error {\n  constructor(...message: string[]) {\n    super(message.join(\"\\n\"));\n  }\n}\n", "import { output } from \"@pulumi/pulumi\";\nimport { Link } from \"./link\";\nimport { Component } from \"./component\";\nimport { Input } from \"./input\";\n\nexport interface Definition<\n  Properties extends Record<string, any> = Record<string, any>,\n> {\n  /**\n   * Define values that the linked resource can access at runtime. These can be outputs\n   * from other resources or constants.\n   *\n   * @example\n   * ```ts\n   * {\n   *   properties: { foo: \"bar\" }\n   * }\n   * ```\n   */\n  properties: Properties;\n  /**\n   * Include AWS permissions or Cloudflare bindings for the linkable resource. The linked\n   * resource will have these permissions or bindings.\n   *\n   * @example\n   * Include AWS permissions.\n   *\n   * ```ts\n   * {\n   *   include: [\n   *     sst.aws.permission({\n   *       actions: [\"lambda:InvokeFunction\"],\n   *       resources: [\"*\"]\n   *     })\n   *   ]\n   * }\n   * ```\n   *\n   * Include Cloudflare bindings.\n   *\n   * ```ts\n   * {\n   *   include: [\n   *     sst.cloudflare.binding({\n   *       type: \"r2BucketBindings\",\n   *       properties: {\n   *         bucketName: \"my-bucket\"\n   *       }\n   *     })\n   *   ]\n   * }\n   * ```\n   */\n  include?: {\n    type: string;\n    [key: string]: any;\n  }[];\n}\n\n/**\n * The `Linkable` component and the `Linkable.wrap` method lets you link any resources in your\n * app; not just the built-in SST components. It also lets you modify the links SST creates.\n *\n * @example\n *\n * #### Linking any value\n *\n * The `Linkable` component takes a list of properties that you want to link. These can be\n * outputs from other resources or constants.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.Linkable(\"MyLinkable\", {\n *   properties: { foo: \"bar\" }\n * });\n * ```\n *\n * You can also use this to combine multiple resources into a single linkable resource. And\n * optionally include permissions or bindings for the linked resource.\n *\n * ```ts title=\"sst.config.ts\"\n * const bucketA = new sst.aws.Bucket(\"MyBucketA\");\n * const bucketB = new sst.aws.Bucket(\"MyBucketB\");\n *\n * const storage = new sst.Linkable(\"MyStorage\", {\n *   properties: {\n *     foo: \"bar\",\n *     bucketA: bucketA.name,\n *     bucketB: bucketB.name\n *   },\n *   include: [\n *     sst.aws.permission({\n *       actions: [\"s3:*\"],\n *       resources: [bucketA.arn, bucketB.arn]\n *     })\n *   ]\n * });\n * ```\n *\n * You can now link this resource to your frontend or a function.\n *\n * ```ts title=\"sst.config.ts\" {3}\n * new sst.aws.Function(\"MyApi\", {\n *   handler: \"src/lambda.handler\",\n *   link: [storage]\n * });\n * ```\n *\n * Then use the [SDK](/docs/reference/sdk/) to access it at runtime.\n *\n * ```js title=\"src/lambda.ts\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyStorage.bucketA);\n * ```\n *\n * #### Linking any resource\n *\n * You can also wrap any Pulumi Resource class to make it linkable.\n *\n * ```ts title=\"sst.config.ts\"\n * sst.Linkable.wrap(aws.dynamodb.Table, (table) => ({\n *   properties: { tableName: table.name },\n *   include: [\n *     sst.aws.permission({\n *       actions: [\"dynamodb:*\"],\n *       resources: [table.arn]\n *     })\n *   ]\n * }));\n * ```\n *\n * Now you create an instance of `aws.dynamodb.Table` and link it in your app like any other SST\n * component.\n *\n * ```ts title=\"sst.config.ts\" {7}\n * const table = new aws.dynamodb.Table(\"MyTable\", {\n *   attributes: [{ name: \"id\", type: \"S\" }],\n *   hashKey: \"id\"\n * });\n *\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [table]\n * });\n * ```\n *\n * And use the [SDK](/docs/reference/sdk/) to access it at runtime.\n *\n * ```js title=\"app/page.tsx\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyTable.tableName);\n * ```\n *\n * Your function will also have the permissions defined above.\n *\n * #### Modify built-in links\n *\n * You can also modify how SST creates links. For example, you might want to change the\n * permissions of a linkable resource.\n *\n * ```ts title=\"sst.config.ts\" \"sst.aws.Bucket\"\n *  sst.Linkable.wrap(sst.aws.Bucket, (bucket) => ({\n *    properties: { name: bucket.name },\n *    include: [\n *      sst.aws.permission({\n *        actions: [\"s3:GetObject\"],\n *        resources: [bucket.arn]\n *      })\n *    ]\n *  }));\n * ```\n *\n * This overrides the built-in link and lets you create your own.\n */\nexport class Linkable<T extends Record<string, any>>\n  extends Component\n  implements Link.Linkable\n{\n  private _name: string;\n  private _definition: Definition<T>;\n\n  public static wrappedResources = new Set<string>();\n\n  constructor(name: string, definition: Definition<T>) {\n    super(\"sst:sst:Linkable\", name, definition, {});\n    this._name = name;\n    this._definition = definition;\n  }\n\n  public get name() {\n    return output(this._name);\n  }\n\n  public get properties() {\n    return this._definition.properties;\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return this._definition;\n  }\n\n  /**\n   * Wrap any resource class to make it linkable. Behind the scenes this modifies the\n   * prototype of the given class.\n   *\n   * :::tip\n   * Use `Linkable.wrap` to make any resource linkable.\n   * :::\n   *\n   * @param cls The resource class to wrap.\n   * @param cb A callback that returns the definition for the linkable resource.\n   *\n   * @example\n   *\n   * Here we are wrapping the [`aws.dynamodb.Table`](https://www.pulumi.com/registry/packages/aws/api-docs/dynamodb/table/)\n   * class to make it linkable.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * Linkable.wrap(aws.dynamodb.Table, (table) => ({\n   *   properties: { tableName: table.name },\n   *   include: [\n   *     sst.aws.permission({\n   *       actions: [\"dynamodb:*\"],\n   *       resources: [table.arn]\n   *     })\n   *   ]\n   * }));\n   * ```\n   *\n   * It's defining the properties that we want made accessible at runtime and the permissions\n   * that the linked resource should have.\n   *\n   * Now you can link any `aws.dynamodb.Table` instances in your app just like any other SST\n   * component.\n   *\n   * ```ts title=\"sst.config.ts\" {7}\n   * const table = new aws.dynamodb.Table(\"MyTable\", {\n   *   attributes: [{ name: \"id\", type: \"S\" }],\n   *   hashKey: \"id\",\n   * });\n   *\n   * new sst.aws.Nextjs(\"MyWeb\", {\n   *   link: [table]\n   * });\n   * ```\n   *\n   * Since this applies to any resource, you can also use it to wrap SST components and modify\n   * how they are linked.\n   *\n   * ```ts title=\"sst.config.ts\" \"sst.aws.Bucket\"\n   * sst.Linkable.wrap(sst.aws.Bucket, (bucket) => ({\n   *   properties: { name: bucket.name },\n   *   include: [\n   *     sst.aws.permission({\n   *       actions: [\"s3:GetObject\"],\n   *       resources: [bucket.arn]\n   *     })\n   *   ]\n   * }));\n   * ```\n   *\n   * This overrides the built-in link and lets you create your own.\n   *\n   * :::tip\n   * You can modify the permissions granted by a linked resource.\n   * :::\n   *\n   * In the above example, we're modifying the permissions to access a linked `sst.aws.Bucket`\n   * in our app.\n   */\n  public static wrap<Resource>(\n    cls: { new (...args: any[]): Resource },\n    cb: (resource: Resource) => Definition,\n  ) {\n    // @ts-expect-error\n    this.wrappedResources.add(cls.__pulumiType);\n\n    cls.prototype.getSSTLink = function () {\n      return cb(this);\n    };\n  }\n}\n\n/**\n * @deprecated\n * Use sst.Linkable instead.\n */\nexport class Resource extends Component implements Link.Linkable {\n  private _properties: any;\n  private _name: string;\n\n  constructor(name: string, properties: any) {\n    super(\n      \"sst:sst:Resource\",\n      name,\n      {\n        properties,\n      },\n      {},\n    );\n    console.warn(\"Resource is deprecated. Use sst.Linkable instead.\");\n    this._properties = properties;\n    this._name = name;\n  }\n\n  public get name() {\n    return output(this._name);\n  }\n\n  public get properties() {\n    return this._properties;\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: this._properties,\n    };\n  }\n}\n\nexport function env(env: Record<string, Input<string>>) {\n  return {\n    type: \"environment\" as const,\n    env,\n  };\n}\n", "import {\n  ComponentResource,\n  ComponentResourceOptions,\n  Inputs,\n  runtime,\n  output,\n  asset as pulumiAsset,\n  Input,\n  all,\n  Output,\n} from \"@pulumi/pulumi\";\nimport { prefixName, physicalName } from \"./naming.js\";\nimport { VisibleError } from \"./error.js\";\nimport path from \"path\";\nimport { statSync } from \"fs\";\n\n// Previously, `this.api.id` was used as the ID. `this.api.id` was of type Output<string>\n// the value evaluates to the mistake id.\n// In the future version, we will release a breaking change to fix this.\nexport const outputId =\n  \"Calling [toString] on an [Output<T>] is not supported.\\n\\nTo get the value of an Output<T> as an Output<string> consider either:\\n1: o.apply(v => `prefix${v}suffix`)\\n2: pulumi.interpolate `prefix${v}suffix`\\n\\nSee https://www.pulumi.com/docs/concepts/inputs-outputs for more details.\\nThis function may throw in a future version of @pulumi/pulumi.\";\n\n/**\n * Helper type to inline nested types\n */\nexport type Prettify<T> = {\n  [K in keyof T]: T[K];\n} & {};\n\nexport type Transform<T> =\n  | Partial<T>\n  | ((args: T, opts: $util.CustomResourceOptions, name: string) => undefined);\n\nexport function transform<T extends object>(\n  transform: Transform<T> | undefined,\n  name: string,\n  args: T,\n  opts: $util.CustomResourceOptions,\n) {\n  // Case: transform is a function\n  if (typeof transform === \"function\") {\n    transform(args, opts, name);\n    return [name, args, opts] as const;\n  }\n\n  // Case: no transform\n  // Case: transform is an argument\n  return [name, { ...args, ...transform }, opts] as const;\n}\n\nexport class Component extends ComponentResource {\n  private componentType: string;\n  private componentName: string;\n\n  constructor(\n    type: string,\n    name: string,\n    args?: Inputs,\n    opts?: ComponentResourceOptions,\n  ) {\n    const transforms = ComponentTransforms.get(type) ?? [];\n    for (const transform of transforms) {\n      transform({ name, props: args, opts });\n    }\n    super(type, name, args, {\n      transformations: [\n        // Ensure logical and physical names are prefixed\n        (args) => {\n          // Ensure component names do not contain spaces\n          if (name.includes(\" \"))\n            throw new Error(\n              `Invalid component name \"${name}\" (${args.type}). Component names cannot contain spaces.`,\n            );\n\n          // Ensure names are prefixed with parent's name\n          if (\n            args.type !== type &&\n            // @ts-expect-error\n            !args.name.startsWith(args.opts.parent!.__name)\n          ) {\n            throw new Error(\n              `In \"${name}\" component, the logical name of \"${args.name}\" (${\n                args.type\n              }) is not prefixed with parent's name ${\n                // @ts-expect-error\n                args.opts.parent!.__name\n              }`,\n            );\n          }\n\n          // Ensure physical names are prefixed with app/stage\n          // note: We are setting the default names here instead of inline when creating\n          //       the resource is b/c the physical name is inferred from the logical name.\n          //       And it's convenient to access the logical name here.\n          if (args.type.startsWith(\"sst:\")) return;\n          if (\n            [\n              // resources manually named\n              \"aws:cloudwatch/logGroup:LogGroup\",\n              \"aws:ecs/service:Service\",\n              \"aws:ecs/taskDefinition:TaskDefinition\",\n              \"aws:lb/targetGroup:TargetGroup\",\n              \"aws:servicediscovery/privateDnsNamespace:PrivateDnsNamespace\",\n              \"aws:servicediscovery/service:Service\",\n              // resources not prefixed\n              \"pulumi-nodejs:dynamic:Resource\",\n              \"random:index/randomId:RandomId\",\n              \"random:index/randomPassword:RandomPassword\",\n              \"command:local:Command\",\n              \"tls:index/privateKey:PrivateKey\",\n              \"aws:acm/certificate:Certificate\",\n              \"aws:acm/certificateValidation:CertificateValidation\",\n              \"aws:apigateway/basePathMapping:BasePathMapping\",\n              \"aws:apigateway/deployment:Deployment\",\n              \"aws:apigateway/domainName:DomainName\",\n              \"aws:apigateway/integration:Integration\",\n              \"aws:apigateway/integrationResponse:IntegrationResponse\",\n              \"aws:apigateway/method:Method\",\n              \"aws:apigateway/methodResponse:MethodResponse\",\n              \"aws:apigateway/resource:Resource\",\n              \"aws:apigateway/response:Response\",\n              \"aws:apigateway/stage:Stage\",\n              \"aws:apigateway/usagePlanKey:UsagePlanKey\",\n              \"aws:apigatewayv2/apiMapping:ApiMapping\",\n              \"aws:apigatewayv2/domainName:DomainName\",\n              \"aws:apigatewayv2/integration:Integration\",\n              \"aws:apigatewayv2/route:Route\",\n              \"aws:apigatewayv2/stage:Stage\",\n              \"aws:appautoscaling/target:Target\",\n              \"aws:appsync/dataSource:DataSource\",\n              \"aws:appsync/domainName:DomainName\",\n              \"aws:appsync/domainNameApiAssociation:DomainNameApiAssociation\",\n              \"aws:appsync/function:Function\",\n              \"aws:appsync/resolver:Resolver\",\n              \"aws:ec2/routeTableAssociation:RouteTableAssociation\",\n              \"aws:ecs/clusterCapacityProviders:ClusterCapacityProviders\",\n              \"aws:efs/fileSystem:FileSystem\",\n              \"aws:efs/mountTarget:MountTarget\",\n              \"aws:efs/accessPoint:AccessPoint\",\n              \"aws:iam/accessKey:AccessKey\",\n              \"aws:iam/instanceProfile:InstanceProfile\",\n              \"aws:iam/policy:Policy\",\n              \"aws:iam/userPolicy:UserPolicy\",\n              \"aws:cloudfront/cachePolicy:CachePolicy\",\n              \"aws:cloudfront/distribution:Distribution\",\n              \"aws:cognito/identityPoolRoleAttachment:IdentityPoolRoleAttachment\",\n              \"aws:cognito/identityProvider:IdentityProvider\",\n              \"aws:cognito/userPoolClient:UserPoolClient\",\n              \"aws:lambda/eventSourceMapping:EventSourceMapping\",\n              \"aws:lambda/functionEventInvokeConfig:FunctionEventInvokeConfig\",\n              \"aws:lambda/functionUrl:FunctionUrl\",\n              \"aws:lambda/invocation:Invocation\",\n              \"aws:lambda/permission:Permission\",\n              \"aws:lambda/provisionedConcurrencyConfig:ProvisionedConcurrencyConfig\",\n              \"aws:lb/listener:Listener\",\n              \"aws:lb/listenerRule:ListenerRule\",\n              \"aws:opensearch/domainPolicy:DomainPolicy\",\n              \"aws:rds/proxyDefaultTargetGroup:ProxyDefaultTargetGroup\",\n              \"aws:rds/proxyTarget:ProxyTarget\",\n              \"aws:route53/record:Record\",\n              \"aws:s3/bucketCorsConfigurationV2:BucketCorsConfigurationV2\",\n              \"aws:s3/bucketNotification:BucketNotification\",\n              \"aws:s3/bucketObject:BucketObject\",\n              \"aws:s3/bucketObjectv2:BucketObjectv2\",\n              \"aws:s3/bucketPolicy:BucketPolicy\",\n              \"aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock\",\n              \"aws:s3/bucketVersioningV2:BucketVersioningV2\",\n              \"aws:s3/bucketWebsiteConfigurationV2:BucketWebsiteConfigurationV2\",\n              \"aws:secretsmanager/secretVersion:SecretVersion\",\n              \"aws:ses/domainIdentityVerification:DomainIdentityVerification\",\n              \"aws:sesv2/configurationSetEventDestination:ConfigurationSetEventDestination\",\n              \"aws:sesv2/emailIdentity:EmailIdentity\",\n              \"aws:sns/topicPolicy:TopicPolicy\",\n              \"aws:sns/topicSubscription:TopicSubscription\",\n              \"aws:sqs/queuePolicy:QueuePolicy\",\n              \"aws:ssm/parameter:Parameter\",\n              \"cloudflare:index/dnsRecord:DnsRecord\",\n              \"cloudflare:index/workersCronTrigger:WorkersCronTrigger\",\n              \"cloudflare:index/workersCustomDomain:WorkersCustomDomain\",\n              \"docker-build:index:Image\",\n              \"vercel:index/dnsRecord:DnsRecord\",\n            ].includes(args.type)\n          )\n            return;\n\n          const namingRules: Record<\n            string,\n            [\n              string,\n              number,\n              {\n                lower?: boolean;\n                replace?: (name: string) => string;\n                suffix?: () => Output<string>;\n              }?,\n            ]\n          > = {\n            \"aws:apigateway/apiKey:ApiKey\": [\"name\", 1024],\n            \"aws:apigateway/authorizer:Authorizer\": [\"name\", 128],\n            \"aws:apigateway/restApi:RestApi\": [\"name\", 128],\n            \"aws:apigateway/usagePlan:UsagePlan\": [\"name\", 65536], // no length limit\n            \"aws:apigatewayv2/api:Api\": [\"name\", 128],\n            \"aws:apigatewayv2/authorizer:Authorizer\": [\"name\", 128],\n            \"aws:apigatewayv2/vpcLink:VpcLink\": [\"name\", 128],\n            \"aws:appautoscaling/policy:Policy\": [\"name\", 255],\n            \"aws:appsync/graphQLApi:GraphQLApi\": [\"name\", 65536],\n            \"aws:cloudwatch/eventBus:EventBus\": [\"name\", 256],\n            \"aws:cloudwatch/eventTarget:EventTarget\": [\"targetId\", 64],\n            \"aws:cloudwatch/eventRule:EventRule\": [\"name\", 64],\n            \"aws:cloudfront/function:Function\": [\"name\", 64],\n            \"aws:cloudfront/keyValueStore:KeyValueStore\": [\"name\", 64],\n            \"aws:cognito/identityPool:IdentityPool\": [\"identityPoolName\", 128],\n            \"aws:cognito/userPool:UserPool\": [\"name\", 128],\n            \"aws:dynamodb/table:Table\": [\"name\", 255],\n            \"aws:ec2/keyPair:KeyPair\": [\"keyName\", 255],\n            \"aws:ec2/eip:Eip\": [\"tags\", 255],\n            \"aws:ec2/instance:Instance\": [\"tags\", 255],\n            \"aws:ec2/internetGateway:InternetGateway\": [\"tags\", 255],\n            \"aws:ec2/natGateway:NatGateway\": [\"tags\", 255],\n            \"aws:ec2/routeTable:RouteTable\": [\"tags\", 255],\n            \"aws:ec2/securityGroup:SecurityGroup\": [\"tags\", 255],\n            \"aws:ec2/defaultSecurityGroup:DefaultSecurityGroup\": [\"tags\", 255],\n            \"aws:ec2/subnet:Subnet\": [\"tags\", 255],\n            \"aws:ec2/vpc:Vpc\": [\"tags\", 255],\n            \"aws:ecs/cluster:Cluster\": [\"name\", 255],\n            \"aws:elasticache/parameterGroup:ParameterGroup\": [\n              \"name\",\n              255,\n              { lower: true },\n            ],\n            \"aws:elasticache/replicationGroup:ReplicationGroup\": [\n              \"replicationGroupId\",\n              40,\n              { lower: true },\n            ],\n            \"aws:elasticache/subnetGroup:SubnetGroup\": [\n              \"name\",\n              255,\n              { lower: true },\n            ],\n            \"aws:iam/role:Role\": [\"name\", 64],\n            \"aws:iam/user:User\": [\"name\", 64],\n            \"aws:iot/authorizer:Authorizer\": [\"name\", 128],\n            \"aws:iot/topicRule:TopicRule\": [\n              \"name\",\n              128,\n              { replace: (name) => name.replaceAll(\"-\", \"_\") },\n            ],\n            \"aws:kinesis/stream:Stream\": [\"name\", 255],\n            // AWS Load Balancer name allows 32 chars, but an 8 char suffix\n            // ie. \"-1234567\" is automatically added\n            \"aws:lb/loadBalancer:LoadBalancer\": [\"name\", 24],\n            \"aws:lambda/function:Function\": [\"name\", 64],\n            \"aws:opensearch/domain:Domain\": [\"domainName\", 28, { lower: true }],\n            \"aws:rds/cluster:Cluster\": [\n              \"clusterIdentifier\",\n              63,\n              { lower: true },\n            ],\n            \"aws:rds/clusterInstance:ClusterInstance\": [\n              \"identifier\",\n              63,\n              { lower: true },\n            ],\n            \"aws:rds/instance:Instance\": [\"identifier\", 63, { lower: true }],\n            \"aws:rds/proxy:Proxy\": [\"name\", 60, { lower: true }],\n            \"aws:rds/clusterParameterGroup:ClusterParameterGroup\": [\n              \"name\",\n              255,\n              { lower: true },\n            ],\n            \"aws:rds/parameterGroup:ParameterGroup\": [\n              \"name\",\n              255,\n              { lower: true },\n            ],\n            \"aws:rds/subnetGroup:SubnetGroup\": [\"name\", 255, { lower: true }],\n            \"aws:s3/bucketV2:BucketV2\": [\"bucket\", 63, { lower: true }],\n            \"aws:secretsmanager/secret:Secret\": [\"name\", 512],\n            \"aws:sesv2/configurationSet:ConfigurationSet\": [\n              \"configurationSetName\",\n              64,\n              { lower: true },\n            ],\n            \"aws:sfn/stateMachine:StateMachine\": [\"name\", 80],\n            \"aws:sns/topic:Topic\": [\n              \"name\",\n              256,\n              {\n                suffix: () =>\n                  output(args.props.fifoTopic).apply((fifo) =>\n                    fifo ? \".fifo\" : \"\",\n                  ),\n              },\n            ],\n            \"aws:sqs/queue:Queue\": [\n              \"name\",\n              80,\n              {\n                suffix: () =>\n                  output(args.props.fifoQueue).apply((fifo) =>\n                    fifo ? \".fifo\" : \"\",\n                  ),\n              },\n            ],\n            \"cloudflare:index/d1Database:D1Database\": [\n              \"name\",\n              64,\n              { lower: true },\n            ],\n            \"cloudflare:index/r2Bucket:R2Bucket\": [\"name\", 64, { lower: true }],\n            \"cloudflare:index/workersScript:WorkersScript\": [\n              \"scriptName\",\n              64,\n              { lower: true },\n            ],\n            \"cloudflare:index/queue:Queue\": [\"queueName\", 64, { lower: true }],\n            \"cloudflare:index/workersKvNamespace:WorkersKvNamespace\": [\n              \"title\",\n              64,\n              { lower: true },\n            ],\n          };\n\n          const rule = namingRules[args.type];\n          if (!rule)\n            throw new VisibleError(\n              `In \"${name}\" component, the physical name of \"${args.name}\" (${args.type}) is not prefixed`,\n            );\n\n          // name is already set\n          const nameField = rule[0];\n          const length = rule[1];\n          const options = rule[2];\n          if (args.props[nameField] && args.props[nameField] !== \"\") return;\n\n          // Handle prefix field is tags\n          if (nameField === \"tags\") {\n            return {\n              props: {\n                ...args.props,\n                tags: {\n                  // @ts-expect-error\n                  ...args.tags,\n                  Name: prefixName(length, args.name),\n                },\n              },\n              opts: args.opts,\n            };\n          }\n\n          // Handle prefix field is name\n          const suffix = options?.suffix ? options.suffix() : output(\"\");\n          return {\n            props: {\n              ...args.props,\n              [nameField]: suffix.apply((suffix) => {\n                let v = options?.lower\n                  ? physicalName(length, args.name, suffix).toLowerCase()\n                  : physicalName(length, args.name, suffix);\n                if (options?.replace) v = options.replace(v);\n                return v;\n              }),\n            },\n            opts: {\n              ...args.opts,\n              ignoreChanges: [...(args.opts.ignoreChanges ?? []), nameField],\n            },\n          };\n        },\n        // Set child resources `retainOnDelete` if set on component\n        (args) => ({\n          props: args.props,\n          opts: {\n            ...args.opts,\n            retainOnDelete: args.opts.retainOnDelete ?? opts?.retainOnDelete,\n          },\n        }),\n        ...(opts?.transformations ?? []),\n      ],\n      ...opts,\n    });\n\n    this.componentType = type;\n    this.componentName = name;\n  }\n\n  /** @internal */\n  protected registerVersion(input: {\n    new: number;\n    old?: number;\n    message?: string;\n    forceUpgrade?: `v${number}`;\n  }) {\n    // Check component version\n    const oldVersion = input.old;\n    const newVersion = input.new ?? 1;\n    if (oldVersion) {\n      const className = this.componentType.replaceAll(\":\", \".\");\n      // Invalid forceUpgrade value\n      if (input.forceUpgrade && input.forceUpgrade !== `v${newVersion}`) {\n        throw new VisibleError(\n          [\n            `The value of \"forceUpgrade\" does not match the version of \"${className}\" component.`,\n            `Set \"forceUpgrade\" to \"v${newVersion}\" to upgrade to the new version.`,\n          ].join(\"\\n\"),\n        );\n      }\n      // Version upgraded without forceUpgrade\n      if (oldVersion < newVersion && !input.forceUpgrade) {\n        throw new VisibleError(input.message ?? \"\");\n      }\n      // Version downgraded\n      if (oldVersion > newVersion) {\n        throw new VisibleError(\n          [\n            `It seems you are trying to use an older version of \"${className}\".`,\n            `You need to recreate this component to rollback - https://sst.dev/docs/components/#versioning`,\n          ].join(\"\\n\"),\n        );\n      }\n    }\n\n    // Set version\n    if (newVersion > 1) {\n      new Version(this.componentName, newVersion, { parent: this });\n    }\n  }\n}\n\nconst ComponentTransforms = new Map<string, any[]>();\nexport function $transform<T, Args, Options>(\n  resource: { new (name: string, args: Args, opts?: Options): T },\n  cb: (args: Args, opts: Options, name: string) => void,\n) {\n  // @ts-expect-error\n  const type = resource.__pulumiType;\n  if (type.startsWith(\"sst:\")) {\n    let transforms = ComponentTransforms.get(type);\n    if (!transforms) {\n      transforms = [];\n      ComponentTransforms.set(type, transforms);\n    }\n    transforms.push((input: any) => {\n      cb(input.props, input.opts, input.name);\n      return input;\n    });\n    return;\n  }\n  runtime.registerStackTransformation((input) => {\n    if (input.type !== type) return;\n    cb(input.props as any, input.opts as any, input.name);\n    return input;\n  });\n}\n\nexport function $asset(assetPath: string) {\n  const fullPath = path.isAbsolute(assetPath)\n    ? assetPath\n    : path.join($cli.paths.root, assetPath);\n\n  try {\n    return statSync(fullPath).isDirectory()\n      ? new pulumiAsset.FileArchive(fullPath)\n      : new pulumiAsset.FileAsset(fullPath);\n  } catch (e) {\n    throw new VisibleError(`Asset not found: ${fullPath}`);\n  }\n}\n\nexport function $lazy<T>(fn: () => T) {\n  return output(undefined)\n    .apply(async () => output(fn()))\n    .apply((x) => x);\n}\n\nexport function $print(...msg: Input<any>[]) {\n  return all(msg).apply((msg) => console.log(...msg));\n}\n\nexport class Version extends ComponentResource {\n  constructor(target: string, version: number, opts: ComponentResourceOptions) {\n    super(\"sst:sst:Version\", target + \"Version\", {}, opts);\n    this.registerOutputs({ target, version });\n  }\n}\n\nexport type ComponentVersion = { major: number; minor: number };\nexport function parseComponentVersion(version: string): ComponentVersion {\n  const [major, minor] = version.split(\".\");\n  return { major: parseInt(major), minor: parseInt(minor) };\n}\n", "import crypto from \"crypto\";\n\nexport function logicalName(name: string) {\n  name = name.replace(/[^a-zA-Z0-9]/g, \"\");\n  return name.charAt(0).toUpperCase() + name.slice(1);\n}\n\nexport function physicalName(max: number, name: string, suffix: string = \"\") {\n  // This function does the following:\n  // - Removes all non-alphanumeric characters\n  // - Prefixes the name with the app name and stage\n  // - Truncates the name if it's too long\n  // - Adds a random suffix\n  // - Adds a suffix if provided\n  const main = prefixName(max - 9 - suffix.length, name);\n  const random = hashStringToPrettyString(\n    crypto.randomBytes(8).toString(\"hex\"),\n    8,\n  );\n  return `${main}-${random}${suffix}`;\n}\n\nexport function prefixName(max: number, name: string) {\n  // This function does the following:\n  // - Removes all non-alphanumeric characters\n  // - Prefixes the name with the app name and stage\n  // - Truncates the name if it's too long\n  // ie. foo => app-stage-foo\n\n  name = name.replace(/[^a-zA-Z0-9]/g, \"\");\n\n  const stageLen = $app.stage.length;\n  const nameLen = name.length;\n  const strategy =\n    nameLen + 1 >= max\n      ? (\"name\" as const)\n      : nameLen + stageLen + 2 >= max\n        ? (\"stage+name\" as const)\n        : (\"app+stage+name\" as const);\n\n  if (strategy === \"name\") return `${name.substring(0, max)}`;\n  if (strategy === \"stage+name\")\n    return `${$app.stage.substring(0, max - nameLen - 1)}-${name}`;\n  return `${$app.name.substring(0, max - stageLen - nameLen - 2)}-${\n    $app.stage\n  }-${name}`;\n}\n\nexport function hashNumberToPrettyString(number: number, length: number) {\n  const charLength = PRETTY_CHARS.length;\n  let hash = \"\";\n  while (number > 0) {\n    hash = PRETTY_CHARS[number % charLength] + hash;\n    number = Math.floor(number / charLength);\n  }\n\n  // Padding with 's'\n  hash = hash.slice(0, length);\n  while (hash.length < length) {\n    hash = \"s\" + hash;\n  }\n\n  return hash;\n}\n\nexport function hashStringToPrettyString(str: string, length: number) {\n  const hash = crypto.createHash(\"sha256\");\n  hash.update(str);\n  const num = Number(\"0x\" + hash.digest(\"hex\").substring(0, 16));\n  return hashNumberToPrettyString(num, length);\n}\n\nexport const PRETTY_CHARS = \"abcdefhkmnorstuvwxz\";\n", "/**\n * The `sst.config.ts` file is used to configure your SST app and its resources.\n *\n * ```ts\n * $config(input: Config): Config\n * ```\n *\n * You specify it using the `$config` function. This takes an object of type [`Config`](#config).\n *\n * ```ts title=\"sst.config.ts\"\n * /// <reference path=\"./.sst/platform/config.d.ts\" />\n *\n * export default $config({\n *   // Your app's config\n *   app(input) {\n *     return {\n *       name: \"my-sst-app\",\n *       home: \"aws\"\n *     };\n *   },\n *   // Your app's resources\n *   async run() {\n *     const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n *     // Your app's outputs\n *     return {\n *       bucket: bucket.name\n *     };\n *   },\n *   // Optionally, your app's Console config\n *   console: {\n *     autodeploy: {\n *       runner: { compute: \"large\" }\n *     }\n *   }\n * });\n * ```\n *\n * The `Config` object takes:\n * 1. [`app`](#app-2) \u2014 Your config\n * 2. [`run`](#run) \u2014 Your resources\n * 3. [`console`](#console) \u2014 Optionally, your app's Console config\n *\n * The `app` function is evaluated right when your app loads. It's used to define the app config and its providers.\n *\n * :::note\n * You need TypeScript 5 to see the types in your config.\n * :::\n *\n * You can add Pulumi code in the `run` function not the `app` function. While the `run`\n * function is where you define your resources using SST or Pulumi's components.\n *\n * The run function also has access to a list of [Global](/docs/reference/global/) `$` variables and functions. These serve as the context for your app config.\n *\n * :::caution\n * Do not `import` the provider packages in your `sst.config.ts`.\n * :::\n *\n * Since SST manages importing your provider packages, it's recommended not to add any imports\n * in your `sst.config.ts`.\n *\n * ---\n *\n * #### .env\n *\n * Your `.env` and `.env.<stage>` files are loaded as environment variables in your config.\n * They need to be in the same directory as your `sst.config.ts`.\n *\n * ```bash title=\".env\"\n * MY_ENV_VAR=hello\n * ```\n *\n * And are available as `process.env` in both your `app` and `run` functions.\n *\n * ```ts title=\"sst.config.ts\"\n * process.env.MY_ENV_VAR\n * ```\n *\n * The `.env` file takes precedence over `.env.<stage>`. So if you have a `.env` and a\n * `.env.dev` file, the values in the `.env` file will be used.\n *\n * :::note\n * You need to restart `sst dev` for changes in your `.env` files to take effect.\n * :::\n *\n * Make sure the stage name in your `.env.<stage>` matches the stage your app is running on.\n *\n * @packageDocumentation\n */\nimport type { Shell } from \"bun\";\n\ntype Prettify<T> = {\n  [K in keyof T]: T[K];\n} & {};\n\nexport interface App {\n  /**\n   * The version of SST supported by the app. The CLI will fail any commands if the version does\n   * not match.\n   *\n   * :::tip\n   * Useful in CI where you don't want it to automatically deploy with a new version of SST.\n   * :::\n   *\n   * @default The latest version of SST.\n   *\n   * @example\n   *\n   * Takes a specific version.\n   *\n   * ```ts\n   * version: \"3.2.49\"\n   * ```\n   *\n   * Also supports semver ranges.\n   * ```ts\n   * version: \">= 3.2.49\"\n   * ```\n   */\n  version?: string;\n  /**\n   * The name of the app. This is used to prefix the names of the resources in your app.\n   *\n   * :::caution\n   * If you change the name of your app, it'll redeploy your app with new resources. The old resources will be orphaned.\n   * :::\n   *\n   * This means that you don't want to change the name of your app without removing the old resources first.\n   *\n   * @example\n   *\n   * ```ts\n   * {\n   *   name: \"my-sst-app\"\n   * }\n   * ```\n   */\n  name: string;\n  /**\n   * Configure how your resources are handled when they have to be removed.\n   *\n   * - `remove`: Removes the underlying resource.\n   * - `retain`: Retains resources like S3 buckets and DynamoDB tables. Removes everything else.\n   * - `retain-all`: Retains all resources.\n   *\n   * :::tip\n   * If you change your removal policy, you'll need to deploy your app once for it to take\n   * effect.\n   * :::\n   *\n   * For example, retain resources if it's the _production_ stage, otherwise remove all\n   * resources.\n   *\n   * ```ts\n   * {\n   *   removal: input.stage === \"production\" ? \"retain\" : \"remove\"\n   * }\n   * ```\n   *\n   * This applies to not just the `sst remove` command but also cases where you remove a\n   * resource from the `sst.config.ts` and run `sst dev` or `sst deploy`.\n   *\n   * <VideoAside title=\"Watch a video on how to protect your prod resources\" href=\"https://youtu.be/fb6UBGwgDuA\" />\n   *\n   * To control how a stage is handled on `sst remove`, check out the `protect` prop.\n   *\n   * @default `\"retain\"`\n   */\n  removal?: \"remove\" | \"retain\" | \"retain-all\";\n  /**\n   * The providers that are being used in this app. This allows you to use the resources from\n   * these providers in your app.\n   *\n   * ```ts\n   * {\n   *   providers: {\n   *     aws: \"6.27.0\",\n   *     cloudflare: \"5.37.1\"\n   *   }\n   * }\n   * ```\n   *\n   * Check out the full list in the [Directory](/docs/all-providers#directory).\n   *\n   * :::tip\n   * You'll need to run `sst install` after you update the `providers` in your config.\n   * :::\n   *\n   * If you don't set a `provider` it uses your `home` provider with the default config. So if you set `home` to `aws`, it's the same as doing:\n   *\n   * ```ts\n   * {\n   *   home: \"aws\",\n   *   providers: {\n   *     aws: \"6.27.0\"\n   *   }\n   * }\n   * ```\n   *\n   * You can also configure the provider props. Here's the config for some common providers:\n   * - [AWS](https://www.pulumi.com/registry/packages/aws/api-docs/provider/#inputs)\n   * - [Cloudflare](https://www.pulumi.com/registry/packages/cloudflare/api-docs/provider/#inputs)\n   *\n   * @example\n   *\n   * For example, to change the region for AWS.\n   *\n   * ```ts\n   * {\n   *   providers: {\n   *     aws: {\n   *       region: \"us-west-2\"\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @default The `home` provider.\n   */\n  providers?: Record<string, any>;\n  /**\n   * The provider SST will use to store the state for your app. The state keeps track of all your resources and secrets. The state is generated locally and backed up in your cloud provider.\n   *\n   *\n   * Currently supports AWS, Cloudflare and local.\n   *\n   * :::tip\n   * SST uses the `home` provider to store the state for your app. If you use the local provider it will be saved on your machine. You can see where by running `sst version`.\n   * :::\n   *\n   * If you want to configure the aws or cloudflare home provider, you can:\n   *\n   * ```ts\n   * {\n   *   home: \"aws\",\n   *   providers: {\n   *     aws: {\n   *       region: \"us-west-2\"\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   */\n  home: \"aws\" | \"cloudflare\" | \"local\";\n\n  /**\n   * If set to `true`, the `sst remove` CLI will not run and will error out.\n   *\n   * This is useful for preventing cases where you run `sst remove --stage <stage>` for the\n   * wrong stage.\n   *\n   * :::tip\n   * Protect your production stages from being accidentally removed.\n   * :::\n   *\n   * For example, prevent the _production_ stage from being removed.\n   *\n   * ```ts\n   * {\n   *   protect: input.stage === \"production\"\n   * }\n   * ```\n   *\n   * However, this only applies to `sst remove` for stages.\n   *\n   * <VideoAside title=\"Watch a video on how to protect your prod resources\" href=\"https://youtu.be/fb6UBGwgDuA\" />\n   *\n   * If you accidentally remove a resource from the `sst.config.ts` and run `sst deploy` or\n   * `sst dev`, it'll still get removed. To avoid this, check out the `removal` prop.\n   */\n  protect?: boolean;\n}\n\nexport interface AppInput {\n  /**\n   * The stage this app is running on. This is a string that can be passed in through the CLI.\n   *\n   * :::caution\n   * Changing the stage will redeploy your app to a new stage with new resources. The old resources will still be around in the old stage.\n   * :::\n   *\n   * If not passed in, it'll use the username of your local machine, or prompt you for it.\n   */\n  stage: string;\n}\n\nexport interface RunnerInput {\n  /**\n   * The stage the deployment will be run in.\n   */\n  stage: string;\n}\n\nexport interface Runner {\n  /**\n   * The service used to run the build. Currently, only AWS CodeBuild is supported.\n   */\n  engine: \"codebuild\";\n  /**\n   * The timeout for the build. It can be from `5 minutes` to `36 hours`.\n   * @default `1 hour`\n   */\n  timeout?: `${number} ${\"minute\" | \"minutes\" | \"hour\" | \"hours\"}`;\n  /**\n   * The architecture of the build machine.\n   *\n   * The `x86_64` machine uses the [`al/standard/5.0`](https://github.com/aws/aws-codebuild-docker-images/tree/master/al/x86_64/standard/5.0) build image.\n   * While `arm64` uses the [`al/aarch64/standard/3.0`](https://github.com/aws/aws-codebuild-docker-images/tree/master/al/aarch64/standard/3.0) image instead.\n   *\n   * You can also configure what's used in the image:\n   *\n   * - **Node**\n   *\n   *   To specify the version of Node you want to use in your build, you can use the\n   *   `.node-version`, `.nvmrc`, or use the `engine` field in your `package.json`.\n   *\n   *   <Tabs>\n   *     <TabItem label=\"package.json\">\n   *     ```js title=\"package.json\"\n   *     {\n   *       engine: {\n   *         node: \"20.15.1\"\n   *       }\n   *     }\n   *     ```\n   *     </TabItem>\n   *     <TabItem label=\"node-version\">\n   *     ```bash title=\".node-version\"\n   *     20.15.1\n   *     ```\n   *     </TabItem>\n   *     <TabItem label=\"nvmrc\">\n   *     ```bash title=\".nvmrc\"\n   *     20.15.1\n   *     ```\n   *     </TabItem>\n   *   </Tabs>\n   *\n   * - **Package manager**\n   *\n   *   To specify the package manager you want to use you can configure it through your\n   *   `package.json`.\n   *\n   *   <Tabs>\n   *     <TabItem label=\"pnpm\">\n   *     ```js title=\"package.json\"\n   *     {\n   *       packageManager: \"pnpm@8.6.3\"\n   *     }\n   *     ```\n   *     </TabItem>\n   *     <TabItem label=\"bun\">\n   *     ```js title=\"package.json\"\n   *     {\n   *       packageManager: \"bun@1.2.0\"\n   *     }\n   *     ```\n   *     </TabItem>\n   *   </Tabs>\n   *\n   * Feel free to get in touch if you want to use your own build image or\n   * configure what's used in the build image.\n   *\n   * @default `x86_64`\n   */\n  architecture?: \"x86_64\" | \"arm64\";\n  /**\n   * The compute size of the build environment.\n   *\n   * For `x86_64`, the following compute sizes are supported:\n   * - `small`: 3 GB, 2 vCPUs\n   * - `medium`: 7 GB, 4 vCPUs\n   * - `large`: 15 GB, 8 vCPUs\n   * - `xlarge`: 70 GB, 36 vCPUs\n   * - `2xlarge`: 145 GB, 72 vCPUs\n   *\n   * For `arm64` architecture, the following compute sizes are supported:\n   * - `small`: 4 GB, 2 vCPUs\n   * - `medium`: 8 GB, 4 vCPUs\n   * - `large`: 16 GB, 8 vCPUs\n   * - `xlarge`: 64 GB, 32 vCPUs\n   * - `2xlarge`: 96 GB, 48 vCPUs\n   *\n   * To increase the memory used by your Node.js process in the build environment, you'll want\n   * to set the `NODE_OPTIONS` environment variable to `--max-old-space-size=xyz`. Where `xyz`\n   * is the memory size in MB. By default, this is set to 1.5 GB.\n   *\n   * Read more about the [CodeBuild build environments](https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-compute-types.html).\n   *\n   * @default `medium`\n   */\n  compute?: \"small\" | \"medium\" | \"large\" | \"xlarge\" | \"2xlarge\";\n  /**\n   * The VPC to run the build in. If provided, the build environment will have access to\n   * resources in the VPC.\n   *\n   * This is useful for building Next.js apps that might make queries to your database\n   * as a part of the build process.\n   *\n   * You can get these from the outputs of the `Vpc` component your are using or from the\n   * [Console](/docs/console/#resources).\n   *\n   * @example\n   *\n   * ```ts\n   * {\n   *   vpc: {\n   *     id: \"vpc-0be8fa4de860618bb\",\n   *     subnets: [\"subnet-0be8fa4de860618bb\"],\n   *     securityGroups: [\"sg-0be8fa4de860618bb\"]\n   *   }\n   * }\n   * ```\n   */\n  vpc?: {\n    /**\n     * The ID of the VPC.\n     */\n    id: string;\n    /**\n     * The subnets to run the build in.\n     */\n    subnets: string[];\n    /**\n     * The security groups to run the build in.\n     */\n    securityGroups: string[];\n  };\n  /**\n   * Paths to cache as a part of the build. By default the `.git` directory is cached.\n   *\n   * The given list of files and directories will be saved to the cache at the end of the build.\n   * And they will be restored at the start of the build process.\n   *\n   * ```ts\n   * {\n   *   cache: {\n   *     paths: [\"node_modules\", \"/path/to/cache\"]\n   *   }\n   * }\n   * ```\n   *\n   * The relative paths are for caching files inside your repo. While the absolute path is for\n   * any global caches.\n   *\n   * To clear the cache, you can trigger a new deploy using the **Force** deploy option in the\n   * Console.\n   */\n  cache?: {\n    /**\n     * The paths to cache. These are relative to the root of the repository.\n     *\n     * By default, the `.git` directory is always cached.\n     */\n    paths: string[];\n  };\n}\n\ninterface GitSender {\n  /**\n   * The ID of the user.\n   */\n  id: number;\n  /**\n   * The username of the user.\n   */\n  username: string;\n}\n\ninterface GitCommit {\n  /**\n   * The ID of the commit.\n   */\n  id: string;\n  /**\n   * The commit message.\n   */\n  message: string;\n}\n\ninterface GitRepo {\n  /**\n   * The ID of the repo. This is usually a number.\n   */\n  id: number;\n  /**\n   * The name of the owner or org the repo to belongs to.\n   */\n  owner: string;\n  /**\n   * The name of the repo.\n   */\n  repo: string;\n}\n\n/**\n * A git event for when a branch is updated or deleted. For example:\n * ```js\n * {\n *   type: \"branch\",\n *   action: \"pushed\",\n *   repo: {\n *     id: 1296269,\n *     owner: \"octocat\",\n *     repo: \"Hello-World\"\n *   },\n *   branch: \"main\",\n *   commit: {\n *     id: \"b7e7c4c559e0e5b4bc6f8d98e0e5e5e5e5e5e5e5\",\n *     message: \"Update the README with new information\"\n *   },\n *   sender: {\n *     id: 1,\n *     username: \"octocat\"\n *   }\n * }\n * ```\n */\nexport interface BranchEvent {\n  /**\n   * The git event type, for the `BranchEvent` it's `branch`.\n   */\n  type: \"branch\";\n  /**\n   * The type of the git action.\n   *\n   * - `pushed` is when you git push to a branch\n   * - `removed` is when a branch is removed\n   */\n  action: \"pushed\" | \"removed\";\n  /**\n   * The Git repository the event is coming from. This might look like:\n   *\n   * ```js\n   * {\n   *   id: 1296269,\n   *   owner: \"octocat\",\n   *   repo: \"Hello-World\"\n   * }\n   * ```\n   */\n  repo: Prettify<GitRepo>;\n  /**\n   * The name of the branch the event is coming from.\n   */\n  branch: string;\n  /**\n   * Info about the commit in the event. This might look like:\n   *\n   * ```js\n   * {\n   *   id: \"b7e7c4c559e0e5b4bc6f8d98e0e5e5e5e5e5e5e5\",\n   *   message: \"Update the README with new information\"\n   * }\n   * ```\n   */\n  commit: Prettify<GitCommit>;\n  /**\n   * The user that generated the event. For example:\n   *\n   * ```js\n   * {\n   *   id: 1,\n   *   username: \"octocat\"\n   * }\n   * ```\n   */\n  sender: Prettify<GitSender>;\n}\n\n/**\n * A git event for when a tag is created or deleted. For example:\n * ```js\n * {\n *   type: \"tag\",\n *   action: \"pushed\",\n *   repo: {\n *     id: 1296269,\n *     owner: \"octocat\",\n *     repo: \"Hello-World\"\n *   },\n *   tag: \"v1.5.2\",\n *   commit: {\n *     id: \"b7e7c4c559e0e5b4bc6f8d98e0e5e5e5e5e5e5e5\",\n *     message: \"Update the README with new information\"\n *   },\n *   sender: {\n *     id: 1,\n *     username: \"octocat\"\n *   }\n * }\n * ```\n */\nexport interface TagEvent {\n  /**\n   * The git event type, for the `TagEvent` it's `tag`.\n   */\n  type: \"tag\";\n  /**\n   * The type of the git action.\n   *\n   * - `pushed` is when you create a tag\n   * - `removed` is when a tag is removed\n   */\n  action: \"pushed\" | \"removed\";\n  /**\n   * The Git repository the event is coming from. This might look like:\n   *\n   * ```js\n   * {\n   *   id: 1296269,\n   *   owner: \"octocat\",\n   *   repo: \"Hello-World\"\n   * }\n   * ```\n   */\n  repo: Prettify<GitRepo>;\n  /**\n   * The name of the tag. For example, `v1.5.2`.\n   */\n  tag: string;\n  /**\n   * Info about the commit in the event. This might look like:\n   *\n   * ```js\n   * {\n   *   id: \"b7e7c4c559e0e5b4bc6f8d98e0e5e5e5e5e5e5e5\",\n   *   message: \"Update the README with new information\"\n   * }\n   * ```\n   */\n  commit: Prettify<GitCommit>;\n  /**\n   * The user that generated the event. For example:\n   *\n   * ```js\n   * {\n   *   id: 1,\n   *   username: \"octocat\"\n   * }\n   * ```\n   */\n  sender: Prettify<GitSender>;\n}\n\n/**\n * A git event for when a pull request is updated or deleted. For example:\n *\n * ```js\n * {\n *   type: \"pull_request\",\n *   action: \"pushed\",\n *   repo: {\n *     id: 1296269,\n *     owner: \"octocat\",\n *     repo: \"Hello-World\"\n *   },\n *   number: 1347,\n *   base: \"main\",\n *   head: \"feature\",\n *   commit: {\n *     id: \"b7e7c4c559e0e5b4bc6f8d98e0e5e5e5e5e5e5e5\",\n *     message: \"Update the README with new information\"\n *   },\n *   sender: {\n *     id: 1,\n *     username: \"octocat\"\n *   }\n * }\n * ```\n */\nexport interface PullRequestEvent {\n  /**\n   * The git event type, for the `PullRequestEvent` it's `pull_request`.\n   */\n  type: \"pull_request\";\n  /**\n   * The type of the git action.\n   *\n   * - `pushed` is when you git push to the base branch of the PR\n   * - `removed` is when the PR is closed or merged\n   */\n  action: \"pushed\" | \"removed\";\n  /**\n   * The Git repository the event is coming from. This might look like:\n   *\n   * ```js\n   * {\n   *   id: 1296269,\n   *   owner: \"octocat\",\n   *   repo: \"Hello-World\"\n   * }\n   * ```\n   */\n  repo: Prettify<GitRepo>;\n  /**\n   * The pull request number.\n   */\n  number: number;\n  /**\n   * The title of the pull request.\n   */\n  title: string;\n  /**\n   * The base branch of the PR. This is the branch the code is being merged into.\n   */\n  base: string;\n  /**\n   * The head branch of the PR. This is the branch the code is coming from.\n   */\n  head: string;\n  /**\n   * Info about the commit in the event. This might look like:\n   *\n   * ```js\n   * {\n   *   id: \"b7e7c4c559e0e5b4bc6f8d98e0e5e5e5e5e5e5e5\",\n   *   message: \"Update the README with new information\"\n   * }\n   * ```\n   */\n  commit: Prettify<GitCommit>;\n  /**\n   * The user that generated the event. For example:\n   *\n   * ```js\n   * {\n   *   id: 1,\n   *   username: \"octocat\"\n   * }\n   * ```\n   */\n  sender: Prettify<GitSender>;\n}\n\n/**\n * A user event for when the user manually triggers a deploy. For example:\n * ```js\n * {\n *   type: \"user\",\n *   action: \"deploy\",\n *   repo: {\n *     id: 1296269,\n *     owner: \"octocat\",\n *     repo: \"Hello-World\"\n *   },\n *   ref: \"main\",\n *   commit: {\n *     id: \"b7e7c4c559e0e5b4bc6f8d98e0e5e5e5e5e5e5e5\",\n *     message: \"Update the README with new information\"\n *   }\n * }\n * ```\n */\nexport interface UserEvent {\n  /**\n   * The user event type.\n   */\n  type: \"user\";\n  /**\n   * The type of the user action.\n   *\n   * - `deploy` is when you manually trigger a deploy\n   * - `remove` is when you manually remove a stage\n   */\n  action: \"deploy\" | \"remove\";\n  /**\n   * The Git repository the event is coming from. This might look like:\n   *\n   * ```js\n   * {\n   *   id: 1296269,\n   *   owner: \"octocat\",\n   *   repo: \"Hello-World\"\n   * }\n   * ```\n   */\n  repo: Prettify<GitRepo>;\n  /**\n   * The reference to the Git commit. This can be the branch, tag, or commit hash.\n   */\n  ref: string;\n  /**\n   * Info about the commit in the event. This might look like:\n   *\n   * ```js\n   * {\n   *   id: \"b7e7c4c559e0e5b4bc6f8d98e0e5e5e5e5e5e5e5\",\n   *   message: \"Update the README with new information\"\n   * }\n   * ```\n   */\n  commit: Prettify<GitCommit>;\n}\n\nexport interface Target {\n  /**\n   * The stage or a list of stages the app will be deployed to.\n   */\n  stage: string | string[];\n}\n\nexport interface WorkflowInput {\n  /**\n   * The [Bun shell](https://bun.sh/docs/runtime/shell). It's a cross-platform\n   * _bash-like_ shell for scripting with JavaScript and TypeScript.\n   */\n  $: Shell;\n  /**\n   * The event that triggered the workflow.\n   *\n   * This includes git branch, pull request, or tag events. And it also\n   * includes a user event for manual deploys that are triggered through the\n   * Console.\n   */\n  event: BranchEvent | PullRequestEvent | TagEvent | UserEvent;\n}\n\nexport interface Config {\n  /**\n   * The config for your app. It needs to return an object of type [`App`](#app-1). The `app`\n   * function is evaluated when your app loads.\n   *\n   * :::caution\n   * You cannot define any components or resources in the `app` function.\n   * :::\n   *\n   * Here's an example of a simple `app` function.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * app(input) {\n   *   return {\n   *     name: \"my-sst-app\",\n   *     home: \"aws\",\n   *     providers: {\n   *       aws: true,\n   *       cloudflare: {\n   *         accountId: \"6fef9ed9089bb15de3e4198618385de2\"\n   *       }\n   *     },\n   *     removal: input.stage === \"production\" ? \"retain\" : \"remove\"\n   *   };\n   * },\n   * ```\n   */\n  app(input: AppInput): App | Promise<App>;\n  /**\n   * Configure how your app works with the SST Console.\n   */\n  console?: {\n    /**\n     * Auto-deploys your app when you _git push_ to your repo. Uses\n     * [AWS CodeBuild](https://aws.amazon.com/codebuild/) in your account to run the build.\n     *\n     * To get started, first [make sure to set up Autodeploy](/docs/console#setup).\n     * Specifically, you need to configure an environment with the stage and AWS account\n     * you want to auto-deploy to.\n     *\n     * Now when you _git push_ to a branch, pull request, or tag, the following happens:\n     *\n     * 1. The stage name is generated based on the `autodeploy.target` callback.\n     *    1. If there is no callback, the stage name is a sanitized version of the branch or tag.\n     *    2. If there is a callback but no stage is returned, the deploy is skipped.\n     * 2. The runner config is generated based on the `autodeploy.runner`. Or the defaults are\n     *    used.\n     * 3. The stage is matched against the environments in the Console to get the AWS account\n     *    and any environment variables for the deploy.\n     * 4. The deploy is run based on the above config.\n     *\n     * This only applies only to git events. If you trigger a deploy through the Console, you\n     * are asked to sepcify the stage you want to deploy to. So in this case, it skips step 1\n     * from above and does not call `autodeploy.target`.\n     *\n     * You can further configure Autodeploy through the `autodeploy` prop.\n     *\n     * ```ts title=\"sst.config.ts\"\n     * console: {\n     *   autodeploy: {\n     *     target(event) {}, // Customize the target stage\n     *     runner(stage) {}, // Customize the runner\n     *     async workflow({ $, input }) {} // Customize the workflow\n     *   }\n     * }\n     * ```\n     *\n     * Here, `target`, `runner`, and `workflow` are all optional and come with defaults, so\n     * you don't need to configure anything. But you can customize them.\n     *\n     * ```ts\n     * {\n     *   autodeploy: {\n     *     target(event) {\n     *       if (\n     *         event.type === \"branch\" &&\n     *         event.branch === \"main\" &&\n     *         event.action === \"pushed\"\n     *        ) {\n     *         return { stage: \"production\" };\n     *       }\n     *     },\n     *     runner(stage) {\n     *       if (stage === \"production\") return { timeout: \"3 hours\" };\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * For example, here we are only auto-deploying to the `production` stage when you git push\n     * to the `main` branch. We are also setting the timeout to 3 hours for the `production`\n     * stage. You can read more about the `target` and `runner` props below.\n     *\n     * Finally, if you want to configure exactly what happens in the build, you can pass in\n     * a `workflow` function.\n     *\n     * ```ts\n     * {\n     *   autodeploy: {\n     *     async workflow({ $, event }) {\n     *       await $`npm i -g pnpm`;\n     *       await $`pnpm i`;\n     *       event.action === \"removed\"\n     *         ? await $`pnpm sst remove`\n     *         : await $`pnpm sst deploy`;\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can read more the `workflow` prop below.\n     *\n     * @default Auto-deploys branches and PRs.\n     */\n    autodeploy: {\n      /**\n       * Defines the stage or a list of stages the app will be auto-deployed to.\n       *\n       * When a git event is received, Autodeploy will run the `target` function with the\n       * git event. This function should return the stage or a list of stages the app will\n       * be deployed to. Or `undefined` if the deploy should be skipped.\n       *\n       * :::tip\n       * Return `undefined` to skip the deploy.\n       * :::\n       *\n       * The stage that is returned is then compared to the environments set in the\n       * [app settings in the Console](/docs/console/#setup). If the stage matches an\n       * environment, the stage will be deployed to that environment. If no matching environment\n       * is found, the deploy will be skipped.\n       *\n       * :::note\n       * You need to configure an environment in the Console to be able to deploy to it.\n       * :::\n       *\n       * Currently, only git events for **branches**, **pull requests**, and **tags** are\n       * supported.\n       *\n       * :::tip\n       * This is not called when you manually trigger a deploy through the Console.\n       * :::\n       *\n       * This config only applies to git events. If you trigger a deploy through the Console,\n       * you are asked to sepcify the stage you want to deploy to. In this case, and\n       * when you redeploy a manual deploy, the `target` function is not called.\n       *\n       * By default, this is what the `target` function looks like:\n       *\n       * ```ts\n       * {\n       *   target(event) {\n       *     if (event.type === \"branch\" && event.action === \"pushed\") {\n       *       return {\n       *         stage: event.branch\n       *           .replace(/[^a-zA-Z0-9-]/g, \"-\")\n       *           .replace(/-+/g, \"-\")\n       *           .replace(/^-/g, \"\")\n       *           .replace(/-$/g, \"\")\n       *       };\n       *     }\n       *\n       *     if (event.type === \"pull_request\") {\n       *       return { stage: `pr-${event.number}` };\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * So for a:\n       *\n       * - **branch**: The stage name is a sanitized version of the branch name. When a branch\n       *   is removed, the stage is **not removed**.\n       * - **pull request**: The stage name is `pr-<number>`. When a pull request is closed,\n       *   the stage **is removed**.\n       *\n       * :::tip\n       * Git events to tags are not auto-deployed by default.\n       * :::\n       *\n       * Git events to tags are not auto-deployed by default. You can change this by adding it\n       * to your config.\n       *\n       * ```ts\n       * {\n       *   target(event) {\n       *     if (event.type === \"tag\" && event.action === \"pushed\") {\n       *       return {\n       *         stage: \"tag-\" + event.tag\n       *           .replace(/[^a-zA-Z0-9-]/g, \"-\")\n       *           .replace(/-+/g, \"-\")\n       *           .replace(/^-/g, \"\")\n       *           .replace(/-$/g, \"\")\n       *       };\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * Here, similar to the branch event, we are sanitizing the tag name to generate the stage.\n       * Just make sure to configure the environment for these tag stages in the Console.\n       *\n       * If you don't want to auto-deploy for a given event, you can return `undefined`. For\n       * example, to skip any deploys to the `staging` stage.\n       *\n       * ```ts {3}\n       * {\n       *   target(event) {\n       *     if (event.type === \"branch\" && event.branch === \"staging\") return;\n       *     if (\n       *       event.type === \"branch\" &&\n       *       event.branch === \"main\" &&\n       *       event.action === \"pushed\"\n       *     ) {\n       *       return { stage: \"production\" };\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      target?(\n        input: BranchEvent | PullRequestEvent | TagEvent,\n      ): Target | undefined;\n      /**\n       * Configure the runner that will run the build. By default it uses the following config:\n       *\n       * ```ts\n       * {\n       *   runner: {\n       *     engine: \"codebuild\",\n       *     architecture: \"x86_64\",\n       *     compute: \"medium\",\n       *     timeout: \"1 hour\"\n       *   }\n       * }\n       * ```\n       *\n       * Most of these are optional and come with defaults. But you can configure them.\n       *\n       * ```ts\n       * {\n       *   runner: { timeout: \"3 hours\" }\n       * }\n       * ```\n       *\n       * You can also configure it based on the stage that's being deployed. Let's say you\n       * want to use the defaults for all stages except for `production`.\n       *\n       * ```ts\n       * {\n       *   runner(stage) {\n       *     if (stage === \"production\") return { timeout: \"3 hours\" };\n       *   }\n       * }\n       * ```\n       *\n       * Aside from the above, you can also have the deploys run inside a VPC.\n       *\n       * ```ts\n       * {\n       *   runner: {\n       *     vpc: {\n       *       id: \"vpc-0be8fa4de860618bb\",\n       *       securityGroups: [\"sg-0399348378a4c256c\"],\n       *       subnets: [\"subnet-0b6a2b73896dc8c4c\", \"subnet-021389ebee680c2f0\"]\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * Or configure files or directories to be cached.\n       *\n       * ```ts\n       * {\n       *   runner: {\n       *     cache: {\n       *       paths: [\"node_modules\", \"/path/to/cache\"]\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * A _runner_ is a [AWS CodeBuild](https://aws.amazon.com/codebuild/) project and an\n       * IAM Role. This is created in **your account**.\n       *\n       * Once a runner is created, it can be used to run multiple builds of the same\n       * machine config concurrently. Runners are also shared across all apps in the same\n       * account and region.\n       *\n       * :::note\n       * You are only charged for the number of build minutes that you use.\n       * :::\n       *\n       * If a runner with a given config has been been previously created,\n       * it'll be reused. The Console will also automatically remove runners that\n       * have not been used for more than 7 days.\n       *\n       * You are not charged for the number of runners you have, only for the number of build\n       * minutes that you use. The pricing is based on the machine config used.\n       * [Learn more about CodeBuild pricing](https://aws.amazon.com/codebuild/pricing/).\n       */\n      runner?: Runner | ((input: RunnerInput) => Runner);\n      /**\n       * Customize the commands that are run during the build process. This is\n       * useful for running tests, or completely customizing the build process.\n       *\n       * The default workflow automatically figures out the package manager you\n       * are using, installs the dependencies, and runs `sst deploy` or `sst remove`\n       * based on the event.\n       *\n       * For example, if you are using pnpm, the following is equivalent to the\n       * default workflow.\n       *\n       * ```ts\n       * {\n       *   async workflow({ $, event }) {\n       *     await $`npm i -g pnpm`;\n       *     await $`pnpm i`;\n       *     event.action === \"removed\"\n       *       ? await $`pnpm sst remove`\n       *       : await $`pnpm sst deploy`;\n       *   }\n       * }\n       * ```\n       *\n       * The workflow function is run inside a Bun process. It passes in `$`\n       * as the [Bun Shell](https://bun.sh/docs/runtime/shell). This makes\n       * _bash-like_ scripting easier.\n       *\n       * :::tip\n       * Use the Bun Shell to make running commands easier.\n       * :::\n       *\n       * For example, here's how you can run tests before deploying.\n       *\n       * ```ts {5}\n       * {\n       *   async workflow({ $, event }) {\n       *     await $`npm i -g pnpm`;\n       *     await $`pnpm i`;\n       *     await $`pnpm test`;\n       *     event.action === \"removed\"\n       *       ? await $`pnpm sst remove`\n       *       : await $`pnpm sst deploy`;\n       *   }\n       * }\n       * ```\n       *\n       * When you pass in a `workflow`, you are effectively taking control of what\n       * runs in your build.\n       *\n       * :::caution\n       * If you don't run `sst deploy`, your app won't be deployed.\n       * :::\n       *\n       * This means that if you don't run `sst deploy`, your app won't be deployed.\n       *\n       * :::tip\n       * Throwing an error will fail the build and display the error in the Console.\n       * :::\n       *\n       * If you throw an error in the workflow, the deploy will fail and the error\n       * will be displayed in the Autodeploy logs.\n       *\n       * Here's a more detailed example of using the Bun Shell to handle failures.\n       *\n       * ```ts {6,9}\n       * {\n       *   async workflow({ $, event }) {\n       *     await $`npm i -g pnpm`;\n       *     await $`pnpm i`;\n       *\n       *     const { exitCode } = await $`pnpm test`.nothrow();\n       *     if (exitCode !== 0) {\n       *       // Process the test report and then fail the build\n       *       throw new Error(\"Failed to run tests\");\n       *     }\n       *\n       *     event.action === \"removed\"\n       *       ? await $`pnpm sst remove`\n       *       : await $`pnpm sst deploy`;\n       *   }\n       * }\n       * ```\n       *\n       * You'll notice we are not passing in `--stage` to the SST commands. This is because the `SST_STAGE` environment variable is already set in\n       * the build process.\n       *\n       * :::tip\n       * You don't need to pass in `--stage` to the SST commands.\n       * :::\n       *\n       * The build process is run inside an\n       * [Amazon Linux 2](https://aws.amazon.com/amazon-linux-2/) machine based on\n       * the `architecture` used.\n       */\n      workflow?(input: WorkflowInput): Promise<void>;\n    };\n  };\n  /**\n   * An async function that lets you define the resources in your app.\n   *\n   * :::note\n   * You can use SST and Pulumi components only in the `run` function.\n   * :::\n   *\n   * You can optionally return an object that'll be displayed as the output in the CLI.\n   *\n   * @example\n   *\n   * For example, here we return the name of the bucket we created.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * async run() {\n   *   const bucket = new sst.aws.Bucket(\"MyBucket\");\n   *\n   *   return {\n   *     bucket: bucket.name\n   *   };\n   * }\n   * ```\n   *\n   * This will display the following in the CLI on `sst deploy` and `sst dev`.\n   *\n   * ```bash frame=\\\"none\\\"\n   * bucket: bucket-jOaikGu4rla\n   * ```\n   *\n   * These outputs are also written to a `.sst/outputs.json` file after every successful deploy.\n   * It contains the above outputs in JSON.\n   *\n   * ```json title=\".sst/outputs.json\"\n   * {\"bucket\": \"bucket-jOaikGu4rla\"}\n   * ```\n   */\n  run(): Promise<Record<string, any> | void>;\n}\n\n/** @internal */\nexport function $config(input: Config): Config {\n  return input;\n}\n", "import { Link } from \"../components/link\";\nimport {\n  ResourceTransformationArgs,\n  runtime,\n  automation,\n  output,\n} from \"@pulumi/pulumi\";\n\nimport { VisibleError } from \"../components/error\";\n\nexport async function run(program: automation.PulumiFn) {\n  process.chdir($cli.paths.root);\n\n  addTransformationToRetainResourcesOnDelete();\n  addTransformationToAddTags();\n  addTransformationToCheckBucketsHaveMultiplePolicies();\n\n  Link.reset();\n  const outputs = (await program()) || {};\n  outputs._protect = $app.protect;\n  return outputs;\n}\n\nfunction addTransformationToRetainResourcesOnDelete() {\n  runtime.registerStackTransformation((args: ResourceTransformationArgs) => {\n    if (\n      $app.removal === \"retain-all\" ||\n      ($app.removal === \"retain\" &&\n        [\n          \"aws:dynamodb/table:Table\",\n          \"aws:rds/instance:Instance\",\n          \"aws:s3/bucket:Bucket\",\n          \"aws:s3/bucketV2:BucketV2\",\n          \"planetscale:index/database:Database\",\n          \"planetscale:index/branch:Branch\",\n        ].includes(args.type))\n    ) {\n      args.opts.retainOnDelete = args.opts.retainOnDelete ?? true;\n      return args;\n    }\n    return undefined;\n  });\n}\n\nfunction addTransformationToAddTags() {\n  runtime.registerStackTransformation((args: ResourceTransformationArgs) => {\n    if (\"import\" in args.opts && args.opts.import) {\n      if (!args.opts.ignoreChanges) args.opts.ignoreChanges = [];\n      args.opts.ignoreChanges.push(\"tags\");\n      args.opts.ignoreChanges.push(\"tagsAll\");\n    }\n    return args;\n  });\n}\n\nfunction addTransformationToCheckBucketsHaveMultiplePolicies() {\n  const bucketsWithPolicy: Record<string, string> = {};\n  runtime.registerStackTransformation((args: ResourceTransformationArgs) => {\n    if (args.type !== \"aws:s3/bucketPolicy:BucketPolicy\") return;\n\n    output(args.props.bucket).apply((bucket: string) => {\n      if (bucketsWithPolicy[bucket])\n        throw new VisibleError(\n          `Cannot add bucket policy \"${args.name}\" to the AWS S3 Bucket \"${bucket}\". The bucket already has a policy attached \"${bucketsWithPolicy[bucket]}\".`,\n        );\n\n      bucketsWithPolicy[bucket] = args.name;\n    });\n\n    return undefined;\n  });\n}\n", "import * as aws from \"@pulumi/aws\";\nimport * as sst from \"/Users/alexanderfitterling/dev/auth-pools/budget-cognito-dev/.sst/platform/src/components\";\n/// <reference path=\"./.sst/platform/config.d.ts\" />\n\n\nexport default $config({\n  app(input) {\n    return {\n      name: \"budget-dev\",\n      home: \"aws\",\n      removal: input?.stage === \"production\" ? \"retain\" : \"remove\",\n    };\n  },\n\n  async run() {\n    // 1) Cognito User Pool\n    const userPool = new sst.aws.CognitoUserPool(\"MyUserPool\", {\n      triggers: {\n        preSignUp: {\n          handler: \"functions/preSignUp.main\",\n        },\n      },\n    });\n\n    // 2) User Pool Client with password & refresh flows\n    const client = userPool.addClient(\"Web\");\n\n    // 3) Identity Pool\n    const identityPool = new sst.aws.CognitoIdentityPool(\"MyIdentityPool\", {\n      userPools: [{ userPool: userPool.id, client: client.id }],\n    });\n\n    // 4) SSM prefix per app/stage\n    const prefix = `/identity/${$app.name}/${$app.stage}`;\n\n    // 5) Write parameters to SSM\n    new aws.ssm.Parameter(\"CognitoUserPoolIdParam\", {\n      name: `${prefix}/COGNITO_USER_POOL_ID`,\n      type: \"String\",\n      value: userPool.id,\n      overwrite: true,\n    });\n\n    new aws.ssm.Parameter(\"CognitoUserPoolIdParam\", {\n      name: `${prefix}/COGNITO_USER_POOL_ID`,\n      type: \"String\",\n      value: userPool.id,\n      overwrite: true,\n    });\n\n    new aws.ssm.Parameter(\"CognitoUserPoolArnParam\", {\n      name: `${prefix}/COGNITO_USER_POOL_ARN`,\n      type: \"String\",\n      value: userPool.arn,\n      overwrite: true,\n    });\n\n    new aws.ssm.Parameter(\"CognitoClientIdParam\", {\n      name: `${prefix}/COGNITO_CLIENT_ID`,\n      type: \"String\",\n      value: client.id,\n      overwrite: true,\n    });\n\n    new aws.ssm.Parameter(\"CognitoIdentityPoolIdParam\", {\n      name: `${prefix}/COGNITO_IDENTITY_POOL_ID`,\n      type: \"String\",\n      value: identityPool.id,\n      overwrite: true,\n    });\n\n    // IdentityPool ARN is optional, safer to skip\n\n    // 6) Return for console visibility\n    return {\n      UserPool: userPool.id,\n      Client: client.id,\n      IdentityPool: identityPool.id,\n    };\n  },\n});\n", "export * from \"./analog.js\";\nexport * from \"./apigatewayv1.js\";\nexport * from \"./apigatewayv2.js\";\nexport * from \"./apigateway-websocket.js\";\nexport * from \"./app-sync.js\";\nexport * from \"./astro.js\";\nexport * from \"./aurora.js\";\nexport * from \"./auth.js\";\nexport * from \"./bucket.js\";\nexport * from \"./bus.js\";\nexport * from \"./cluster.js\";\nexport * from \"./cognito-identity-pool.js\";\nexport * from \"./cognito-user-pool.js\";\nexport * from \"./cron.js\";\nexport * from \"./dns.js\";\nexport * from \"./dynamo.js\";\nexport * from \"./efs.js\";\nexport * from \"./email.js\";\nexport * from \"./function.js\";\nexport * from \"./kinesis-stream.js\";\nexport * from \"./nextjs.js\";\nexport * from \"./opencontrol.js\";\nexport * from \"./open-search.js\";\nexport * from \"./postgres.js\";\nexport * from \"./mysql.js\";\nexport * from \"./queue.js\";\nexport * from \"./realtime.js\";\nexport * from \"./react.js\";\nexport * from \"./redis.js\";\nexport * from \"./remix.js\";\nexport * from \"./router.js\";\nexport * from \"./service.js\";\nexport * from \"./sns-topic.js\";\nexport * from \"./solid-start.js\";\nexport * from \"./step-functions.js\";\nexport * from \"./tan-stack-start.js\";\nexport * from \"./task.js\";\nexport * from \"./nuxt.js\";\nexport * from \"./static-site.js\";\nexport * from \"./svelte-kit.js\";\nexport * from \"./vector.js\";\nexport * from \"./vpc.js\";\nexport { linkable } from \"./linkable.js\";\nexport { permission } from \"./permission.js\";\nexport { iamEdit } from \"./iam-edit.js\";\n\n// internal components\nexport * from \"./cdn.js\";\nexport * from \"./dns-validated-certificate.js\";\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output } from \"@pulumi/pulumi\";\nimport { VisibleError } from \"../error.js\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\n\nexport interface AnalogArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your Analog app is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your Analog app, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your Analog app needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your Analog app is located.  This path is relative to your `sst.config.ts`.\n   *\n   * By default it assumes your Analog app is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your Analog app is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your Analog app. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your Analog app has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * Set [environment variables](https://analogjs.org/docs/guides/migrating#using-environment-variables) in your Analog app. These are made available:\n   *\n   * 1. In `ng build`, they are loaded into `process.env`.\n   * 2. Locally while running `sst dev ng serve`.\n   *\n   * :::tip\n   * You can also `link` resources to your Analog app and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * Only variables prefixed with `VITE_` are available in the browser.\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     // Accessible in the browser\n   *     VITE_STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Set a custom domain for your Analog app.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Serve your Analog app through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your Analog app **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * You also need to set the `base` and `apiPrefix` options in your `vite.config.ts`.\n   * The `apiPrefix` value should not begin with a slash.\n   *\n   * :::caution\n   * If routing to a path, you need to set that as the base path in your Analog\n   * app as well.\n   * :::\n   *\n   * ```js title=\"vite.config.ts\" {5,8}\n   * export default defineConfig(({ mode }) => ({\n   *   plugins: [\n   *     analog({\n   *       // Does NOT start with a slash\n   *       apiPrefix: \"docs/api\"\n   *     })\n   *   ],\n   *   base: \"/docs\"\n   * }));\n   * ```\n   *\n   * To serve your Analog app **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your Analog app **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set the base path and API prefix in your `vite.config.ts`,\n   * like above.\n   */\n  router?: SsrSiteArgs[\"router\"];\n  /**\n   * The command used internally to build your Analog app.\n   *\n   * @default `\"npm run build\"`\n   *\n   * @example\n   *\n   * If you want to use a different build command.\n   * ```js\n   * {\n   *   buildCommand: \"yarn build\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * Configure how the Analog app assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the Analog app to use an existing CloudFront cache policy.\n   *\n   * :::note\n   * CloudFront has a limit of 20 cache policies per account, though you can request a limit\n   * increase.\n   * :::\n   *\n   * By default, a new cache policy is created for it. This allows you to reuse an existing\n   * policy instead of creating a new one.\n   *\n   * @default A new cache policy is created\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `Analog` component lets you deploy a [Analog](https://analogjs.org) app to AWS.\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy an Analog app that's in the project root.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.Analog(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys the Analog app in the `my-analog-app/` directory.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Analog(\"MyWeb\", {\n *   path: \"my-analog-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your Analog app.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Analog(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.Analog(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your Analog app. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.Analog(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your Analog app.\n *\n * ```ts title=\"src/app/app.config.ts\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class Analog extends SsrSite {\n  constructor(\n    name: string,\n    args: AnalogArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand() { }\n\n  protected buildPlan(outputPath: Output<string>): Output<Plan> {\n    return outputPath.apply((outputPath) => {\n      const nitro = JSON.parse(\n        fs.readFileSync(\n          path.join(outputPath, \"dist\", \"analog\", \"nitro.json\"),\n          \"utf-8\",\n        ),\n      );\n\n      if (![\"aws-lambda\"].includes(nitro.preset)) {\n        throw new VisibleError(\n          `Analog's vite.config.ts must be configured to use the \"aws-lambda\" preset. It is currently set to \"${nitro.preset}\".`,\n        );\n      }\n\n      const basepath = fs\n        .readFileSync(path.join(outputPath, \"vite.config.ts\"), \"utf-8\")\n        .match(/base: ['\"](.*)['\"]/)?.[1];\n\n      return {\n        base: basepath,\n        server: {\n          description: \"Server handler for Analog\",\n          handler: \"index.handler\",\n          bundle: path.join(outputPath, \"dist\", \"analog\", \"server\"),\n        },\n        assets: [\n          {\n            from: path.join(\"dist\", \"analog\", \"public\"),\n            to: \"\",\n            cached: true,\n          },\n        ],\n      };\n    });\n  }\n\n  /**\n   * The URL of the Analog app.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n}\n\nconst __pulumiType = \"sst:aws:Analog\";\n// @ts-expect-error\nAnalog.__pulumiType = __pulumiType;\n", "import path from \"path\";\nimport fs from \"fs\";\nimport { globSync } from \"glob\";\nimport crypto from \"crypto\";\nimport type { Loader } from \"esbuild\";\nimport {\n  Output,\n  Unwrap,\n  output,\n  all,\n  interpolate,\n  ComponentResourceOptions,\n  Resource,\n} from \"@pulumi/pulumi\";\nimport { Cdn, CdnArgs } from \"./cdn.js\";\nimport { Function, FunctionArgs } from \"./function.js\";\nimport { Bucket, BucketArgs } from \"./bucket.js\";\nimport { BucketFile, BucketFiles } from \"./providers/bucket-files.js\";\nimport { logicalName } from \"../naming.js\";\nimport { Input } from \"../input.js\";\nimport {\n  Component,\n  Prettify,\n  transform,\n  type Transform,\n} from \"../component.js\";\nimport { VisibleError } from \"../error.js\";\nimport { Cron } from \"./cron.js\";\nimport { BaseSiteFileOptions, getContentType } from \"../base/base-site.js\";\nimport { BaseSsrSiteArgs, buildApp } from \"../base/base-ssr-site.js\";\nimport { cloudfront, getRegionOutput, lambda, Region } from \"@pulumi/aws\";\nimport { KvKeys } from \"./providers/kv-keys.js\";\nimport { useProvider } from \"./helpers/provider.js\";\nimport { Link } from \"../link.js\";\nimport { URL_UNAVAILABLE } from \"./linkable.js\";\nimport {\n  CF_ROUTER_INJECTION,\n  CF_BLOCK_CLOUDFRONT_URL_INJECTION,\n  KV_SITE_METADATA,\n  RouterRouteArgsDeprecated,\n  normalizeRouteArgs,\n  RouterRouteArgs,\n} from \"./router.js\";\nimport { DistributionInvalidation } from \"./providers/distribution-invalidation.js\";\nimport { toSeconds } from \"../duration.js\";\nimport { KvRoutesUpdate } from \"./providers/kv-routes-update.js\";\nimport { CONSOLE_URL, getQuota } from \"./helpers/quota.js\";\nimport { toPosix } from \"../path.js\";\n\nconst supportedRegions = {\n  \"af-south-1\": { lat: -33.9249, lon: 18.4241 }, // Cape Town, South Africa\n  \"ap-east-1\": { lat: 22.3193, lon: 114.1694 }, // Hong Kong\n  \"ap-northeast-1\": { lat: 35.6895, lon: 139.6917 }, // Tokyo, Japan\n  \"ap-northeast-2\": { lat: 37.5665, lon: 126.978 }, // Seoul, South Korea\n  \"ap-northeast-3\": { lat: 34.6937, lon: 135.5023 }, // Osaka, Japan\n  \"ap-southeast-1\": { lat: 1.3521, lon: 103.8198 }, // Singapore\n  \"ap-southeast-2\": { lat: -33.8688, lon: 151.2093 }, // Sydney, Australia\n  \"ap-southeast-3\": { lat: -6.2088, lon: 106.8456 }, // Jakarta, Indonesia\n  \"ap-southeast-4\": { lat: -37.8136, lon: 144.9631 }, // Melbourne, Australia\n  \"ap-southeast-5\": { lat: 3.139, lon: 101.6869 }, // Kuala Lumpur, Malaysia\n  \"ap-southeast-7\": { lat: 13.7563, lon: 100.5018 }, // Bangkok, Thailand\n  \"ap-south-1\": { lat: 19.076, lon: 72.8777 }, // Mumbai, India\n  \"ap-south-2\": { lat: 17.385, lon: 78.4867 }, // Hyderabad, India\n  \"ca-central-1\": { lat: 45.5017, lon: -73.5673 }, // Montreal, Canada\n  \"ca-west-1\": { lat: 51.0447, lon: -114.0719 }, // Calgary, Canada\n  \"cn-north-1\": { lat: 39.9042, lon: 116.4074 }, // Beijing, China\n  \"cn-northwest-1\": { lat: 38.4872, lon: 106.2309 }, // Yinchuan, Ningxia\n  \"eu-central-1\": { lat: 50.1109, lon: 8.6821 }, // Frankfurt, Germany\n  \"eu-central-2\": { lat: 47.3769, lon: 8.5417 }, // Zurich, Switzerland\n  \"eu-north-1\": { lat: 59.3293, lon: 18.0686 }, // Stockholm, Sweden\n  \"eu-south-1\": { lat: 45.4642, lon: 9.19 }, // Milan, Italy\n  \"eu-south-2\": { lat: 40.4168, lon: -3.7038 }, // Madrid, Spain\n  \"eu-west-1\": { lat: 53.3498, lon: -6.2603 }, // Dublin, Ireland\n  \"eu-west-2\": { lat: 51.5074, lon: -0.1278 }, // London, UK\n  \"eu-west-3\": { lat: 48.8566, lon: 2.3522 }, // Paris, France\n  \"il-central-1\": { lat: 32.0853, lon: 34.7818 }, // Tel Aviv, Israel\n  \"me-central-1\": { lat: 25.2048, lon: 55.2708 }, // Dubai, UAE\n  \"me-south-1\": { lat: 26.0667, lon: 50.5577 }, // Manama, Bahrain\n  \"mx-central-1\": { lat: 19.4326, lon: -99.1332 }, // Mexico City, Mexico\n  \"sa-east-1\": { lat: -23.5505, lon: -46.6333 }, // S\u00E3o Paulo, Brazil\n  \"us-east-1\": { lat: 39.0438, lon: -77.4874 }, // Ashburn, VA\n  \"us-east-2\": { lat: 39.9612, lon: -82.9988 }, // Columbus, OH\n  \"us-gov-east-1\": { lat: 38.9696, lon: -77.3861 }, // Herndon, VA\n  \"us-gov-west-1\": { lat: 34.0522, lon: -118.2437 }, // Los Angeles, CA\n  \"us-west-1\": { lat: 37.7749, lon: -122.4194 }, // San Francisco, CA\n  \"us-west-2\": { lat: 45.5122, lon: -122.6587 }, // Portland, OR\n};\n\nexport type Plan = {\n  // The base path of the site (ie. /docs). Note that S3 assets are not stored inside a\n  // folder with this name. The CF router will stripe the base path from the request URI\n  // when routing to S3.\n  base?: string;\n  server?: Unwrap<FunctionArgs>;\n  imageOptimizer?: {\n    function: Unwrap<FunctionArgs>;\n    prefix: string;\n  };\n  assets: {\n    from: string;\n    // KV asset entries do not include the `to` value in their keys. The CF router will\n    // add the `to` value to the request URI when routing to S3.\n    to: string;\n    cached: boolean;\n    versionedSubDir?: string;\n    deepRoute?: string;\n  }[];\n  isrCache?: {\n    from: string;\n    to: string;\n  };\n  custom404?: string;\n  buildId?: string;\n};\n\nexport interface SsrSiteArgs extends BaseSsrSiteArgs {\n  domain?: CdnArgs[\"domain\"];\n  /**\n   * @deprecated Use `router` instead.\n   */\n  route?: Prettify<RouterRouteArgsDeprecated>;\n  router?: Prettify<RouterRouteArgs>;\n  cachePolicy?: Input<string>;\n  invalidation?: Input<\n    | false\n    | {\n        /**\n         * Configure if `sst deploy` should wait for the CloudFront cache invalidation to finish.\n         *\n         * :::tip\n         * For non-prod environments it might make sense to pass in `false`.\n         * :::\n         *\n         * Waiting for this process to finish ensures that new content will be available after the deploy finishes. However, this process can sometimes take more than 5 mins.\n         * @default `false`\n         * @example\n         * ```js\n         * {\n         *   invalidation: {\n         *     wait: true\n         *   }\n         * }\n         * ```\n         */\n        wait?: Input<boolean>;\n        /**\n         * The paths to invalidate.\n         *\n         * You can either pass in an array of glob patterns to invalidate specific files. Or you can use one of these built-in options:\n         * - `all`: All files will be invalidated when any file changes\n         * - `versioned`: Only versioned files will be invalidated when versioned files change\n         *\n         * :::note\n         * Each glob pattern counts as a single invalidation. Whereas, invalidating\n         * `/*` counts as a single invalidation.\n         * :::\n         * @default `\"all\"`\n         * @example\n         * Invalidate the `index.html` and all files under the `products/` route.\n         * ```js\n         * {\n         *   invalidation: {\n         *     paths: [\"/index.html\", \"/products/*\"]\n         *   }\n         * }\n         * ```\n         * This counts as two invalidations.\n         */\n        paths?: Input<\"all\" | \"versioned\" | string[]>;\n      }\n  >;\n  /**\n   * Regions that the server function will be deployed to.\n   *\n   * By default, the server function is deployed to a single region, this is the\n   * default region of your SST app.\n   *\n   * :::note\n   * This does not use Lambda@Edge, it deploys multiple Lambda functions instead.\n   * :::\n   *\n   * To deploy it to multiple regions, you can pass in a list of regions. And\n   * any requests made will be routed to the nearest region based on the user's\n   * location.\n   *\n   * @default The default region of the SST app\n   *\n   * @example\n   * ```js\n   * {\n   *   regions: [\"us-east-1\", \"eu-west-1\"]\n   * }\n   * ```\n   */\n  regions?: Input<string[]>;\n  permissions?: FunctionArgs[\"permissions\"];\n  /**\n   * The number of instances of the [server function](#nodes-server) to keep warm. This is useful for cases where you are experiencing long cold starts. The default is to not keep any instances warm.\n   *\n   * This works by starting a serverless cron job to make _n_ concurrent requests to the server function every few minutes. Where _n_ is the number of instances to keep warm.\n   *\n   * @default `0`\n   */\n  warm?: Input<number>;\n  /**\n   * Configure the Lambda function used for server.\n   * @default `{architecture: \"x86_64\", memory: \"1024 MB\"}`\n   */\n  server?: {\n    /**\n     * The amount of memory allocated to the server function.\n     * Takes values between 128 MB and 10240 MB in 1 MB increments.\n     *\n     * @default `\"1024 MB\"`\n     * @example\n     * ```js\n     * {\n     *   server: {\n     *     memory: \"2048 MB\"\n     *   }\n     * }\n     * ```\n     */\n    memory?: FunctionArgs[\"memory\"];\n    /**\n     * The runtime environment for the server function.\n     *\n     * @default `\"nodejs20.x\"`\n     * @example\n     * ```js\n     * {\n     *   server: {\n     *     runtime: \"nodejs22.x\"\n     *   }\n     * }\n     * ```\n     */\n    runtime?: Input<\"nodejs18.x\" | \"nodejs20.x\" | \"nodejs22.x\">;\n    /**\n     * The maximum amount of time the server function can run.\n     *\n     * While Lambda supports timeouts up to 900 seconds, your requests are served\n     * through AWS CloudFront. And it has a default limit of 60 seconds.\n     *\n     * If you set a timeout that's longer than 60 seconds, this component will\n     * check if your account can allow for that timeout. If not, it'll throw an\n     * error.\n     *\n     * :::tip\n     * If you need a timeout longer than 60 seconds, you'll need to request a\n     * limit increase.\n     * :::\n     *\n     * You can increase this to 180 seconds for your account by contacting AWS\n     * Support and [requesting a limit increase](https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase).\n     *\n     * @default `\"20 seconds\"`\n     * @example\n     * ```js\n     * {\n     *   server: {\n     *     timeout: \"50 seconds\"\n     *   }\n     * }\n     * ```\n     *\n     * If you need a timeout longer than what CloudFront supports, we recommend\n     * using a separate Lambda `Function` with the `url` enabled instead.\n     */\n    timeout?: FunctionArgs[\"timeout\"];\n    /**\n     * The [architecture](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html)\n     * of the server function.\n     *\n     * @default `\"x86_64\"`\n     * @example\n     * ```js\n     * {\n     *   server: {\n     *     architecture: \"arm64\"\n     *   }\n     * }\n     * ```\n     */\n    architecture?: FunctionArgs[\"architecture\"];\n    /**\n     * Dependencies that need to be excluded from the server function package.\n     *\n     * Certain npm packages cannot be bundled using esbuild. This allows you to exclude them\n     * from the bundle. Instead they'll be moved into a `node_modules/` directory in the\n     * function package.\n     *\n     * :::tip\n     * If esbuild is giving you an error about a package, try adding it to the `install` list.\n     * :::\n     *\n     * This will allow your functions to be able to use these dependencies when deployed. They\n     * just won't be tree shaken. You however still need to have them in your `package.json`.\n     *\n     * :::caution\n     * Packages listed here still need to be in your `package.json`.\n     * :::\n     *\n     * Esbuild will ignore them while traversing the imports in your code. So these are the\n     * **package names as seen in the imports**. It also works on packages that are not directly\n     * imported by your code.\n     *\n     * @example\n     * ```js\n     * {\n     *   server: {\n     *     install: [\"sharp\"]\n     *   }\n     * }\n     * ```\n     */\n    install?: Input<string[]>;\n    /**\n     * Configure additional esbuild loaders for other file extensions. This is useful\n     * when your code is importing non-JS files like `.png`, `.css`, etc.\n     *\n     * @example\n     * ```js\n     * {\n     *   server: {\n     *     loader: {\n     *      \".png\": \"file\"\n     *     }\n     *   }\n     * }\n     * ```\n     */\n    loader?: Input<Record<string, Loader>>;\n    /**\n     * A list of Lambda layer ARNs to add to the server function.\n     *\n     * @example\n     * ```js\n     * {\n     *   server: {\n     *     layers: [\"arn:aws:lambda:us-east-1:123456789012:layer:my-layer:1\"]\n     *   }\n     * }\n     * ```\n     */\n    layers?: Input<Input<string>[]>;\n    /**\n     * @deprecated The `server.edge` prop has been moved to the top level `edge` prop on the component.\n     */\n    edge?: Input<{\n      viewerRequest?: Input<{\n        injection: Input<string>;\n        kvStore?: Input<string>;\n        kvStores?: Input<Input<string>[]>;\n      }>;\n      viewerResponse?: Input<{\n        injection: Input<string>;\n        kvStore?: Input<string>;\n        kvStores?: Input<Input<string>[]>;\n      }>;\n    }>;\n  };\n  /**\n   * Configure CloudFront Functions to customize the behavior of HTTP requests and responses at the edge.\n   */\n  edge?: Input<{\n    /**\n     * Configure the viewer request function.\n     *\n     * The viewer request function can be used to modify incoming requests before they\n     * reach your origin server. For example, you can redirect users, rewrite URLs,\n     * or add headers.\n     */\n    viewerRequest?: Input<{\n      /**\n       * The code to inject into the viewer request function.\n       *\n       * By default, a viewer request function is created to:\n       * - Disable CloudFront default URL if custom domain is set\n       * - Add the `x-forwarded-host` header\n       * - Route assets requests to S3 (static files stored in the bucket)\n       * - Route server requests to server functions (dynamic rendering)\n       *\n       * The function manages routing by:\n       * 1. First checking if the requested path exists in S3 (with variations like adding index.html)\n       * 2. Serving a custom 404 page from S3 if configured and the path isn't found\n       * 3. Routing image optimization requests to the image optimizer function\n       * 4. Routing all other requests to the nearest server function\n       *\n       * The given code will be injected at the beginning of this function.\n       *\n       * ```js\n       * async function handler(event) {\n       *   // User injected code\n       *\n       *   // Default behavior code\n       *\n       *   return event.request;\n       * }\n       * ```\n       *\n       * @example\n       * To add a custom header to all requests.\n       *\n       * ```js\n       * {\n       *   edge: {\n       *     viewerRequest: {\n       *       injection: `event.request.headers[\"x-foo\"] = { value: \"bar\" };`\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * You can use this to add basic auth, [check out an example](/docs/examples/#aws-nextjs-basic-auth).\n       */\n      injection: Input<string>;\n      /**\n       * The KV store to associate with the viewer request function.\n       *\n       * @example\n       * ```js\n       * {\n       *   edge: {\n       *     viewerRequest: {\n       *       kvStore: \"arn:aws:cloudfront::123456789012:key-value-store/my-store\"\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      kvStore?: Input<string>;\n    }>;\n    /**\n     * Configure the viewer response function.\n     *\n     * The viewer response function can be used to modify outgoing responses before they are\n     * sent to the client. For example, you can add security headers or change the response\n     * status code.\n     *\n     * By default, no viewer response function is set. A new function will be created\n     * with the provided code.\n     */\n    viewerResponse?: Input<{\n      /**\n       * The code to inject into the viewer response function.\n       *\n       * ```js\n       * async function handler(event) {\n       *   // User injected code\n       *\n       *   return event.response;\n       * }\n       * ```\n       *\n       * @example\n       * To add a custom header to all responses.\n       *\n       * ```js\n       * {\n       *   edge: {\n       *     viewerResponse: {\n       *       injection: `event.response.headers[\"x-foo\"] = { value: \"bar\" };`\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      injection: Input<string>;\n      /**\n       * The KV store to associate with the viewer response function.\n       *\n       * @example\n       * ```js\n       * {\n       *   edge: {\n       *     viewerResponse: {\n       *       kvStore: \"arn:aws:cloudfront::123456789012:key-value-store/my-store\"\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      kvStore?: Input<string>;\n    }>;\n  }>;\n  /**\n   * Configure the server function to connect to private subnets in a virtual private cloud or VPC. This allows it to access private resources.\n   *\n   * @example\n   * Create a `Vpc` component.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * Or reference an existing VPC.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = sst.aws.Vpc.get(\"MyVpc\", {\n   *   id: \"vpc-12345678901234567\"\n   * });\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   */\n  vpc?: FunctionArgs[\"vpc\"];\n  assets?: Input<{\n    /**\n     * Character encoding for text based assets, like HTML, CSS, JS. This is\n     * used to set the `Content-Type` header when these files are served out.\n     *\n     * If set to `\"none\"`, then no charset will be returned in header.\n     * @default `\"utf-8\"`\n     * @example\n     * ```js\n     * {\n     *   assets: {\n     *     textEncoding: \"iso-8859-1\"\n     *   }\n     * }\n     * ```\n     */\n    textEncoding?: Input<\n      \"utf-8\" | \"iso-8859-1\" | \"windows-1252\" | \"ascii\" | \"none\"\n    >;\n    /**\n     * The `Cache-Control` header used for versioned files, like `main-1234.css`. This is\n     * used by both CloudFront and the browser cache.\n     *\n     * The default `max-age` is set to 1 year.\n     * @default `\"public,max-age=31536000,immutable\"`\n     * @example\n     * ```js\n     * {\n     *   assets: {\n     *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\"\n     *   }\n     * }\n     * ```\n     */\n    versionedFilesCacheHeader?: Input<string>;\n    /**\n     * The `Cache-Control` header used for non-versioned files, like `index.html`. This is used by both CloudFront and the browser cache.\n     *\n     * The default is set to not cache on browsers, and cache for 1 day on CloudFront.\n     * @default `\"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"`\n     * @example\n     * ```js\n     * {\n     *   assets: {\n     *     nonVersionedFilesCacheHeader: \"public,max-age=0,no-cache\"\n     *   }\n     * }\n     * ```\n     */\n    nonVersionedFilesCacheHeader?: Input<string>;\n    /**\n     * Specify the `Content-Type` and `Cache-Control` headers for specific files. This allows\n     * you to override the default behavior for specific files using glob patterns.\n     *\n     * @example\n     * Apply `Cache-Control` and `Content-Type` to all zip files.\n     * ```js\n     * {\n     *   assets: {\n     *     fileOptions: [\n     *       {\n     *         files: \"**\\/*.zip\",\n     *         contentType: \"application/zip\",\n     *         cacheControl: \"private,no-cache,no-store,must-revalidate\"\n     *       }\n     *     ]\n     *   }\n     * }\n     * ```\n     * Apply `Cache-Control` to all CSS and JS files except for CSS files with `index-`\n     * prefix in the `main/` directory.\n     * ```js\n     * {\n     *   assets: {\n     *     fileOptions: [\n     *       {\n     *         files: [\"**\\/*.css\", \"**\\/*.js\"],\n     *         ignore: \"main\\/index-*.css\",\n     *         cacheControl: \"private,no-cache,no-store,must-revalidate\"\n     *       }\n     *     ]\n     *   }\n     * }\n     * ```\n     */\n    fileOptions?: Input<Prettify<BaseSiteFileOptions>[]>;\n    /**\n     * Configure if files from previous deployments should be purged from the bucket.\n     * @default `true`\n     * @example\n     * ```js\n     * {\n     *   assets: {\n     *     purge: false\n     *   }\n     * }\n     * ```\n     */\n    purge?: Input<boolean>;\n  }>;\n  /**\n   * @deprecated The `route` prop is now the recommended way to use the `Router` component\n   * to serve your site. Setting `route` will not create a standalone CloudFront\n   * distribution.\n   */\n  cdn?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Bucket resource used for uploading the assets.\n     */\n    assets?: Transform<BucketArgs>;\n    /**\n     * Transform the server Function resource.\n     */\n    server?: Transform<FunctionArgs>;\n    /**\n     * Transform the CloudFront CDN resource.\n     */\n    cdn?: Transform<CdnArgs>;\n  };\n}\n\nexport abstract class SsrSite extends Component implements Link.Linkable {\n  private cdn?: Cdn;\n  private bucket?: Bucket;\n  private server?: Output<Function>;\n  private devUrl?: Output<string>;\n  private prodUrl?: Output<string | undefined>;\n\n  protected abstract normalizeBuildCommand(\n    args: SsrSiteArgs,\n  ): Output<string> | void;\n\n  protected abstract buildPlan(\n    outputPath: Output<string>,\n    name: string,\n    args: SsrSiteArgs,\n    { bucket }: { bucket: Bucket },\n  ): Output<Plan>;\n\n  constructor(\n    type: string,\n    name: string,\n    args: SsrSiteArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(type, name, args, opts);\n    const self = this;\n\n    validateDeprecatedProps();\n    const regions = normalizeRegions();\n    const route = normalizeRoute();\n    const edge = normalizeEdge();\n    const serverTimeout = normalizeServerTimeout();\n    const buildCommand = this.normalizeBuildCommand(args);\n    const sitePath = regions.apply(() => normalizeSitePath());\n    const dev = normalizeDev();\n    const purge = output(args.assets).apply((assets) => assets?.purge ?? false);\n\n    if (dev.enabled) {\n      const server = createDevServer();\n      this.devUrl = dev.url;\n      this.registerOutputs({\n        _metadata: {\n          mode: \"placeholder\",\n          path: sitePath,\n          server: server.arn,\n        },\n        _dev: {\n          ...dev.outputs,\n          aws: { role: server.nodes.role.arn },\n        },\n      });\n      return;\n    }\n\n    const outputPath = buildApp(\n      self,\n      name,\n      args,\n      sitePath,\n      buildCommand ?? undefined,\n    );\n    const bucket = createS3Bucket();\n    const plan = validatePlan(\n      this.buildPlan(outputPath, name, args, { bucket }),\n    );\n    const timeout = all([serverTimeout, plan.server]).apply(\n      ([argsTimeout, plan]) => argsTimeout ?? plan?.timeout ?? \"20 seconds\",\n    );\n    const servers = createServers();\n    const imageOptimizer = createImageOptimizer();\n    const assetsUploaded = uploadAssets();\n    const kvNamespace = buildKvNamespace();\n\n    let distribution: Cdn | undefined;\n    let distributionId: Output<string>;\n    let kvStoreArn: Output<string>;\n    let invalidationDependsOn: Resource[] = [];\n    let prodUrl: Output<string | undefined>;\n    if (route) {\n      kvStoreArn = route.routerKvStoreArn;\n      distributionId = route.routerDistributionId;\n      invalidationDependsOn = [updateRouterKvRoutes()];\n      prodUrl = route.routerUrl;\n    } else {\n      kvStoreArn = createRequestKvStore();\n      distribution = createDistribution();\n      distributionId = distribution.nodes.distribution.id;\n      prodUrl = distribution.domainUrl.apply((domainUrl) =>\n        output(domainUrl ?? distribution!.url),\n      );\n    }\n\n    function createCachePolicy() {\n      return new cloudfront.CachePolicy(\n        `${name}ServerCachePolicy`,\n        {\n          comment: \"SST server response cache policy\",\n          defaultTtl: 0,\n          maxTtl: 31536000, // 1 year\n          minTtl: 0,\n          parametersInCacheKeyAndForwardedToOrigin: {\n            cookiesConfig: {\n              cookieBehavior: \"none\",\n            },\n            headersConfig: {\n              headerBehavior: \"whitelist\",\n              headers: {\n                items: [\"x-open-next-cache-key\"],\n              },\n            },\n            queryStringsConfig: {\n              queryStringBehavior: \"all\",\n            },\n            enableAcceptEncodingBrotli: true,\n            enableAcceptEncodingGzip: true,\n          },\n        },\n        { parent: self },\n      );\n    }\n\n    function createRequestKvStore() {\n      return edge.apply((edge) => {\n        const viewerRequest = edge?.viewerRequest;\n        if (viewerRequest?.kvStore) return output(viewerRequest?.kvStore);\n\n        return new cloudfront.KeyValueStore(\n          `${name}KvStore`,\n          {},\n          { parent: self },\n        ).arn;\n      });\n    }\n\n    function createRequestFunction() {\n      return edge.apply((edge) => {\n        const userInjection = edge?.viewerRequest?.injection ?? \"\";\n        const blockCloudfrontUrlInjection = args.domain\n          ? CF_BLOCK_CLOUDFRONT_URL_INJECTION\n          : \"\";\n        return new cloudfront.Function(\n          `${name}CloudfrontFunctionRequest`,\n          {\n            runtime: \"cloudfront-js-2.0\",\n            keyValueStoreAssociations: kvStoreArn ? [kvStoreArn] : [],\n            code: interpolate`\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  ${userInjection}\n  ${blockCloudfrontUrlInjection}\n  ${CF_ROUTER_INJECTION}\n\n  const kvNamespace = \"${kvNamespace}\";\n\n  // Load metadata\n  let metadata;\n  try {\n    const v = await cf.kvs().get(kvNamespace + \":metadata\");\n    metadata = JSON.parse(v);\n  } catch (e) {}\n\n  await routeSite(kvNamespace, metadata);\n  return event.request;\n}`,\n          },\n          { parent: self },\n        );\n      });\n    }\n\n    function createResponseFunction() {\n      return edge.apply((edge) => {\n        const userConfig = edge?.viewerResponse;\n        const userInjection = userConfig?.injection;\n        const kvStoreArn = userConfig?.kvStore;\n\n        if (!userInjection) return;\n\n        return new cloudfront.Function(\n          `${name}CloudfrontFunctionResponse`,\n          {\n            runtime: \"cloudfront-js-2.0\",\n            keyValueStoreAssociations: kvStoreArn ? [kvStoreArn] : [],\n            code: `\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  ${userInjection}\n  return event.response;\n}`,\n          },\n          { parent: self },\n        );\n      });\n    }\n\n    function createDistribution() {\n      return new Cdn(\n        ...transform(\n          args.transform?.cdn,\n          `${name}Cdn`,\n          {\n            comment: `${name} app`,\n            domain: args.domain,\n            origins: [\n              {\n                originId: \"default\",\n                domainName: \"placeholder.sst.dev\",\n                customOriginConfig: {\n                  httpPort: 80,\n                  httpsPort: 443,\n                  originProtocolPolicy: \"http-only\",\n                  originReadTimeout: 20,\n                  originSslProtocols: [\"TLSv1.2\"],\n                },\n              },\n            ],\n            defaultCacheBehavior: {\n              targetOriginId: \"default\",\n              viewerProtocolPolicy: \"redirect-to-https\",\n              allowedMethods: [\n                \"DELETE\",\n                \"GET\",\n                \"HEAD\",\n                \"OPTIONS\",\n                \"PATCH\",\n                \"POST\",\n                \"PUT\",\n              ],\n              cachedMethods: [\"GET\", \"HEAD\"],\n              compress: true,\n              cachePolicyId: args.cachePolicy ?? createCachePolicy().id,\n              // CloudFront's Managed-AllViewerExceptHostHeader policy\n              originRequestPolicyId: \"b689b0a8-53d0-40ab-baf2-68738e2966ac\",\n              functionAssociations: all([\n                createRequestFunction(),\n                createResponseFunction(),\n              ]).apply(([reqFn, resFn]) => [\n                { eventType: \"viewer-request\", functionArn: reqFn.arn },\n                ...(resFn\n                  ? [{ eventType: \"viewer-response\", functionArn: resFn.arn }]\n                  : []),\n              ]),\n            },\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    const kvUpdated = createKvEntries();\n    createInvalidation();\n\n    const server = servers.apply((servers) => servers[0]?.server);\n    this.bucket = bucket;\n    this.cdn = distribution;\n    this.server = server;\n    this.prodUrl = prodUrl;\n\n    this.registerOutputs({\n      _hint: this.url,\n      _metadata: {\n        mode: \"deployed\",\n        path: sitePath,\n        url: this.url,\n        edge: false,\n        server: server.arn,\n      },\n      _dev: {\n        ...dev.outputs,\n        aws: { role: server.nodes.role.arn },\n      },\n    });\n\n    function validateDeprecatedProps() {\n      if (args.cdn !== undefined)\n        throw new VisibleError(\n          `\"cdn\" prop is deprecated. Use the \"route.router\" prop instead to use an existing \"Router\" component to serve your site.`,\n        );\n    }\n\n    function normalizeDev() {\n      const enabled = $dev && args.dev !== false;\n      const devArgs = args.dev || {};\n\n      return {\n        enabled,\n        url: output(devArgs.url ?? URL_UNAVAILABLE),\n        outputs: {\n          title: devArgs.title,\n          command: output(devArgs.command ?? \"npm run dev\"),\n          autostart: output(devArgs.autostart ?? true),\n          directory: output(devArgs.directory ?? sitePath),\n          environment: args.environment,\n          links: output(args.link || [])\n            .apply(Link.build)\n            .apply((links) => links.map((link) => link.name)),\n        },\n      };\n    }\n\n    function normalizeSitePath() {\n      return output(args.path).apply((sitePath) => {\n        if (!sitePath) return \".\";\n\n        if (!fs.existsSync(sitePath)) {\n          throw new VisibleError(\n            `Site directory not found at \"${path.resolve(\n              sitePath,\n            )}\". Please check the path setting in your configuration.`,\n          );\n        }\n        return sitePath;\n      });\n    }\n\n    function normalizeRegions() {\n      return output(\n        args.regions ?? [getRegionOutput(undefined, { parent: self }).name],\n      ).apply((regions) => {\n        if (regions.length === 0)\n          throw new VisibleError(\n            \"No deployment regions specified. Please specify at least one region in the 'regions' property.\",\n          );\n\n        return regions.map((region) => {\n          if (\n            [\n              \"ap-south-2\",\n              \"ap-southeast-4\",\n              \"ap-southeast-5\",\n              \"ca-west-1\",\n              \"eu-south-2\",\n              \"eu-central-2\",\n              \"il-central-1\",\n              \"me-central-1\",\n            ].includes(region)\n          )\n            throw new VisibleError(\n              `Region ${region} is not supported by this component. Please select a different AWS region.`,\n            );\n\n          if (!Object.values(Region).includes(region as Region))\n            throw new VisibleError(\n              `Invalid AWS region: \"${region}\". Please specify a valid AWS region.`,\n            );\n          return region as Region;\n        });\n      });\n    }\n\n    function normalizeRoute() {\n      const route = normalizeRouteArgs(args.router, args.route);\n\n      if (route) {\n        if (args.domain)\n          throw new VisibleError(\n            `Cannot provide both \"domain\" and \"route\". Use the \"domain\" prop on the \"Router\" component when serving your site through a Router.`,\n          );\n\n        if (args.edge)\n          throw new VisibleError(\n            `Cannot provide both \"edge\" and \"route\". Use the \"edge\" prop on the \"Router\" component when serving your site through a Router.`,\n          );\n      }\n\n      return route;\n    }\n\n    function normalizeEdge() {\n      return output([args.edge, args.server?.edge]).apply(\n        ([edge, serverEdge]) => {\n          if (serverEdge)\n            throw new VisibleError(\n              `The \"server.edge\" prop is deprecated. Use the \"edge\" prop on the top level instead.`,\n            );\n\n          if (!edge) return edge;\n          return edge;\n        },\n      );\n    }\n\n    function normalizeServerTimeout() {\n      return output(args.server?.timeout).apply((v) => {\n        if (!v) return v;\n\n        const seconds = toSeconds(v);\n        if (seconds > 60) {\n          getQuota(\"cloudfront-response-timeout\").apply((quota) => {\n            if (seconds > quota)\n              throw new VisibleError(\n                `Server timeout for \"${name}\" is longer than the allowed CloudFront response timeout of ${quota} seconds. You can contact AWS Support to increase the timeout - ${CONSOLE_URL}`,\n              );\n          });\n        }\n        return v;\n      });\n    }\n\n    function createDevServer() {\n      return new Function(\n        ...transform(\n          args.transform?.server,\n          `${name}DevServer`,\n          {\n            description: `${name} dev server`,\n            runtime: \"nodejs20.x\",\n            timeout: \"20 seconds\",\n            memory: \"128 MB\",\n            bundle: path.join(\n              $cli.paths.platform,\n              \"functions\",\n              \"empty-function\",\n            ),\n            handler: \"index.handler\",\n            environment: args.environment,\n            permissions: args.permissions,\n            link: args.link,\n            dev: false,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function validatePlan(plan: Output<Plan>) {\n      return all([plan, route]).apply(([plan, route]) => {\n        if (plan.base) {\n          // starts with /\n          plan.base = !plan.base.startsWith(\"/\") ? `/${plan.base}` : plan.base;\n          // does not end with /\n          plan.base = plan.base.replace(/\\/$/, \"\");\n        }\n\n        if (route?.pathPrefix && route.pathPrefix !== \"/\") {\n          if (!plan.base)\n            throw new VisibleError(\n              `No base path found for site. You must configure the base path to match the route path prefix \"${route.pathPrefix}\".`,\n            );\n\n          if (!plan.base.startsWith(route.pathPrefix))\n            throw new VisibleError(\n              `The site base path \"${plan.base}\" must start with the route path prefix \"${route.pathPrefix}\".`,\n            );\n        }\n\n        // if copy.to has a leading slash, files will be uploaded to `/` folder in bucket\n        plan.assets.forEach((copy) => {\n          copy.to = copy.to.replace(/^\\/|\\/$/g, \"\");\n        });\n        if (plan.isrCache) {\n          plan.isrCache.to = plan.isrCache.to.replace(/^\\/|\\/$/g, \"\");\n        }\n\n        return plan;\n      });\n    }\n\n    function createS3Bucket() {\n      return new Bucket(\n        ...transform(\n          args.transform?.assets,\n          `${name}Assets`,\n          { access: \"cloudfront\" },\n          { parent: self, retainOnDelete: false },\n        ),\n      );\n    }\n\n    function createServers() {\n      return all([regions, plan.server]).apply(([regions, planServer]) => {\n        if (!planServer) return [];\n\n        return regions.map((region) => {\n          const provider = useProvider(region);\n          const server = new Function(\n            ...transform(\n              args.transform?.server,\n              `${name}Server${logicalName(region)}`,\n              {\n                ...planServer,\n                description: planServer.description ?? `${name} server`,\n                runtime: output(args.server?.runtime).apply(\n                  (v) => v ?? planServer.runtime ?? \"nodejs20.x\",\n                ),\n                timeout,\n                memory: output(args.server?.memory).apply(\n                  (v) => v ?? planServer.memory ?? \"1024 MB\",\n                ),\n                architecture: output(args.server?.architecture).apply(\n                  (v) => v ?? planServer.architecture ?? \"x86_64\",\n                ),\n                vpc: args.vpc,\n                nodejs: {\n                  format: \"esm\" as const,\n                  install: args.server?.install,\n                  loader: args.server?.loader,\n                  ...planServer.nodejs,\n                },\n                environment: output(args.environment).apply((environment) => ({\n                  ...environment,\n                  ...planServer.environment,\n                })),\n                permissions: output(args.permissions).apply((permissions) => [\n                  {\n                    actions: [\"cloudfront:CreateInvalidation\"],\n                    resources: [\"*\"],\n                  },\n                  ...(permissions ?? []),\n                  ...(planServer.permissions ?? []),\n                ]),\n                injections: [\n                  ...(args.warm\n                    ? [useServerWarmingInjection(planServer.streaming)]\n                    : []),\n                  ...(planServer.injections || []),\n                ],\n                link: output(args.link).apply((link) => [\n                  ...(planServer.link ?? []),\n                  ...(link ?? []),\n                ]),\n                layers: output(args.server?.layers).apply((layers) => [\n                  ...(planServer.layers ?? []),\n                  ...(layers ?? []),\n                ]),\n                url: true,\n                dev: false,\n                _skipHint: true,\n              },\n              { provider, parent: self },\n            ),\n          );\n\n          if (args.warm) {\n            // Create cron job\n            const cron = new Cron(\n              `${name}Warmer${logicalName(region)}`,\n              {\n                schedule: \"rate(5 minutes)\",\n                job: {\n                  description: `${name} warmer`,\n                  bundle: path.join($cli.paths.platform, \"dist\", \"ssr-warmer\"),\n                  runtime: \"nodejs20.x\",\n                  handler: \"index.handler\",\n                  timeout: \"900 seconds\",\n                  memory: \"128 MB\",\n                  dev: false,\n                  environment: {\n                    FUNCTION_NAME: server.nodes.function.name,\n                    CONCURRENCY: output(args.warm).apply((warm) =>\n                      warm.toString(),\n                    ),\n                  },\n                  link: [server],\n                  _skipMetadata: true,\n                },\n                transform: {\n                  target: (args) => {\n                    args.retryPolicy = {\n                      maximumRetryAttempts: 0,\n                      maximumEventAgeInSeconds: 60,\n                    };\n                  },\n                },\n              },\n              { provider, parent: self },\n            );\n\n            // Prewarm on deploy\n            new lambda.Invocation(\n              `${name}Prewarm${logicalName(region)}`,\n              {\n                functionName: cron.nodes.job.name,\n                triggers: {\n                  version: Date.now().toString(),\n                },\n                input: JSON.stringify({}),\n              },\n              { provider, parent: self },\n            );\n          }\n\n          return { region, server };\n        });\n      });\n    }\n\n    function createImageOptimizer() {\n      return output(plan.imageOptimizer).apply((imageOptimizer) => {\n        if (!imageOptimizer) return;\n        return new Function(\n          `${name}ImageOptimizer`,\n          {\n            timeout: \"25 seconds\",\n            logging: {\n              retention: \"3 days\",\n            },\n            permissions: [\n              {\n                actions: [\"s3:GetObject\"],\n                resources: [interpolate`${bucket.arn}/*`],\n              },\n            ],\n            ...imageOptimizer.function,\n            url: true,\n            dev: false,\n            _skipMetadata: true,\n            _skipHint: true,\n          },\n          { parent: self },\n        );\n      });\n    }\n\n    function useServerWarmingInjection(streaming?: boolean) {\n      return [\n        `if (event.type === \"warmer\") {`,\n        `  const p = new Promise((resolve) => {`,\n        `    setTimeout(() => {`,\n        `      resolve({ serverId: \"server-\" + Math.random().toString(36).slice(2, 8) });`,\n        `    }, event.delay);`,\n        `  });`,\n        ...(streaming\n          ? [\n              `  const response = await p;`,\n              `  responseStream.write(JSON.stringify(response));`,\n              `  responseStream.end();`,\n              `  return;`,\n            ]\n          : [`  return p;`]),\n        `}`,\n      ].join(\"\\n\");\n    }\n\n    function uploadAssets() {\n      return all([args.assets, route, plan, outputPath]).apply(\n        async ([assets, route, plan, outputPath]) => {\n          // Define content headers\n          const versionedFilesTTL = 31536000; // 1 year\n          const nonVersionedFilesTTL = 86400; // 1 day\n\n          const bucketFiles: BucketFile[] = [];\n\n          // Handle each copy source\n          for (const copy of [\n            ...plan.assets,\n            ...(plan.isrCache\n              ? [{ ...plan.isrCache, versionedSubDir: undefined }]\n              : []),\n          ]) {\n            // Build fileOptions\n            const fileOptions: BaseSiteFileOptions[] = [\n              // unversioned files\n              {\n                files: \"**\",\n                ignore: copy.versionedSubDir\n                  ? toPosix(path.join(copy.versionedSubDir, \"**\"))\n                  : undefined,\n                cacheControl:\n                  assets?.nonVersionedFilesCacheHeader ??\n                  `public,max-age=0,s-maxage=${nonVersionedFilesTTL},stale-while-revalidate=${nonVersionedFilesTTL}`,\n              },\n              // versioned files\n              ...(copy.versionedSubDir\n                ? [\n                    {\n                      files: toPosix(path.join(copy.versionedSubDir, \"**\")),\n                      cacheControl:\n                        assets?.versionedFilesCacheHeader ??\n                        `public,max-age=${versionedFilesTTL},immutable`,\n                    },\n                  ]\n                : []),\n              ...(assets?.fileOptions ?? []),\n            ];\n\n            // Upload files based on fileOptions\n            const filesUploaded: string[] = [];\n            for (const fileOption of fileOptions.reverse()) {\n              const files = globSync(fileOption.files, {\n                cwd: path.resolve(outputPath, copy.from),\n                nodir: true,\n                dot: true,\n                ignore: fileOption.ignore,\n              }).filter((file) => !filesUploaded.includes(file));\n\n              bucketFiles.push(\n                ...(await Promise.all(\n                  files.map(async (file) => {\n                    const source = path.resolve(outputPath, copy.from, file);\n                    const content = await fs.promises.readFile(source, \"utf-8\");\n                    const hash = crypto\n                      .createHash(\"sha256\")\n                      .update(content)\n                      .digest(\"hex\");\n                    return {\n                      source,\n                      key: toPosix(\n                        path.join(\n                          copy.to,\n                          route?.pathPrefix?.replace(/^\\//, \"\") ?? \"\",\n                          file,\n                        ),\n                      ),\n                      hash,\n                      cacheControl: fileOption.cacheControl,\n                      contentType:\n                        fileOption.contentType ?? getContentType(file, \"UTF-8\"),\n                    };\n                  }),\n                )),\n              );\n              filesUploaded.push(...files);\n            }\n          }\n\n          return new BucketFiles(\n            `${name}AssetFiles`,\n            {\n              bucketName: bucket.name,\n              files: bucketFiles,\n              purge,\n              region: getRegionOutput(undefined, { parent: self }).name,\n            },\n            { parent: self },\n          );\n        },\n      );\n    }\n\n    function buildKvNamespace() {\n      // In the case multiple sites use the same kv store, we need to namespace the keys\n      return crypto\n        .createHash(\"md5\")\n        .update(`${$app.name}-${$app.stage}-${name}`)\n        .digest(\"hex\")\n        .substring(0, 4);\n    }\n\n    function createKvEntries() {\n      const entries = all([\n        servers,\n        imageOptimizer,\n        outputPath,\n        plan,\n        bucket.nodes.bucket.bucketRegionalDomainName,\n        timeout,\n      ]).apply(\n        ([servers, imageOptimizer, outputPath, plan, bucketDomain, timeout]) =>\n          all([\n            servers.map((s) => ({ region: s.region, url: s.server!.url })),\n            imageOptimizer?.url,\n          ]).apply(([servers, imageOptimizerUrl]) => {\n            const kvEntries: Record<string, string> = {};\n            const dirs: string[] = [];\n            // Router append .html and index.html suffixes to requests to s3 routes:\n            // - `.well-known` contain files without suffix, hence will be appended .html\n            // - in the future, it might make sense for each dir to have props that controls\n            //   the suffixes ie. \"handleTrailingSlashse\"\n            const expandDirs = [\".well-known\"];\n\n            plan.assets.forEach((copy) => {\n              const processDir = (childPath = \"\", level = 0) => {\n                const currentPath = path.join(outputPath, copy.from, childPath);\n                fs.readdirSync(currentPath, { withFileTypes: true }).forEach(\n                  (item) => {\n                    // File: add to kvEntries\n                    if (item.isFile()) {\n                      kvEntries[toPosix(path.join(\"/\", childPath, item.name))] =\n                        \"s3\";\n                      return;\n                    }\n                    // Directory + deep routes: recursively process it\n                    //   In Next.js, asset requests are prefixed with is /_next/static,\n                    //   and image optimization requests are prefixed with /_next/image.\n                    //   We cannot route by 1 level of subdirs (ie. /_next/`), so we need\n                    //   to route by 2 levels of subdirs.\n                    // Directory + expand: recursively process it\n                    if (\n                      level === 0 &&\n                      (expandDirs.includes(item.name) ||\n                        item.name === copy.deepRoute)\n                    ) {\n                      processDir(path.join(childPath, item.name), level + 1);\n                      return;\n                    }\n                    // Directory + NOT expand: add to route\n                    dirs.push(toPosix(path.join(\"/\", childPath, item.name)));\n                  },\n                );\n              };\n              processDir();\n            });\n\n            kvEntries[\"metadata\"] = JSON.stringify({\n              base: plan.base,\n              custom404: plan.custom404,\n              s3: {\n                domain: bucketDomain,\n                dir: plan.assets[0].to ? \"/\" + plan.assets[0].to : \"\",\n                routes: dirs,\n              },\n              image: imageOptimizerUrl\n                ? {\n                    host: new URL(imageOptimizerUrl!).host,\n                    route: plan.imageOptimizer!.prefix,\n                  }\n                : undefined,\n              servers: servers.map((s) => [\n                new URL(s.url).host,\n                supportedRegions[s.region as keyof typeof supportedRegions].lat,\n                supportedRegions[s.region as keyof typeof supportedRegions].lon,\n              ]),\n              origin: {\n                timeouts: {\n                  readTimeout: toSeconds(timeout),\n                },\n              },\n            } satisfies KV_SITE_METADATA);\n            return kvEntries;\n          }),\n      );\n\n      return new KvKeys(\n        `${name}KvKeys`,\n        {\n          store: kvStoreArn!,\n          namespace: kvNamespace,\n          entries,\n          purge,\n        },\n        { parent: self },\n      );\n    }\n\n    function updateRouterKvRoutes() {\n      return new KvRoutesUpdate(\n        `${name}RoutesUpdate`,\n        {\n          store: route!.routerKvStoreArn,\n          namespace: route!.routerKvNamespace,\n          key: \"routes\",\n          entry: route!.apply((route) =>\n            [\"site\", kvNamespace, route!.hostPattern, route!.pathPrefix].join(\n              \",\",\n            ),\n          ),\n        },\n        { parent: self },\n      );\n    }\n\n    function createInvalidation() {\n      all([args.invalidation, outputPath, plan]).apply(\n        ([invalidationRaw, outputPath, plan]) => {\n          // Normalize invalidation\n          if (invalidationRaw === false) return;\n          const invalidation = {\n            wait: false,\n            paths: \"all\",\n            ...invalidationRaw,\n          };\n\n          // We will generate a hash based on the contents of the S3 files with cache enabled.\n          // This will be used to determine if we need to invalidate our CloudFront cache.\n          const s3Origin = plan.assets;\n          const cachedS3Files = s3Origin.filter((file) => file.cached);\n          if (cachedS3Files.length === 0) return;\n\n          // Build invalidation paths\n          const invalidationPaths: string[] = [];\n          if (invalidation.paths === \"all\") {\n            invalidationPaths.push(\"/*\");\n          } else if (invalidation.paths === \"versioned\") {\n            cachedS3Files.forEach((item) => {\n              if (!item.versionedSubDir) return;\n              invalidationPaths.push(\n                toPosix(path.join(\"/\", item.to, item.versionedSubDir, \"*\")),\n              );\n            });\n          } else {\n            invalidationPaths.push(...(invalidation?.paths || []));\n          }\n          if (invalidationPaths.length === 0) return;\n\n          // Build build ID\n          let invalidationBuildId: string;\n          if (plan.buildId) {\n            invalidationBuildId = plan.buildId;\n          } else {\n            const hash = crypto.createHash(\"md5\");\n\n            cachedS3Files.forEach((item) => {\n              // The below options are needed to support following symlinks when building zip files:\n              // - nodir: This will prevent symlinks themselves from being copied into the zip.\n              // - follow: This will follow symlinks and copy the files within.\n\n              // For versioned files, use file path for digest since file version in name should change on content change\n              if (item.versionedSubDir) {\n                globSync(\"**\", {\n                  dot: true,\n                  nodir: true,\n                  follow: true,\n                  cwd: path.resolve(\n                    outputPath,\n                    item.from,\n                    item.versionedSubDir,\n                  ),\n                }).forEach((filePath) => hash.update(filePath));\n              }\n\n              // For non-versioned files, use file content for digest\n              if (invalidation.paths !== \"versioned\") {\n                globSync(\"**\", {\n                  ignore: item.versionedSubDir\n                    ? [toPosix(path.join(item.versionedSubDir, \"**\"))]\n                    : undefined,\n                  dot: true,\n                  nodir: true,\n                  follow: true,\n                  cwd: path.resolve(outputPath, item.from),\n                }).forEach((filePath) =>\n                  hash.update(\n                    fs.readFileSync(\n                      path.resolve(outputPath, item.from, filePath),\n                      \"utf-8\",\n                    ),\n                  ),\n                );\n              }\n            });\n            invalidationBuildId = hash.digest(\"hex\");\n          }\n\n          new DistributionInvalidation(\n            `${name}Invalidation`,\n            {\n              distributionId,\n              paths: invalidationPaths,\n              version: invalidationBuildId,\n              wait: invalidation.wait,\n            },\n            {\n              parent: self,\n              dependsOn: [assetsUploaded, kvUpdated, ...invalidationDependsOn],\n            },\n          );\n        },\n      );\n    }\n  }\n\n  /**\n   * The URL of the Astro site.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return all([this.prodUrl, this.devUrl]).apply(\n      ([prodUrl, devUrl]) => (prodUrl ?? devUrl)!,\n    );\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The AWS Lambda server function that renders the site.\n       */\n      server: this.server,\n      /**\n       * The Amazon S3 Bucket that stores the assets.\n       */\n      assets: this.bucket,\n      /**\n       * The Amazon CloudFront CDN that serves the site.\n       */\n      cdn: this.cdn,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }\n}\n", "import {\n  Output,\n  ComponentResourceOptions,\n  output,\n  interpolate,\n  all,\n} from \"@pulumi/pulumi\";\nimport { DnsValidatedCertificate } from \"./dns-validated-certificate.js\";\nimport { HttpsRedirect } from \"./https-redirect.js\";\nimport { useProvider } from \"./helpers/provider.js\";\nimport { Component, Prettify, Transform, transform } from \"../component.js\";\nimport { Input } from \"../input.js\";\nimport { DistributionDeploymentWaiter } from \"./providers/distribution-deployment-waiter.js\";\nimport { Dns } from \"../dns.js\";\nimport { dns as awsDns } from \"./dns.js\";\nimport { cloudfront } from \"@pulumi/aws\";\nimport { logicalName } from \"../naming.js\";\n\nexport interface CdnDomainArgs {\n  /**\n   * The custom domain you want to use.\n   *\n   * @example\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Can also include subdomains based on the current stage.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: `${$app.stage}.example.com`\n   *   }\n   * }\n   * ```\n   */\n  name: Input<string>;\n  /**\n   * Alternate domains to be used. Visitors to the alternate domains will be redirected to the\n   * main `name`.\n   *\n   * :::note\n   * Unlike the `aliases` option, this will redirect visitors back to the main `name`.\n   * :::\n   *\n   * @example\n   * Use this to create a `www.` version of your domain and redirect visitors to the apex domain.\n   * ```js {4}\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  redirects?: Input<string[]>;\n  /**\n   * Alias domains that should be used. Unlike the `redirect` option, this keeps your visitors\n   * on this alias domain.\n   *\n   * @example\n   * So if your users visit `app2.domain.com`, they will stay on `app2.domain.com` in their\n   * browser.\n   * ```js {4}\n   * {\n   *   domain: {\n   *     name: \"app1.domain.com\",\n   *     aliases: [\"app2.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  aliases?: Input<string[]>;\n  /**\n   * The ARN of an ACM (AWS Certificate Manager) certificate that proves ownership of the\n   * domain. By default, a certificate is created and validated automatically.\n   *\n   * The certificate will be created in the `us-east-1` region as required by AWS CloudFront.\n   * If you are creating your own certificate, you must also create it in `us-east-1`.\n   *\n   * :::tip\n   * You need to pass in a `cert` for domains that are not hosted on supported `dns` providers.\n   * :::\n   *\n   * To manually set up a domain on an unsupported provider, you'll need to:\n   *\n   * 1. [Validate that you own the domain](https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html) by creating an ACM certificate. You can either validate it by setting a DNS record or by verifying an email sent to the domain owner.\n   * 2. Once validated, set the certificate ARN as the `cert` and set `dns` to `false`.\n   * 3. Add the DNS records in your provider to point to the CloudFront distribution URL.\n   *\n   * @example\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     dns: false,\n   *     cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n   *   }\n   * }\n   * ```\n   */\n  cert?: Input<string>;\n  /**\n   * The DNS provider to use for the domain. Defaults to the AWS.\n   *\n   * Takes an adapter that can create the DNS records on the provider. This can automate\n   * validating the domain and setting up the DNS routing.\n   *\n   * Supports Route 53, Cloudflare, and Vercel adapters. For other providers, you'll need\n   * to set `dns` to `false` and pass in a certificate validating ownership via `cert`.\n   *\n   * @default `sst.aws.dns`\n   *\n   * @example\n   *\n   * Specify the hosted zone ID for the Route 53 domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.aws.dns({\n   *       zone: \"Z2FDTNDATAQYW2\"\n   *     })\n   *   }\n   * }\n   * ```\n   *\n   * Use a domain hosted on Cloudflare, needs the Cloudflare provider.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Use a domain hosted on Vercel, needs the Vercel provider.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.vercel.dns()\n   *   }\n   * }\n   * ```\n   */\n  dns?: Input<false | (Dns & {})>;\n}\n\nexport interface CdnArgs {\n  /**\n   * A comment to describe the distribution. It cannot be longer than 128 characters.\n   */\n  comment?: Input<string>;\n  /**\n   * One or more origins for this distribution.\n   */\n  origins: cloudfront.DistributionArgs[\"origins\"];\n  /**\n   * One or more origin groups for this distribution.\n   */\n  originGroups?: cloudfront.DistributionArgs[\"originGroups\"];\n  /**\n   * The default cache behavior for this distribution.\n   */\n  defaultCacheBehavior: cloudfront.DistributionArgs[\"defaultCacheBehavior\"];\n  /**\n   * An ordered list of cache behaviors for this distribution. Listed in order of precedence. The first cache behavior will have precedence 0.\n   */\n  orderedCacheBehaviors?: cloudfront.DistributionArgs[\"orderedCacheBehaviors\"];\n  /**\n   * An object you want CloudFront to return when a user requests the root URL. For example, the `index.html`.\n   */\n  defaultRootObject?: cloudfront.DistributionArgs[\"defaultRootObject\"];\n  /**\n   * One or more custom error responses.\n   */\n  customErrorResponses?: cloudfront.DistributionArgs[\"customErrorResponses\"];\n  /**\n   * Set a custom domain for your distribution.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: Input<string | Prettify<CdnDomainArgs>>;\n  /**\n   * Whether to wait for the CloudFront distribution to be deployed before\n   * completing the deployment of the app. This is necessary if you need to use the\n   * distribution URL in other resources.\n   * @default `true`\n   */\n  wait?: Input<boolean>;\n  /**\n   * Tags to apply to the distribution.\n   */\n  tags?: Input<Record<string, Input<string>>>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying resources.\n   */\n  transform?: {\n    /**\n     * Transform the CloudFront distribution resource.\n     */\n    distribution: Transform<cloudfront.DistributionArgs>;\n  };\n}\n\ninterface CdnRef {\n  ref: boolean;\n  distributionID: Input<string>;\n}\n\n/**\n * The `Cdn` component is internally used by other components to deploy a CDN to AWS. It uses [Amazon CloudFront](https://aws.amazon.com/cloudfront/) and [Amazon Route 53](https://aws.amazon.com/route53/) to manage custom domains.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * @example\n *\n * You'll find this component exposed in the `transform` of other components. And you can customize the args listed here. For example:\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   transform: {\n *     cdn: (args) => {\n *       args.wait = false;\n *     }\n *   }\n * });\n * ```\n */\nexport class Cdn extends Component {\n  private distribution: Output<cloudfront.Distribution>;\n  private _domainUrl: Output<string | undefined>;\n\n  constructor(name: string, args: CdnArgs, opts?: ComponentResourceOptions) {\n    super(pulumiType, name, args, opts);\n    const parent = this;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.distribution = output(ref.distribution);\n      this._domainUrl = ref.distribution.aliases.apply((aliases) =>\n        aliases?.length ? `https://${aliases[0]}` : undefined,\n      );\n      return;\n    }\n\n    const domain = normalizeDomain();\n\n    const certificateArn = createSsl();\n    const distribution = createDistribution();\n    const waiter = createDistributionDeploymentWaiter();\n    createDnsRecords();\n    createRedirects();\n\n    this.distribution = waiter.isDone.apply(() => distribution);\n    this._domainUrl = domain?.name\n      ? interpolate`https://${domain.name}`\n      : output(undefined);\n\n    function reference() {\n      const ref = args as unknown as CdnRef;\n      const distribution = cloudfront.Distribution.get(\n        `${name}Distribution`,\n        ref.distributionID,\n        undefined,\n        { parent },\n      );\n\n      return { distribution };\n    }\n\n    function normalizeDomain() {\n      if (!args.domain) return;\n\n      return output(args.domain).apply((domain) => {\n        const norm = typeof domain === \"string\" ? { name: domain } : domain;\n\n        // validate\n        if (!norm.name) throw new Error(`Missing \"name\" for domain.`);\n        if (norm.dns === false && !norm.cert)\n          throw new Error(\n            `Need to provide a validated certificate via \"cert\" when DNS is disabled`,\n          );\n\n        return {\n          name: norm.name,\n          aliases: norm.aliases ?? [],\n          redirects: norm.redirects ?? [],\n          dns: norm.dns === false ? undefined : norm.dns ?? awsDns(),\n          cert: norm.cert,\n        };\n      });\n    }\n\n    function createSsl() {\n      if (!domain) return output(undefined);\n\n      return domain.cert.apply((cert) => {\n        if (cert) return domain.cert;\n\n        // Certificates used for CloudFront distributions are required to be\n        // created in the us-east-1 region\n        return new DnsValidatedCertificate(\n          `${name}Ssl`,\n          {\n            domainName: domain.name,\n            alternativeNames: domain.aliases,\n            dns: domain.dns.apply((dns) => dns!),\n          },\n          { parent, provider: useProvider(\"us-east-1\") },\n        ).arn;\n      });\n    }\n\n    function createDistribution() {\n      return new cloudfront.Distribution(\n        ...transform(\n          args.transform?.distribution,\n          `${name}Distribution`,\n          {\n            comment: args.comment,\n            enabled: true,\n            origins: args.origins,\n            originGroups: args.originGroups,\n            defaultCacheBehavior: args.defaultCacheBehavior,\n            orderedCacheBehaviors: args.orderedCacheBehaviors,\n            defaultRootObject: args.defaultRootObject,\n            customErrorResponses: args.customErrorResponses,\n            restrictions: {\n              geoRestriction: {\n                restrictionType: \"none\",\n              },\n            },\n            aliases: domain\n              ? output(domain).apply((domain) => [\n                  domain.name,\n                  ...domain.aliases,\n                ])\n              : [],\n            viewerCertificate: certificateArn.apply((arn) =>\n              arn\n                ? {\n                    acmCertificateArn: arn,\n                    sslSupportMethod: \"sni-only\",\n                    minimumProtocolVersion: \"TLSv1.2_2021\",\n                  }\n                : {\n                    cloudfrontDefaultCertificate: true,\n                  },\n            ),\n            waitForDeployment: false,\n            tags: args.tags,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createDistributionDeploymentWaiter() {\n      return output(args.wait).apply((wait) => {\n        return new DistributionDeploymentWaiter(\n          `${name}Waiter`,\n          {\n            distributionId: distribution.id,\n            etag: distribution.etag,\n            wait: wait ?? true,\n          },\n          { parent, ignoreChanges: wait ? undefined : [\"*\"] },\n        );\n      });\n    }\n\n    function createDnsRecords() {\n      if (!domain) return;\n\n      domain.apply((domain) => {\n        if (!domain.dns) return;\n\n        const existing: string[] = [];\n        for (const [i, recordName] of [\n          domain.name,\n          ...domain.aliases,\n        ].entries()) {\n          // Note: The way `dns` is implemented, the logical name for the DNS record is\n          // based on the sanitized version of the record name (ie. logicalName()). This\n          // means the logical name for `*.sst.sh` and `sst.sh` will trash b/c `*.` is\n          // stripped out.\n          // ```\n          // domain: {\n          //   name: \"*.sst.sh\",\n          //   aliases: ['sst.sh'],\n          // },\n          // ```\n          //\n          // Ideally, we don't sanitize the logical name. But that's a breaking change.\n          //\n          // As a workaround, starting v3.0.79, we prefix the logical name with a unique\n          // index for records with logical names that will trash.\n          const key = logicalName(recordName);\n          const namePrefix = existing.includes(key) ? `${name}${i}` : name;\n          existing.push(key);\n\n          domain.dns.createAlias(\n            namePrefix,\n            {\n              name: recordName,\n              aliasName: distribution.domainName,\n              aliasZone: distribution.hostedZoneId,\n            },\n            { parent },\n          );\n        }\n      });\n    }\n\n    function createRedirects(): void {\n      if (!domain) return;\n\n      all([domain.cert, domain.redirects, domain.dns]).apply(\n        ([cert, redirects, dns]) => {\n          if (!redirects.length) return;\n\n          new HttpsRedirect(\n            `${name}Redirect`,\n            {\n              sourceDomains: redirects,\n              targetDomain: domain.name,\n              cert: cert ? domain.cert.apply((cert) => cert!) : undefined,\n              dns: dns ? domain.dns.apply((dns) => dns!) : undefined,\n            },\n            { parent },\n          );\n        },\n      );\n    }\n  }\n\n  /**\n   * The CloudFront URL of the distribution.\n   */\n  public get url() {\n    return interpolate`https://${this.distribution.domainName}`;\n  }\n\n  /**\n   * If the custom domain is enabled, this is the URL of the distribution with the\n   * custom domain.\n   */\n  public get domainUrl() {\n    return this._domainUrl;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon CloudFront distribution.\n       */\n      distribution: this.distribution,\n    };\n  }\n\n  /**\n   * Reference an existing CDN with the given distribution ID. This is useful when\n   * you create a Router in one stage and want to share it in another. It avoids having to\n   * create a new Router in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share Routers across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param distributionID The id of the existing CDN distribution.\n   * @param opts? Resource options.\n   */\n  public static get(\n    name: string,\n    distributionID: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Cdn(\n      name,\n      {\n        ref: true,\n        distributionID,\n      } satisfies CdnRef as unknown as CdnArgs,\n      opts,\n    );\n  }\n}\n\nconst pulumiType = \"sst:aws:CDN\";\n// @ts-expect-error\nCdn.__pulumiType = pulumiType;\n", "import { ComponentResourceOptions, Output, all } from \"@pulumi/pulumi\";\nimport { Component } from \"../component\";\nimport { Input } from \"../input.js\";\nimport { Dns } from \"../dns\";\nimport { acm } from \"@pulumi/aws\";\n\n/**\n * Properties to create a DNS validated certificate managed by AWS Certificate Manager.\n */\nexport interface DnsValidatedCertificateArgs {\n  /**\n   * The fully qualified domain name in the certificate.\n   */\n  domainName: Input<string>;\n  /**\n   * Set of domains that should be SANs in the issued certificate\n   */\n  alternativeNames?: Input<string[]>;\n  /**\n   * The DNS adapter you want to use for managing DNS records.\n   */\n  dns: Input<Dns & {}>;\n}\n\nexport class DnsValidatedCertificate extends Component {\n  private certificateValidation:\n    | acm.CertificateValidation\n    | Output<acm.CertificateValidation>;\n\n  constructor(\n    name: string,\n    args: DnsValidatedCertificateArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n    const { domainName, alternativeNames, dns } = args;\n\n    const certificate = createCertificate();\n    const records = createDnsRecords();\n    this.certificateValidation = validateCertificate();\n\n    function createCertificate() {\n      return new acm.Certificate(\n        `${name}Certificate`,\n        {\n          domainName,\n          validationMethod: \"DNS\",\n          subjectAlternativeNames: alternativeNames ?? [],\n        },\n        { parent },\n      );\n    }\n\n    function createDnsRecords() {\n      return all([dns, domainName, certificate.domainValidationOptions]).apply(\n        ([dns, domainName, options]) => {\n          // filter unique records\n          const records: string[] = [];\n          options = options.filter((option) => {\n            const key = option.resourceRecordType + option.resourceRecordName;\n            if (records.includes(key)) return false;\n            records.push(key);\n            return true;\n          });\n\n          // create CAA record if domain not hosted on Route53\n          const caaRecords =\n            dns.provider === \"aws\"\n              ? undefined\n              : dns.createCaa(name, domainName, { parent });\n\n          // create records\n          return options.map((option) =>\n            dns.createRecord(\n              name,\n              {\n                type: option.resourceRecordType,\n                name: option.resourceRecordName,\n                value: option.resourceRecordValue,\n              },\n              { parent, dependsOn: caaRecords ? [...caaRecords] : [] },\n            ),\n          );\n        },\n      );\n    }\n\n    function validateCertificate() {\n      return new acm.CertificateValidation(\n        `${name}Validation`,\n        {\n          certificateArn: certificate.arn,\n        },\n        { parent, dependsOn: records },\n      );\n    }\n  }\n\n  public get arn() {\n    return this.certificateValidation.certificateArn;\n  }\n}\n\nconst __pulumiType = \"sst:aws:Certificate\";\n// @ts-expect-error\nDnsValidatedCertificate.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, all, output } from \"@pulumi/pulumi\";\nimport { DnsValidatedCertificate } from \"./dns-validated-certificate.js\";\nimport { Bucket } from \"./bucket.js\";\nimport { Component } from \"../component.js\";\nimport { useProvider } from \"./helpers/provider.js\";\nimport { Input } from \"../input.js\";\nimport { Dns } from \"../dns.js\";\nimport { cloudfront, s3 } from \"@pulumi/aws\";\nimport { CF_BLOCK_CLOUDFRONT_URL_INJECTION } from \"./router.js\";\n\n/**\n * Properties to configure an HTTPS Redirect\n */\nexport interface HttpsRedirectArgs {\n  /**\n   * The redirect target fully qualified domain name (FQDN). An alias record\n   * will be created that points to your CloudFront distribution. Root domain\n   * or sub-domain can be supplied.\n   */\n  targetDomain: Input<string>;\n  /**\n   * The domain names that will redirect to `targetDomain`\n   *\n   * @default Domain name of the hosted zone\n   */\n  sourceDomains: Input<string[]>;\n  /**\n   * The ARN of an ACM (AWS Certificate Manager) certificate that proves ownership of the\n   * domain. By default, a certificate is created and validated automatically.\n   */\n  cert?: Input<string>;\n  /**\n   * The DNS adapter you want to use for managing DNS records.\n   */\n  dns?: Input<Dns & {}>;\n}\n\n/**\n * Allows creating a domainA -> domainB redirect using CloudFront and S3.\n * You can specify multiple domains to be redirected.\n */\nexport class HttpsRedirect extends Component {\n  constructor(\n    name: string,\n    args: HttpsRedirectArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    validateArgs();\n    const certificateArn = createSsl();\n    const bucket = createBucket();\n    const bucketWebsite = createBucketWebsite();\n    const distribution = createDistribution();\n    createDnsRecords();\n\n    function validateArgs() {\n      if (!args.dns && !args.cert)\n        throw new Error(\n          `Need to provide a validated certificate via \"cert\" when DNS is disabled`,\n        );\n    }\n\n    function createSsl() {\n      if (args.cert) return args.cert;\n\n      return new DnsValidatedCertificate(\n        `${name}Ssl`,\n        {\n          domainName: output(args.sourceDomains).apply((domains) => domains[0]),\n          alternativeNames: output(args.sourceDomains).apply((domains) =>\n            domains.slice(1),\n          ),\n          dns: args.dns!,\n        },\n        { parent, provider: useProvider(\"us-east-1\") },\n      ).arn;\n    }\n\n    function createBucket() {\n      return new Bucket(`${name}Bucket`, {}, { parent });\n    }\n\n    function createBucketWebsite() {\n      return new s3.BucketWebsiteConfigurationV2(\n        `${name}BucketWebsite`,\n        {\n          bucket: bucket.name,\n          redirectAllRequestsTo: {\n            hostName: args.targetDomain,\n            protocol: \"https\",\n          },\n        },\n        { parent },\n      );\n    }\n\n    function createDistribution() {\n      return new cloudfront.Distribution(\n        `${name}Distribution`,\n        {\n          enabled: true,\n          waitForDeployment: false,\n          aliases: args.sourceDomains,\n          restrictions: {\n            geoRestriction: {\n              restrictionType: \"none\",\n            },\n          },\n          comment: all([args.targetDomain, args.sourceDomains]).apply(\n            ([targetDomain, sourceDomains]) => {\n              const comment = `Redirect to ${targetDomain} from ${sourceDomains.join(\n                \", \",\n              )}`;\n              return comment.length > 128\n                ? comment.slice(0, 125) + \"...\"\n                : comment;\n            },\n          ),\n          priceClass: \"PriceClass_All\",\n          viewerCertificate: {\n            acmCertificateArn: certificateArn,\n            sslSupportMethod: \"sni-only\",\n          },\n          defaultCacheBehavior: {\n            allowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\"],\n            targetOriginId: \"s3Origin\",\n            viewerProtocolPolicy: \"redirect-to-https\",\n            cachedMethods: [\"GET\", \"HEAD\"],\n            forwardedValues: {\n              cookies: { forward: \"none\" },\n              queryString: false,\n            },\n            functionAssociations: [\n              {\n                eventType: \"viewer-request\",\n                functionArn: new cloudfront.Function(\n                  `${name}CloudfrontFunctionRequest`,\n                  {\n                    runtime: \"cloudfront-js-2.0\",\n                    code: `\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  ${CF_BLOCK_CLOUDFRONT_URL_INJECTION}\n  return event.request;\n}`,\n                  },\n                ).arn,\n              },\n            ],\n          },\n          origins: [\n            {\n              originId: \"s3Origin\",\n              domainName: bucketWebsite.websiteEndpoint,\n              customOriginConfig: {\n                httpPort: 80,\n                httpsPort: 443,\n                originProtocolPolicy: \"http-only\",\n                originSslProtocols: [\"TLSv1.2\"],\n              },\n            },\n          ],\n        },\n        { parent },\n      );\n    }\n\n    function createDnsRecords() {\n      if (!args.dns) return;\n\n      all([args.dns, args.sourceDomains]).apply(([dns, sourceDomains]) => {\n        for (const recordName of sourceDomains) {\n          dns.createAlias(\n            name,\n            {\n              name: recordName,\n              aliasName: distribution.domainName,\n              aliasZone: distribution.hostedZoneId,\n            },\n            { parent },\n          );\n        }\n      });\n    }\n  }\n}\n\nconst __pulumiType = \"sst:aws:HttpsRedirect\";\n// @ts-expect-error\nHttpsRedirect.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  output,\n  interpolate,\n  all,\n  Output,\n} from \"@pulumi/pulumi\";\nimport { hashStringToPrettyString, logicalName } from \"../naming\";\nimport { Component, Prettify, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { Duration, toSeconds } from \"../duration\";\nimport { VisibleError } from \"../error\";\nimport { parseBucketArn } from \"./helpers/arn\";\nimport { BucketLambdaSubscriber } from \"./bucket-lambda-subscriber\";\nimport { iam, s3 } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\nimport { BucketQueueSubscriber } from \"./bucket-queue-subscriber\";\nimport { BucketTopicSubscriber } from \"./bucket-topic-subscriber\";\nimport { Queue } from \"./queue\";\nimport { SnsTopic } from \"./sns-topic\";\nimport { BucketNotification } from \"./bucket-notification\";\n\ninterface BucketCorsArgs {\n  /**\n   * The HTTP headers that origins can include in requests to the bucket.\n   * @default `[\"*\"]`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     allowHeaders: [\"date\", \"keep-alive\", \"x-custom-header\"]\n   *   }\n   * }\n   * ```\n   */\n  allowHeaders?: Input<Input<string>[]>;\n  /**\n   * The origins that can access the bucket.\n   * @default `[\"*\"]`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     allowOrigins: [\"https://www.example.com\", \"http://localhost:60905\"]\n   *   }\n   * }\n   * ```\n   * Or the wildcard for all origins.\n   * ```js\n   * {\n   *   cors: {\n   *     allowOrigins: [\"*\"]\n   *   }\n   * }\n   * ```\n   */\n  allowOrigins?: Input<Input<string>[]>;\n  /**\n   * The HTTP methods that are allowed when calling the bucket.\n   * @default `[\"DELETE\" | \"GET\" | \"HEAD\" | \"POST\" | \"PUT\"]`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     allowMethods: [\"GET\", \"POST\", \"DELETE\"]\n   *   }\n   * }\n   * ```\n   */\n  allowMethods?: Input<Input<\"DELETE\" | \"GET\" | \"HEAD\" | \"POST\" | \"PUT\">[]>;\n  /**\n   * The HTTP headers you want to expose to an origin that calls the bucket.\n   * @default `[]`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     exposeHeaders: [\"date\", \"keep-alive\", \"x-custom-header\"]\n   *   }\n   * }\n   * ```\n   */\n  exposeHeaders?: Input<Input<string>[]>;\n  /**\n   * The maximum amount of time the browser can cache results of a preflight request. By\n   * default the browser doesn't cache the results. The maximum value is `86400 seconds` or `1 day`.\n   * @default `\"0 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     maxAge: \"1 day\"\n   *   }\n   * }\n   * ```\n   */\n  maxAge?: Input<Duration>;\n}\n\nexport interface BucketArgs {\n  /**\n   * Enable public read access for all the files in the bucket.\n   *\n   * :::tip\n   * You don't need to enable this if you're using CloudFront to serve files from the bucket.\n   * :::\n   *\n   * Should only be turned on if you want to host public files directly from the bucket.\n   * @deprecated Use `access` instead.\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   public: true\n   * }\n   * ```\n   */\n  public?: Input<boolean>;\n  /**\n   * Enable public read access for all the files in the bucket. By default, no access is\n   * granted.\n   *\n   * :::tip\n   * If you are using the `Router` to serve files from this bucket, you need to allow\n   * `cloudfront` access the bucket.\n   * :::\n   *\n   * This adds a statement to the bucket policy that either allows `public` access or just\n   * `cloudfront` access.\n   *\n   * @example\n   * ```js\n   * {\n   *   access: \"public\"\n   * }\n   * ```\n   */\n  access?: Input<\"public\" | \"cloudfront\">;\n  /**\n   * Configure the policy for the bucket.\n   *\n   * @example\n   * Restrict Access to Specific IP Addresses\n   *\n   * ```js\n   * {\n   *   policy: [{\n   *     actions: [\"s3:*\"],\n   *     principals: \"*\",\n   *     conditions: [\n   *       {\n   *         test: \"IpAddress\",\n   *         variable: \"aws:SourceIp\",\n   *         values: [\"10.0.0.0/16\"]\n   *       }\n   *     ]\n   *   }]\n   * }\n   * ```\n   *\n   * Allow Specific IAM User Access\n   *\n   * ```js\n   * {\n   *   policy: [{\n   *     actions: [\"s3:*\"],\n   *     principals: [{\n   *       type: \"aws\",\n   *       identifiers: [\"arn:aws:iam::123456789012:user/specific-user\"]\n   *     }],\n   *   }]\n   * }\n   * ```\n   *\n   * Cross-Account Access\n   *\n   * ```js\n   * {\n   *   policy: [{\n   *     actions: [\"s3:GetObject\", \"s3:ListBucket\"],\n   *     principals: [{\n   *       type: \"aws\",\n   *       identifiers: [\"123456789012\"]\n   *     }],\n   *   }]\n   * }\n   * ```\n   */\n  policy?: Input<\n    Input<{\n      /**\n       * Configures whether the permission is allowed or denied.\n       * @default `\"allow\"`\n       * @example\n       * ```ts\n       * {\n       *   effect: \"deny\"\n       * }\n       * ```\n       */\n      effect?: Input<\"allow\" | \"deny\">;\n      /**\n       * The [IAM actions](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html#actions_table) that can be performed.\n       * @example\n       * ```js\n       * {\n       *   actions: [\"s3:*\"]\n       * }\n       * ```\n       */\n      actions: Input<Input<string>[]>;\n      /**\n       * The principals that can perform the actions.\n       * @example\n       * Allow anyone to perform the actions.\n       *\n       * ```js\n       * {\n       *   principals: \"*\"\n       * }\n       * ```\n       *\n       * Allow anyone within an AWS account.\n       *\n       * ```js\n       * {\n       *   principals: [{ type: \"aws\", identifiers: [\"123456789012\"] }]\n       * }\n       * ```\n       *\n       * Allow specific IAM roles.\n       * ```js\n       * {\n       *   principals: [{\n       *     type: \"aws\",\n       *     identifiers: [\n       *       \"arn:aws:iam::123456789012:role/MyRole\",\n       *       \"arn:aws:iam::123456789012:role/MyOtherRole\"\n       *     ]\n       *   }]\n       * }\n       * ```\n       *\n       * Allow AWS CloudFront.\n       * ```js\n       * {\n       *   principals: [{ type: \"service\", identifiers: [\"cloudfront.amazonaws.com\"] }]\n       * }\n       * ```\n       *\n       * Allow OIDC federated users.\n       * ```js\n       * {\n       *   principals: [{\n       *     type: \"federated\",\n       *     identifiers: [\"accounts.google.com\"]\n       *   }]\n       * }\n       * ```\n       *\n       * Allow SAML federated users.\n       * ```js\n       * {\n       *   principals: [{\n       *     type: \"federated\",\n       *     identifiers: [\"arn:aws:iam::123456789012:saml-provider/provider-name\"]\n       *   }]\n       * }\n       * ```\n       *\n       * Allow Canonical User IDs.\n       * ```js\n       * {\n       *   principals: [{\n       *     type: \"canonical\",\n       *     identifiers: [\"79a59df900b949e55d96a1e698fbacedfd6e09d98eacf8f8d5218e7cd47ef2be\"]\n       *   }]\n       * }\n       * ```\n       *\n       * Allow specific IAM users.\n       *\n       */\n      principals: Input<\n        | \"*\"\n        | Input<{\n            type: Input<\"aws\" | \"service\" | \"federated\" | \"canonical\">;\n            identifiers: Input<Input<string>[]>;\n          }>[]\n      >;\n      /**\n       * Configure specific conditions for when the policy is in effect.\n       * @example\n       * ```js\n       * {\n       *   conditions: [\n       *     {\n       *       test: \"StringEquals\",\n       *       variable: \"s3:x-amz-server-side-encryption\",\n       *       values: [\"AES256\"]\n       *     }\n       *   ]\n       * }\n       * ```\n       */\n      conditions?: Input<\n        Input<{\n          /**\n           * Name of the [IAM condition operator](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_condition_operators.html) to evaluate.\n           */\n          test: Input<string>;\n          /**\n           * Name of a [Context Variable](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements.html#AvailableKeys) to apply the condition to. Context variables may either be standard AWS variables starting with `aws:` or service-specific variables prefixed with the service name.\n           */\n          variable: Input<string>;\n          /**\n           * The values to evaluate the condition against. If multiple values are provided, the condition matches if at least one of them applies. That is, AWS evaluates multiple values as though using an \"OR\" boolean operation.\n           */\n          values: Input<Input<string>[]>;\n        }>[]\n      >;\n      /**\n       * The S3 file paths that the policy is applied to. The paths are specified using\n       * the [S3 path format](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-prefixes.html).\n       * The bucket arn will be prepended to the paths when constructing the policy.\n       * @default `[\"\", \"*\"]`\n       * @example\n       * Apply the policy to the bucket itself.\n       * ```js\n       * {\n       *   paths: [\"\"]\n       * }\n       * ```\n       *\n       * Apply to all files in the bucket.\n       * ```js\n       * {\n       *   paths: [\"*\"]\n       * }\n       * ```\n       *\n       * Apply to all files in the `images/` folder.\n       * ```js\n       * {\n       *   paths: [\"images/*\"]\n       * }\n       * ```\n       */\n      paths?: Input<Input<string>[]>;\n    }>[]\n  >;\n  /**\n   * Enforce HTTPS for all requests to the bucket.\n   *\n   * By default, the bucket policy will automatically block any HTTP requests.\n   * This is done using the `aws:SecureTransport` condition key.\n   *\n   * @default true\n   * @example\n   * ```js\n   * {\n   *   enforceHttps: false\n   * }\n   * ```\n   */\n  enforceHttps?: Input<boolean>;\n  /**\n   * The CORS configuration for the bucket. Defaults to `true`, which is the same as:\n   *\n   * ```js\n   * {\n   *   cors: {\n   *     allowHeaders: [\"*\"],\n   *     allowOrigins: [\"*\"],\n   *     allowMethods: [\"DELETE\", \"GET\", \"HEAD\", \"POST\", \"PUT\"],\n   *     exposeHeaders: [],\n   *     maxAge: \"0 seconds\"\n   *   }\n   * }\n   * ```\n   *\n   * @default `true`\n   */\n  cors?: Input<false | Prettify<BucketCorsArgs>>;\n  /**\n   * Enable versioning for the bucket.\n   *\n   * Bucket versioning enables you to store multiple versions of an object, protecting\n   * against accidental deletion or overwriting.\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   versioning: true\n   * }\n   * ```\n   */\n  versioning?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the S3 Bucket resource.\n     */\n    bucket?: Transform<s3.BucketV2Args>;\n    /**\n     * Transform the S3 Bucket CORS configuration resource.\n     */\n    cors?: Transform<s3.BucketCorsConfigurationV2Args>;\n    /**\n     * Transform the S3 Bucket Policy resource.\n     */\n    policy?: Transform<s3.BucketPolicyArgs>;\n    /**\n     * Transform the S3 Bucket versioning resource.\n     */\n    versioning?: Transform<s3.BucketVersioningV2Args>;\n    /**\n     * Transform the public access block resource that's attached to the Bucket.\n     *\n     * Returns `false` if the public access block resource should not be created.\n     */\n    publicAccessBlock?: Transform<s3.BucketPublicAccessBlockArgs> | false;\n  };\n}\n\nexport interface BucketNotificationsArgs {\n  /**\n   * A list of subscribers that'll be notified when events happen in the bucket.\n   */\n  notifications: Input<\n    Input<{\n      /**\n       * The name of the subscriber.\n       */\n      name: Input<string>;\n      /**\n       * The function that'll be notified.\n       *\n       * @example\n       * ```js\n       * {\n       *   name: \"MySubscriber\",\n       *   function: \"src/subscriber.handler\"\n       * }\n       * ```\n       *\n       * Customize the subscriber function. The `link` ensures the subscriber can access the\n       * bucket through the [SDK](/docs/reference/sdk/).\n       *\n       * ```js\n       * {\n       *   name: \"MySubscriber\",\n       *   function: {\n       *     handler: \"src/subscriber.handler\",\n       *     timeout: \"60 seconds\",\n       *     link: [bucket]\n       *   }\n       * }\n       * ```\n       *\n       * Or pass in the ARN of an existing Lambda function.\n       *\n       * ```js\n       * {\n       *   name: \"MySubscriber\",\n       *   function: \"arn:aws:lambda:us-east-1:123456789012:function:my-function\"\n       * }\n       * ```\n       */\n      function?: Input<string | FunctionArgs | FunctionArn>;\n      /**\n       * The Queue that'll be notified.\n       *\n       * @example\n       * For example, let's say you have a queue.\n       *\n       * ```js title=\"sst.config.ts\"\n       * const myQueue = new sst.aws.Queue(\"MyQueue\");\n       * ```\n       *\n       * You can subscribe to this bucket with it.\n       *\n       * ```js\n       * {\n       *   name: \"MySubscriber\",\n       *   queue: myQueue\n       * }\n       * ```\n       *\n       * Or pass in the ARN of an existing SQS queue.\n       *\n       * ```js\n       * {\n       *   name: \"MySubscriber\",\n       *   queue: \"arn:aws:sqs:us-east-1:123456789012:my-queue\"\n       * }\n       * ```\n       */\n      queue?: Input<string | Queue>;\n      /**\n       * The SNS topic that'll be notified.\n       *\n       * @example\n       * For example, let's say you have a topic.\n       *\n       * ```js title=\"sst.config.ts\"\n       * const myTopic = new sst.aws.SnsTopic(\"MyTopic\");\n       * ```\n       *\n       * You can subscribe to this bucket with it.\n       *\n       * ```js\n       * {\n       *   name: \"MySubscriber\",\n       *   topic: myTopic\n       * }\n       * ```\n       *\n       * Or pass in the ARN of an existing SNS topic.\n       *\n       * ```js\n       * {\n       *   name: \"MySubscriber\",\n       *   topic: \"arn:aws:sns:us-east-1:123456789012:my-topic\"\n       * }\n       * ```\n       */\n      topic?: Input<string | SnsTopic>;\n      /**\n       * A list of S3 event types that'll trigger a notification.\n       * @default All S3 events\n       * @example\n       * ```js\n       * {\n       *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n       * }\n       * ```\n       */\n      events?: Input<\n        Input<\n          | \"s3:ObjectCreated:*\"\n          | \"s3:ObjectCreated:Put\"\n          | \"s3:ObjectCreated:Post\"\n          | \"s3:ObjectCreated:Copy\"\n          | \"s3:ObjectCreated:CompleteMultipartUpload\"\n          | \"s3:ObjectRemoved:*\"\n          | \"s3:ObjectRemoved:Delete\"\n          | \"s3:ObjectRemoved:DeleteMarkerCreated\"\n          | \"s3:ObjectRestore:*\"\n          | \"s3:ObjectRestore:Post\"\n          | \"s3:ObjectRestore:Completed\"\n          | \"s3:ObjectRestore:Delete\"\n          | \"s3:ReducedRedundancyLostObject\"\n          | \"s3:Replication:*\"\n          | \"s3:Replication:OperationFailedReplication\"\n          | \"s3:Replication:OperationMissedThreshold\"\n          | \"s3:Replication:OperationReplicatedAfterThreshold\"\n          | \"s3:Replication:OperationNotTracked\"\n          | \"s3:LifecycleExpiration:*\"\n          | \"s3:LifecycleExpiration:Delete\"\n          | \"s3:LifecycleExpiration:DeleteMarkerCreated\"\n          | \"s3:LifecycleTransition\"\n          | \"s3:IntelligentTiering\"\n          | \"s3:ObjectTagging:*\"\n          | \"s3:ObjectTagging:Put\"\n          | \"s3:ObjectTagging:Delete\"\n          | \"s3:ObjectAcl:Put\"\n        >[]\n      >;\n      /**\n       * An S3 object key prefix that will trigger a notification.\n       * @example\n       * To be notified for all the objects in the `images/` folder.\n       * ```js\n       * {\n       *   filterPrefix: \"images/\"\n       * }\n       * ```\n       */\n      filterPrefix?: Input<string>;\n      /**\n       * An S3 object key suffix that will trigger the notification.\n       * @example\n       * To be notified for all the objects with the `.jpg` suffix.\n       * ```js\n       * {\n       *  filterSuffix: \".jpg\"\n       * }\n       * ```\n       */\n      filterSuffix?: Input<string>;\n    }>[]\n  >;\n  /**\n   * [Transform](/docs/components#transform) how this notification creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the S3 Bucket Notification resource.\n     */\n    notification?: Transform<s3.BucketNotificationArgs>;\n  };\n}\n\n/**\n * @internal\n */\nexport interface BucketSubscriberArgs {\n  /**\n   * A list of S3 event types that'll trigger the notification.\n   * @default All S3 events\n   * @example\n   * ```js\n   * {\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * }\n   * ```\n   */\n  events?: Input<\n    Input<\n      | \"s3:ObjectCreated:*\"\n      | \"s3:ObjectCreated:Put\"\n      | \"s3:ObjectCreated:Post\"\n      | \"s3:ObjectCreated:Copy\"\n      | \"s3:ObjectCreated:CompleteMultipartUpload\"\n      | \"s3:ObjectRemoved:*\"\n      | \"s3:ObjectRemoved:Delete\"\n      | \"s3:ObjectRemoved:DeleteMarkerCreated\"\n      | \"s3:ObjectRestore:*\"\n      | \"s3:ObjectRestore:Post\"\n      | \"s3:ObjectRestore:Completed\"\n      | \"s3:ObjectRestore:Delete\"\n      | \"s3:ReducedRedundancyLostObject\"\n      | \"s3:Replication:*\"\n      | \"s3:Replication:OperationFailedReplication\"\n      | \"s3:Replication:OperationMissedThreshold\"\n      | \"s3:Replication:OperationReplicatedAfterThreshold\"\n      | \"s3:Replication:OperationNotTracked\"\n      | \"s3:LifecycleExpiration:*\"\n      | \"s3:LifecycleExpiration:Delete\"\n      | \"s3:LifecycleExpiration:DeleteMarkerCreated\"\n      | \"s3:LifecycleTransition\"\n      | \"s3:IntelligentTiering\"\n      | \"s3:ObjectTagging:*\"\n      | \"s3:ObjectTagging:Put\"\n      | \"s3:ObjectTagging:Delete\"\n      | \"s3:ObjectAcl:Put\"\n    >[]\n  >;\n  /**\n   * An S3 object key prefix that will trigger the notification.\n   * @example\n   * To filter for all the objects in the `images/` folder.\n   * ```js\n   * {\n   *   filterPrefix: \"images/\"\n   * }\n   * ```\n   */\n  filterPrefix?: Input<string>;\n  /**\n   * An S3 object key suffix that will trigger the notification.\n   * @example\n   * To filter for all the objects with the `.jpg` suffix.\n   * ```js\n   * {\n   *  filterSuffix: \".jpg\"\n   * }\n   * ```\n   */\n  filterSuffix?: Input<string>;\n  /**\n   * [Transform](/docs/components#transform) how this notification creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the S3 Bucket Notification resource.\n     */\n    notification?: Transform<s3.BucketNotificationArgs>;\n  };\n}\n\ninterface BucketRef {\n  ref: boolean;\n  bucket: s3.BucketV2;\n}\n\n/**\n * The `Bucket` component lets you add an [AWS S3 Bucket](https://aws.amazon.com/s3/) to\n * your app.\n *\n * @example\n *\n * #### Minimal example\n *\n * ```ts title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n * ```\n *\n * #### Public read access\n *\n * Enable `public` read access for all the files in the bucket. Useful for hosting public files.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Bucket(\"MyBucket\", {\n *   access: \"public\"\n * });\n * ```\n *\n * #### Add a subscriber\n *\n * ```ts title=\"sst.config.ts\"\n * bucket.notify({\n *   notifications: [\n *     {\n *       name: \"MySubscriber\",\n *       function: \"src/subscriber.handler\"\n *     }\n *   ]\n * });\n * ```\n *\n * #### Link the bucket to a resource\n *\n * You can link the bucket to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * Once linked, you can generate a pre-signed URL to upload files in your app.\n *\n * ```ts title=\"app/page.tsx\" {1,7}\n * import { Resource } from \"sst\";\n * import { getSignedUrl } from \"@aws-sdk/s3-request-presigner\";\n * import { S3Client, PutObjectCommand } from \"@aws-sdk/client-s3\";\n *\n * const command = new PutObjectCommand({\n *    Key: \"file.txt\",\n *    Bucket: Resource.MyBucket.name\n *  });\n *  await getSignedUrl(new S3Client({}), command);\n * ```\n */\nexport class Bucket extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private isSubscribed: boolean = false;\n  private bucket: Output<s3.BucketV2>;\n\n  constructor(\n    name: string,\n    args: BucketArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    this.constructorName = name;\n    this.constructorOpts = opts;\n\n    if (args && \"ref\" in args) {\n      const ref = args as BucketRef;\n      this.bucket = output(ref.bucket);\n      return;\n    }\n\n    const parent = this;\n    const access = normalizeAccess();\n    const enforceHttps = output(args.enforceHttps ?? true);\n    const policyArgs = normalizePolicy();\n\n    const bucket = createBucket();\n    createVersioning();\n    const publicAccessBlock = createPublicAccess();\n    const policy = createBucketPolicy();\n    createCorsRule();\n\n    // Ensure the policy is created when the bucket is used in another component\n    // (ie. bucket.name). Also, a bucket can only have one policy. We want to ensure\n    // the policy created here is created first. And SST will throw an error if\n    // another policy is created after this one.\n    this.bucket = policy.urn.apply(() => bucket);\n\n    function normalizeAccess() {\n      return all([args.public, args.access]).apply(([pub, access]) =>\n        pub === true ? \"public\" : access,\n      );\n    }\n\n    function normalizePolicy() {\n      return output(args.policy ?? []).apply((policy) =>\n        policy.map((p) => ({\n          ...p,\n          effect:\n            p.effect && p.effect.charAt(0).toUpperCase() + p.effect.slice(1),\n          principals:\n            p.principals === \"*\"\n              ? [{ type: \"*\", identifiers: [\"*\"] }]\n              : p.principals.map((i) => ({\n                  ...i,\n                  type: {\n                    aws: \"AWS\",\n                    service: \"Service\",\n                    federated: \"Federated\",\n                    canonical: \"Canonical\",\n                  }[i.type],\n                })),\n          paths: p.paths\n            ? p.paths.map((path) => path.replace(/^\\//, \"\"))\n            : [\"\", \"*\"],\n        })),\n      );\n    }\n\n    function createBucket() {\n      return new s3.BucketV2(\n        ...transform(\n          args.transform?.bucket,\n          `${name}Bucket`,\n          {\n            forceDestroy: true,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createVersioning() {\n      return output(args.versioning).apply((versioning) => {\n        if (!versioning) return;\n\n        return new s3.BucketVersioningV2(\n          ...transform(\n            args.transform?.versioning,\n            `${name}Versioning`,\n            {\n              bucket: bucket.bucket,\n              versioningConfiguration: {\n                status: \"Enabled\",\n              },\n            },\n            { parent },\n          ),\n        );\n      });\n    }\n\n    function createPublicAccess() {\n      if (args.transform?.publicAccessBlock === false) return;\n\n      return new s3.BucketPublicAccessBlock(\n        ...transform(\n          args.transform?.publicAccessBlock,\n          `${name}PublicAccessBlock`,\n          {\n            bucket: bucket.bucket,\n            blockPublicAcls: true,\n            blockPublicPolicy: access.apply((v) => v !== \"public\"),\n            ignorePublicAcls: true,\n            restrictPublicBuckets: access.apply((v) => v !== \"public\"),\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createBucketPolicy() {\n      return all([access, enforceHttps, policyArgs]).apply(\n        ([access, enforceHttps, policyArgs]) => {\n          const statements = [];\n          if (access) {\n            statements.push({\n              principals: [\n                access === \"public\"\n                  ? { type: \"*\", identifiers: [\"*\"] }\n                  : {\n                      type: \"Service\",\n                      identifiers: [\"cloudfront.amazonaws.com\"],\n                    },\n              ],\n              actions: [\"s3:GetObject\"],\n              resources: [interpolate`${bucket.arn}/*`],\n            });\n          }\n          if (enforceHttps) {\n            statements.push({\n              effect: \"Deny\",\n              principals: [{ type: \"*\", identifiers: [\"*\"] }],\n              actions: [\"s3:*\"],\n              resources: [bucket.arn, interpolate`${bucket.arn}/*`],\n              conditions: [\n                {\n                  test: \"Bool\",\n                  variable: \"aws:SecureTransport\",\n                  values: [\"false\"],\n                },\n              ],\n            });\n          }\n          statements.push(\n            ...policyArgs.map((policy) => ({\n              effect: policy.effect,\n              principals: policy.principals,\n              actions: policy.actions,\n              conditions: policy.conditions,\n              resources: policy.paths.map((path) =>\n                path === \"\" ? bucket.arn : interpolate`${bucket.arn}/${path}`,\n              ),\n            })),\n          );\n\n          return new s3.BucketPolicy(\n            ...transform(\n              args.transform?.policy,\n              `${name}Policy`,\n              {\n                bucket: bucket.bucket,\n                policy: iam.getPolicyDocumentOutput({ statements }).json,\n              },\n              {\n                parent,\n                dependsOn: publicAccessBlock,\n              },\n            ),\n          );\n        },\n      );\n    }\n\n    function createCorsRule() {\n      return output(args.cors).apply((cors) => {\n        if (cors === false) return;\n\n        return new s3.BucketCorsConfigurationV2(\n          ...transform(\n            args.transform?.cors,\n            `${name}Cors`,\n            {\n              bucket: bucket.bucket,\n              corsRules: [\n                {\n                  allowedHeaders: cors?.allowHeaders ?? [\"*\"],\n                  allowedMethods: cors?.allowMethods ?? [\n                    \"DELETE\",\n                    \"GET\",\n                    \"HEAD\",\n                    \"POST\",\n                    \"PUT\",\n                  ],\n                  allowedOrigins: cors?.allowOrigins ?? [\"*\"],\n                  exposeHeaders: cors?.exposeHeaders,\n                  maxAgeSeconds: toSeconds(cors?.maxAge ?? \"0 seconds\"),\n                },\n              ],\n            },\n            { parent },\n          ),\n        );\n      });\n    }\n  }\n\n  /**\n   * The generated name of the S3 Bucket.\n   */\n  public get name() {\n    return this.bucket.bucket;\n  }\n\n  /**\n   * The domain name of the bucket. Has the format `${bucketName}.s3.amazonaws.com`.\n   */\n  public get domain() {\n    return this.bucket.bucketDomainName;\n  }\n\n  /**\n   * The ARN of the S3 Bucket.\n   */\n  public get arn() {\n    return this.bucket.arn;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon S3 bucket.\n       */\n      bucket: this.bucket,\n    };\n  }\n\n  /**\n   * Reference an existing bucket with the given bucket name. This is useful when you\n   * create a bucket in one stage and want to share it in another stage. It avoids having to\n   * create a new bucket in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share buckets across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param bucketName The name of the existing S3 Bucket.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a bucket in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new bucket, you want to share the bucket from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const bucket = $app.stage === \"frank\"\n   *   ? sst.aws.Bucket.get(\"MyBucket\", \"app-dev-mybucket-12345678\")\n   *   : new sst.aws.Bucket(\"MyBucket\");\n   * ```\n   *\n   * Here `app-dev-mybucket-12345678` is the auto-generated bucket name for the bucket created\n   * in the `dev` stage. You can find this by outputting the bucket name in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   bucket: bucket.name\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    bucketName: string,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Bucket(name, {\n      ref: true,\n      bucket: s3.BucketV2.get(`${name}Bucket`, bucketName, undefined, opts),\n    } as BucketArgs);\n  }\n\n  /**\n   * Subscribe to event notifications from this bucket. You can subscribe to these\n   * notifications with a function, a queue, or a topic.\n   *\n   * @param args The config for the event notifications.\n   *\n   * @example\n   *\n   * For exmaple, to notify a function:\n   *\n   * ```js title=\"sst.config.ts\" {5}\n   * bucket.notify({\n   *   notifications: [\n   *     {\n   *       name: \"MySubscriber\",\n   *       function: \"src/subscriber.handler\"\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * Or let's say you have a queue.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myQueue = new sst.aws.Queue(\"MyQueue\");\n   * ```\n   *\n   * You can notify it by passing in the queue.\n   *\n   * ```js title=\"sst.config.ts\" {5}\n   * bucket.notify({\n   *   notifications: [\n   *     {\n   *       name: \"MySubscriber\",\n   *       queue: myQueue\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * Or let's say you have a topic.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myTopic = new sst.aws.SnsTopic(\"MyTopic\");\n   * ```\n   *\n   * You can notify it by passing in the topic.\n   *\n   * ```js title=\"sst.config.ts\" {5}\n   * bucket.notify({\n   *   notifications: [\n   *     {\n   *       name: \"MySubscriber\",\n   *       topic: myTopic\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * You can also set it to only send notifications for specific S3 events.\n   *\n   * ```js {6}\n   * bucket.notify({\n   *   notifications: [\n   *     {\n   *       name: \"MySubscriber\",\n   *       function: \"src/subscriber.handler\",\n   *       events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * And you can add filters to be only notified from specific files in the bucket.\n   *\n   * ```js {6}\n   * bucket.notify({\n   *   notifications: [\n   *     {\n   *       name: \"MySubscriber\",\n   *       function: \"src/subscriber.handler\",\n   *       filterPrefix: \"images/\"\n   *     }\n   *   ]\n   * });\n   * ```\n   */\n  public notify(args: BucketNotificationsArgs) {\n    if (this.isSubscribed) {\n      throw new VisibleError(\n        `Cannot call \"notify\" on the \"${this.constructorName}\" bucket multiple times. Calling it again will override previous notifications.`,\n      );\n    }\n    this.isSubscribed = true;\n    const name = this.constructorName;\n    const opts = this.constructorOpts;\n\n    return new BucketNotification(\n      `${name}Notifications`,\n      {\n        bucket: { name: this.bucket.bucket, arn: this.bucket.arn },\n        ...args,\n      },\n      opts,\n    );\n  }\n\n  /**\n   * Subscribe to events from this bucket.\n   *\n   * @deprecated The `notify` function is now the recommended way to subscribe to events\n   * from this bucket. It allows you to configure multiple subscribers at once. To migrate,\n   * remove the current subscriber, deploy the changes, and then add the subscriber\n   * back using the new `notify` function.\n   *\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * ```js title=\"sst.config.ts\"\n   * bucket.subscribe(\"src/subscriber.handler\");\n   * ```\n   *\n   * Subscribe to specific S3 events. The `link` ensures the subscriber can access the bucket.\n   *\n   * ```js title=\"sst.config.ts\" \"link: [bucket]\"\n   * bucket.subscribe({\n   *   handler: \"src/subscriber.handler\",\n   *   link: [bucket]\n   * }, {\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   *\n   * Subscribe to specific S3 events from a specific folder.\n   *\n   * ```js title=\"sst.config.ts\" {2}\n   * bucket.subscribe(\"src/subscriber.handler\", {\n   *   filterPrefix: \"images/\",\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * bucket.subscribe({\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\",\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * bucket.subscribe(\"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public subscribe(\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: BucketSubscriberArgs,\n  ) {\n    this.ensureNotSubscribed();\n    return Bucket._subscribeFunction(\n      this.constructorName,\n      this.bucket.bucket,\n      this.bucket.arn,\n      subscriber,\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Subscribe to events of an S3 bucket that was not created in your app.\n   *\n   * @deprecated The `notify` function is now the recommended way to subscribe to events\n   * from this bucket. It allows you to configure multiple subscribers at once. To migrate,\n   * remove the current subscriber, deploy the changes, and then add the subscriber\n   * back using the new `notify` function.\n   *\n   * @param bucketArn The ARN of the S3 bucket to subscribe to.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have an existing S3 bucket with the following ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const bucketArn = \"arn:aws:s3:::my-bucket\";\n   * ```\n   *\n   * You can subscribe to it by passing in the ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bucket.subscribe(bucketArn, \"src/subscriber.handler\");\n   * ```\n   *\n   * Subscribe to specific S3 events.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bucket.subscribe(bucketArn, \"src/subscriber.handler\", {\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   *\n   * Subscribe to specific S3 events from a specific folder.\n   *\n   * ```js title=\"sst.config.ts\" {2}\n   * sst.aws.Bucket.subscribe(bucketArn, \"src/subscriber.handler\", {\n   *   filterPrefix: \"images/\",\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bucket.subscribe(bucketArn, {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\",\n   * });\n   * ```\n   */\n  public static subscribe(\n    bucketArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: BucketSubscriberArgs,\n  ) {\n    return output(bucketArn).apply((bucketArn) => {\n      const bucketName = parseBucketArn(bucketArn).bucketName;\n      return this._subscribeFunction(\n        bucketName,\n        bucketName,\n        bucketArn,\n        subscriber,\n        args,\n      );\n    });\n  }\n\n  private static _subscribeFunction(\n    name: string,\n    bucketName: Input<string>,\n    bucketArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: BucketSubscriberArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    return all([bucketArn, subscriber, args]).apply(\n      ([bucketArn, subscriber, args]) => {\n        const subscriberId = this.buildSubscriberId(\n          bucketArn,\n          typeof subscriber === \"string\" ? subscriber : subscriber.handler,\n        );\n\n        return new BucketLambdaSubscriber(\n          `${name}Subscriber${subscriberId}`,\n          {\n            bucket: { name: bucketName, arn: bucketArn },\n            subscriber,\n            subscriberId,\n            ...args,\n          },\n          opts,\n        );\n      },\n    );\n  }\n\n  /**\n   * Subscribe to events from this bucket with an SQS Queue.\n   *\n   * @deprecated The `notify` function is now the recommended way to subscribe to events\n   * from this bucket. It allows you to configure multiple subscribers at once. To migrate,\n   * remove the current subscriber, deploy the changes, and then add the subscriber\n   * back using the new `notify` function.\n   *\n   * @param queueArn The ARN of the queue that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have a queue.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const queue = new sst.aws.Queue(\"MyQueue\");\n   * ```\n   *\n   * You can subscribe to this bucket with it.\n   *\n   * ```js title=\"sst.config.ts\"\n   * bucket.subscribe(queue.arn);\n   * ```\n   *\n   * Subscribe to specific S3 events.\n   *\n   * ```js title=\"sst.config.ts\"\n   * bucket.subscribe(queue.arn, {\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   *\n   * Subscribe to specific S3 events from a specific folder.\n   *\n   * ```js title=\"sst.config.ts\" {2}\n   * bucket.subscribe(queue.arn, {\n   *   filterPrefix: \"images/\",\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   */\n  public subscribeQueue(\n    queueArn: Input<string>,\n    args: BucketSubscriberArgs = {},\n  ) {\n    this.ensureNotSubscribed();\n    return Bucket._subscribeQueue(\n      this.constructorName,\n      this.bucket.bucket,\n      this.arn,\n      queueArn,\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Subscribe to events of an S3 bucket that was not created in your app with an SQS Queue.\n   *\n   * @deprecated The `notify` function is now the recommended way to subscribe to events\n   * from this bucket. It allows you to configure multiple subscribers at once. To migrate,\n   * remove the current subscriber, deploy the changes, and then add the subscriber\n   * back using the new `notify` function.\n   *\n   * @param bucketArn The ARN of the S3 bucket to subscribe to.\n   * @param queueArn The ARN of the queue that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have an existing S3 bucket and SQS queue with the following ARNs.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const bucketArn = \"arn:aws:s3:::my-bucket\";\n   * const queueArn = \"arn:aws:sqs:us-east-1:123456789012:MyQueue\";\n   * ```\n   *\n   * You can subscribe to the bucket with the queue.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bucket.subscribeQueue(bucketArn, queueArn);\n   * ```\n   *\n   * Subscribe to specific S3 events.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bucket.subscribeQueue(bucketArn, queueArn, {\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   *\n   * Subscribe to specific S3 events from a specific folder.\n   *\n   * ```js title=\"sst.config.ts\" {2}\n   * sst.aws.Bucket.subscribeQueue(bucketArn, queueArn, {\n   *   filterPrefix: \"images/\",\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   */\n  public static subscribeQueue(\n    bucketArn: Input<string>,\n    queueArn: Input<string>,\n    args?: BucketSubscriberArgs,\n  ) {\n    return output(bucketArn).apply((bucketArn) => {\n      const bucketName = parseBucketArn(bucketArn).bucketName;\n      return this._subscribeQueue(\n        bucketName,\n        bucketName,\n        bucketArn,\n        queueArn,\n        args,\n      );\n    });\n  }\n\n  private static _subscribeQueue(\n    name: string,\n    bucketName: Input<string>,\n    bucketArn: Input<string>,\n    queueArn: Input<string>,\n    args: BucketSubscriberArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    return all([bucketArn, queueArn, args]).apply(\n      ([bucketArn, queueArn, args]) => {\n        const subscriberId = this.buildSubscriberId(bucketArn, queueArn);\n\n        return new BucketQueueSubscriber(\n          `${name}Subscriber${subscriberId}`,\n          {\n            bucket: { name: bucketName, arn: bucketArn },\n            queue: queueArn,\n            subscriberId,\n            ...args,\n          },\n          opts,\n        );\n      },\n    );\n  }\n\n  /**\n   * Subscribe to events from this bucket with an SNS Topic.\n   *\n   * @deprecated The `notify` function is now the recommended way to subscribe to events\n   * from this bucket. It allows you to configure multiple subscribers at once. To migrate,\n   * remove the current subscriber, deploy the changes, and then add the subscriber\n   * back using the new `notify` function.\n   *\n   * @param topicArn The ARN of the topic that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have a topic.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const topic = new sst.aws.SnsTopic(\"MyTopic\");\n   * ```\n   *\n   * You can subscribe to this bucket with it.\n   *\n   * ```js title=\"sst.config.ts\"\n   * bucket.subscribe(topic.arn);\n   * ```\n   *\n   * Subscribe to specific S3 events.\n   *\n   * ```js title=\"sst.config.ts\"\n   * bucket.subscribe(topic.arn, {\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   *\n   * Subscribe to specific S3 events from a specific folder.\n   *\n   * ```js title=\"sst.config.ts\" {2}\n   * bucket.subscribe(topic.arn, {\n   *   filterPrefix: \"images/\",\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   */\n  public subscribeTopic(\n    topicArn: Input<string>,\n    args: BucketSubscriberArgs = {},\n  ) {\n    this.ensureNotSubscribed();\n    return Bucket._subscribeTopic(\n      this.constructorName,\n      this.bucket.bucket,\n      this.arn,\n      topicArn,\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Subscribe to events of an S3 bucket that was not created in your app with an SNS Topic.\n   *\n   * @deprecated The `notify` function is now the recommended way to subscribe to events\n   * from this bucket. It allows you to configure multiple subscribers at once. To migrate,\n   * remove the current subscriber, deploy the changes, and then add the subscriber\n   * back using the new `notify` function.\n   *\n   * @param bucketArn The ARN of the S3 bucket to subscribe to.\n   * @param topicArn The ARN of the topic that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have an existing S3 bucket and SNS topic with the following ARNs.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const bucketArn = \"arn:aws:s3:::my-bucket\";\n   * const topicArn = \"arn:aws:sns:us-east-1:123456789012:MyTopic\";\n   * ```\n   *\n   * You can subscribe to the bucket with the topic.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bucket.subscribe(bucketArn, topicArn);\n   * ```\n   *\n   * Subscribe to specific S3 events.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bucket.subscribe(bucketArn, topicArn, {\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   *\n   * Subscribe to specific S3 events from a specific folder.\n   *\n   * ```js title=\"sst.config.ts\" {2}\n   * sst.aws.Bucket.subscribe(bucketArn, topicArn, {\n   *   filterPrefix: \"images/\",\n   *   events: [\"s3:ObjectCreated:*\", \"s3:ObjectRemoved:*\"]\n   * });\n   * ```\n   */\n  public static subscribeTopic(\n    bucketArn: Input<string>,\n    topicArn: Input<string>,\n    args?: BucketSubscriberArgs,\n  ) {\n    return output(bucketArn).apply((bucketArn) => {\n      const bucketName = parseBucketArn(bucketArn).bucketName;\n      return this._subscribeTopic(\n        bucketName,\n        bucketName,\n        bucketArn,\n        topicArn,\n        args,\n      );\n    });\n  }\n\n  private static _subscribeTopic(\n    name: string,\n    bucketName: Input<string>,\n    bucketArn: Input<string>,\n    topicArn: Input<string>,\n    args: BucketSubscriberArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    return all([bucketArn, topicArn, args]).apply(\n      ([bucketArn, topicArn, args]) => {\n        const subscriberId = this.buildSubscriberId(bucketArn, topicArn);\n\n        return new BucketTopicSubscriber(\n          `${name}Subscriber${subscriberId}`,\n          {\n            bucket: { name: bucketName, arn: bucketArn },\n            topic: topicArn,\n            subscriberId,\n            ...args,\n          },\n          opts,\n        );\n      },\n    );\n  }\n\n  private static buildSubscriberId(bucketArn: string, _discriminator: string) {\n    return logicalName(\n      hashStringToPrettyString(\n        [\n          bucketArn,\n          // Temporarily only allowing one subscriber per bucket because of the\n          // AWS/Terraform issue that appending/removing a notification deletes\n          // all existing notifications.\n          //\n          // A solution would be to implement a dynamic provider. On create,\n          // get existing notifications then append. And on delete, get existing\n          // notifications then remove from the list.\n          //\n          // https://github.com/hashicorp/terraform-provider-aws/issues/501\n          //\n          // Commenting out the lines below to ensure the id never changes.\n          // Because on id change, the removal of notification happens after\n          // the creation of notification. And the newly created notification\n          // gets removed.\n\n          //...events,\n          //args.filterPrefix ?? \"\",\n          //args.filterSuffix ?? \"\",\n          //discriminator,\n        ].join(\"\"),\n        6,\n      ),\n    );\n  }\n\n  private ensureNotSubscribed() {\n    if (this.isSubscribed)\n      throw new VisibleError(\n        `Cannot subscribe to the \"${this.constructorName}\" bucket multiple times. An S3 bucket can only have one subscriber.`,\n      );\n    this.isSubscribed = true;\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        name: this.name,\n      },\n      include: [\n        permission({\n          actions: [\"s3:*\"],\n          resources: [this.arn, interpolate`${this.arn}/*`],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Bucket\";\n// @ts-expect-error\nBucket.__pulumiType = __pulumiType;\n", "export type Duration = `${number} ${\n  | \"second\"\n  | \"seconds\"\n  | \"minute\"\n  | \"minutes\"\n  | \"hour\"\n  | \"hours\"\n  | \"day\"\n  | \"days\"}`;\n\nexport type DurationSeconds = `${number} ${\"second\" | \"seconds\"}`;\n\nexport type DurationMinutes = `${number} ${\n  | \"second\"\n  | \"seconds\"\n  | \"minute\"\n  | \"minutes\"}`;\n\nexport type DurationHours = `${number} ${\n  | \"second\"\n  | \"seconds\"\n  | \"minute\"\n  | \"minutes\"\n  | \"hour\"\n  | \"hours\"}`;\n\nexport function toSeconds(\n  duration: Duration | DurationMinutes | DurationSeconds,\n) {\n  const [count, unit] = duration.split(\" \");\n  const countNum = parseInt(count);\n  const unitLower = unit.toLowerCase();\n  if (unitLower.startsWith(\"second\")) {\n    return countNum;\n  } else if (unitLower.startsWith(\"minute\")) {\n    return countNum * 60;\n  } else if (unitLower.startsWith(\"hour\")) {\n    return countNum * 3600;\n  } else if (unitLower.startsWith(\"day\")) {\n    return countNum * 86400;\n  }\n\n  throw new Error(`Invalid duration ${duration}`);\n}\n", "import { aws } from \"../..\";\nimport { VisibleError } from \"../../error\";\n\nexport function parseFunctionArn(arn: string) {\n  // arn:aws:lambda:region:account-id:function:function-name\n  const functionName = arn.split(\":\")[6];\n  if (!arn.startsWith(\"arn:\") || !functionName)\n    throw new VisibleError(\n      `The provided ARN \"${arn}\" is not a Lambda function ARN.`,\n    );\n  return { functionName };\n}\n\nexport function parseBucketArn(arn: string) {\n  // arn:aws:s3:::bucket-name\n  const bucketName = arn.split(\":\")[5];\n  if (!arn.startsWith(\"arn:\") || !bucketName)\n    throw new VisibleError(\n      `The provided ARN \"${arn}\" is not an S3 bucket ARN.`,\n    );\n  return { bucketName };\n}\n\nexport function parseTopicArn(arn: string) {\n  // arn:aws:sns:region:account-id:topic-name\n  const topicName = arn.split(\":\")[5];\n  if (!arn.startsWith(\"arn:\") || !topicName)\n    throw new VisibleError(\n      `The provided ARN \"${arn}\" is not an SNS Topic ARN.`,\n    );\n  return { topicName };\n}\n\nexport function parseQueueArn(arn: string) {\n  // arn:aws:sqs:region:account-id:queue-name\n  const [arnStr, , , region, accountId, queueName] = arn.split(\":\");\n  if (arnStr !== \"arn\" || !queueName)\n    throw new VisibleError(\n      `The provided ARN \"${arn}\" is not an SQS Queue ARN.`,\n    );\n  return {\n    queueName,\n    queueUrl: `https://sqs.${region}.amazonaws.com/${accountId}/${queueName}`,\n  };\n}\n\nexport function parseDynamoArn(arn: string) {\n  // arn:aws:dynamodb:region:account-id:table/table-name\n  const tableName = arn.split(\"/\")[1];\n  if (!arn.startsWith(\"arn:\") || !tableName)\n    throw new VisibleError(\n      `The provided ARN \"${arn}\" is not a DynamoDB table ARN.`,\n    );\n  return { tableName };\n}\n\nexport function parseDynamoStreamArn(streamArn: string) {\n  // ie. \"arn:aws:dynamodb:us-east-1:112233445566:table/MyTable/stream/2024-02-25T23:17:55.264\"\n  const parts = streamArn.split(\":\");\n  const tableName = parts[5]?.split(\"/\")[1];\n  if (parts[0] !== \"arn\" || parts[2] !== \"dynamodb\" || !tableName)\n    throw new VisibleError(\n      `The provided ARN \"${streamArn}\" is not a DynamoDB stream ARN.`,\n    );\n  return { tableName };\n}\n\nexport function parseKinesisStreamArn(streamArn: string) {\n  // ie. \"arn:aws:kinesis:us-east-1:123456789012:stream/MyStream\";\n  const parts = streamArn.split(\":\");\n  const streamName = parts[5]?.split(\"/\")[1];\n  if (parts[0] !== \"arn\" || parts[2] !== \"kinesis\" || !streamName)\n    throw new VisibleError(\n      `The provided ARN \"${streamArn}\" is not a Kinesis stream ARN.`,\n    );\n  return { streamName };\n}\n\nexport function parseEventBusArn(arn: string) {\n  // arn:aws:events:region:account-id:event-bus/bus-name\n  const busName = arn.split(\"/\")[1];\n  if (!arn.startsWith(\"arn:\") || !busName)\n    throw new VisibleError(\n      `The provided ARN \"${arn}\" is not a EventBridge event bus ARN.`,\n    );\n  return { busName };\n}\n\nexport function parseRoleArn(arn: string) {\n  // arn:aws:iam::123456789012:role/MyRole\n  const roleName = arn.split(\"/\")[1];\n  if (!arn.startsWith(\"arn:\") || !roleName)\n    throw new VisibleError(`The provided ARN \"${arn}\" is not an IAM role ARN.`);\n  return { roleName };\n}\n\nexport function parseElasticSearch(arn: string) {\n  // arn:aws:es:region:account-id:domain/domain-name\n  const tableName = arn.split(\"/\")[1];\n  if (!arn.startsWith(\"arn:\") || !tableName)\n    throw new VisibleError(\n      `The provided ARN \"${arn}\" is not a ElasticSearch domain ARN.`,\n    );\n  return { tableName };\n}\n\nexport function parseOpenSearch(arn: string) {\n  // arn:aws:opensearch:region:account-id:domain/domain-name\n  const tableName = arn.split(\"/\")[1];\n  if (!arn.startsWith(\"arn:\") || !tableName)\n    throw new VisibleError(\n      `The provided ARN \"${arn}\" is not a OpenSearch domain ARN.`,\n    );\n  return { tableName };\n}\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { Function, FunctionArgs } from \"./function\";\nimport { BucketSubscriberArgs } from \"./bucket\";\nimport { lambda, s3 } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\n\nexport interface Args extends BucketSubscriberArgs {\n  /**\n   * The bucket to use.\n   */\n  bucket: Input<{\n    /**\n     * The name of the bucket.\n     */\n    name: Input<string>;\n    /**\n     * The ARN of the bucket.\n     */\n    arn: Input<string>;\n  }>;\n  /**\n   * The subscriber ID.\n   */\n  subscriberId: Input<string>;\n  /**\n   * The subscriber function.\n   */\n  subscriber: Input<string | FunctionArgs>;\n}\n\n/**\n * The `BucketLambdaSubscriber` component is internally used by the `Bucket` component to\n * add bucket notifications to [AWS S3 Bucket](https://aws.amazon.com/s3/).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribe` method of the `Bucket` component.\n */\nexport class BucketLambdaSubscriber extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly permission: lambda.Permission;\n  private readonly notification: s3.BucketNotification;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const bucket = output(args.bucket);\n    const events = args.events\n      ? output(args.events)\n      : output([\n          \"s3:ObjectCreated:*\",\n          \"s3:ObjectRemoved:*\",\n          \"s3:ObjectRestore:*\",\n          \"s3:ReducedRedundancyLostObject\",\n          \"s3:Replication:*\",\n          \"s3:LifecycleExpiration:*\",\n          \"s3:LifecycleTransition\",\n          \"s3:IntelligentTiering\",\n          \"s3:ObjectTagging:*\",\n          \"s3:ObjectAcl:Put\",\n        ]);\n\n    const fn = createFunction();\n    const permission = createPermission();\n    const notification = createNotification();\n\n    this.fn = fn;\n    this.permission = permission;\n    this.notification = notification;\n\n    function createFunction() {\n      return functionBuilder(\n        `${name}Function`,\n        args.subscriber,\n        {\n          description: events.apply((events) =>\n            events.length < 5\n              ? `Subscribed to ${name} on ${events.join(\", \")}`\n              : `Subscribed to ${name} on ${events\n                  .slice(0, 3)\n                  .join(\", \")}, and ${events.length - 3} more events`,\n          ),\n        },\n        undefined,\n        { parent: self },\n      );\n    }\n\n    function createPermission() {\n      return new lambda.Permission(\n        `${name}Permission`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"s3.amazonaws.com\",\n          sourceArn: bucket.arn,\n        },\n        { parent: self },\n      );\n    }\n\n    function createNotification() {\n      return new s3.BucketNotification(\n        ...transform(\n          args.transform?.notification,\n          `${name}Notification`,\n          {\n            bucket: bucket.name,\n            lambdaFunctions: [\n              {\n                id: interpolate`Notification${args.subscriberId}`,\n                lambdaFunctionArn: fn.arn,\n                events,\n                filterPrefix: args.filterPrefix,\n                filterSuffix: args.filterSuffix,\n              },\n            ],\n          },\n          { parent: self, dependsOn: [permission] },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function that'll be notified.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda permission.\n       */\n      permission: this.permission,\n      /**\n       * The S3 bucket notification.\n       */\n      notification: this.notification,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:BucketLambdaSubscriber\";\n// @ts-expect-error\nBucketLambdaSubscriber.__pulumiType = __pulumiType;\n", "import {\n  all,\n  ComponentResourceOptions,\n  Input,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Function, FunctionArn, FunctionArgs } from \"../function\";\nimport { transform, Transform } from \"../../component\";\nimport { VisibleError } from \"../../error\";\n\nexport type FunctionBuilder = Output<{\n  getFunction: () => Function;\n  arn: Output<string>;\n  invokeArn: Output<string>;\n}>;\n\nexport function functionBuilder(\n  name: string,\n  definition: Input<string | FunctionArn | FunctionArgs>,\n  defaultArgs: Pick<\n    FunctionArgs,\n    \"description\" | \"link\" | \"environment\" | \"permissions\" | \"url\" | \"_skipHint\"\n  >,\n  argsTransform?: Transform<FunctionArgs>,\n  opts?: ComponentResourceOptions,\n): FunctionBuilder {\n  return output(definition).apply((definition) => {\n    if (typeof definition === \"string\") {\n      // Case 1: The definition is an ARN\n      if (definition.startsWith(\"arn:\")) {\n        const parts = definition.split(\":\");\n        return {\n          getFunction: () => {\n            throw new VisibleError(\n              \"Cannot access the created function because it is referenced as an ARN.\",\n            );\n          },\n          arn: output(definition),\n          invokeArn: output(\n            `arn:${parts[1]}:apigateway:${parts[3]}:lambda:path/2015-03-31/functions/${definition}/invocations`,\n          ),\n        };\n      }\n\n      // Case 2: The definition is a handler\n      const fn = new Function(\n        ...transform(\n          argsTransform,\n          name,\n          { handler: definition, ...defaultArgs },\n          opts || {},\n        ),\n      );\n      return {\n        getFunction: () => fn,\n        arn: fn.arn,\n        invokeArn: fn.nodes.function.invokeArn,\n      };\n    }\n\n    // Case 3: The definition is a FunctionArgs\n    else if (definition.handler) {\n      const fn = new Function(\n        ...transform(\n          argsTransform,\n          name,\n          {\n            ...defaultArgs,\n            ...definition,\n            link: all([defaultArgs?.link, definition.link]).apply(\n              ([defaultLink, link]) => [\n                ...(defaultLink ?? []),\n                ...(link ?? []),\n              ],\n            ),\n            environment: all([\n              defaultArgs?.environment,\n              definition.environment,\n            ]).apply(([defaultEnvironment, environment]) => ({\n              ...(defaultEnvironment ?? {}),\n              ...(environment ?? {}),\n            })),\n            permissions: all([\n              defaultArgs?.permissions,\n              definition.permissions,\n            ]).apply(([defaultPermissions, permissions]) => [\n              ...(defaultPermissions ?? []),\n              ...(permissions ?? []),\n            ]),\n          },\n          opts || {},\n        ),\n      );\n      return {\n        getFunction: () => fn,\n        arn: fn.arn,\n        invokeArn: fn.nodes.function.invokeArn,\n      };\n    }\n    throw new Error(`Invalid function definition for the \"${name}\" Function`);\n  });\n}\n", "import fs from \"fs\";\nimport path from \"path\";\nimport crypto from \"crypto\";\nimport archiver from \"archiver\";\nimport type { BuildOptions, Loader } from \"esbuild\";\nimport { glob } from \"glob\";\nimport {\n  all,\n  asset,\n  ComponentResourceOptions,\n  interpolate,\n  Output,\n  output,\n  secret,\n  unsecret,\n} from \"@pulumi/pulumi\";\nimport { bootstrap } from \"./helpers/bootstrap.js\";\nimport { Duration, DurationMinutes, toSeconds } from \"../duration.js\";\nimport { Size, toMBs } from \"../size.js\";\nimport { Component, Prettify, Transform, transform } from \"../component.js\";\nimport { Link } from \"../link.js\";\nimport { VisibleError } from \"../error.js\";\nimport type { Input } from \"../input.js\";\nimport { physicalName } from \"../naming.js\";\nimport { RETENTION } from \"./logging.js\";\nimport {\n  cloudwatch,\n  ecr,\n  getCallerIdentityOutput,\n  getPartitionOutput,\n  getRegionOutput,\n  iam,\n  lambda,\n  s3,\n  types,\n} from \"@pulumi/aws\";\nimport { Permission, permission } from \"./permission.js\";\nimport { Vpc } from \"./vpc.js\";\nimport { Image } from \"@pulumi/docker-build\";\nimport { rpc } from \"../rpc/rpc.js\";\nimport { parseRoleArn } from \"./helpers/arn.js\";\nimport { RandomBytes } from \"@pulumi/random\";\nimport { lazy } from \"../../util/lazy.js\";\nimport { Efs } from \"./efs.js\";\nimport { FunctionEnvironmentUpdate } from \"./providers/function-environment-update.js\";\nimport { warnOnce } from \"../../util/warn.js\";\nimport {\n  normalizeRouteArgs,\n  RouterRouteArgs,\n  RouterRouteArgsDeprecated,\n} from \"./router.js\";\nimport { KvRoutesUpdate } from \"./providers/kv-routes-update.js\";\nimport { KvKeys } from \"./providers/kv-keys.js\";\n\n/**\n * Helper type to define function ARN type\n */\nexport type FunctionArn = `arn:${string}` & {};\n\nexport type FunctionPermissionArgs = {\n  /**\n   * Configures whether the permission is allowed or denied.\n   * @default `\"allow\"`\n   * @example\n   * ```ts\n   * {\n   *   effect: \"deny\"\n   * }\n   * ```\n   */\n  effect?: \"allow\" | \"deny\";\n  /**\n   * The [IAM actions](https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html#actions_table) that can be performed.\n   * @example\n   * ```js\n   * {\n   *   actions: [\"s3:*\"]\n   * }\n   * ```\n   */\n  actions: string[];\n  /**\n   * The resourcess specified using the [IAM ARN format](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html).\n   * @example\n   * ```js\n   * {\n   *   resources: [\"arn:aws:s3:::my-bucket/*\"]\n   * }\n   * ```\n   */\n  resources: Input<Input<string>[]>;\n};\n\ninterface FunctionUrlCorsArgs {\n  /**\n   * Allow cookies or other credentials in requests to the function URL.\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   url: {\n   *     cors: {\n   *       allowCredentials: true\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  allowCredentials?: Input<boolean>;\n  /**\n   * The HTTP headers that origins can include in requests to the function URL.\n   * @default `[\"*\"]`\n   * @example\n   * ```js\n   * {\n   *   url: {\n   *     cors: {\n   *       allowHeaders: [\"date\", \"keep-alive\", \"x-custom-header\"]\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  allowHeaders?: Input<Input<string>[]>;\n  /**\n   * The origins that can access the function URL.\n   * @default `[\"*\"]`\n   * @example\n   * ```js\n   * {\n   *   url: {\n   *     cors: {\n   *       allowOrigins: [\"https://www.example.com\", \"http://localhost:60905\"]\n   *     }\n   *   }\n   * }\n   * ```\n   * Or the wildcard for all origins.\n   * ```js\n   * {\n   *   url: {\n   *     cors: {\n   *       allowOrigins: [\"*\"]\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  allowOrigins?: Input<Input<string>[]>;\n  /**\n   * The HTTP methods that are allowed when calling the function URL.\n   * @default `[\"*\"]`\n   * @example\n   * ```js\n   * {\n   *   url: {\n   *     cors: {\n   *       allowMethods: [\"GET\", \"POST\", \"DELETE\"]\n   *     }\n   *   }\n   * }\n   * ```\n   * Or the wildcard for all methods.\n   * ```js\n   * {\n   *   url: {\n   *     cors: {\n   *       allowMethods: [\"*\"]\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  allowMethods?: Input<\n    Input<\n      \"*\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\"\n    >[]\n  >;\n  /**\n   * The HTTP headers you want to expose in your function to an origin that calls the function URL.\n   * @default `[]`\n   * @example\n   * ```js\n   * {\n   *   url: {\n   *     cors: {\n   *       exposeHeaders: [\"date\", \"keep-alive\", \"x-custom-header\"]\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  exposeHeaders?: Input<Input<string>[]>;\n  /**\n   * The maximum amount of time the browser can cache results of a preflight request. By\n   * default the browser doesn't cache the results. The maximum value is `86400 seconds` or `1 day`.\n   * @default `\"0 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   url: {\n   *     cors: {\n   *       maxAge: \"1 day\"\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  maxAge?: Input<Duration>;\n}\n\nexport interface FunctionArgs {\n  /**\n   * Disable running this function [Live](/docs/live/) in `sst dev`.\n   * @deprecated Use `dev` instead.\n   * @default `true`\n   * @example\n   * ```js\n   * {\n   *   live: false\n   * }\n   * ```\n   */\n  live?: Input<false>;\n  /**\n   * Disable running this function [_Live_](/docs/live/) in `sst dev`.\n   *\n   * By default, the functions in your app are run locally in `sst dev`. To do this, a _stub_\n   * version of your function is deployed, instead of the real function.\n   *\n   * :::note\n   * In `sst dev` a _stub_ version of your function is deployed.\n   * :::\n   *\n   * This shows under the **Functions** tab in the multiplexer sidebar where your invocations\n   * are logged. You can turn this off by setting `dev` to `false`.\n   *\n   * Read more about [Live](/docs/live/) and [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * @default `true`\n   * @example\n   * ```js\n   * {\n   *   dev: false\n   * }\n   * ```\n   */\n  dev?: Input<false>;\n  /**\n   * Configure the maximum number of retry attempts for this function when invoked\n   * asynchronously.\n   *\n   * This only affects asynchronous invocations of the function, ie. when subscribed to\n   * Topics, EventBuses, or Buckets. And not when directly invoking the function.\n   *\n   * Valid values are between 0 and 2.\n   *\n   * @default `2`\n   * @example\n   * ```js\n   * {\n   *   retries: 0\n   * }\n   * ```\n   */\n  retries?: Input<number>;\n  /**\n   * The name for the function.\n   *\n   * By default, the name is generated from the app name, stage name, and component name. This\n   * is displayed in the AWS Console for this function.\n   *\n   * :::caution\n   * To avoid the name from thrashing, you want to make sure that it includes the app and stage\n   * name.\n   * :::\n   *\n   * If you are going to set the name, you need to make sure:\n   * 1. It's unique across your app.\n   * 2. Uses the app and stage name, so it doesn't thrash when you deploy to different stages.\n   *\n   * Also, changing the name after your've deployed it once will create a new function and delete\n   * the old one.\n   *\n   * @example\n   * ```js\n   * {\n   *   name: `${$app.name}-${$app.stage}-my-function`\n   * }\n   * ```\n   */\n  name?: Input<string>;\n  /**\n   * A description for the function. This is displayed in the AWS Console.\n   * @example\n   * ```js\n   * {\n   *   description: \"Handler function for my nightly cron job.\"\n   * }\n   * ```\n   */\n  description?: Input<string>;\n  /**\n   * The language runtime for the function.\n   *\n   * Node.js and Golang are officially supported. While, Python and Rust are\n   * community supported. Support for other runtimes are on the roadmap.\n   *\n   * @default `\"nodejs20.x\"`\n   *\n   * @example\n   * ```js\n   * {\n   *   runtime: \"nodejs22.x\"\n   * }\n   * ```\n   */\n  runtime?: Input<\n    | \"nodejs18.x\"\n    | \"nodejs20.x\"\n    | \"nodejs22.x\"\n    | \"go\"\n    | \"rust\"\n    | \"provided.al2023\"\n    | \"python3.9\"\n    | \"python3.10\"\n    | \"python3.11\"\n    | \"python3.12\"\n  >;\n  /**\n   * Path to the source code directory for the function. By default, the handler is\n   * bundled with [esbuild](https://esbuild.github.io/). Use `bundle` to skip bundling.\n   *\n   * :::caution\n   * Use `bundle` only when you want to bundle the function yourself.\n   * :::\n   *\n   * If the `bundle` option is specified, the `handler` needs to be in the root of the bundle.\n   *\n   * @example\n   *\n   * Here, the entire `packages/functions/src` directory is zipped. And the handler is\n   * in the `src` directory.\n   *\n   * ```js\n   * {\n   *   bundle: \"packages/functions/src\",\n   *   handler: \"index.handler\"\n   * }\n   * ```\n   */\n  bundle?: Input<string>;\n  /**\n   * Path to the handler for the function.\n   *\n   * - For Node.js this is in the format `{path}/{file}.{method}`.\n   * - For Python this is also `{path}/{file}.{method}`.\n   * - For Golang this is `{path}` to the Go module.\n   * - For Rust this is `{path}` to the Rust crate.\n   *\n   * @example\n   *\n   * ##### Node.js\n   *\n   * For example with Node.js you might have.\n   *\n   * ```js\n   * {\n   *   handler: \"packages/functions/src/main.handler\"\n   * }\n   * ```\n   *\n   * Where `packages/functions/src` is the path. And `main` is the file, where you might have\n   * a `main.ts` or `main.js`. And `handler` is the method exported in that file.\n   *\n   * :::note\n   * You don't need to specify the file extension.\n   * :::\n   *\n   * If `bundle` is specified, the handler needs to be in the root of the bundle directory.\n   *\n   * ```js\n   * {\n   *   bundle: \"packages/functions/src\",\n   *   handler: \"index.handler\"\n   * }\n   * ```\n   *\n   * ##### Python\n   *\n   * For Python, [uv](https://docs.astral.sh/uv/) is used to package the function.\n   * You need to have it installed.\n   *\n   * :::note\n   * You need uv installed for Python functions.\n   * :::\n   *\n   * The functions need to be in a [uv workspace](https://docs.astral.sh/uv/concepts/projects/workspaces/#workspace-sources).\n   *\n   * ```js\n   * {\n   *   handler: \"functions/src/functions/api.handler\"\n   * }\n   * ```\n   *\n   * The project structure might look something like this. Where there is a\n   * `pyproject.toml` file in the root and the `functions/` directory is a uv\n   * workspace with its own `pyproject.toml`.\n   *\n   * ```txt\n   * \u251C\u2500\u2500 sst.config.ts\n   * \u251C\u2500\u2500 pyproject.toml\n   * \u2514\u2500\u2500 functions\n   *     \u251C\u2500\u2500 pyproject.toml\n   *     \u2514\u2500\u2500 src\n   *         \u2514\u2500\u2500 functions\n   *             \u251C\u2500\u2500 __init__.py\n   *             \u2514\u2500\u2500 api.py\n   * ```\n   *\n   * To make sure that the right runtime is used in `sst dev`, make sure to set the\n   * version of Python in your `pyproject.toml` to match the runtime you are using.\n   *\n   * ```toml title=\"functions/pyproject.toml\"\n   * requires-python = \"==3.11.*\"\n   * ```\n   *\n   * You can refer to [this example of deploying a Python function](/docs/examples/#aws-lambda-python).\n   *\n   * ##### Golang\n   *\n   * For Golang the handler looks like.\n   *\n   * ```js\n   * {\n   *   handler: \"packages/functions/go/some_module\"\n   * }\n   * ```\n   *\n   * Where `packages/functions/go/some_module` is the path to the Go module. This\n   * includes the name of the module in your `go.mod`. So in this case your `go.mod`\n   * might be in `packages/functions/go` and `some_module` is the name of the\n   * module.\n   *\n   * You can refer to [this example of deploying a Go function](/docs/examples/#aws-lambda-go).\n   *\n   * ##### Rust\n   *\n   * For Rust, the handler looks like.\n   *\n   * ```js\n   * {\n   *   handler: \"crates/api\"\n   * }\n   * ```\n   *\n   * Where `crates/api` is the path to the Rust crate. This means there is a\n   * `Cargo.toml` file in `crates/api`, and the main() function handles the lambda.\n   */\n  handler: Input<string>;\n  /**\n   * The maximum amount of time the function can run. The minimum timeout is 1 second and the maximum is 900 seconds or 15 minutes.\n   *\n   * :::note\n   * If a function is connected to another service, the request will time out based on the service's limits.\n   * :::\n   *\n   * While the maximum timeout is 15 minutes, if a function is connected to other\n   * services, it'll time out based on those limits.\n   *\n   * - API Gateway has a timeout of 30 seconds. So even if the function has a\n   *   timeout of 15 minutes, the API request will time out after 30 seconds.\n   * - CloudFront has a default timeout of 60 seconds. You can have this limit\n   *   increased by [contacting AWS Support](https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase).\n   *\n   * @default `\"20 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   timeout: \"900 seconds\"\n   * }\n   * ```\n   */\n  timeout?: Input<DurationMinutes>;\n  /**\n   * The amount of memory allocated for the function. Takes values between 128 MB\n   * and 10240 MB in 1 MB increments.  The amount of memory affects the amount of\n   * virtual CPU available to the function.\n   *\n   * :::tip\n   * While functions with less memory are cheaper, larger functions can process faster.\n   * And might end up being more [cost effective](https://docs.aws.amazon.com/lambda/latest/operatorguide/computing-power.html).\n   * :::\n   *\n   * @default `\"1024 MB\"`\n   * @example\n   * ```js\n   * {\n   *   memory: \"10240 MB\"\n   * }\n   * ```\n   */\n  memory?: Input<Size>;\n  /**\n   * The amount of ephemeral storage allocated for the function. This sets the ephemeral\n   * storage of the lambda function (/tmp). Must be between \"512 MB\" and \"10240 MB\" (\"10 GB\")\n   * in 1 MB increments.\n   *\n   * @default `\"512 MB\"`\n   * @example\n   * ```js\n   * {\n   *   storage: \"5 GB\"\n   * }\n   * ```\n   */\n  storage?: Input<Size>;\n  /**\n   * Key-value pairs of values that are set as [Lambda environment variables](https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html).\n   * The keys need to:\n   * - Start with a letter\n   * - Be at least 2 characters long\n   * - Contain only letters, numbers, or underscores\n   *\n   * They can be accessed in your function using `process.env.<key>`.\n   *\n   * :::note\n   * The total size of the environment variables cannot exceed 4 KB.\n   * :::\n   *\n   * @example\n   *\n   * ```js\n   * {\n   *   environment: {\n   *     DEBUG: \"true\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: Input<Record<string, Input<string>>>;\n  /**\n   * Permissions and the resources that the function needs to access. These permissions are\n   * used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow the function to read and write to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * Allow the function to perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * Granting the function permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: Input<Prettify<FunctionPermissionArgs>[]>;\n  /**\n   * Policies to attach to the function. These policies will be added to the\n   * function's IAM role.\n   *\n   * Attaching policies lets you grant a set of predefined permissions to the\n   * function without having to specify the permissions in the `permissions` prop.\n   *\n   * @example\n   * For example, allow the function to have read-only access to all resources.\n   * ```js\n   * {\n   *   policies: [\"arn:aws:iam::aws:policy/ReadOnlyAccess\"]\n   * }\n   * ```\n   */\n  policies?: Input<string[]>;\n  /**\n   * [Link resources](/docs/linking/) to your function. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your function using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of components to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: Input<any[]>;\n  /**\n   * Enable streaming for the function.\n   *\n   * Streaming is only supported when using the function `url` is enabled and not when using it\n   * with API Gateway.\n   *\n   * You'll also need to [wrap your handler](https://docs.aws.amazon.com/lambda/latest/dg/configuration-response-streaming.html) with `awslambda.streamifyResponse` to enable streaming.\n   *\n   * :::note\n   * Streaming is currently not supported in `sst dev`.\n   * :::\n   *\n   * While `sst dev` doesn't support streaming, you can use the\n   * [`lambda-stream`](https://github.com/astuyve/lambda-stream) package to test locally.\n   *\n   * Check out the [AWS Lambda streaming example](/docs/examples/#aws-lambda-streaming) for more\n   * details.\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   streaming: true\n   * }\n   * ```\n   */\n  streaming?: Input<boolean>;\n  /**\n   * @internal\n   */\n  injections?: Input<string[]>;\n  /**\n   * Configure the function logs in CloudWatch. Or pass in `false` to disable writing logs.\n   * @default `{retention: \"1 month\", format: \"text\"}`\n   * @example\n   * ```js\n   * {\n   *   logging: false\n   * }\n   * ```\n   * When set to `false`, the function is not given permissions to write to CloudWatch.\n   * Logs.\n   */\n  logging?: Input<\n    | false\n    | {\n      /**\n       * The duration the function logs are kept in CloudWatch.\n       *\n       * Not application when an existing log group is provided.\n       *\n       * @default `1 month`\n       * @example\n       * ```js\n       * {\n       *   logging: {\n       *     retention: \"forever\"\n       *   }\n       * }\n       * ```\n       */\n      retention?: Input<keyof typeof RETENTION>;\n      /**\n       * Assigns the given CloudWatch log group name to the function. This allows you to pass in a previously created log group.\n       *\n       * By default, the function creates a new log group when it's created.\n       *\n       * @default Creates a log group\n       * @example\n       * ```js\n       * {\n       *   logging: {\n       *     logGroup: \"/existing/log-group\"\n       *   }\n       * }\n       * ```\n       */\n      logGroup?: Input<string>;\n      /**\n       * The [log format](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-cloudwatchlogs-advanced.html)\n       * of the Lambda function.\n       * @default `\"text\"`\n       * @example\n       * ```js\n       * {\n       *   logging: {\n       *     format: \"json\"\n       *   }\n       * }\n       * ```\n       */\n      format?: Input<\"text\" | \"json\">;\n    }\n  >;\n  /**\n   * The [architecture](https://docs.aws.amazon.com/lambda/latest/dg/foundation-arch.html)\n   * of the Lambda function.\n   *\n   * @default `\"x86_64\"`\n   * @example\n   * ```js\n   * {\n   *   architecture: \"arm64\"\n   * }\n   * ```\n   */\n  architecture?: Input<\"x86_64\" | \"arm64\">;\n  /**\n   * Assigns the given IAM role ARN to the function. This allows you to pass in a previously created role.\n   *\n   * :::caution\n   * When you pass in a role, the function will not update it if you add `permissions` or `link` resources.\n   * :::\n   *\n   * By default, the function creates a new IAM role when it's created. It'll update this role if you add `permissions` or `link` resources.\n   *\n   * However, if you pass in a role, you'll need to update it manually if you add `permissions` or `link` resources.\n   *\n   * @default Creates a new role\n   * @example\n   * ```js\n   * {\n   *   role: \"arn:aws:iam::123456789012:role/my-role\"\n   * }\n   * ```\n   */\n  role?: Input<string>;\n  /**\n   * Enable [Lambda function URLs](https://docs.aws.amazon.com/lambda/latest/dg/lambda-urls.html).\n   * These are dedicated endpoints for your Lambda functions.\n   * @default `false`\n   * @example\n   * Enable it with the default options.\n   * ```js\n   * {\n   *   url: true\n   * }\n   * ```\n   *\n   * Configure the authorization and CORS settings for the endpoint.\n   * ```js\n   * {\n   *   url: {\n   *     authorization: \"iam\",\n   *     cors: {\n   *       allowOrigins: ['https://example.com']\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  url?: Input<\n    | boolean\n    | {\n      /**\n       * @deprecated The `url.router` prop is now the recommended way to serve your\n       * function URL through a `Router` component.\n       */\n      route?: Prettify<RouterRouteArgsDeprecated>;\n      /**\n       * Serve your function URL through a `Router` instead of a standalone Function URL.\n       *\n       * By default, this component creates a direct function URL endpoint. But you might\n       * want to serve it through the distribution of your `Router` as a:\n       *\n       * - A path like `/api/users`\n       * - A subdomain like `api.example.com`\n       * - Or a combined pattern like `dev.example.com/api`\n       *\n       * @example\n       *\n       * To serve your function **from a path**, you'll need to configure the root domain\n       * in your `Router` component.\n       *\n       * ```ts title=\"sst.config.ts\" {2}\n       * const router = new sst.aws.Router(\"Router\", {\n       *   domain: \"example.com\"\n       * });\n       * ```\n       *\n       * Now set the `router` and the `path` in the `url` prop.\n       *\n       * ```ts {4,5}\n       * {\n       *   url: {\n       *     router: {\n       *       instance: router,\n       *       path: \"/api/users\"\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * To serve your function **from a subdomain**, you'll need to configure the\n       * domain in your `Router` component to match both the root and the subdomain.\n       *\n       * ```ts title=\"sst.config.ts\" {3,4}\n       * const router = new sst.aws.Router(\"Router\", {\n       *   domain: {\n       *     name: \"example.com\",\n       *     aliases: [\"*.example.com\"]\n       *   }\n       * });\n       * ```\n       *\n       * Now set the `domain` in the `router` prop.\n       *\n       * ```ts {5}\n       * {\n       *   url: {\n       *     router: {\n       *       instance: router,\n       *       domain: \"api.example.com\"\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * Finally, to serve your function **from a combined pattern** like\n       * `dev.example.com/api`, you'll need to configure the domain in your `Router` to\n       * match the subdomain.\n       *\n       * ```ts title=\"sst.config.ts\" {3,4}\n       * const router = new sst.aws.Router(\"Router\", {\n       *   domain: {\n       *     name: \"example.com\",\n       *     aliases: [\"*.example.com\"]\n       *   }\n       * });\n       * ```\n       *\n       * And set the `domain` and the `path`.\n       *\n       * ```ts {5,6}\n       * {\n       *   url: {\n       *     router: {\n       *       instance: router,\n       *       domain: \"dev.example.com\",\n       *       path: \"/api/users\"\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      router?: Prettify<RouterRouteArgs>;\n      /**\n       * The authorization used for the function URL. Supports [IAM authorization](https://docs.aws.amazon.com/lambda/latest/dg/urls-auth.html).\n       * @default `\"none\"`\n       * @example\n       * ```js\n       * {\n       *   url: {\n       *     authorization: \"iam\"\n       *   }\n       * }\n       * ```\n       */\n      authorization?: Input<\"none\" | \"iam\">;\n      /**\n       * Customize the CORS (Cross-origin resource sharing) settings for the function URL.\n       * @default `true`\n       * @example\n       * Disable CORS.\n       * ```js\n       * {\n       *   url: {\n       *     cors: false\n       *   }\n       * }\n       * ```\n       * Only enable the `GET` and `POST` methods for `https://example.com`.\n       * ```js\n       * {\n       *   url: {\n       *     cors: {\n       *       allowMethods: [\"GET\", \"POST\"],\n       *       allowOrigins: [\"https://example.com\"]\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      cors?: Input<boolean | Prettify<FunctionUrlCorsArgs>>;\n    }\n  >;\n  /**\n   * Configure how your function is bundled.\n   *\n   * By default, SST will bundle your function\n   * code using [esbuild](https://esbuild.github.io/). This tree shakes your code to\n   * only include what's used; reducing the size of your function package and improving\n   * cold starts.\n   */\n  nodejs?: Input<{\n    /**\n     * @internal\n     * Point to a file that exports a list of esbuild plugins to use.\n     *\n     * @example\n     * ```js\n     * {\n     *   nodejs: {\n     *     plugins: \"./plugins.mjs\"\n     *   }\n     * }\n     * ```\n     *\n     * The path is relative to the location of the `sst.config.ts`.\n     *\n     * ```js title=\"plugins.mjs\"\n     * import { somePlugin } from \"some-plugin\";\n     *\n     * export default [\n     *   somePlugin()\n     * ];\n     * ```\n     *\n     * You'll also need to install the npm package of the plugin.\n     */\n    plugins?: Input<string>;\n    /**\n     * Configure additional esbuild loaders for other file extensions. This is useful\n     * when your code is importing non-JS files like `.png`, `.css`, etc.\n     *\n     * @example\n     * ```js\n     * {\n     *   nodejs: {\n     *     loader: {\n     *      \".png\": \"file\"\n     *     }\n     *   }\n     * }\n     * ```\n     */\n    loader?: Input<Record<string, Loader>>;\n    /**\n     * Dependencies that need to be excluded from the function package.\n     *\n     * Certain npm packages cannot be bundled using esbuild. This allows you to exclude them\n     * from the bundle. Instead they'll be moved into a `node_modules/` directory in the\n     * function package.\n     *\n     * :::tip\n     * If esbuild is giving you an error about a package, try adding it to the `install` list.\n     * :::\n     *\n     * This will allow your functions to be able to use these dependencies when deployed. They\n     * just won't be tree shaken. You however still need to have them in your `package.json`.\n     *\n     * :::caution\n     * Packages listed here still need to be in your `package.json`.\n     * :::\n     *\n     * Esbuild will ignore them while traversing the imports in your code. So these are the\n     * **package names as seen in the imports**. It also works on packages that are not directly\n     * imported by your code.\n     *\n     * @example\n     * ```js\n     * {\n     *   nodejs: {\n     *     install: [\"pg\"]\n     *   }\n     * }\n     * ```\n     */\n    install?: Input<string[]>;\n    /**\n     * Use this to insert a string at the beginning of the generated JS file.\n     *\n     * @example\n     * ```js\n     * {\n     *   nodejs: {\n     *     banner: \"console.log('Function starting')\"\n     *   }\n     * }\n     * ```\n     */\n    banner?: Input<string>;\n    /**\n     * This allows you to customize esbuild config that is used.\n     *\n     * :::tip\n     * Check out the _JS tab_ in the code snippets in the esbuild docs for the\n     * [`BuildOptions`](https://esbuild.github.io/api/#build).\n     * :::\n     */\n    esbuild?: Input<BuildOptions>;\n    /**\n     * Disable if the function code is minified when bundled.\n     *\n     * @default `true`\n     *\n     * @example\n     * ```js\n     * {\n     *   nodejs: {\n     *     minify: false\n     *   }\n     * }\n     * ```\n     */\n    minify?: Input<boolean>;\n    /**\n     * Configure the format of the generated JS code; ESM or CommonJS.\n     *\n     * @default `\"esm\"`\n     *\n     * @example\n     * ```js\n     * {\n     *   nodejs: {\n     *     format: \"cjs\"\n     *   }\n     * }\n     * ```\n     */\n    format?: Input<\"cjs\" | \"esm\">;\n    /**\n     * Configure if source maps are added to the function bundle when **deployed**. Since they\n     * increase payload size and potentially cold starts, they are not added by default.\n     * However, they are always generated during `sst dev`.\n     *\n     * :::tip[SST Console]\n     * For the [Console](/docs/console/), source maps are always generated and uploaded\n     * to your bootstrap bucket. These are then downloaded and used to display\n     * Issues in the console.\n     * :::\n     *\n     * @default `false`\n     *\n     * @example\n     * ```js\n     * {\n     *   nodejs: {\n     *     sourcemap: true\n     *   }\n     * }\n     * ```\n     */\n    sourcemap?: Input<boolean>;\n    /**\n     * If enabled, modules that are dynamically imported will be bundled in their own files\n     * with common dependencies placed in shared chunks. This can help reduce cold starts\n     * as your function grows in size.\n     *\n     * @default `false`\n     *\n     * @example\n     * ```js\n     * {\n     *   nodejs: {\n     *     splitting: true\n     *   }\n     * }\n     * ```\n     */\n    splitting?: Input<boolean>;\n  }>;\n  /**\n   * Configure how your Python function is packaged.\n   */\n  python?: Input<{\n    /**\n     * Set this to `true` if you want to deploy this function as a container image.\n     * There are a couple of reasons why you might want to do this.\n     *\n     * 1. The Lambda package size has an unzipped limit of 250MB. Whereas the\n     *    container image size has a limit of 10GB.\n     * 2. Even if you are below the 250MB limit, larger Lambda function packages\n     *    have longer cold starts when compared to container image.\n     * 3. You might want to use a custom Dockerfile to handle complex builds.\n     *\n     * @default `false`\n     * @example\n     * ```ts\n     * {\n     *   python: {\n     *     container: true\n     *   }\n     * }\n     * ```\n     *\n     * When you run `sst deploy`, it uses a built-in Dockerfile. It also needs\n     * the Docker daemon to be running.\n     *\n     * :::note\n     * This needs the Docker daemon to be running.\n     * :::\n     *\n     * To use a custom Dockerfile, add one to the rooot of the uv workspace\n     * of the function.\n     *\n     *\n     * ```txt {5}\n     * \u251C\u2500\u2500 sst.config.ts\n     * \u251C\u2500\u2500 pyproject.toml\n     * \u2514\u2500\u2500 function\n     *     \u251C\u2500\u2500 pyproject.toml\n     *     \u251C\u2500\u2500 Dockerfile\n     *     \u2514\u2500\u2500 src\n     *         \u2514\u2500\u2500 function\n     *             \u2514\u2500\u2500 api.py\n     * ```\n     *\n     * You can refer to [this example of using a container image](/docs/examples/#aws-lambda-python-container).\n     */\n    container?: Input<boolean>;\n  }>;\n  /**\n   * Add additional files to copy into the function package. Takes a list of objects\n   * with `from` and `to` paths. These will be copied over before the function package\n   * is zipped up.\n   *\n   * @example\n   *\n   * Copying over a single file from the `src` directory to the `src/` directory of the\n   * function package.\n   *\n   * ```js\n   * {\n   *   copyFiles: [{ from: \"src/index.js\" }]\n   * }\n   * ```\n   *\n   * Copying over a single file from the `src` directory to the `core/src` directory in\n   * the function package.\n   *\n   * ```js\n   * {\n   *   copyFiles: [{ from: \"src/index.js\", to: \"core/src/index.js\" }]\n   * }\n   * ```\n   *\n   * Copying over a couple of files.\n   *\n   * ```js\n   * {\n   *   copyFiles: [\n   *     { from: \"src/this.js\", to: \"core/src/this.js\" },\n   *     { from: \"src/that.js\", to: \"core/src/that.js\" }\n   *   ]\n   * }\n   * ```\n   */\n  copyFiles?: Input<\n    {\n      /**\n       * Source path relative to the `sst.config.ts`.\n       */\n      from: Input<string>;\n      /**\n       * Destination path relative to function root in the package. By default, it\n       * creates the same directory structure as the `from` path and copies the file.\n       *\n       * @default The `from` path in the function package\n       */\n      to?: Input<string>;\n    }[]\n  >;\n  /**\n   * Configure the concurrency settings for the function.\n   *\n   * @default No concurrency settings set\n   * @example\n   * ```js\n   * {\n   *   concurrency: {\n   *     provisioned: 10,\n   *     reserved: 50\n   *   }\n   * }\n   * ```\n   */\n  concurrency?: Input<{\n    /**\n     * Provisioned concurrency ensures a specific number of Lambda instances are always\n     * ready to handle requests, reducing cold start times. Enabling this will incur\n     * extra charges.\n     *\n     * :::note\n     * Enabling provisioned concurrency will incur extra charges.\n     * :::\n     *\n     * Note that `versioning` needs to be enabled for provisioned concurrency.\n     *\n     * @default No provisioned concurrency\n     * @example\n     * ```js\n     * {\n     *   concurrency: {\n     *     provisioned: 10\n     *   }\n     * }\n     * ```\n     */\n    provisioned?: Input<number>;\n    /**\n     * Reserved concurrency limits the maximum number of concurrent executions for a\n     * function, ensuring critical functions always have capacity. It does not incur\n     * extra charges.\n     *\n     * :::note\n     * Setting this to `0` will disable the function from being triggered.\n     * :::\n     *\n     * @default No reserved concurrency\n     * @example\n     * ```js\n     * {\n     *   concurrency: {\n     *     reserved: 50\n     *   }\n     * }\n     * ```\n     */\n    reserved?: Input<number>;\n  }>;\n  /**\n   * Enable versioning for the function.\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   versioning: true\n   * }\n   * ```\n   */\n  versioning?: Input<boolean>;\n  /**\n   * A list of Lambda layer ARNs to add to the function.\n   *\n   * :::note\n   * Layers are only added when the function is deployed.\n   * :::\n   *\n   * These are only added when the function is deployed. In `sst dev`, your functions are run\n   * locally, so the layers are not used. Instead you should use a local version of what's\n   * in the layer.\n   *\n   * @example\n   * ```js\n   * {\n   *   layers: [\"arn:aws:lambda:us-east-1:123456789012:layer:my-layer:1\"]\n   * }\n   * ```\n   */\n  layers?: Input<Input<string>[]>;\n  /**\n   * Mount an EFS file system to the function.\n   *\n   * @example\n   * Create an EFS file system.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const vpc = new sst.aws.Vpc(\"MyVpc\");\n   * const fileSystem = new sst.aws.Efs(\"MyFileSystem\", { vpc });\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   volume: {\n   *     efs: fileSystem\n   *   }\n   * }\n   * ```\n   *\n   * By default, the file system will be mounted to `/mnt/efs`. You can change this by\n   * passing in the `path` property.\n   *\n   * ```js\n   * {\n   *   volume: {\n   *     efs: fileSystem,\n   *     path: \"/mnt/my-files\"\n   *   }\n   * }\n   * ```\n   *\n   * To use an existing EFS, you can pass in an EFS access point ARN.\n   *\n   * ```js\n   * {\n   *   volume: {\n   *     efs: \"arn:aws:elasticfilesystem:us-east-1:123456789012:access-point/fsap-12345678\",\n   *   }\n   * }\n   * ```\n   */\n  volume?: Input<{\n    /**\n     * The EFS file system to mount. Or an EFS access point ARN.\n     */\n    efs: Input<Efs | string>;\n    /**\n     * The path to mount the volume.\n     * @default `\"/mnt/efs\"`\n     */\n    path?: Input<string>;\n  }>;\n  /**\n   * A list of tags to add to the function.\n   *\n   * @example\n   * ```js\n   * {\n   *   tags: {\n   *     \"my-tag\": \"my-value\"\n   *   }\n   * }\n   * ```\n   */\n  tags?: Input<Record<string, Input<string>>>;\n  /**\n   * Configure the function to connect to private subnets in a virtual private cloud or VPC. This allows your function to access private resources.\n   *\n   * @example\n   * Create a `Vpc` component.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * Or reference an existing VPC.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = sst.aws.Vpc.get(\"MyVpc\", {\n   *   id: \"vpc-12345678901234567\"\n   * });\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   */\n  vpc?:\n  | Vpc\n  | Input<{\n    /**\n     * A list of VPC security group IDs.\n     */\n    securityGroups: Input<Input<string>[]>;\n    /**\n     * A list of VPC subnet IDs.\n     */\n    privateSubnets: Input<Input<string>[]>;\n    /**\n     * A list of VPC subnet IDs.\n     * @deprecated Use `privateSubnets` instead.\n     */\n    subnets?: Input<Input<string>[]>;\n  }>;\n\n  /**\n   * Hook into the Lambda function build process.\n   */\n  hook?: {\n    /**\n     * Specify a callback that'll be run after the Lambda function is built.\n     *\n     * :::note\n     * This is not called in `sst dev`.\n     * :::\n     *\n     * Useful for modifying the generated Lambda function code before it's\n     * deployed to AWS. It can also be used for uploading the generated sourcemaps\n     * to a service like Sentry.\n     *\n     * @param dir The directory where the function code is generated.\n     */\n    postbuild(dir: string): Promise<void>;\n  };\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Lambda Function resource.\n     */\n    function?: Transform<lambda.FunctionArgs>;\n    /**\n     * Transform the IAM Role resource.\n     */\n    role?: Transform<iam.RoleArgs>;\n    /**\n     * Transform the CloudWatch LogGroup resource.\n     */\n    logGroup?: Transform<cloudwatch.LogGroupArgs>;\n    /**\n     * Transform the Function Event Invoke Config resource. This is only created\n     * when the `retries` property is set.\n     */\n    eventInvokeConfig?: Transform<lambda.FunctionEventInvokeConfigArgs>;\n  };\n  /**\n   * @internal\n   */\n  _skipMetadata?: boolean;\n  /**\n   * @internal\n   */\n  _skipHint?: boolean;\n}\n\n/**\n * The `Function` component lets you add serverless functions to your app.\n * It uses [AWS Lambda](https://aws.amazon.com/lambda/).\n *\n * #### Supported runtimes\n *\n * Currently supports **Node.js** and **Golang** functions. **Python** and **Rust**\n * are community supported. Other runtimes are on the roadmap.\n *\n * @example\n *\n * #### Minimal example\n *\n *\n * <Tabs>\n *   <TabItem label=\"Node\">\n *   Pass in the path to your handler function.\n *\n *   ```ts title=\"sst.config.ts\"\n *   new sst.aws.Function(\"MyFunction\", {\n *     handler: \"src/lambda.handler\"\n *   });\n *   ```\n *\n *   [Learn more below](#handler).\n *   </TabItem>\n *   <TabItem label=\"Python\">\n *   Pass in the path to your handler function.\n *\n *   ```ts title=\"sst.config.ts\"\n *   new sst.aws.Function(\"MyFunction\", {\n *     runtime: \"python3.11\",\n *     handler: \"functions/src/functions/api.handler\"\n *   });\n *   ```\n *\n *   You need to have uv installed and your handler function needs to be in a uv workspace. [Learn more below](#handler).\n *   </TabItem>\n *   <TabItem label=\"Go\">\n *   Pass in the directory to your Go module.\n *\n *   ```ts title=\"sst.config.ts\"\n *   new sst.aws.Function(\"MyFunction\", {\n *     runtime: \"go\",\n *     handler: \"./src\"\n *   });\n *   ```\n *\n *   [Learn more below](#handler).\n *   </TabItem>\n *   <TabItem label=\"Rust\">\n *   Pass in the directory where your Cargo.toml lives.\n *\n *   ```ts title=\"sst.config.ts\"\n *   new sst.aws.Function(\"MyFunction\", {\n *     runtime: \"rust\",\n *     handler: \"./crates/api/\"\n *   });\n *   ```\n *\n *   [Learn more below](#handler).\n *   </TabItem>\n * </Tabs>\n *\n * #### Set additional config\n *\n * Pass in additional Lambda config.\n *\n * ```ts {3,4} title=\"sst.config.ts\"\n * new sst.aws.Function(\"MyFunction\", {\n *   handler: \"src/lambda.handler\",\n *   timeout: \"3 minutes\",\n *   memory: \"1024 MB\"\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to the function. This will grant permissions\n * to the resources and allow you to access it in your handler.\n *\n * ```ts {5} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.Function(\"MyFunction\", {\n *   handler: \"src/lambda.handler\",\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your handler.\n *\n * <Tabs>\n *   <TabItem label=\"Node\">\n *   ```ts title=\"src/lambda.ts\"\n *   import { Resource } from \"sst\";\n *\n *   console.log(Resource.MyBucket.name);\n *   ```\n *   </TabItem>\n *   <TabItem label=\"Python\">\n *   ```ts title=\"functions/src/functions/api.py\"\n *   from sst import Resource\n *\n *   def handler(event, context):\n *       print(Resource.MyBucket.name)\n *   ```\n *\n *   Where the `sst` package can be added to your `pyproject.toml`.\n *\n *   ```toml title=\"functions/pyproject.toml\"\n *   [tool.uv.sources]\n *   sst = { git = \"https://github.com/sst/sst.git\", subdirectory = \"sdk/python\", branch = \"dev\" }\n *   ```\n *   </TabItem>\n *   <TabItem label=\"Go\">\n *   ```go title=\"src/main.go\"\n *   import (\n *     \"github.com/sst/sst/v3/sdk/golang/resource\"\n *   )\n *\n *   resource.Get(\"MyBucket\", \"name\")\n *   ```\n *   </TabItem>\n *   <TabItem label=\"Rust\">\n *   ```rust title=\"src/main.rs\"\n *   use sst_sdk::Resource;\n *   #[derive(serde::Deserialize, Debug)]\n *   struct Bucket {\n *      name: String,\n *   }\n *\n *   let resource = Resource::init().unwrap();\n *   let Bucket { name } = resource.get(\"Bucket\").unwrap();\n *   ```\n *   </TabItem>\n * </Tabs>\n *\n * #### Set environment variables\n *\n * Set environment variables that you can read in your function. For example, using\n * `process.env` in your Node.js functions.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * new sst.aws.Function(\"MyFunction\", {\n *   handler: \"src/lambda.handler\",\n *   environment: {\n *     DEBUG: \"true\"\n *   }\n * });\n * ```\n *\n * #### Enable function URLs\n *\n * Enable function URLs to invoke the function over HTTP.\n *\n * ```ts {3} title=\"sst.config.ts\"\n * new sst.aws.Function(\"MyFunction\", {\n *   handler: \"src/lambda.handler\",\n *   url: true\n * });\n * ```\n *\n * #### Bundling\n *\n * Customize how SST uses [esbuild](https://esbuild.github.io/) to bundle your Node.js\n * functions with the `nodejs` property.\n *\n * ```ts title=\"sst.config.ts\" {3-5}\n * new sst.aws.Function(\"MyFunction\", {\n *   handler: \"src/lambda.handler\",\n *   nodejs: {\n *     install: [\"pg\"]\n *   }\n * });\n * ```\n *\n * Or override it entirely by passing in your own function `bundle`.\n */\nexport class Function extends Component implements Link.Linkable {\n  private constructorName: string;\n  private function: Output<lambda.Function>;\n  private role: iam.Role;\n  private logGroup: Output<cloudwatch.LogGroup | undefined>;\n  private urlEndpoint: Output<string | undefined>;\n  private eventInvokeConfig?: lambda.FunctionEventInvokeConfig;\n\n  private static readonly encryptionKey = lazy(\n    () =>\n      new RandomBytes(\"LambdaEncryptionKey\", {\n        length: 32,\n      }),\n  );\n\n  public static readonly appsync = lazy(() =>\n    rpc.call(\"Provider.Aws.Appsync\", {}),\n  );\n\n  constructor(\n    name: string,\n    args: FunctionArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n    this.constructorName = name;\n\n    const parent = this;\n    const dev = normalizeDev();\n    const isContainer = all([args.python, dev]).apply(\n      ([python, dev]) => !dev && (python?.container ?? false),\n    );\n    const partition = getPartitionOutput({}, opts).partition;\n    const region = getRegionOutput({}, opts).name;\n    const bootstrapData = region.apply((region) => bootstrap.forRegion(region));\n    const injections = normalizeInjections();\n    const runtime = output(args.runtime ?? \"nodejs20.x\");\n    const timeout = normalizeTimeout();\n    const memory = normalizeMemory();\n    const storage = output(args.storage).apply((v) => v ?? \"512 MB\");\n    const architecture = output(args.architecture).apply((v) => v ?? \"x86_64\");\n    const environment = normalizeEnvironment();\n    const streaming = normalizeStreaming();\n    const logging = normalizeLogging();\n    const volume = normalizeVolume();\n    const url = normalizeUrl();\n    const copyFiles = normalizeCopyFiles();\n    const policies = output(args.policies ?? []);\n    const vpc = normalizeVpc();\n\n    const linkData = buildLinkData();\n    const linkPermissions = buildLinkPermissions();\n    const { bundle, handler: handler0, sourcemaps } = buildHandler();\n    const { handler, wrapper } = buildHandlerWrapper();\n    const role = createRole();\n    const imageAsset = createImageAsset();\n    const logGroup = createLogGroup();\n    const zipAsset = createZipAsset();\n    const fn = createFunction();\n    const urlEndpoint = createUrl();\n    createProvisioned();\n    const eventInvokeConfig = createEventInvokeConfig();\n\n    const links = linkData.apply((input) => input.map((item) => item.name));\n\n    this.function = fn;\n    this.role = role;\n    this.logGroup = logGroup;\n    this.urlEndpoint = urlEndpoint;\n    this.eventInvokeConfig = eventInvokeConfig;\n\n    const buildInput = output({\n      functionID: name,\n      handler: args.handler,\n      bundle: args.bundle,\n      logGroup: logGroup.apply((l) => l?.name),\n      encryptionKey: Function.encryptionKey().base64,\n      runtime,\n      links: output(linkData).apply((input) =>\n        Object.fromEntries(input.map((item) => [item.name, item.properties])),\n      ),\n      copyFiles,\n      properties: output({ nodejs: args.nodejs, python: args.python }).apply(\n        (val) => ({\n          ...(val.nodejs || val.python),\n          architecture,\n        }),\n      ),\n      dev,\n    });\n\n    buildInput.apply(async (input) => {\n      if (!input.dev) return;\n      await rpc.call(\"Runtime.AddTarget\", input);\n    });\n\n    this.registerOutputs({\n      _live: unsecret(\n        output(dev).apply((dev) => {\n          if (!dev) return undefined;\n          return all([\n            name,\n            links,\n            args.handler,\n            args.bundle,\n            args.runtime,\n            args.nodejs,\n            copyFiles,\n          ]).apply(\n            ([name, links, handler, bundle, runtime, nodejs, copyFiles]) => {\n              return {\n                functionID: name,\n                links,\n                handler: handler,\n                bundle: bundle,\n                runtime: runtime || \"nodejs20.x\",\n                copyFiles,\n                properties: nodejs,\n              };\n            },\n          );\n        }),\n      ),\n      _metadata: {\n        handler: args.handler,\n        internal: args._skipMetadata,\n        dev: dev,\n      },\n      _hint: args._skipHint ? undefined : urlEndpoint,\n    });\n\n    function normalizeDev() {\n      return all([args.dev, args.live]).apply(\n        ([d, l]) => $dev && d !== false && l !== false,\n      );\n    }\n\n    function normalizeInjections() {\n      return output(args.injections).apply((injections) => injections ?? []);\n    }\n\n    function normalizeTimeout() {\n      return output(args.timeout).apply((timeout) => timeout ?? \"20 seconds\");\n    }\n\n    function normalizeMemory() {\n      return output(args.memory).apply((memory) => memory ?? \"1024 MB\");\n    }\n\n    function normalizeEnvironment() {\n      return all([\n        args.environment,\n        dev,\n        bootstrapData,\n        Function.encryptionKey().base64,\n        args.link,\n      ]).apply(async ([environment, dev, bootstrap, key, link]) => {\n        const result = environment ?? {};\n        result.SST_RESOURCE_App = JSON.stringify({\n          name: $app.name,\n          stage: $app.stage,\n        });\n        for (const linkable of link || []) {\n          if (!Link.isLinkable(linkable)) continue;\n          const def = linkable.getSSTLink();\n          for (const item of def.include || []) {\n            if (item.type === \"environment\") Object.assign(result, item.env);\n          }\n        }\n        result.SST_KEY = key;\n        result.SST_KEY_FILE = \"resource.enc\";\n        if (dev) {\n          const appsync = await Function.appsync();\n          result.SST_REGION = process.env.SST_AWS_REGION!;\n          result.SST_APPSYNC_HTTP = appsync.http;\n          result.SST_APPSYNC_REALTIME = appsync.realtime;\n          result.SST_FUNCTION_ID = name;\n          result.SST_APP = $app.name;\n          result.SST_STAGE = $app.stage;\n          result.SST_ASSET_BUCKET = bootstrap.asset;\n          if (process.env.SST_FUNCTION_TIMEOUT) {\n            result.SST_FUNCTION_TIMEOUT = process.env.SST_FUNCTION_TIMEOUT;\n          }\n        }\n        return result;\n      });\n    }\n\n    function normalizeStreaming() {\n      return output(args.streaming).apply((streaming) => streaming ?? false);\n    }\n\n    function normalizeLogging() {\n      return output(args.logging).apply((logging) => {\n        if (logging === false) return undefined;\n\n        if (logging?.retention && logging?.logGroup) {\n          throw new VisibleError(\n            `Cannot set both \"logging.retention\" and \"logging.logGroup\"`,\n          );\n        }\n\n        return {\n          logGroup: logging?.logGroup,\n          retention: logging?.retention ?? \"1 month\",\n          format: logging?.format ?? \"text\",\n        };\n      });\n    }\n\n    function normalizeVolume() {\n      if (!args.volume) return;\n\n      return output(args.volume).apply((volume) => ({\n        efs:\n          volume.efs instanceof Efs\n            ? volume.efs.nodes.accessPoint.arn\n            : output(volume.efs),\n        path: volume.path ?? \"/mnt/efs\",\n      }));\n    }\n\n    function normalizeUrl() {\n      return output(args.url).apply((url) => {\n        if (url === false || url === undefined) return;\n        if (url === true) {\n          url = {};\n        }\n\n        // normalize authorization\n        const defaultAuthorization = \"none\" as const;\n        const authorization = url.authorization ?? defaultAuthorization;\n\n        // normalize cors\n        const defaultCors: types.input.lambda.FunctionUrlCors = {\n          allowHeaders: [\"*\"],\n          allowMethods: [\"*\"],\n          allowOrigins: [\"*\"],\n        };\n        const cors =\n          url.cors === false\n            ? undefined\n            : url.cors === true || url.cors === undefined\n              ? defaultCors\n              : {\n                ...defaultCors,\n                ...url.cors,\n                maxAge: url.cors.maxAge && toSeconds(url.cors.maxAge),\n              };\n\n        return {\n          authorization,\n          cors,\n          route: normalizeRouteArgs(url.router, url.route),\n        };\n      });\n    }\n\n    function normalizeCopyFiles() {\n      return output(args.copyFiles ?? []).apply((copyFiles) =>\n        Promise.all(\n          copyFiles.map(async (entry) => {\n            const from = path.join($cli.paths.root, entry.from);\n            const to = entry.to || entry.from;\n            if (path.isAbsolute(to)) {\n              throw new VisibleError(\n                `Copy destination path \"${to}\" must be relative`,\n              );\n            }\n\n            const stats = await fs.promises.stat(from);\n            const isDir = stats.isDirectory();\n\n            return { from, to, isDir };\n          }),\n        ),\n      );\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is undefined\n      if (!args.vpc) return;\n\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        const result = {\n          privateSubnets: args.vpc.privateSubnets,\n          securityGroups: args.vpc.securityGroups,\n        };\n        return all([\n          args.vpc.id,\n          args.vpc.nodes.natGateways,\n          args.vpc.nodes.natInstances,\n        ]).apply(([id, natGateways, natInstances]) => {\n          if (natGateways.length === 0 && natInstances.length === 0) {\n            warnOnce(\n              `\\nWarning: One or more functions are deployed in the \"${id}\" VPC, which does not have a NAT gateway. As a result, these functions cannot access the internet. If your functions need internet access, enable it by setting the \"nat\" prop on the \"Vpc\" component.\\n`,\n            );\n          }\n          return result;\n        });\n      }\n\n      return output(args.vpc).apply((vpc) => {\n        // \"vpc\" is object\n        if (vpc.subnets) {\n          throw new VisibleError(\n            `The \"vpc.subnets\" property has been renamed to \"vpc.privateSubnets\". Update your code to use \"vpc.privateSubnets\" instead.`,\n          );\n        }\n\n        return vpc;\n      });\n    }\n\n    function buildLinkData() {\n      return output(args.link || []).apply((links) => Link.build(links));\n    }\n\n    function buildLinkPermissions() {\n      return Link.getInclude<Permission>(\"aws.permission\", args.link);\n    }\n\n    function buildHandler() {\n      return all([runtime, dev, isContainer]).apply(\n        async ([runtime, dev, isContainer]) => {\n          if (dev) {\n            return {\n              handler: \"bootstrap\",\n              bundle: path.join($cli.paths.platform, \"dist\", \"bridge\"),\n            };\n          }\n\n          const buildResult = buildInput.apply(async (input) => {\n            const result = await rpc.call<{\n              handler: string;\n              out: string;\n              errors: string[];\n              sourcemaps: string[];\n            }>(\"Runtime.Build\", { ...input, isContainer });\n            if (result.errors.length > 0) {\n              throw new Error(result.errors.join(\"\\n\"));\n            }\n            if (args.hook?.postbuild) await args.hook.postbuild(result.out);\n            return result;\n          });\n\n          return {\n            handler: buildResult.handler,\n            bundle: buildResult.out,\n            sourcemaps: buildResult.sourcemaps,\n          };\n        },\n      );\n    }\n\n    function buildHandlerWrapper() {\n      const ret = all([\n        dev,\n        bundle,\n        handler0,\n        linkData,\n        streaming,\n        injections,\n        runtime,\n      ]).apply(\n        async ([\n          dev,\n          bundle,\n          handler,\n          linkData,\n          streaming,\n          injections,\n          runtime,\n        ]) => {\n          if (dev) return { handler };\n          if (!runtime.startsWith(\"nodejs\")) {\n            return { handler };\n          }\n\n          const hasUserInjections = injections.length > 0;\n\n          if (!hasUserInjections) return { handler };\n\n          const parsed = path.posix.parse(handler);\n          const handlerDir = parsed.dir;\n          const oldHandlerFileName = parsed.name;\n          const oldHandlerFunction = parsed.ext.replace(/^\\./, \"\");\n          const newHandlerFileName = \"server-index\";\n          const newHandlerFunction = \"handler\";\n\n          // Validate handler file exists\n          const newHandlerFileExt = [\".js\", \".mjs\", \".cjs\"].find((ext) =>\n            fs.existsSync(\n              path.join(bundle!, handlerDir, oldHandlerFileName + ext),\n            ),\n          );\n          if (!newHandlerFileExt) {\n            throw new VisibleError(\n              `Could not find handler file \"${handler}\" for function \"${name}\"`,\n            );\n          }\n\n          const split = injections.reduce(\n            (acc, item) => {\n              if (item.startsWith(\"outer:\")) {\n                acc.outer.push(item.substring(\"outer:\".length));\n                return acc;\n              }\n              acc.inner.push(item);\n              return acc;\n            },\n            { outer: [] as string[], inner: [] as string[] },\n          );\n\n          return {\n            handler: path.posix.join(\n              handlerDir,\n              `${newHandlerFileName}.${newHandlerFunction}`,\n            ),\n            wrapper: {\n              name: path.posix.join(handlerDir, `${newHandlerFileName}.mjs`),\n              content: streaming\n                ? [\n                  ...split.outer,\n                  `export const ${newHandlerFunction} = awslambda.streamifyResponse(async (event, responseStream, context) => {`,\n                  ...split.inner,\n                  `  const { ${oldHandlerFunction}: rawHandler} = await import(\"./${oldHandlerFileName}${newHandlerFileExt}\");`,\n                  `  return rawHandler(event, responseStream, context);`,\n                  `});`,\n                ].join(\"\\n\")\n                : [\n                  ...split.outer,\n                  `export const ${newHandlerFunction} = async (event, context) => {`,\n                  ...split.inner,\n                  `  const { ${oldHandlerFunction}: rawHandler} = await import(\"./${oldHandlerFileName}${newHandlerFileExt}\");`,\n                  `  return rawHandler(event, context);`,\n                  `};`,\n                ].join(\"\\n\"),\n            },\n          };\n        },\n      );\n      return {\n        handler: ret.handler,\n        wrapper: ret.wrapper,\n      };\n    }\n\n    function createRole() {\n      if (args.role) {\n        return iam.Role.get(\n          `${name}Role`,\n          output(args.role).apply(parseRoleArn).roleName,\n          {},\n          { parent },\n        );\n      }\n\n      const policy = all([args.permissions || [], linkPermissions, dev]).apply(\n        ([argsPermissions, linkPermissions, dev]) =>\n          iam.getPolicyDocumentOutput({\n            statements: [\n              ...argsPermissions,\n              ...linkPermissions,\n              ...(dev\n                ? [\n                  {\n                    effect: \"allow\",\n                    actions: [\"appsync:*\"],\n                    resources: [\"*\"],\n                  },\n                  {\n                    effect: \"allow\",\n                    actions: [\"s3:*\"],\n                    resources: [\n                      interpolate`arn:${partition}:s3:::${bootstrapData.asset}`,\n                      interpolate`arn:${partition}:s3:::${bootstrapData.asset}/*`,\n                    ],\n                  },\n                ]\n                : []),\n            ].map((item) => ({\n              effect: (() => {\n                const effect = item.effect ?? \"allow\";\n                return effect.charAt(0).toUpperCase() + effect.slice(1);\n              })(),\n              actions: item.actions,\n              resources: item.resources,\n            })),\n          }),\n      );\n\n      return new iam.Role(\n        ...transform(\n          args.transform?.role,\n          `${name}Role`,\n          {\n            assumeRolePolicy: !dev\n              ? iam.assumeRolePolicyForPrincipal({\n                Service: \"lambda.amazonaws.com\",\n              })\n              : iam.getPolicyDocumentOutput({\n                statements: [\n                  {\n                    actions: [\"sts:AssumeRole\"],\n                    principals: [\n                      {\n                        type: \"Service\",\n                        identifiers: [\"lambda.amazonaws.com\"],\n                      },\n                      {\n                        type: \"AWS\",\n                        identifiers: [\n                          interpolate`arn:${partition}:iam::${getCallerIdentityOutput({}, opts).accountId\n                            }:root`,\n                        ],\n                      },\n                    ],\n                  },\n                ],\n              }).json,\n            // if there are no statements, do not add an inline policy.\n            // adding an inline policy with no statements will cause an error.\n            inlinePolicies: policy.apply(({ statements }) =>\n              statements ? [{ name: \"inline\", policy: policy.json }] : [],\n            ),\n            managedPolicyArns: all([logging, policies]).apply(\n              ([logging, policies]) => [\n                ...policies,\n                ...(logging\n                  ? [\n                    interpolate`arn:${partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole`,\n                  ]\n                  : []),\n                ...(vpc\n                  ? [\n                    interpolate`arn:${partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole`,\n                  ]\n                  : []),\n              ],\n            ),\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createImageAsset() {\n      // The build artifact directory already exists, with all the user code and\n      // config files. It also has the dockerfile, we need to now just build and push to\n      // the container registry.\n      return all([isContainer, dev, bundle]).apply(\n        ([\n          isContainer,\n          dev,\n          bundle, // We need the bundle to be resolved because of implicit dockerfiles even though we don't use it here\n        ]) => {\n          if (!isContainer || dev) return;\n\n          const authToken = ecr.getAuthorizationTokenOutput({\n            registryId: bootstrapData.assetEcrRegistryId,\n          });\n\n          return new Image(\n            `${name}Image`,\n            {\n              tags: [$interpolate`${bootstrapData.assetEcrUrl}:latest`],\n              context: {\n                location: path.join(\n                  $cli.paths.work,\n                  \"artifacts\",\n                  `${name}-src`,\n                ),\n              },\n              cacheFrom: [\n                {\n                  registry: {\n                    ref: $interpolate`${bootstrapData.assetEcrUrl}:${name}-cache`,\n                  },\n                },\n              ],\n              cacheTo: [\n                {\n                  registry: {\n                    ref: $interpolate`${bootstrapData.assetEcrUrl}:${name}-cache`,\n                    imageManifest: true,\n                    ociMediaTypes: true,\n                    mode: \"max\",\n                  },\n                },\n              ],\n              platforms: [\n                architecture.apply((v) =>\n                  v === \"arm64\" ? \"linux/arm64\" : \"linux/amd64\",\n                ),\n              ],\n              push: true,\n              registries: [\n                authToken.apply((authToken) => ({\n                  address: authToken.proxyEndpoint,\n                  username: authToken.userName,\n                  password: secret(authToken.password),\n                })),\n              ],\n            },\n            { parent },\n          );\n        },\n      );\n    }\n\n    function createZipAsset() {\n      // Note: cannot point the bundle to the `.open-next/server-function`\n      //       b/c the folder contains node_modules. And pnpm node_modules\n      //       contains symlinks. Pulumi cannot zip symlinks correctly.\n      //       We will zip the folder ourselves.\n      return all([\n        bundle,\n        wrapper,\n        sourcemaps,\n        copyFiles,\n        isContainer,\n        logGroup.apply((l) => l?.arn),\n        dev,\n      ]).apply(\n        async ([\n          bundle,\n          wrapper,\n          sourcemaps,\n          copyFiles,\n          isContainer,\n          logGroupArn,\n          dev,\n        ]) => {\n          if (isContainer) return;\n\n          const zipPath = path.resolve(\n            $cli.paths.work,\n            \"artifacts\",\n            name,\n            \"code.zip\",\n          );\n          await fs.promises.mkdir(path.dirname(zipPath), {\n            recursive: true,\n          });\n\n          await new Promise(async (resolve, reject) => {\n            const ws = fs.createWriteStream(zipPath);\n            const archive = archiver(\"zip\", {\n              // Ensure deterministic zip file hashes\n              // https://github.com/archiverjs/node-archiver/issues/397#issuecomment-554327338\n              statConcurrency: 1,\n            });\n            archive.on(\"warning\", reject);\n            archive.on(\"error\", reject);\n            // archive has been finalized and the output file descriptor has closed, resolve promise\n            // this has to be done before calling `finalize` since the events may fire immediately after.\n            // see https://www.npmjs.com/package/archiver\n            ws.once(\"close\", () => {\n              resolve(zipPath);\n            });\n            archive.pipe(ws);\n\n            const files = [];\n\n            for (const item of [\n              {\n                from: bundle,\n                to: \".\",\n                isDir: true,\n              },\n              ...(!dev ? copyFiles : []),\n            ]) {\n              if (!item.isDir) {\n                files.push({\n                  from: item.from,\n                  to: item.to,\n                });\n              }\n              const found = await glob(\"**\", {\n                cwd: item.from,\n                dot: true,\n                ignore:\n                  sourcemaps?.map((item) => path.relative(bundle, item)) || [],\n              });\n              files.push(\n                ...found.map((file) => ({\n                  from: path.join(item.from, file),\n                  to: path.join(item.to, file),\n                })),\n              );\n            }\n            files.sort((a, b) => a.to.localeCompare(b.to));\n            for (const file of files) {\n              archive.file(file.from, {\n                name: file.to,\n                date: new Date(0),\n              });\n            }\n\n            // Add handler wrapper into the zip\n            if (wrapper) {\n              archive.append(wrapper.content, {\n                name: wrapper.name,\n                date: new Date(0),\n              });\n            }\n\n            await archive.finalize();\n          });\n\n          // Calculate hash of the zip file\n          const hash = crypto.createHash(\"sha256\");\n          hash.update(await fs.promises.readFile(zipPath, \"utf-8\"));\n          const hashValue = hash.digest(\"hex\");\n          const assetBucket = region.apply((region) =>\n            bootstrap.forRegion(region).then((d) => d.asset),\n          );\n          if (logGroupArn && sourcemaps) {\n            let index = 0;\n            for (const file of sourcemaps) {\n              new s3.BucketObjectv2(\n                `${name}Sourcemap${index}`,\n                {\n                  key: interpolate`sourcemap/${logGroupArn}/${hashValue}.${path.basename(\n                    file,\n                  )}`,\n                  bucket: assetBucket,\n                  source: new asset.FileAsset(file),\n                },\n                { parent, retainOnDelete: true },\n              );\n              index++;\n            }\n          }\n\n          return new s3.BucketObjectv2(\n            `${name}Code`,\n            {\n              key: interpolate`assets/${name}-code-${hashValue}.zip`,\n              bucket: assetBucket,\n              source: new asset.FileArchive(zipPath),\n            },\n            { parent },\n          );\n        },\n      );\n    }\n\n    function createLogGroup() {\n      return logging.apply((logging) => {\n        if (!logging) return;\n        if (logging.logGroup) return;\n\n        return new cloudwatch.LogGroup(\n          ...transform(\n            args.transform?.logGroup,\n            `${name}LogGroup`,\n            {\n              name: interpolate`/aws/lambda/${args.name ?? physicalName(64, `${name}Function`)\n                }`,\n              retentionInDays: RETENTION[logging.retention],\n            },\n            { parent, ignoreChanges: [\"name\"] },\n          ),\n        );\n      });\n    }\n\n    function createFunction() {\n      return all([\n        logging,\n        logGroup,\n        isContainer,\n        imageAsset,\n        zipAsset,\n        args.concurrency,\n        dev,\n      ]).apply(\n        ([\n          logging,\n          logGroup,\n          isContainer,\n          imageAsset,\n          zipAsset,\n          concurrency,\n          dev,\n        ]) => {\n          // This is a hack to avoid handler being marked as having propertyDependencies.\n          // There is an unresolved bug in pulumi that causes issues when it does\n          // @ts-expect-error\n          handler.allResources = () => Promise.resolve(new Set());\n          const transformed = transform(\n            args.transform?.function,\n            `${name}Function`,\n            {\n              name: args.name,\n              description: args.description ?? \"\",\n              role: args.role ?? role!.arn,\n              timeout: timeout.apply((timeout) => toSeconds(timeout)),\n              memorySize: memory.apply((memory) => toMBs(memory)),\n              ephemeralStorage: { size: storage.apply((v) => toMBs(v)) },\n              environment: {\n                variables: environment,\n              },\n              architectures: [architecture],\n              loggingConfig: logging && {\n                logFormat: logging.format === \"json\" ? \"JSON\" : \"Text\",\n                logGroup: logging.logGroup ?? logGroup!.name,\n              },\n              vpcConfig: vpc && {\n                securityGroupIds: vpc.securityGroups,\n                subnetIds: vpc.privateSubnets,\n              },\n              fileSystemConfig: volume && {\n                arn: volume.efs,\n                localMountPath: volume.path,\n              },\n              layers: args.layers,\n              tags: args.tags,\n              publish: output(args.versioning).apply((v) => v ?? false),\n              reservedConcurrentExecutions: concurrency?.reserved,\n              ...(isContainer\n                ? {\n                  packageType: \"Image\",\n                  imageUri: imageAsset!.ref.apply(\n                    (ref) => ref?.replace(\":latest\", \"\"),\n                  ),\n                  imageConfig: {\n                    commands: [\n                      all([handler, runtime]).apply(([handler, runtime]) => {\n                        // If a python container image we have to rewrite the handler path so lambdaric is happy\n                        // This means no leading . and replace all / with .\n                        if (isContainer && runtime.includes(\"python\")) {\n                          return handler\n                            .replace(/\\.\\//g, \"\")\n                            .replace(/\\//g, \".\");\n                        }\n                        return handler;\n                      }),\n                    ],\n                  },\n                }\n                : {\n                  packageType: \"Zip\",\n                  s3Bucket: zipAsset!.bucket,\n                  s3Key: zipAsset!.key,\n                  handler: unsecret(handler),\n                  runtime: runtime.apply((v) =>\n                    v === \"go\" || v === \"rust\" ? \"provided.al2023\" : v,\n                  ),\n                }),\n            },\n            { parent },\n          );\n          return new lambda.Function(\n            transformed[0],\n            {\n              ...transformed[1],\n              ...(dev\n                ? {\n                  description: transformed[1].description\n                    ? output(transformed[1].description).apply(\n                      (v) => `${v.substring(0, 240)} (live)`,\n                    )\n                    : \"live\",\n                  runtime: \"provided.al2023\",\n                  architectures: [\"x86_64\"],\n                }\n                : {}),\n            },\n            transformed[2],\n          );\n        },\n      );\n    }\n\n    function createUrl() {\n      return url.apply((url) => {\n        if (url === undefined) return output(undefined);\n\n        // create the function url\n        const fnUrl = new lambda.FunctionUrl(\n          `${name}Url`,\n          {\n            functionName: fn.name,\n            authorizationType: url.authorization === \"iam\" ? \"AWS_IAM\" : \"NONE\",\n            invokeMode: streaming.apply((streaming) =>\n              streaming ? \"RESPONSE_STREAM\" : \"BUFFERED\",\n            ),\n            cors: url.cors,\n          },\n          { parent },\n        );\n        if (!url.route) return fnUrl.functionUrl;\n\n        // add router route\n        const routeNamespace = crypto\n          .createHash(\"md5\")\n          .update(`${$app.name}-${$app.stage}-${name}`)\n          .digest(\"hex\")\n          .substring(0, 4);\n        new KvKeys(\n          `${name}RouteKey`,\n          {\n            store: url.route.routerKvStoreArn,\n            namespace: routeNamespace,\n            entries: fnUrl.functionUrl.apply((fnUrl) => ({\n              metadata: JSON.stringify({\n                host: new URL(fnUrl).host,\n              }),\n            })),\n            purge: false,\n          },\n          { parent },\n        );\n        new KvRoutesUpdate(\n          `${name}RoutesUpdate`,\n          {\n            store: url.route.routerKvStoreArn,\n            namespace: url.route.routerKvNamespace,\n            key: \"routes\",\n            entry: url.route.apply((route) =>\n              [\"url\", routeNamespace, route.hostPattern, route.pathPrefix].join(\n                \",\",\n              ),\n            ),\n          },\n          { parent },\n        );\n        return url.route.routerUrl;\n      });\n    }\n\n    function createProvisioned() {\n      return all([args.concurrency, fn.publish]).apply(\n        ([concurrency, publish]) => {\n          if (!concurrency?.provisioned || concurrency.provisioned === 0) {\n            return;\n          }\n\n          if (publish !== true) {\n            throw new VisibleError(\n              `Provisioned concurrency requires function versioning. Set \"versioning: true\" to enable function versioning.`,\n            );\n          }\n\n          return new lambda.ProvisionedConcurrencyConfig(\n            `${name}Provisioned`,\n            {\n              functionName: fn.name,\n              qualifier: fn.version,\n              provisionedConcurrentExecutions: concurrency.provisioned,\n            },\n            { parent },\n          );\n        },\n      );\n    }\n\n    function createEventInvokeConfig() {\n      if (args.retries === undefined) {\n        return undefined;\n      }\n\n      return new lambda.FunctionEventInvokeConfig(\n        ...transform(\n          args.transform?.eventInvokeConfig,\n          `${name}EventInvokeConfig`,\n          {\n            functionName: fn.name,\n            maximumRetryAttempts: args.retries,\n          },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The IAM Role the function will use.\n       */\n      role: this.role,\n      /**\n       * The AWS Lambda function.\n       */\n      function: this.function,\n      /**\n       * The CloudWatch Log Group the function logs are stored.\n       */\n      logGroup: this.logGroup,\n      /**\n       * The Function Event Invoke Config resource if retries are configured.\n       */\n      eventInvokeConfig: this.eventInvokeConfig,\n    };\n  }\n\n  /**\n   * The Lambda function URL if `url` is enabled.\n   */\n  public get url() {\n    return this.urlEndpoint.apply((url) => {\n      if (!url) {\n        throw new VisibleError(\n          `Function URL is not enabled. Enable it with \"url: true\".`,\n        );\n      }\n      return url;\n    });\n  }\n\n  /**\n   * The name of the Lambda function.\n   */\n  public get name() {\n    return this.function.name;\n  }\n\n  /**\n   * The ARN of the Lambda function.\n   */\n  public get arn() {\n    return this.function.arn;\n  }\n\n  /**\n   * Add environment variables lazily to the function after the function is created.\n   *\n   * This is useful for adding environment variables that are only available after the\n   * function is created, like the function URL.\n   *\n   * @param environment The environment variables to add to the function.\n   *\n   * @example\n   * Add the function URL as an environment variable.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const fn = new sst.aws.Function(\"MyFunction\", {\n   *   handler: \"src/handler.handler\",\n   *   url: true,\n   * });\n   *\n   * fn.addEnvironment({\n   *   URL: fn.url,\n   * });\n   * ```\n   */\n  public addEnvironment(environment: Input<Record<string, Input<string>>>) {\n    return new FunctionEnvironmentUpdate(\n      `${this.constructorName}EnvironmentUpdate`,\n      {\n        functionName: this.name,\n        environment,\n        region: getRegionOutput(undefined, { parent: this }).name,\n      },\n      { parent: this },\n    );\n  }\n\n  /** @internal */\n  static fromDefinition(\n    name: string,\n    definition: Input<string | FunctionArgs>,\n    override: Pick<FunctionArgs, \"description\" | \"permissions\">,\n    argsTransform?: Transform<FunctionArgs>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return output(definition).apply((definition) => {\n      if (typeof definition === \"string\") {\n        return new Function(\n          ...transform(\n            argsTransform,\n            name,\n            { handler: definition, ...override },\n            opts || {},\n          ),\n        );\n      } else if (definition.handler) {\n        return new Function(\n          ...transform(\n            argsTransform,\n            name,\n            {\n              ...definition,\n              ...override,\n              permissions: all([\n                definition.permissions,\n                override?.permissions,\n              ]).apply(([permissions, overridePermissions]) => [\n                ...(permissions ?? []),\n                ...(overridePermissions ?? []),\n              ]),\n            },\n            opts || {},\n          ),\n        );\n      }\n      throw new Error(`Invalid function definition for the \"${name}\" Function`);\n    });\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        name: this.name,\n        url: this.urlEndpoint,\n      },\n      include: [\n        permission({\n          actions: [\"lambda:InvokeFunction\"],\n          resources: [this.function.arn],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Function\";\n// @ts-expect-error\nFunction.__pulumiType = __pulumiType;\n", "import { dynamic } from \"@pulumi/pulumi\";\nimport http from \"http\";\n\nexport module rpc {\n  export class MethodNotFoundError extends Error {\n    constructor(public method: string) {\n      super(`Method \"${method}\" not found`);\n    }\n  }\n  export async function call<T = any>(method: string, args: any) {\n    return new Promise<T>((resolve, reject) => {\n      const url = new URL(process.env.SST_SERVER! + \"/rpc\");\n      const options = {\n        hostname: url.hostname,\n        port: url.port,\n        path: url.pathname,\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      };\n\n      const req = http.request(options, (res) => {\n        let data = \"\";\n\n        res.on(\"data\", (chunk) => {\n          data += chunk;\n        });\n\n        res.on(\"end\", () => {\n          if (res.statusCode !== 200) {\n            reject(new Error(`Failed to call RPC: ${data}`));\n            return;\n          }\n          try {\n            const json = JSON.parse(data);\n            if (json.error) {\n              if (json.error.startsWith(\"rpc: can't find\")) {\n                reject(new MethodNotFoundError(method));\n                return;\n              }\n              reject(new Error(json.error));\n              return;\n            }\n            resolve(json.result);\n          } catch (error: any) {\n            reject(new Error(`Failed to parse JSON: ${error.message}`));\n          }\n        });\n      });\n\n      req.on(\"error\", (error) => {\n        reject(error);\n      });\n\n      // Set timeout to 0 to prevent any timeout\n      req.setTimeout(0);\n\n      const body = JSON.stringify({\n        jsonrpc: \"1.0\",\n        method,\n        params: [args],\n      });\n\n      req.write(body);\n      req.end();\n    });\n  }\n\n  export class Provider implements dynamic.ResourceProvider {\n    constructor(private type: string) {}\n    private name(action: string) {\n      return \"Resource.\" + this.type + \".\" + action;\n    }\n    async create(inputs: any) {\n      return call(this.name(\"Create\"), inputs) as Promise<dynamic.CreateResult>;\n    }\n\n    async delete(id: string, outs: any): Promise<void> {\n      return call(this.name(\"Delete\"), { id, outs }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return;\n        throw ex;\n      });\n    }\n\n    async update(id: string, olds: any, news: any) {\n      return call(this.name(\"Update\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError)\n          return {\n            id,\n          };\n        throw ex;\n      });\n    }\n\n    async read(id: string, props: any): Promise<dynamic.ReadResult> {\n      return call(this.name(\"Read\"), { id, props }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, props };\n        throw ex;\n      });\n    }\n\n    async diff(id: string, olds: any, news: any): Promise<dynamic.DiffResult> {\n      return call(this.name(\"Diff\"), { id, olds, news }).catch((ex) => {\n        if (ex instanceof MethodNotFoundError) return { id, olds, news };\n        throw ex;\n      });\n    }\n  }\n}\n", "import { rpc } from \"../../rpc/rpc\";\n\ninterface BootstrapData {\n  asset: string;\n  assetEcrRegistryId: string;\n  assetEcrUrl: string;\n  state: string;\n  appsyncHttp: string;\n  appsyncRealtime: string;\n}\n\nexport const bootstrap = {\n  forRegion(region: string): Promise<BootstrapData> {\n    return rpc.call(\"Provider.Aws.Bootstrap\", { region });\n  },\n};\n", "export type Size = `${number} ${\"MB\" | \"GB\"}`;\nexport type SizeGbTb = `${number} ${\"GB\" | \"TB\"}`;\n\nexport function toMBs(size: Size | SizeGbTb) {\n  const [count, unit] = size.split(\" \");\n  const countNum = parseFloat(count);\n  if (unit === \"MB\") {\n    return countNum;\n  } else if (unit === \"GB\") {\n    return countNum * 1024;\n  } else if (unit === \"TB\") {\n    return countNum * 1024 * 1024;\n  }\n  throw new Error(`Invalid size ${size}`);\n}\n\nexport function toGBs(size: Size | SizeGbTb) {\n  const [count, unit] = size.split(\" \");\n  const countNum = parseFloat(count);\n  if (unit === \"MB\") {\n    return countNum / 1024;\n  } else if (unit === \"GB\") {\n    return countNum;\n  } else if (unit === \"TB\") {\n    return countNum * 1024;\n  }\n  throw new Error(`Invalid size ${size}`);\n}\n", "export const RETENTION = {\n  \"1 day\": 1,\n  \"3 days\": 3,\n  \"5 days\": 5,\n  \"1 week\": 7,\n  \"2 weeks\": 14,\n  \"1 month\": 30,\n  \"2 months\": 60,\n  \"3 months\": 90,\n  \"4 months\": 120,\n  \"5 months\": 150,\n  \"6 months\": 180,\n  \"1 year\": 365,\n  \"13 months\": 400,\n  \"18 months\": 545,\n  \"2 years\": 731,\n  \"3 years\": 1096,\n  \"5 years\": 1827,\n  \"6 years\": 2192,\n  \"7 years\": 2557,\n  \"8 years\": 2922,\n  \"9 years\": 3288,\n  \"10 years\": 3653,\n  forever: 0,\n};\n", "/**\n * The AWS Permission Linkable helper is used to define the AWS permissions included with the\n * [`sst.Linkable`](/docs/component/linkable/) component.\n *\n * @example\n *\n * ```ts\n * sst.aws.permission({\n *   actions: [\"lambda:InvokeFunction\"],\n *   resources: [\"*\"]\n * })\n * ```\n *\n * @packageDocumentation\n */\n\nimport { Prettify } from \"../component.js\";\nimport { FunctionPermissionArgs } from \"./function.js\";\n\nexport interface InputArgs extends Prettify<FunctionPermissionArgs> {}\n\nexport function permission(input: InputArgs) {\n  return {\n    type: \"aws.permission\" as const,\n    ...input,\n  };\n}\n\nexport type Permission = ReturnType<typeof permission>;\n", "import {\n  all,\n  ComponentResourceOptions,\n  interpolate,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Input } from \"../input\";\nimport {\n  ec2,\n  getAvailabilityZonesOutput,\n  getPartitionOutput,\n  iam,\n  route53,\n  servicediscovery,\n  ssm,\n} from \"@pulumi/aws\";\nimport { Vpc as VpcV1 } from \"./vpc-v1\";\nimport { Link } from \"../link\";\nimport { VisibleError } from \"../error\";\nimport { PrivateKey } from \"@pulumi/tls\";\nexport type { VpcArgs as VpcV1Args } from \"./vpc-v1\";\n\nexport interface VpcArgs {\n  /**\n   * Specify the Availability Zones or AZs for the VPC.\n   *\n   * You can specify a number of AZs or a list of AZs. If you specify a number, it will\n   * look up the availability zones in the region and automatically select that number of\n   * AZs. If you specify a list of AZs, it will use that list of AZs.\n   *\n   * By default, it creates a VPC with 2 availability zones since services like RDS and\n   * Fargate need at least 2 AZs.\n   * @default `2`\n   * @example\n   * Create a VPC with 3 AZs\n   * ```ts\n   * {\n   *   az: 3\n   * }\n   * ```\n   *\n   * Create a VPC with specific AZs\n   * ```ts\n   * {\n   *   az: [\"us-east-1a\", \"us-east-1b\"]\n   * }\n   * ```\n   */\n  az?: Input<number | Input<string>[]>;\n  /**\n   * Configures NAT. Enabling NAT allows resources in private subnets to connect to the internet.\n   *\n   * There are two NAT options:\n   * 1. `\"managed\"` creates a [NAT Gateway](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html)\n   * 2. `\"ec2\"` creates an [EC2 instance](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-nat-gateway.html)\n   *    with the [fck-nat](https://github.com/AndrewGuenther/fck-nat) AMI\n   *\n   * For `\"managed\"`, a NAT Gateway is created in each AZ. All the traffic from\n   * the private subnets are routed to the NAT Gateway in the same AZ.\n   *\n   * NAT Gateways are billed per hour and per gigabyte of data processed. A NAT Gateway for\n   * two AZs costs $65 per month. This is relatively expensive but it automatically scales\n   * based on the traffic.\n   *\n   * For `\"ec2\"`, an EC2 instance of type `t4g.nano` will be launched in each AZ\n   * with the [fck-nat](https://github.com/AndrewGuenther/fck-nat) AMI. All the traffic from\n   * the private subnets are routed to the Elastic Network Interface (ENI) of the EC2 instance\n   * in the same AZ.\n   *\n   * :::tip\n   * The `\"ec2\"` option uses fck-nat and is 10x cheaper than the `\"managed\"` NAT Gateway.\n   * :::\n   *\n   * NAT EC2 instances are much cheaper than NAT Gateways, the `t4g.nano` instance type is around\n   * $3 per month. But you'll need to scale it up manually if you need more bandwidth.\n   *\n   * @default NAT is disabled\n   * @example\n   * ```ts\n   * {\n   *   nat: \"managed\"\n   * }\n   * ```\n   */\n  nat?: Input<\n    | \"ec2\"\n    | \"managed\"\n    | {\n        /**\n         * Configures the type of NAT to create.\n         *\n         * - If `nat.ec2` is provided, `nat.type` defaults to `\"ec2\"`.\n         * - Otherwise, `nat.type` must be explicitly specified.\n         */\n        type?: Input<\"ec2\" | \"managed\">;\n        /**\n         * A list of Elastic IP allocation IDs to use for the NAT Gateways or NAT\n         * instances. The number of allocation IDs must match the number of AZs.\n         *\n         * By default, new Elastic IP addresses are created.\n         *\n         * @example\n         * ```ts\n         * {\n         *   nat: {\n         *     ip: [\"eipalloc-0123456789abcdef0\", \"eipalloc-0123456789abcdef1\"]\n         *   }\n         * }\n         * ```\n         */\n        ip?: Input<Input<string>[]>;\n        /**\n         * Configures the NAT EC2 instance.\n         * @default `{instance: \"t4g.nano\"}`\n         * @example\n         * ```ts\n         * {\n         *   nat: {\n         *     ec2: {\n         *       instance: \"t4g.large\"\n         *     }\n         *   }\n         * }\n         * ```\n         */\n        ec2?: Input<{\n          /**\n           * The type of instance to use for the NAT.\n           *\n           * @default `\"t4g.nano\"`\n           */\n          instance: Input<string>;\n          /**\n           * The AMI to use for the NAT.\n           *\n           * By default, the latest public [`fck-nat`](https://github.com/AndrewGuenther/fck-nat)\n           * AMI is used. However, if the AMI is not available in the region you are\n           * deploying to or you want to use a custom AMI, you can specify a different AMI.\n           *\n           * @default The latest `fck-nat` AMI\n           * @example\n           * ```ts\n           * {\n           *   nat: {\n           *     ec2: {\n           *       ami: \"ami-1234567890abcdef0\"\n           *     }\n           *   }\n           * }\n           * ```\n           */\n          ami?: Input<string>;\n        }>;\n      }\n  >;\n  /**\n   * Configures a bastion host that can be used to connect to resources in the VPC.\n   *\n   * When enabled, an EC2 instance of type `t4g.nano` with the bastion AMI will be launched\n   * in a public subnet. The instance will have AWS SSM (AWS Session Manager) enabled for\n   * secure access without the need for SSH key.\n   *\n   * It costs roughly $3 per month to run the `t4g.nano` instance.\n   *\n   * :::note\n   * If `nat: \"ec2\"` is enabled, the bastion host will reuse the NAT EC2 instance.\n   * :::\n   *\n   * However if `nat: \"ec2\"` is enabled, the EC2 instance that NAT creates will be used\n   * as the bastion host. No additional EC2 instance will be created.\n   *\n   * If you are running `sst dev`, a tunnel will be automatically created to the bastion host.\n   * This uses a network interface to forward traffic from your local machine to the bastion host.\n   *\n   * You can learn more about [`sst tunnel`](/docs/reference/cli#tunnel).\n   *\n   * @default `false`\n   * @example\n   * ```ts\n   * {\n   *   bastion: true\n   * }\n   * ```\n   */\n  bastion?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the EC2 VPC resource.\n     */\n    vpc?: Transform<ec2.VpcArgs>;\n    /**\n     * Transform the EC2 Internet Gateway resource.\n     */\n    internetGateway?: Transform<ec2.InternetGatewayArgs>;\n    /**\n     * Transform the EC2 NAT Gateway resource.\n     */\n    natGateway?: Transform<ec2.NatGatewayArgs>;\n    /**\n     * Transform the EC2 NAT instance resource.\n     */\n    natInstance?: Transform<ec2.InstanceArgs>;\n    /**\n     * Transform the EC2 NAT security group resource.\n     */\n    natSecurityGroup?: Transform<ec2.SecurityGroupArgs>;\n    /**\n     * Transform the EC2 Elastic IP resource.\n     */\n    elasticIp?: Transform<ec2.EipArgs>;\n    /**\n     * Transform the EC2 Security Group resource.\n     */\n    securityGroup?: Transform<ec2.SecurityGroupArgs>;\n    /**\n     * Transform the EC2 public subnet resource.\n     */\n    publicSubnet?: Transform<ec2.SubnetArgs>;\n    /**\n     * Transform the EC2 private subnet resource.\n     */\n    privateSubnet?: Transform<ec2.SubnetArgs>;\n    /**\n     * Transform the EC2 route table resource for the public subnet.\n     */\n    publicRouteTable?: Transform<ec2.RouteTableArgs>;\n    /**\n     * Transform the EC2 route table resource for the private subnet.\n     */\n    privateRouteTable?: Transform<ec2.RouteTableArgs>;\n    /**\n     * Transform the EC2 bastion instance resource.\n     */\n    bastionInstance?: Transform<ec2.InstanceArgs>;\n    /**\n     * Transform the EC2 bastion security group resource.\n     */\n    bastionSecurityGroup?: Transform<ec2.SecurityGroupArgs>;\n  };\n}\n\ninterface VpcRef {\n  ref: boolean;\n  vpcId: Input<string>;\n}\n\n/**\n * The `Vpc` component lets you add a VPC to your app. It uses [Amazon VPC](https://docs.aws.amazon.com/vpc/). This is useful for services like RDS and Fargate that need to be hosted inside\n * a VPC.\n *\n * This creates a VPC with 2 Availability Zones by default. It also creates the following\n * resources:\n *\n * 1. A default security group blocking all incoming internet traffic.\n * 2. A public subnet in each AZ.\n * 3. A private subnet in each AZ.\n * 4. An Internet Gateway. All the traffic from the public subnets are routed through it.\n * 5. If `nat` is enabled, a NAT Gateway or NAT instance in each AZ. All the traffic from\n *    the private subnets are routed to the NAT in the same AZ.\n *\n * :::note\n * By default, this does not create NAT Gateways or NAT instances.\n * :::\n *\n * @example\n *\n * #### Create a VPC\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Vpc(\"MyVPC\");\n * ```\n *\n * #### Create it with 3 Availability Zones\n *\n * ```ts title=\"sst.config.ts\" {2}\n * new sst.aws.Vpc(\"MyVPC\", {\n *   az: 3\n * });\n * ```\n *\n * #### Enable NAT\n *\n * ```ts title=\"sst.config.ts\" {2}\n * new sst.aws.Vpc(\"MyVPC\", {\n *   nat: \"managed\"\n * });\n * ```\n *\n * ---\n *\n * ### Cost\n *\n * By default, this component is **free**. Following is the cost to enable the `nat` or `bastion`\n * options.\n *\n * #### Managed NAT\n *\n * If you enable `nat` with the `managed` option, it uses a _NAT Gateway_ per `az` at $0.045 per\n * hour, and $0.045 per GB processed per month.\n *\n * That works out to a minimum of $0.045 x 2 x 24 x 30 or **$65 per month**. Adjust this for the\n * number of `az` and add $0.045 per GB processed per month.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [NAT Gateway pricing](https://aws.amazon.com/vpc/pricing/) for more details. Standard [data\n * transfer charges](https://aws.amazon.com/ec2/pricing/on-demand/#Data_Transfer) apply.\n *\n * #### EC2 NAT\n *\n * If you enable `nat` with the `ec2` option, it uses `t4g.nano` EC2 _On Demand_ instances per\n * `az` at $0.0042 per hour, and $0.09 per GB processed per month for the first 10TB.\n *\n * That works out to a minimum of $0.0042 x 2 x 24 x 30 or **$6 per month**. Adjust this for the\n * `nat.ec2.instance` you are using and add $0.09 per GB processed per month.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [EC2 On-Demand pricing](https://aws.amazon.com/vpc/pricing/) and the\n * [EC2 Data Transfer pricing](https://aws.amazon.com/ec2/pricing/on-demand/#Data_Transfer)\n * for more details.\n *\n * #### Bastion\n *\n * If you enable `bastion`, it uses a single `t4g.nano` EC2 _On Demand_ instance at\n * $0.0042 per hour, and $0.09 per GB processed per month for the first 10TB.\n *\n * That works out to $0.0042 x 24 x 30 or **$3 per month**. Add $0.09 per GB processed per month.\n *\n * However if `nat: \"ec2\"` is enabled, one of the NAT EC2 instances will be reused; making this\n * **free**.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [EC2 On-Demand pricing](https://aws.amazon.com/vpc/pricing/) and the\n * [EC2 Data Transfer pricing](https://aws.amazon.com/ec2/pricing/on-demand/#Data_Transfer)\n * for more details.\n */\nexport class Vpc extends Component implements Link.Linkable {\n  private vpc: ec2.Vpc;\n  private internetGateway: ec2.InternetGateway;\n  private securityGroup: ec2.SecurityGroup;\n  private natGateways: Output<ec2.NatGateway[]>;\n  private natInstances: Output<ec2.Instance[]>;\n  private elasticIps: Output<ec2.Eip[]>;\n  private _publicSubnets: Output<ec2.Subnet[]>;\n  private _privateSubnets: Output<ec2.Subnet[]>;\n  private publicRouteTables: Output<ec2.RouteTable[]>;\n  private privateRouteTables: Output<ec2.RouteTable[]>;\n  private bastionInstance: Output<ec2.Instance | undefined>;\n  private cloudmapNamespace: servicediscovery.PrivateDnsNamespace;\n  private privateKeyValue: Output<string | undefined>;\n  public static v1 = VpcV1;\n\n  constructor(\n    name: string,\n    args: VpcArgs = {},\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n    const _version = 2;\n    const _refVersion = 2;\n    const self = this;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.vpc = ref.vpc;\n      this.internetGateway = ref.internetGateway;\n      this.securityGroup = ref.securityGroup;\n      this._publicSubnets = output(ref.publicSubnets);\n      this._privateSubnets = output(ref.privateSubnets);\n      this.publicRouteTables = output(ref.publicRouteTables);\n      this.privateRouteTables = output(ref.privateRouteTables);\n      this.natGateways = output(ref.natGateways);\n      this.natInstances = output(ref.natInstances);\n      this.elasticIps = ref.elasticIps;\n      this.bastionInstance = ref.bastionInstance;\n      this.cloudmapNamespace = ref.cloudmapNamespace;\n      this.privateKeyValue = output(ref.privateKeyValue);\n      registerOutputs();\n      return;\n    }\n\n    registerVersion();\n    const zones = normalizeAz();\n    const nat = normalizeNat();\n    const partition = getPartitionOutput({}, opts).partition;\n\n    const vpc = createVpc();\n    const { keyPair, privateKeyValue } = createKeyPair();\n    const internetGateway = createInternetGateway();\n    const securityGroup = createSecurityGroup();\n    const { publicSubnets, publicRouteTables } = createPublicSubnets();\n    const elasticIps = createElasticIps();\n    const natGateways = createNatGateways();\n    const natInstances = createNatInstances();\n    const { privateSubnets, privateRouteTables } = createPrivateSubnets();\n    const bastionInstance = createBastion();\n    const cloudmapNamespace = createCloudmapNamespace();\n\n    this.vpc = vpc;\n    this.internetGateway = internetGateway;\n    this.securityGroup = securityGroup;\n    this.natGateways = natGateways;\n    this.natInstances = natInstances;\n    this.elasticIps = elasticIps;\n    this._publicSubnets = publicSubnets;\n    this._privateSubnets = privateSubnets;\n    this.publicRouteTables = publicRouteTables;\n    this.privateRouteTables = privateRouteTables;\n    this.bastionInstance = output(bastionInstance);\n    this.cloudmapNamespace = cloudmapNamespace;\n    this.privateKeyValue = output(privateKeyValue);\n    registerOutputs();\n\n    function reference() {\n      const ref = args as VpcRef;\n      const vpc = ec2.Vpc.get(`${name}Vpc`, ref.vpcId, undefined, {\n        parent: self,\n      });\n\n      const vpcId = vpc.tags.apply((tags) => {\n        registerVersion(\n          tags?.[\"sst:component-version\"]\n            ? parseInt(tags[\"sst:component-version\"])\n            : undefined,\n        );\n\n        if (tags?.[\"sst:ref-version\"] !== _refVersion.toString()) {\n          throw new VisibleError(\n            [\n              `There have been some minor changes to the \"Vpc\" component that's being referenced by \"${name}\".\\n`,\n              `To update, you'll need to redeploy the stage where the VPC was created. And then redeploy this stage.`,\n            ].join(\"\\n\"),\n          );\n        }\n\n        return output(ref.vpcId);\n      });\n\n      const internetGateway = ec2.InternetGateway.get(\n        `${name}InstanceGateway`,\n        ec2.getInternetGatewayOutput(\n          {\n            filters: [{ name: \"attachment.vpc-id\", values: [vpcId] }],\n          },\n          { parent: self },\n        ).internetGatewayId,\n        undefined,\n        { parent: self },\n      );\n      const securityGroup = ec2.SecurityGroup.get(\n        `${name}SecurityGroup`,\n        ec2\n          .getSecurityGroupsOutput(\n            {\n              filters: [\n                { name: \"group-name\", values: [\"default\"] },\n                { name: \"vpc-id\", values: [vpcId] },\n              ],\n            },\n            { parent: self },\n          )\n          .ids.apply((ids) => {\n            if (!ids.length) {\n              throw new VisibleError(\n                `Security group not found in VPC ${vpcId}`,\n              );\n            }\n            return ids[0];\n          }),\n        undefined,\n        { parent: self },\n      );\n      const privateSubnets = ec2\n        .getSubnetsOutput(\n          {\n            filters: [\n              { name: \"vpc-id\", values: [vpcId] },\n              { name: \"tag:Name\", values: [\"*Private*\"] },\n            ],\n          },\n          { parent: self },\n        )\n        .ids.apply((ids) =>\n          ids.map((id, i) =>\n            ec2.Subnet.get(`${name}PrivateSubnet${i + 1}`, id, undefined, {\n              parent: self,\n            }),\n          ),\n        );\n      const privateRouteTables = privateSubnets.apply((subnets) =>\n        subnets.map((subnet, i) =>\n          ec2.RouteTable.get(\n            `${name}PrivateRouteTable${i + 1}`,\n            ec2.getRouteTableOutput({ subnetId: subnet.id }, { parent: self })\n              .routeTableId,\n            undefined,\n            { parent: self },\n          ),\n        ),\n      );\n      const publicSubnets = ec2\n        .getSubnetsOutput(\n          {\n            filters: [\n              { name: \"vpc-id\", values: [vpcId] },\n              { name: \"tag:Name\", values: [\"*Public*\"] },\n            ],\n          },\n          { parent: self },\n        )\n        .ids.apply((ids) =>\n          ids.map((id, i) =>\n            ec2.Subnet.get(`${name}PublicSubnet${i + 1}`, id, undefined, {\n              parent: self,\n            }),\n          ),\n        );\n      const publicRouteTables = publicSubnets.apply((subnets) =>\n        subnets.map((subnet, i) =>\n          ec2.RouteTable.get(\n            `${name}PublicRouteTable${i + 1}`,\n            ec2.getRouteTableOutput({ subnetId: subnet.id }, { parent: self })\n              .routeTableId,\n            undefined,\n            { parent: self },\n          ),\n        ),\n      );\n      const natGateways = publicSubnets.apply((subnets) => {\n        const natGatewayIds = subnets.map((subnet, i) =>\n          ec2\n            .getNatGatewaysOutput(\n              {\n                filters: [\n                  { name: \"subnet-id\", values: [subnet.id] },\n                  { name: \"state\", values: [\"available\"] },\n                ],\n              },\n              { parent: self },\n            )\n            .ids.apply((ids) => ids[0]),\n        );\n        return output(natGatewayIds).apply((ids) =>\n          ids\n            .filter((id) => id)\n            .map((id, i) =>\n              ec2.NatGateway.get(`${name}NatGateway${i + 1}`, id, undefined, {\n                parent: self,\n              }),\n            ),\n        );\n      });\n      const elasticIps = natGateways.apply((nats) =>\n        nats.map((nat, i) =>\n          ec2.Eip.get(\n            `${name}ElasticIp${i + 1}`,\n            nat.allocationId as Output<string>,\n            undefined,\n            { parent: self },\n          ),\n        ),\n      );\n      const natInstances = ec2\n        .getInstancesOutput(\n          {\n            filters: [\n              { name: \"tag:sst:is-nat\", values: [\"true\"] },\n              { name: \"vpc-id\", values: [vpcId] },\n            ],\n          },\n          { parent: self },\n        )\n        .ids.apply((ids) =>\n          ids.map((id, i) =>\n            ec2.Instance.get(`${name}NatInstance${i + 1}`, id, undefined, {\n              parent: self,\n            }),\n          ),\n        );\n      const bastionInstance = ec2\n        .getInstancesOutput(\n          {\n            filters: [\n              { name: \"tag:sst:is-bastion\", values: [\"true\"] },\n              { name: \"vpc-id\", values: [vpcId] },\n            ],\n          },\n          { parent: self },\n        )\n        .ids.apply((ids) =>\n          ids.length\n            ? ec2.Instance.get(`${name}BastionInstance`, ids[0], undefined, {\n                parent: self,\n              })\n            : undefined,\n        );\n\n      // Note: can also use servicediscovery.getDnsNamespaceOutput() here, ie.\n      // ```ts\n      // const namespaceId = servicediscovery.getDnsNamespaceOutput({\n      //   name: \"sst\",\n      //   type: \"DNS_PRIVATE\",\n      // }).id;\n      // ```\n      // but if user deployed multiple VPCs into the same account. This will error because\n      // there are multiple results. Even though `getDnsNamespaceOutput()` takes tags in args,\n      // the tags are not used for lookup.\n      const zone = output(vpcId).apply((vpcId) =>\n        route53.getZone(\n          {\n            name: \"sst\",\n            privateZone: true,\n            vpcId,\n          },\n          { parent: self },\n        ),\n      );\n      const namespaceId = zone.linkedServiceDescription.apply((description) => {\n        const match = description.match(/:namespace\\/(ns-[a-z1-9]*)/)?.[1];\n        if (!match) {\n          throw new VisibleError(\n            `Cloud Map namespace not found for VPC ${vpcId}`,\n          );\n        }\n        return match;\n      });\n      const cloudmapNamespace = servicediscovery.PrivateDnsNamespace.get(\n        `${name}CloudmapNamespace`,\n        namespaceId,\n        { vpc: vpcId },\n        { parent: self },\n      );\n\n      const privateKeyValue = bastionInstance.apply((v) => {\n        if (!v) return;\n        const param = ssm.Parameter.get(\n          `${name}PrivateKeyValue`,\n          interpolate`/sst/vpc/${vpcId}/private-key-value`,\n          undefined,\n          { parent: self },\n        );\n        return param.value;\n      });\n\n      return {\n        vpc,\n        internetGateway,\n        securityGroup,\n        publicSubnets,\n        publicRouteTables,\n        privateSubnets,\n        privateRouteTables,\n        natGateways,\n        natInstances,\n        elasticIps,\n        bastionInstance,\n        cloudmapNamespace,\n        privateKeyValue,\n      };\n    }\n\n    function registerVersion(overrideVersion?: number) {\n      self.registerVersion({\n        new: _version,\n        old: overrideVersion ?? $cli.state.version[name],\n        message: [\n          `There is a new version of \"Vpc\" that has breaking changes.`,\n          ``,\n          `To continue using the previous version, rename \"Vpc\" to \"Vpc.v${$cli.state.version[name]}\". Or recreate this component to update - https://sst.dev/docs/components/#versioning`,\n        ].join(\"\\n\"),\n      });\n    }\n\n    function registerOutputs() {\n      self.registerOutputs({\n        _tunnel: all([\n          self.bastionInstance,\n          self.privateKeyValue,\n          self._privateSubnets,\n          self._publicSubnets,\n        ]).apply(\n          ([bastion, privateKeyValue, privateSubnets, publicSubnets]) => {\n            if (!bastion) return;\n            return {\n              ip: bastion.publicIp,\n              username: \"ec2-user\",\n              privateKey: privateKeyValue!,\n              subnets: [...privateSubnets, ...publicSubnets].map(\n                (s) => s.cidrBlock,\n              ),\n            };\n          },\n        ),\n      });\n    }\n\n    function normalizeAz() {\n      return output(args.az).apply((az) => {\n        if (Array.isArray(az)) return output(az);\n\n        const zones = getAvailabilityZonesOutput(\n          {\n            state: \"available\",\n          },\n          { parent: self },\n        );\n        return all([zones, args.az ?? 2]).apply(([zones, az]) =>\n          Array(az)\n            .fill(0)\n            .map((_, i) => zones.names[i]),\n        );\n      });\n    }\n\n    function normalizeNat() {\n      return all([args.nat, zones]).apply(([nat, zones]) => {\n        if (nat === \"managed\") {\n          return { type: \"managed\" as const };\n        }\n        if (nat === \"ec2\") {\n          return {\n            type: \"ec2\" as const,\n            ec2: { instance: \"t4g.nano\", ami: undefined },\n          };\n        }\n        if (nat) {\n          if (nat.ec2 && nat.type === \"managed\")\n            throw new VisibleError(\n              `\"nat.type\" cannot be \"managed\" when \"nat.ec2\" is specified`,\n            );\n\n          if (!nat.type)\n            throw new VisibleError(\n              `Missing \"nat.type\" for the \"${name}\" VPC. It is required when \"nat.ec2\" is not specified`,\n            );\n\n          if (nat.ip && nat.ip.length !== zones.length)\n            throw new VisibleError(\n              `The number of Elastic IP allocation IDs must match the number of AZs.`,\n            );\n\n          return nat.ec2 || nat.type === \"ec2\"\n            ? {\n                type: \"ec2\" as const,\n                ip: nat.ip,\n                ec2: nat.ec2 ?? { instance: \"t4g.nano\" },\n              }\n            : {\n                type: \"managed\" as const,\n                ip: nat.ip,\n              };\n        }\n        return undefined;\n      });\n    }\n\n    function createVpc() {\n      return new ec2.Vpc(\n        ...transform(\n          args.transform?.vpc,\n          `${name}Vpc`,\n          {\n            cidrBlock: \"10.0.0.0/16\",\n            enableDnsSupport: true,\n            enableDnsHostnames: true,\n            tags: {\n              Name: `${$app.name}-${$app.stage}-${name} VPC`,\n              \"sst:component-version\": _version.toString(),\n              \"sst:ref-version\": _refVersion.toString(),\n            },\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createKeyPair() {\n      const ret = output(args.bastion).apply((bastion) => {\n        if (!bastion) return {};\n\n        const tlsPrivateKey = new PrivateKey(\n          `${name}TlsPrivateKey`,\n          {\n            algorithm: \"RSA\",\n            rsaBits: 4096,\n          },\n          { parent: self },\n        );\n\n        new ssm.Parameter(\n          `${name}PrivateKeyValue`,\n          {\n            name: interpolate`/sst/vpc/${vpc.id}/private-key-value`,\n            description: \"Bastion host private key\",\n            type: ssm.ParameterType.SecureString,\n            value: tlsPrivateKey.privateKeyOpenssh,\n          },\n          { parent: self },\n        );\n\n        const keyPair = new ec2.KeyPair(\n          `${name}KeyPair`,\n          {\n            publicKey: tlsPrivateKey.publicKeyOpenssh,\n          },\n          { parent: self },\n        );\n\n        return { keyPair, privateKeyValue: tlsPrivateKey.privateKeyOpenssh };\n      });\n      return {\n        keyPair: output(ret.keyPair),\n        privateKeyValue: output(ret.privateKeyValue),\n      };\n    }\n\n    function createInternetGateway() {\n      return new ec2.InternetGateway(\n        ...transform(\n          args.transform?.internetGateway,\n          `${name}InternetGateway`,\n          {\n            vpcId: vpc.id,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createSecurityGroup() {\n      return new ec2.DefaultSecurityGroup(\n        ...transform(\n          args.transform?.securityGroup,\n          `${name}SecurityGroup`,\n          {\n            description: \"Managed by SST\",\n            vpcId: vpc.id,\n            egress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                cidrBlocks: [\"0.0.0.0/0\"],\n              },\n            ],\n            ingress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                // Restricts inbound traffic to only within the VPC\n                cidrBlocks: [vpc.cidrBlock],\n              },\n            ],\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createElasticIps() {\n      return all([nat, publicSubnets]).apply(([nat, subnets]) => {\n        if (!nat) return [];\n        if (nat?.ip) return [];\n\n        return subnets.map(\n          (_, i) =>\n            new ec2.Eip(\n              ...transform(\n                args.transform?.elasticIp,\n                `${name}ElasticIp${i + 1}`,\n                {\n                  vpc: true,\n                },\n                { parent: self },\n              ),\n            ),\n        );\n      });\n    }\n\n    function createNatGateways() {\n      return all([nat, publicSubnets, elasticIps]).apply(\n        ([nat, subnets, elasticIps]) => {\n          if (nat?.type !== \"managed\") return [];\n\n          return subnets.map(\n            (subnet, i) =>\n              new ec2.NatGateway(\n                ...transform(\n                  args.transform?.natGateway,\n                  `${name}NatGateway${i + 1}`,\n                  {\n                    subnetId: subnet.id,\n                    allocationId: elasticIps[i]?.id ?? nat.ip![i],\n                  },\n                  { parent: self },\n                ),\n              ),\n          );\n        },\n      );\n    }\n\n    function createNatInstances() {\n      return nat.apply((nat) => {\n        if (nat?.type !== \"ec2\") return output([]);\n\n        const sg = new ec2.SecurityGroup(\n          ...transform(\n            args.transform?.natSecurityGroup,\n            `${name}NatInstanceSecurityGroup`,\n            {\n              vpcId: vpc.id,\n              ingress: [\n                {\n                  protocol: \"-1\",\n                  fromPort: 0,\n                  toPort: 0,\n                  cidrBlocks: [\"0.0.0.0/0\"],\n                },\n              ],\n              egress: [\n                {\n                  protocol: \"-1\",\n                  fromPort: 0,\n                  toPort: 0,\n                  cidrBlocks: [\"0.0.0.0/0\"],\n                },\n              ],\n            },\n            { parent: self },\n          ),\n        );\n\n        const role = new iam.Role(\n          `${name}NatInstanceRole`,\n          {\n            assumeRolePolicy: iam.getPolicyDocumentOutput({\n              statements: [\n                {\n                  actions: [\"sts:AssumeRole\"],\n                  principals: [\n                    {\n                      type: \"Service\",\n                      identifiers: [\"ec2.amazonaws.com\"],\n                    },\n                  ],\n                },\n              ],\n            }).json,\n            managedPolicyArns: [\n              interpolate`arn:${partition}:iam::aws:policy/AmazonSSMManagedInstanceCore`,\n            ],\n          },\n          { parent: self },\n        );\n\n        const instanceProfile = new iam.InstanceProfile(\n          `${name}NatInstanceProfile`,\n          { role: role.name },\n          { parent: self },\n        );\n\n        const ami =\n          nat.ec2.ami ??\n          ec2.getAmiOutput(\n            {\n              owners: [\"568608671756\"], // AWS account ID for fck-nat AMI\n              filters: [\n                {\n                  name: \"name\",\n                  // The AMI has the SSM agent pre-installed\n                  values: [\"fck-nat-al2023-*\"],\n                },\n                {\n                  name: \"architecture\",\n                  values: [\"arm64\"],\n                },\n              ],\n              mostRecent: true,\n            },\n            { parent: self },\n          ).id;\n\n        return all([\n          zones,\n          publicSubnets,\n          elasticIps,\n          keyPair,\n          args.bastion,\n        ]).apply(([zones, publicSubnets, elasticIps, keyPair, bastion]) =>\n          zones.map((_, i) => {\n            const instance = new ec2.Instance(\n              ...transform(\n                args.transform?.natInstance,\n                `${name}NatInstance${i + 1}`,\n                {\n                  instanceType: nat.ec2.instance,\n                  ami,\n                  subnetId: publicSubnets[i].id,\n                  vpcSecurityGroupIds: [sg.id],\n                  iamInstanceProfile: instanceProfile.name,\n                  sourceDestCheck: false,\n                  keyName: keyPair?.keyName,\n                  tags: {\n                    Name: `${name} NAT Instance`,\n                    \"sst:is-nat\": \"true\",\n                    ...(bastion && i === 0 ? { \"sst:is-bastion\": \"true\" } : {}),\n                  },\n                },\n                { parent: self },\n              ),\n            );\n\n            new ec2.EipAssociation(`${name}NatInstanceEipAssociation${i + 1}`, {\n              instanceId: instance.id,\n              allocationId: elasticIps[i]?.id ?? nat.ip![i],\n            });\n\n            return instance;\n          }),\n        );\n      });\n    }\n\n    function createPublicSubnets() {\n      const ret = zones.apply((zones) =>\n        zones.map((zone, i) => {\n          const subnet = new ec2.Subnet(\n            ...transform(\n              args.transform?.publicSubnet,\n              `${name}PublicSubnet${i + 1}`,\n              {\n                vpcId: vpc.id,\n                cidrBlock: `10.0.${8 * i}.0/22`,\n                availabilityZone: zone,\n                mapPublicIpOnLaunch: true,\n              },\n              { parent: self },\n            ),\n          );\n\n          const routeTable = new ec2.RouteTable(\n            ...transform(\n              args.transform?.publicRouteTable,\n              `${name}PublicRouteTable${i + 1}`,\n              {\n                vpcId: vpc.id,\n                routes: [\n                  {\n                    cidrBlock: \"0.0.0.0/0\",\n                    gatewayId: internetGateway.id,\n                  },\n                ],\n              },\n              { parent: self },\n            ),\n          );\n\n          new ec2.RouteTableAssociation(\n            `${name}PublicRouteTableAssociation${i + 1}`,\n            {\n              subnetId: subnet.id,\n              routeTableId: routeTable.id,\n            },\n            { parent: self },\n          );\n\n          return { subnet, routeTable };\n        }),\n      );\n\n      return {\n        publicSubnets: ret.apply((ret) => ret.map((r) => r.subnet)),\n        publicRouteTables: ret.apply((ret) => ret.map((r) => r.routeTable)),\n      };\n    }\n\n    function createPrivateSubnets() {\n      const ret = zones.apply((zones) =>\n        zones.map((zone, i) => {\n          const subnet = new ec2.Subnet(\n            ...transform(\n              args.transform?.privateSubnet,\n              `${name}PrivateSubnet${i + 1}`,\n              {\n                vpcId: vpc.id,\n                cidrBlock: `10.0.${8 * i + 4}.0/22`,\n                availabilityZone: zone,\n              },\n              { parent: self },\n            ),\n          );\n\n          const routeTable = new ec2.RouteTable(\n            ...transform(\n              args.transform?.privateRouteTable,\n              `${name}PrivateRouteTable${i + 1}`,\n              {\n                vpcId: vpc.id,\n                routes: all([natGateways, natInstances]).apply(\n                  ([natGateways, natInstances]) => [\n                    ...(natGateways[i]\n                      ? [\n                          {\n                            cidrBlock: \"0.0.0.0/0\",\n                            natGatewayId: natGateways[i].id,\n                          },\n                        ]\n                      : []),\n                    ...(natInstances[i]\n                      ? [\n                          {\n                            cidrBlock: \"0.0.0.0/0\",\n                            networkInterfaceId:\n                              natInstances[i].primaryNetworkInterfaceId,\n                          },\n                        ]\n                      : []),\n                  ],\n                ),\n              },\n              { parent: self },\n            ),\n          );\n\n          new ec2.RouteTableAssociation(\n            `${name}PrivateRouteTableAssociation${i + 1}`,\n            {\n              subnetId: subnet.id,\n              routeTableId: routeTable.id,\n            },\n            { parent: self },\n          );\n\n          return { subnet, routeTable };\n        }),\n      );\n\n      return {\n        privateSubnets: ret.apply((ret) => ret.map((r) => r.subnet)),\n        privateRouteTables: ret.apply((ret) => ret.map((r) => r.routeTable)),\n      };\n    }\n\n    function createBastion() {\n      return all([args.bastion, natInstances, keyPair]).apply(\n        ([bastion, natInstances, keyPair]) => {\n          if (!bastion) return undefined;\n\n          if (natInstances.length) return natInstances[0];\n\n          const sg = new ec2.SecurityGroup(\n            ...transform(\n              args.transform?.bastionSecurityGroup,\n              `${name}BastionSecurityGroup`,\n              {\n                vpcId: vpc.id,\n                ingress: [\n                  {\n                    protocol: \"tcp\",\n                    fromPort: 22,\n                    toPort: 22,\n                    cidrBlocks: [\"0.0.0.0/0\"],\n                  },\n                ],\n                egress: [\n                  {\n                    protocol: \"-1\",\n                    fromPort: 0,\n                    toPort: 0,\n                    cidrBlocks: [\"0.0.0.0/0\"],\n                  },\n                ],\n              },\n              { parent: self },\n            ),\n          );\n\n          const role = new iam.Role(\n            `${name}BastionRole`,\n            {\n              assumeRolePolicy: iam.getPolicyDocumentOutput({\n                statements: [\n                  {\n                    actions: [\"sts:AssumeRole\"],\n                    principals: [\n                      {\n                        type: \"Service\",\n                        identifiers: [\"ec2.amazonaws.com\"],\n                      },\n                    ],\n                  },\n                ],\n              }).json,\n              managedPolicyArns: [\n                interpolate`arn:${partition}:iam::aws:policy/AmazonSSMManagedInstanceCore`,\n              ],\n            },\n            { parent: self },\n          );\n          const instanceProfile = new iam.InstanceProfile(\n            `${name}BastionProfile`,\n            { role: role.name },\n            { parent: self },\n          );\n          const ami = ec2.getAmiOutput(\n            {\n              owners: [\"amazon\"],\n              filters: [\n                {\n                  name: \"name\",\n                  // The AMI has the SSM agent pre-installed\n                  values: [\"al2023-ami-20*\"],\n                },\n                {\n                  name: \"architecture\",\n                  values: [\"arm64\"],\n                },\n              ],\n              mostRecent: true,\n            },\n            { parent: self },\n          );\n          return new ec2.Instance(\n            ...transform(\n              args.transform?.bastionInstance,\n              `${name}BastionInstance`,\n              {\n                instanceType: \"t4g.nano\",\n                ami: ami.id,\n                subnetId: publicSubnets.apply((v) => v[0].id),\n                vpcSecurityGroupIds: [sg.id],\n                iamInstanceProfile: instanceProfile.name,\n                keyName: keyPair?.keyName,\n                tags: {\n                  \"sst:is-bastion\": \"true\",\n                },\n              },\n              { parent: self },\n            ),\n          );\n        },\n      );\n    }\n\n    function createCloudmapNamespace() {\n      return new servicediscovery.PrivateDnsNamespace(\n        `${name}CloudmapNamespace`,\n        {\n          name: \"sst\",\n          vpc: vpc.id,\n        },\n        { parent: self },\n      );\n    }\n  }\n\n  /**\n   * The VPC ID.\n   */\n  public get id() {\n    return this.vpc.id;\n  }\n\n  /**\n   * A list of public subnet IDs in the VPC.\n   */\n  public get publicSubnets() {\n    return this._publicSubnets.apply((subnets) =>\n      subnets.map((subnet) => subnet.id),\n    );\n  }\n\n  /**\n   * A list of private subnet IDs in the VPC.\n   */\n  public get privateSubnets() {\n    return this._privateSubnets.apply((subnets) =>\n      subnets.map((subnet) => subnet.id),\n    );\n  }\n\n  /**\n   * A list of VPC security group IDs.\n   */\n  public get securityGroups() {\n    return output(this.securityGroup).apply((v) => [v.id]);\n  }\n\n  /**\n   * The bastion instance ID.\n   */\n  public get bastion() {\n    return this.bastionInstance.apply((v) => {\n      if (!v) {\n        throw new VisibleError(\n          `VPC bastion is not enabled. Enable it with \"bastion: true\".`,\n        );\n      }\n      return v.id;\n    });\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon EC2 VPC.\n       */\n      vpc: this.vpc,\n      /**\n       * The Amazon EC2 Internet Gateway.\n       */\n      internetGateway: this.internetGateway,\n      /**\n       * The Amazon EC2 Security Group.\n       */\n      securityGroup: this.securityGroup,\n      /**\n       * The Amazon EC2 NAT Gateway.\n       */\n      natGateways: this.natGateways,\n      /**\n       * The Amazon EC2 NAT instances.\n       */\n      natInstances: this.natInstances,\n      /**\n       * The Amazon EC2 Elastic IP.\n       */\n      elasticIps: this.elasticIps,\n      /**\n       * The Amazon EC2 public subnet.\n       */\n      publicSubnets: this._publicSubnets,\n      /**\n       * The Amazon EC2 private subnet.\n       */\n      privateSubnets: this._privateSubnets,\n      /**\n       * The Amazon EC2 route table for the public subnet.\n       */\n      publicRouteTables: this.publicRouteTables,\n      /**\n       * The Amazon EC2 route table for the private subnet.\n       */\n      privateRouteTables: this.privateRouteTables,\n      /**\n       * The Amazon EC2 bastion instance.\n       */\n      bastionInstance: this.bastionInstance,\n      /**\n       * The AWS Cloudmap namespace.\n       */\n      cloudmapNamespace: this.cloudmapNamespace,\n    };\n  }\n\n  /**\n   * Reference an existing VPC with the given ID. This is useful when you\n   * create a VPC in one stage and want to share it in another stage. It avoids having to\n   * create a new VPC in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share VPCs across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param vpcId The ID of the existing VPC.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a VPC in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new VPC, you want to share the VPC from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const vpc = $app.stage === \"frank\"\n   *   ? sst.aws.Vpc.get(\"MyVPC\", \"vpc-0be8fa4de860618bb\")\n   *   : new sst.aws.Vpc(\"MyVPC\");\n   * ```\n   *\n   * Here `vpc-0be8fa4de860618bb` is the ID of the VPC created in the `dev` stage.\n   * You can find this by outputting the VPC ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   vpc: vpc.id\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    vpcId: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Vpc(\n      name,\n      {\n        ref: true,\n        vpcId,\n      } satisfies VpcRef as VpcArgs,\n      opts,\n    );\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        bastion: this.bastionInstance.apply((v) => v?.id),\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Vpc\";\n// @ts-expect-error\nVpc.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Output, all, output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Input } from \"../input\";\nimport { ec2, getAvailabilityZonesOutput } from \"@pulumi/aws\";\n\nexport interface VpcArgs {\n  /**\n   * Number of Availability Zones or AZs for the VPC. By default, it creates a VPC with 2\n   * AZs since services like RDS and Fargate need at least 2 AZs.\n   * @default `2`\n   * @example\n   * ```ts\n   * {\n   *   az: 3\n   * }\n   * ```\n   */\n  az?: Input<number>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the EC2 VPC resource.\n     */\n    vpc?: Transform<ec2.VpcArgs>;\n    /**\n     * Transform the EC2 Internet Gateway resource.\n     */\n    internetGateway?: Transform<ec2.InternetGatewayArgs>;\n    /**\n     * Transform the EC2 NAT Gateway resource.\n     */\n    natGateway?: Transform<ec2.NatGatewayArgs>;\n    /**\n     * Transform the EC2 Elastic IP resource.\n     */\n    elasticIp?: Transform<ec2.EipArgs>;\n    /**\n     * Transform the EC2 Security Group resource.\n     */\n    securityGroup?: Transform<ec2.SecurityGroupArgs>;\n    /**\n     * Transform the EC2 public subnet resource.\n     */\n    publicSubnet?: Transform<ec2.SubnetArgs>;\n    /**\n     * Transform the EC2 private subnet resource.\n     */\n    privateSubnet?: Transform<ec2.SubnetArgs>;\n    /**\n     * Transform the EC2 route table resource for the public subnet.\n     */\n    publicRouteTable?: Transform<ec2.RouteTableArgs>;\n    /**\n     * Transform the EC2 route table resource for the private subnet.\n     */\n    privateRouteTable?: Transform<ec2.RouteTableArgs>;\n  };\n}\n\ninterface VpcRef {\n  ref: boolean;\n  vpc: ec2.Vpc;\n  internetGateway: ec2.InternetGateway;\n  securityGroup: ec2.SecurityGroup;\n  privateSubnets: Output<ec2.Subnet[]>;\n  privateRouteTables: Output<ec2.RouteTable[]>;\n  publicSubnets: Output<ec2.Subnet[]>;\n  publicRouteTables: Output<ec2.RouteTable[]>;\n  natGateways: Output<ec2.NatGateway[]>;\n  elasticIps: Output<ec2.Eip[]>;\n}\n\n/**\n * The `Vpc` component lets you add a VPC to your app, but it has been deprecated because\n * it does not support modifying the number of Availability Zones (AZs) after VPC creation.\n *\n * For existing usage, rename `sst.aws.Vpc` to `sst.aws.Vpc.v1`. For new VPCs, use\n * the latest [`Vpc`](/docs/component/aws/vpc) component instead.\n *\n * :::caution\n * This component has been deprecated.\n * :::\n *\n * This creates a VPC with 2 Availability Zones by default. It also creates the following\n * resources:\n *\n * 1. A security group.\n * 2. A public subnet in each AZ.\n * 3. A private subnet in each AZ.\n * 4. An Internet Gateway, all the traffic from the public subnets are routed through it.\n * 5. A NAT Gateway in each AZ. All the traffic from the private subnets are routed to the\n *    NAT Gateway in the same AZ.\n *\n * :::note\n * By default, this creates two NAT Gateways, one in each AZ. And it roughly costs $33 per\n * NAT Gateway per month.\n * :::\n *\n * NAT Gateways are billed per hour and per gigabyte of data processed. By default,\n * this creates a NAT Gateway in each AZ. And this would be roughly $33 per NAT\n * Gateway per month. Make sure to [review the pricing](https://aws.amazon.com/vpc/pricing/).\n *\n * @example\n *\n * #### Create a VPC\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Vpc.v1(\"MyVPC\");\n * ```\n *\n * #### Create it with 3 Availability Zones\n *\n * ```ts title=\"sst.config.ts\" {2}\n * new sst.aws.Vpc.v1(\"MyVPC\", {\n *   az: 3\n * });\n * ```\n */\nexport class Vpc extends Component {\n  private vpc: ec2.Vpc;\n  private internetGateway: ec2.InternetGateway;\n  private securityGroup: ec2.SecurityGroup;\n  private natGateways: Output<ec2.NatGateway[]>;\n  private elasticIps: Output<ec2.Eip[]>;\n  private _publicSubnets: Output<ec2.Subnet[]>;\n  private _privateSubnets: Output<ec2.Subnet[]>;\n  private publicRouteTables: Output<ec2.RouteTable[]>;\n  private privateRouteTables: Output<ec2.RouteTable[]>;\n\n  constructor(name: string, args?: VpcArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    if (args && \"ref\" in args) {\n      const ref = args as VpcRef;\n      this.vpc = ref.vpc;\n      this.internetGateway = ref.internetGateway;\n      this.securityGroup = ref.securityGroup;\n      this._publicSubnets = output(ref.publicSubnets);\n      this._privateSubnets = output(ref.privateSubnets);\n      this.publicRouteTables = output(ref.publicRouteTables);\n      this.privateRouteTables = output(ref.privateRouteTables);\n      this.natGateways = output(ref.natGateways);\n      this.elasticIps = ref.elasticIps;\n      return;\n    }\n\n    const parent = this;\n\n    const zones = normalizeAz();\n\n    const vpc = createVpc();\n    const internetGateway = createInternetGateway();\n    const securityGroup = createSecurityGroup();\n    const { publicSubnets, publicRouteTables } = createPublicSubnets();\n    const { elasticIps, natGateways } = createNatGateways();\n    const { privateSubnets, privateRouteTables } = createPrivateSubnets();\n\n    this.vpc = vpc;\n    this.internetGateway = internetGateway;\n    this.securityGroup = securityGroup;\n    this.natGateways = natGateways;\n    this.elasticIps = elasticIps;\n    this._publicSubnets = publicSubnets;\n    this._privateSubnets = privateSubnets;\n    this.publicRouteTables = publicRouteTables;\n    this.privateRouteTables = privateRouteTables;\n\n    function normalizeAz() {\n      const zones = getAvailabilityZonesOutput({\n        state: \"available\",\n      });\n      return all([zones, args?.az ?? 2]).apply(([zones, az]) =>\n        Array(az)\n          .fill(0)\n          .map((_, i) => zones.names[i]),\n      );\n    }\n\n    function createVpc() {\n      return new ec2.Vpc(\n        ...transform(\n          args?.transform?.vpc,\n          `${name}Vpc`,\n          {\n            cidrBlock: \"10.0.0.0/16\",\n            enableDnsSupport: true,\n            enableDnsHostnames: true,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createInternetGateway() {\n      return new ec2.InternetGateway(\n        ...transform(\n          args?.transform?.internetGateway,\n          `${name}InternetGateway`,\n          {\n            vpcId: vpc.id,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createSecurityGroup() {\n      return new ec2.SecurityGroup(\n        ...transform(\n          args?.transform?.securityGroup,\n          `${name}SecurityGroup`,\n          {\n            vpcId: vpc.id,\n            egress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                cidrBlocks: [\"0.0.0.0/0\"],\n              },\n            ],\n            ingress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                cidrBlocks: [\"0.0.0.0/0\"],\n              },\n            ],\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createNatGateways() {\n      const ret = publicSubnets.apply((subnets) =>\n        subnets.map((subnet, i) => {\n          const elasticIp = new ec2.Eip(\n            ...transform(\n              args?.transform?.elasticIp,\n              `${name}ElasticIp${i + 1}`,\n              {\n                vpc: true,\n              },\n              { parent },\n            ),\n          );\n\n          const natGateway = new ec2.NatGateway(\n            ...transform(\n              args?.transform?.natGateway,\n              `${name}NatGateway${i + 1}`,\n              {\n                subnetId: subnet.id,\n                allocationId: elasticIp.id,\n              },\n              { parent },\n            ),\n          );\n          return { elasticIp, natGateway };\n        }),\n      );\n\n      return {\n        elasticIps: ret.apply((ret) => ret.map((r) => r.elasticIp)),\n        natGateways: ret.apply((ret) => ret.map((r) => r.natGateway)),\n      };\n    }\n\n    function createPublicSubnets() {\n      const ret = zones.apply((zones) =>\n        zones.map((zone, i) => {\n          const subnet = new ec2.Subnet(\n            ...transform(\n              args?.transform?.publicSubnet,\n              `${name}PublicSubnet${i + 1}`,\n              {\n                vpcId: vpc.id,\n                cidrBlock: `10.0.${i + 1}.0/24`,\n                availabilityZone: zone,\n                mapPublicIpOnLaunch: true,\n              },\n              { parent },\n            ),\n          );\n\n          const routeTable = new ec2.RouteTable(\n            ...transform(\n              args?.transform?.publicRouteTable,\n              `${name}PublicRouteTable${i + 1}`,\n              {\n                vpcId: vpc.id,\n                routes: [\n                  {\n                    cidrBlock: \"0.0.0.0/0\",\n                    gatewayId: internetGateway.id,\n                  },\n                ],\n              },\n              { parent },\n            ),\n          );\n\n          new ec2.RouteTableAssociation(\n            `${name}PublicRouteTableAssociation${i + 1}`,\n            {\n              subnetId: subnet.id,\n              routeTableId: routeTable.id,\n            },\n            { parent },\n          );\n\n          return { subnet, routeTable };\n        }),\n      );\n\n      return {\n        publicSubnets: ret.apply((ret) => ret.map((r) => r.subnet)),\n        publicRouteTables: ret.apply((ret) => ret.map((r) => r.routeTable)),\n      };\n    }\n\n    function createPrivateSubnets() {\n      const ret = zones.apply((zones) =>\n        zones.map((zone, i) => {\n          const subnet = new ec2.Subnet(\n            ...transform(\n              args?.transform?.privateSubnet,\n              `${name}PrivateSubnet${i + 1}`,\n              {\n                vpcId: vpc.id,\n                cidrBlock: `10.0.${zones.length + i + 1}.0/24`,\n                availabilityZone: zone,\n              },\n              { parent },\n            ),\n          );\n\n          const routeTable = new ec2.RouteTable(\n            ...transform(\n              args?.transform?.privateRouteTable,\n              `${name}PrivateRouteTable${i + 1}`,\n              {\n                vpcId: vpc.id,\n                routes: [\n                  {\n                    cidrBlock: \"0.0.0.0/0\",\n                    natGatewayId: natGateways[i].id,\n                  },\n                ],\n              },\n              { parent },\n            ),\n          );\n\n          new ec2.RouteTableAssociation(\n            `${name}PrivateRouteTableAssociation${i + 1}`,\n            {\n              subnetId: subnet.id,\n              routeTableId: routeTable.id,\n            },\n            { parent },\n          );\n\n          return { subnet, routeTable };\n        }),\n      );\n\n      return {\n        privateSubnets: ret.apply((ret) => ret.map((r) => r.subnet)),\n        privateRouteTables: ret.apply((ret) => ret.map((r) => r.routeTable)),\n      };\n    }\n  }\n\n  /**\n   * The VPC ID.\n   */\n  public get id() {\n    return this.vpc.id;\n  }\n\n  /**\n   * A list of public subnet IDs in the VPC.\n   */\n  public get publicSubnets() {\n    return this._publicSubnets.apply((subnets) =>\n      subnets.map((subnet) => subnet.id),\n    );\n  }\n\n  /**\n   * A list of private subnet IDs in the VPC.\n   */\n  public get privateSubnets() {\n    return this._privateSubnets.apply((subnets) =>\n      subnets.map((subnet) => subnet.id),\n    );\n  }\n\n  /**\n   * A list of VPC security group IDs.\n   */\n  public get securityGroups() {\n    return [this.securityGroup.id];\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon EC2 VPC.\n       */\n      vpc: this.vpc,\n      /**\n       * The Amazon EC2 Internet Gateway.\n       */\n      internetGateway: this.internetGateway,\n      /**\n       * The Amazon EC2 Security Group.\n       */\n      securityGroup: this.securityGroup,\n      /**\n       * The Amazon EC2 NAT Gateway.\n       */\n      natGateways: this.natGateways,\n      /**\n       * The Amazon EC2 Elastic IP.\n       */\n      elasticIps: this.elasticIps,\n      /**\n       * The Amazon EC2 public subnet.\n       */\n      publicSubnets: this._publicSubnets,\n      /**\n       * The Amazon EC2 private subnet.\n       */\n      privateSubnets: this._privateSubnets,\n      /**\n       * The Amazon EC2 route table for the public subnet.\n       */\n      publicRouteTables: this.publicRouteTables,\n      /**\n       * The Amazon EC2 route table for the private subnet.\n       */\n      privateRouteTables: this.privateRouteTables,\n    };\n  }\n\n  /**\n   * Reference an existing VPC with the given ID. This is useful when you\n   * create a VPC in one stage and want to share it in another stage. It avoids having to\n   * create a new VPC in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share VPCs across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param vpcID The ID of the existing VPC.\n   *\n   * @example\n   * Imagine you create a VPC in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new VPC, you want to share the VPC from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const vpc = $app.stage === \"frank\"\n   *   ? sst.aws.Vpc.v1.get(\"MyVPC\", \"vpc-0be8fa4de860618bb\")\n   *   : new sst.aws.Vpc.v1(\"MyVPC\");\n   * ```\n   *\n   * Here `vpc-0be8fa4de860618bb` is the ID of the VPC created in the `dev` stage.\n   * You can find this by outputting the VPC ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   vpc: vpc.id\n   * };\n   * ```\n   */\n  public static get(name: string, vpcID: Input<string>) {\n    const vpc = ec2.Vpc.get(`${name}Vpc`, vpcID);\n    const internetGateway = ec2.InternetGateway.get(\n      `${name}InstanceGateway`,\n      ec2.getInternetGatewayOutput({\n        filters: [{ name: \"attachment.vpc-id\", values: [vpc.id] }],\n      }).internetGatewayId,\n    );\n    const securityGroup = ec2.SecurityGroup.get(\n      `${name}SecurityGroup`,\n      ec2\n        .getSecurityGroupsOutput({\n          filters: [\n            { name: \"group-name\", values: [\"*SecurityGroup*\"] },\n            { name: \"vpc-id\", values: [vpc.id] },\n          ],\n        })\n        .ids.apply((ids) => {\n          if (!ids.length)\n            throw new Error(`Security group not found in VPC ${vpcID}`);\n          return ids[0];\n        }),\n    );\n    const privateSubnets = ec2\n      .getSubnetsOutput({\n        filters: [\n          { name: \"vpc-id\", values: [vpc.id] },\n          { name: \"tag:Name\", values: [\"*Private*\"] },\n        ],\n      })\n      .ids.apply((ids) =>\n        ids.map((id, i) => ec2.Subnet.get(`${name}PrivateSubnet${i + 1}`, id)),\n      );\n    const privateRouteTables = privateSubnets.apply((subnets) =>\n      subnets.map((subnet, i) =>\n        ec2.RouteTable.get(\n          `${name}PrivateRouteTable${i + 1}`,\n          ec2.getRouteTableOutput({ subnetId: subnet.id }).routeTableId,\n        ),\n      ),\n    );\n    const publicSubnets = ec2\n      .getSubnetsOutput({\n        filters: [\n          { name: \"vpc-id\", values: [vpc.id] },\n          { name: \"tag:Name\", values: [\"*Public*\"] },\n        ],\n      })\n      .ids.apply((ids) =>\n        ids.map((id, i) => ec2.Subnet.get(`${name}PublicSubnet${i + 1}`, id)),\n      );\n    const publicRouteTables = publicSubnets.apply((subnets) =>\n      subnets.map((subnet, i) =>\n        ec2.RouteTable.get(\n          `${name}PublicRouteTable${i + 1}`,\n          ec2.getRouteTableOutput({ subnetId: subnet.id }).routeTableId,\n        ),\n      ),\n    );\n    const natGateways = publicSubnets.apply((subnets) =>\n      subnets.map((subnet, i) =>\n        ec2.NatGateway.get(\n          `${name}NatGateway${i + 1}`,\n          ec2.getNatGatewayOutput({ subnetId: subnet.id }).id,\n        ),\n      ),\n    );\n    const elasticIps = natGateways.apply((nats) =>\n      nats.map((nat, i) =>\n        ec2.Eip.get(\n          `${name}ElasticIp${i + 1}`,\n          nat.allocationId as Output<string>,\n        ),\n      ),\n    );\n\n    return new Vpc(name, {\n      ref: true,\n      vpc,\n      internetGateway,\n      securityGroup,\n      privateSubnets,\n      privateRouteTables,\n      publicSubnets,\n      publicRouteTables,\n      natGateways,\n      elasticIps,\n    } satisfies VpcRef as VpcArgs);\n  }\n}\n\nconst __pulumiType = \"sst:aws:Vpc\";\n// @ts-expect-error\nVpc.__pulumiType = __pulumiType;\n", "export function lazy<T>(callback: () => T) {\n  let loaded = false;\n  let result: T;\n\n  return () => {\n    if (!loaded) {\n      loaded = true;\n      result = callback();\n    }\n    return result;\n  };\n}\n", "import { all, ComponentResourceOptions, Output, output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component.js\";\nimport { Input } from \"../input.js\";\nimport { ec2, efs } from \"@pulumi/aws\";\nimport { Vpc } from \"./vpc.js\";\nimport { VisibleError } from \"../error.js\";\n\nexport interface EfsArgs {\n  /**\n   * The throughput mode for the EFS file system.\n   *\n   * The default `elastic` mode scales up or down based on the workload. However, if you know\n   * your access patterns, you can use `provisioned` to have a fixed throughput.\n   *\n   * Or you can use `bursting` to scale with the amount of storage you're using. It also\n   * supports bursting to higher levels for up to 12 hours per day.\n   *\n   * @default `\"elastic\"`\n   *\n   * @example\n   * ```ts\n   * {\n   *   throughput: \"bursting\"\n   * }\n   * ```\n   */\n  throughput?: Input<\"provisioned\" | \"bursting\" | \"elastic\">;\n  /**\n   * The performance mode for the EFS file system.\n   *\n   * The `max-io` mode can support higher throughput, but with slightly higher latency. It's\n   * recommended for larger workloads like data analysis or meadia processing.\n   *\n   * Both the modes are priced the same, but `general-purpose` is recommended for most use cases.\n   *\n   * @default `\"general-purpose\"`\n   * @example\n   * ```ts\n   * {\n   *   performance: \"max-io\"\n   * }\n   * ```\n   */\n  performance?: Input<\"general-purpose\" | \"max-io\">;\n  /**\n   * The VPC to use for the EFS file system.\n   *\n   * @example\n   * Create a VPC component.\n   *\n   * ```js\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   *\n   * Or pass in a custom VPC configuration.\n   *\n   * ```js\n   * {\n   *   vpc: {\n   *     subnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"]\n   *   }\n   * }\n   * ```\n   */\n  vpc:\n    | Vpc\n    | Input<{\n        /**\n         * The ID of the VPC.\n         */\n        id: Input<string>;\n        /**\n         * A list of subnet IDs in the VPC to create the EFS mount targets in.\n         */\n        subnets: Input<Input<string>[]>;\n      }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the EFS file system.\n     */\n    fileSystem?: Transform<efs.FileSystemArgs>;\n    /**\n     * Transform the EFS access point.\n     */\n    accessPoint?: Transform<efs.AccessPointArgs>;\n    /**\n     * Transform the security group for the EFS mount targets.\n     */\n    securityGroup?: Transform<ec2.SecurityGroupArgs>;\n  };\n}\n\ninterface EfsRef {\n  ref: boolean;\n  fileSystem: efs.FileSystem;\n  accessPoint: efs.AccessPoint;\n}\n\n/**\n * The `Efs` component lets you add [Amazon Elastic File System (EFS)](https://docs.aws.amazon.com/efs/latest/ug/whatisefs.html) to your app.\n *\n * @example\n *\n * #### Create the file system\n *\n * ```js title=\"sst.config.ts\" {2}\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const efs = new sst.aws.Efs(\"MyEfs\", { vpc });\n * ```\n *\n * This needs a VPC.\n *\n * #### Attach it to a Lambda function\n *\n * ```ts title=\"sst.config.ts\" {4}\n * new sst.aws.Function(\"MyFunction\", {\n *   vpc,\n *   handler: \"lambda.handler\",\n *   volume: { efs, path: \"/mnt/efs\" }\n * });\n * ```\n *\n * This is now mounted at `/mnt/efs` in the Lambda function.\n *\n * #### Attach it to a container\n *\n * ```ts title=\"sst.config.ts\" {7}\n * const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n * new sst.aws.Service(\"MyService\", {\n *   cluster,\n *   public: {\n *     ports: [{ listen: \"80/http\" }],\n *   },\n *   volumes: [\n *     { efs, path: \"/mnt/efs\" }\n *   ]\n * });\n * ```\n *\n * Mounted at `/mnt/efs` in the container.\n *\n * ---\n *\n * ### Cost\n *\n * By default this component uses _Regional (Multi-AZ) with Elastic Throughput_. The pricing is\n * pay-per-use.\n *\n * - For storage: $0.30 per GB per month\n * - For reads: $0.03 per GB per month\n * - For writes: $0.06 per GB per month\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [EFS pricing](https://aws.amazon.com/efs/pricing/) for more details.\n */\nexport class Efs extends Component {\n  private _fileSystem: Output<efs.FileSystem>;\n  private _accessPoint: Output<efs.AccessPoint>;\n\n  constructor(name: string, args: EfsArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    if (args && \"ref\" in args) {\n      const ref = args as unknown as EfsRef;\n      this._fileSystem = output(ref.fileSystem);\n      this._accessPoint = output(ref.accessPoint);\n      return;\n    }\n\n    const parent = this;\n    const vpc = normalizeVpc();\n    const throughput = output(args.throughput ?? \"elastic\");\n    const performance = output(args.performance ?? \"general-purpose\");\n\n    const fileSystem = createFileSystem();\n    const securityGroup = createSecurityGroup();\n    const mountTargets = createMountTargets();\n    const accessPoint = createAccessPoint();\n\n    const waited = mountTargets.apply((targets) =>\n      all(targets.map((target) => target.urn)).apply(() => ({\n        fileSystem,\n        accessPoint,\n      })),\n    );\n    this._fileSystem = waited.fileSystem;\n    this._accessPoint = waited.accessPoint;\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        return output({\n          id: args.vpc.id,\n          subnets: args.vpc.privateSubnets,\n          cidrBlock: args.vpc.nodes.vpc.cidrBlock,\n        });\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc).apply((vpc) => {\n        // Because `vpc.id` is newly required since v3.3.66, some people might not have\n        // it, and they should get a type error. We want to throw a descriptive error.\n        if (!vpc.id)\n          throw new VisibleError(\n            `Missing \"vpc.id\" for the \"${name}\" EFS component. The VPC id is required to create the security group for the EFS mount targets.`,\n          );\n\n        const vpcRef = ec2.Vpc.get(`${name}Vpc`, vpc.id, undefined, {\n          parent,\n        });\n        return {\n          id: vpc.id,\n          subnets: vpc.subnets,\n          cidrBlock: vpcRef.cidrBlock,\n        };\n      });\n    }\n\n    function createFileSystem() {\n      return new efs.FileSystem(\n        ...transform(\n          args.transform?.fileSystem,\n          `${name}FileSystem`,\n          {\n            performanceMode: performance.apply((v) =>\n              v === \"general-purpose\" ? \"generalPurpose\" : \"maxIO\",\n            ),\n            throughputMode: throughput,\n            encrypted: true,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createSecurityGroup() {\n      return new ec2.SecurityGroup(\n        ...transform(\n          args.transform?.securityGroup,\n          `${name}SecurityGroup`,\n          {\n            description: \"Managed by SST\",\n            vpcId: vpc.id,\n            egress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                cidrBlocks: [\"0.0.0.0/0\"],\n              },\n            ],\n            ingress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                // Restricts inbound traffic to only within the VPC\n                cidrBlocks: [vpc.cidrBlock],\n              },\n            ],\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createMountTargets() {\n      return vpc.subnets.apply((subnets) =>\n        subnets.map(\n          (subnet) =>\n            new efs.MountTarget(\n              `${name}MountTarget${subnet}`,\n              {\n                fileSystemId: fileSystem.id,\n                subnetId: subnet,\n                securityGroups: [securityGroup.id],\n              },\n              { parent },\n            ),\n        ),\n      );\n    }\n\n    function createAccessPoint() {\n      return new efs.AccessPoint(\n        ...transform(\n          args.transform?.accessPoint,\n          `${name}AccessPoint`,\n          {\n            fileSystemId: fileSystem.id,\n            posixUser: {\n              uid: 0,\n              gid: 0,\n            },\n            rootDirectory: {\n              path: \"/\",\n            },\n          },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The ID of the EFS file system.\n   */\n  public get id() {\n    return this._fileSystem.id;\n  }\n\n  /**\n   * The ID of the EFS access point.\n   */\n  public get accessPoint() {\n    return this._accessPoint.id;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon EFS file system.\n       */\n      fileSystem: this._fileSystem,\n      /**\n       * The Amazon EFS access point.\n       */\n      accessPoint: this._accessPoint,\n    };\n  }\n\n  /**\n   * Reference an existing EFS file system with the given file system ID. This is useful when\n   * you create a EFS file system in one stage and want to share it in another. It avoids\n   * having to create a new EFS file system in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share EFS file systems across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param fileSystemID The ID of the existing EFS file system.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a EFS file system in the `dev` stage. And in your personal stage\n   * `frank`, instead of creating a new file system, you want to share the same file system\n   * from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const efs = $app.stage === \"frank\"\n   *   ? sst.aws.Efs.get(\"MyEfs\", \"app-dev-myefs\")\n   *   : new sst.aws.Efs(\"MyEfs\", { vpc });\n   * ```\n   *\n   * Here `app-dev-myefs` is the ID of the file system created in the `dev` stage.\n   * You can find this by outputting the file system ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   id: efs.id\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    fileSystemID: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    const fileSystem = efs.FileSystem.get(\n      `${name}FileSystem`,\n      fileSystemID,\n      undefined,\n      opts,\n    );\n    const accessPointId = efs\n      .getAccessPointsOutput({ fileSystemId: fileSystem.id }, opts)\n      .apply((accessPoints) => accessPoints.ids[0]);\n    const accessPoint = efs.AccessPoint.get(\n      `${name}AccessPoint`,\n      accessPointId,\n      undefined,\n      opts,\n    );\n    return new Efs(name, {\n      ref: true,\n      fileSystem,\n      accessPoint,\n    } satisfies EfsRef as unknown as EfsArgs);\n  }\n}\n\nconst __pulumiType = \"sst:aws:Efs\";\n// @ts-expect-error\nEfs.__pulumiType = __pulumiType;\n", "import { CustomResourceOptions, Input, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface FunctionEnvironmentUpdateInputs {\n  /**\n   * The name of the function to update.\n   */\n  functionName: Input<string>;\n  /**\n   * The environment variables to update.\n   */\n  environment: Input<Record<string, Input<string>>>;\n  /**\n   * The region of the function to update.\n   */\n  region: Input<string>;\n}\n\n/**\n * The `FunctionEnvironmentUpdate` component is internally used by the `Function` component\n * to update the environment variables of a function.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addEnvironment` method of the `Function` component.\n */\nexport class FunctionEnvironmentUpdate extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: FunctionEnvironmentUpdateInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.FunctionEnvironmentUpdate\"),\n      `${name}.sst.aws.FunctionEnvironmentUpdate`,\n      args,\n      opts,\n    );\n  }\n}\n", "const alreadyWarned = new Set<string>();\n\nexport function warnOnce(message: string) {\n  if (alreadyWarned.has(message)) return;\n  alreadyWarned.add(message);\n  console.warn(message);\n}\n", "import {\n  ComponentResourceOptions,\n  Output,\n  all,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport crypto from \"crypto\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { Cdn, CdnArgs } from \"./cdn\";\nimport { cloudfront } from \"@pulumi/aws\";\nimport { hashStringToPrettyString, physicalName } from \"../naming\";\nimport { Bucket } from \"./bucket\";\nimport { OriginAccessControl } from \"./providers/origin-access-control\";\nimport { VisibleError } from \"../error\";\nimport { RouterUrlRoute } from \"./router-url-route\";\nimport { RouterBucketRoute } from \"./router-bucket-route\";\nimport { DurationSeconds } from \"../duration\";\n\ninterface InlineUrlRouteArgs extends InlineBaseRouteArgs {\n  /**\n   * The destination URL.\n   *\n   * @example\n   *\n   * ```js\n   * {\n   *   routes: {\n   *     \"/api/*\": {\n   *       url: \"https://example.com\"\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  url: Input<string>;\n  /**\n   * Rewrite the request path.\n   *\n   * @example\n   *\n   * By default, if the route path is `/api/*` and a request comes in for `/api/users/profile`,\n   * the request path the destination sees is `/api/users/profile`.\n   *\n   * If you want to serve the route from the root, you can rewrite the request path to\n   * `/users/profile`.\n   *\n   * ```js\n   * {\n   *   routes: {\n   *     \"/api/*\": {\n   *       url: \"https://api.example.com\",\n   *       rewrite: {\n   *         regex: \"^/api/(.*)$\",\n   *         to: \"/$1\"\n   *       }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  rewrite?: Input<{\n    /**\n     * The regex to match the request path.\n     */\n    regex: Input<string>;\n    /**\n     * The replacement for the matched path.\n     */\n    to: Input<string>;\n  }>;\n}\n\ninterface InlineRouterBucketRouteArgs extends InlineBaseRouteArgs {\n  /**\n   * A bucket to route to.\n   *\n   * :::note\n   * You need to let CloudFront `access` the bucket.\n   * :::\n   *\n   * @example\n   *\n   * For example, let's say you have a bucket that gives CloudFront `access`.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const myBucket = new sst.aws.Bucket(\"MyBucket\", {\n   *   access: \"cloudfront\"\n   * });\n   * ```\n   *\n   * You can then this directly as the destination for the route.\n   *\n   * ```js\n   * {\n   *   routes: {\n   *     \"/files/*\": {\n   *       bucket: myBucket\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Or if you have an existing bucket, you can pass in its regional domain.\n   *\n   * ```js\n   * {\n   *   routes: {\n   *     \"/files/*\": {\n   *       bucket: \"my-bucket.s3.us-east-1.amazonaws.com\"\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  bucket?: Input<Bucket | string>;\n  /**\n   * Rewrite the request path.\n   *\n   * @example\n   *\n   * By default, if the route path is `/files/*` and a request comes in for `/files/logo.png`,\n   * the request path the destination sees is `/files/logo.png`. In the case of a bucket route,\n   * the file `logo.png` is served from the `files` directory in the bucket.\n   *\n   * If you want to serve the file from the root of the bucket, you can rewrite\n   * the request path to `/logo.png`.\n   *\n   * ```js\n   * {\n   *   routes: {\n   *     \"/files/*\": {\n   *       bucket: myBucket,\n   *       rewrite: {\n   *         regex: \"^/files/(.*)$\",\n   *         to: \"/$1\"\n   *       }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  rewrite?: Input<{\n    /**\n     * The regex to match the request path.\n     */\n    regex: Input<string>;\n    /**\n     * The replacement for the matched path.\n     */\n    to: Input<string>;\n  }>;\n}\n\ninterface InlineBaseRouteArgs {\n  /**\n   * The cache policy to use for the route.\n   *\n   * @default CloudFront's managed CachingOptimized policy\n   * @example\n   * ```js\n   * {\n   *   routes: {\n   *     \"/files/*\": {\n   *       url: \"https://example.com\"\n   *       cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  cachePolicy?: Input<string>;\n  /**\n   * Configure CloudFront Functions to customize the behavior of HTTP requests and responses at the edge.\n   */\n  edge?: {\n    /**\n     * Configure the viewer request function.\n     *\n     * The viewer request function can be used to modify incoming requests before they\n     * reach your origin server. For example, you can redirect users, rewrite URLs,\n     * or add headers.\n     */\n    viewerRequest?: Input<{\n      /**\n       * The code to inject into the viewer request function.\n       *\n       * By default, a viewer request function is created to add the `x-forwarded-host`\n       * header. The given code will be injected at the end of this function.\n       *\n       * ```js\n       * async function handler(event) {\n       *   // Default behavior code\n       *\n       *   // User injected code\n       *\n       *   return event.request;\n       * }\n       * ```\n       *\n       * @example\n       * To add a custom header to all requests.\n       *\n       * ```js\n       * {\n       *   routes: {\n       *     \"/api/*\": {\n       *       url: \"https://example.com\"\n       *       edge: {\n       *         viewerRequest: {\n       *           injection: `event.request.headers[\"x-foo\"] = { value: \"bar\" };`\n       *         }\n       *       }\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      injection: Input<string>;\n      /**\n       * The KeyValueStore to associate with the viewer request function.\n       *\n       * @example\n       * ```js\n       * {\n       *   routes: {\n       *     \"/api/*\": {\n       *       url: \"https://example.com\"\n       *       edge: {\n       *         viewerRequest: {\n       *           kvStore: \"arn:aws:cloudfront::123456789012:key-value-store/my-store\"\n       *         }\n       *       }\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      kvStore?: Input<string>;\n      /**\n       * @deprecated Use `kvStore` instead because CloudFront Functions only support one KeyValueStore.\n       */\n      kvStores?: Input<Input<string>[]>;\n    }>;\n    /**\n     * Configure the viewer response function.\n     *\n     * The viewer response function can be used to modify outgoing responses before\n     * they are sent to the client. For example, you can add security headers or change\n     * the response status code.\n     *\n     * By default, no viewer response function is set. A new function will be created\n     * with the provided code.\n     *\n     * @example\n     * Add a custom header to all responses\n     * ```js\n     * {\n     *   routes: {\n     *     \"/api/*\": {\n     *       url: \"https://example.com\"\n     *       edge: {\n     *         viewerResponse: {\n     *           injection: `event.response.headers[\"x-foo\"] = { value: \"bar\" };`\n     *         }\n     *       }\n     *     }\n     *   }\n     * }\n     * ```\n     */\n    viewerResponse?: Input<{\n      /**\n       * The code to inject into the viewer response function.\n       *\n       * By default, no viewer response function is set. A new function will be created with\n       * the provided code.\n       *\n       * ```js\n       * async function handler(event) {\n       *   // User injected code\n       *\n       *   return event.response;\n       * }\n       * ```\n       *\n       * @example\n       * To add a custom header to all responses.\n       *\n       * ```js\n       * {\n       *   routes: {\n       *     \"/api/*\": {\n       *       url: \"https://example.com\"\n       *       edge: {\n       *         viewerResponse: {\n       *           injection: `event.response.headers[\"x-foo\"] = { value: \"bar\" };`\n       *         }\n       *       }\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      injection: Input<string>;\n      /**\n       * The KeyValueStore to associate with the viewer response function.\n       *\n       * @example\n       * ```js\n       * {\n       *   routes: {\n       *     \"/api/*\": {\n       *       url: \"https://example.com\"\n       *       edge: {\n       *         viewerResponse: {\n       *           kvStore: \"arn:aws:cloudfront::123456789012:key-value-store/my-store\"\n       *         }\n       *       }\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      kvStore?: Input<string>;\n      /**\n       * @deprecated Use `kvStore` instead because CloudFront Functions only support one KeyValueStore.\n       */\n      kvStores?: Input<Input<string>[]>;\n    }>;\n  };\n}\n\ninterface RouteArgs {\n  /**\n   * The number of times that CloudFront attempts to connect to the origin. Must be\n   * between 1 and 3.\n   * @default 3\n   * @example\n   * ```js\n   * {\n   *   connectionAttempts: 1\n   * }\n   * ```\n   */\n  connectionAttempts?: Input<number>;\n  /**\n   * The number of seconds that CloudFront waits before timing out and closing the\n   * connection to the origin. Must be between 1 and 10 seconds.\n   * @default `\"10 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   connectionTimeout: \"3 seconds\"\n   * }\n   * ```\n   */\n  connectionTimeout?: Input<DurationSeconds>;\n}\n\nexport interface RouterUrlRouteArgs extends RouteArgs {\n  /**\n   * Rewrite the request path.\n   *\n   * @example\n   *\n   * If the route path is `/api/*` and a request comes in for `/api/users/profile`,\n   * the request path the destination sees is `/api/users/profile`.\n   *\n   * If you want to serve the route from the root, you can rewrite the request\n   * path to `/users/profile`.\n   *\n   * ```js\n   * {\n   *   rewrite: {\n   *     regex: \"^/api/(.*)$\",\n   *     to: \"/$1\"\n   *   }\n   * }\n   * ```\n   */\n  rewrite?: Input<{\n    /**\n     * The regex to match the request path.\n     */\n    regex: Input<string>;\n    /**\n     * The replacement for the matched path.\n     */\n    to: Input<string>;\n  }>;\n  /**\n   * The number of seconds that CloudFront waits for a response after routing a\n   * request to the destination. Must be between 1 and 60 seconds.\n   *\n   * When compared to the `connectionTimeout`, this is the total time for the\n   * request.\n   *\n   * @default `\"20 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   readTimeout: \"60 seconds\"\n   * }\n   * ```\n   */\n  readTimeout?: Input<DurationSeconds>;\n  /**\n   * The number of seconds that CloudFront should try to maintain the connection\n   * to the destination after receiving the last packet of the response. Must be\n   * between 1 and 60 seconds\n   * @default `\"5 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   keepAliveTimeout: \"10 seconds\"\n   * }\n   * ```\n   */\n  keepAliveTimeout?: Input<DurationSeconds>;\n}\n\nexport interface RouterBucketRouteArgs extends RouteArgs {\n  /**\n   * Rewrite the request path.\n   *\n   * @example\n   *\n   * If the route path is `/files/*` and a request comes in for `/files/logo.png`,\n   * the request path the destination sees is `/files/logo.png`.\n   *\n   * If you want to serve the file from the root of the bucket, you can rewrite\n   * the request path to `/logo.png`.\n   *\n   * ```js\n   * {\n   *   rewrite: {\n   *     regex: \"^/files/(.*)$\",\n   *     to: \"/$1\"\n   *   }\n   * }\n   * ```\n   */\n  rewrite?: Input<{\n    /**\n     * The regex to match the request path.\n     */\n    regex: Input<string>;\n    /**\n     * The replacement for the matched path.\n     */\n    to: Input<string>;\n  }>;\n}\n\nexport interface RouterArgs {\n  /**\n   * Set a custom domain for your Router.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: CdnArgs[\"domain\"];\n  /**\n   * A map of routes to their destinations.\n   *\n   * @deprecated Use the `route` and `routeBucket` functions instead. These\n   * functions provide a more flexible API for routing to URLs and buckets. They\n   * also allow routing based on both domain and path patterns.\n   *\n   * The _key_ is the route path and the _value_ can be:\n   *\n   * - The destination URL as a string\n   * - Or, an object with\n   *   - Args for a URL route\n   *   - Args for a bucket route\n   *\n   * :::note\n   * All routes need to start with `/`.\n   * :::\n   *\n   * For example, you can set the destination as a URL.\n   *\n   * ```ts\n   * {\n   *   routes: {\n   *     \"/*\": \"https://example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Or, you can route to a bucket.\n   *\n   * ```ts\n   * {\n   *   routes: {\n   *     \"/files/*\": {\n   *       bucket: myBucket\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * When router receives a request, the requested path is compared with path patterns\n   * in the order they are listed. The first match determines which URL the\n   * request is routed to.\n   *\n   * :::tip[Default Route]\n   * The `/*` route is a default or catch-all route.\n   * :::\n   *\n   * The `/*` route is a _default_ route, meaning that if no routes match, the `/*` route will be used. It does not matter where the `/*` route is listed in the routes object.\n   *\n   * :::note\n   * If you don't have a `/*` route, you'll get a 404 error for any requests that don't match a route.\n   * :::\n   *\n   * Suppose you have the following three routes.\n   *\n   * ```js\n   * {\n   *   routes: {\n   *     \"/api/*.json\": \"https://example1.com\",\n   *     \"/api/*\": \"https://example2.com\",\n   *     \"/*.xml\": \"https://example3.com\",\n   *   }\n   * }\n   * ```\n   *\n   * A request to `/api/sample.xml` will match `/api/*` first and route to it; even though it matches `/*.xml`.\n   *\n   * However for this case, a request to `/api/users` will route to `/api/*` even though it comes after `/*`. This is because the `/*` route is the default route.\n   *\n   * ```js\n   * {\n   *   routes: {\n   *     \"/*\": \"myapp.com\",\n   *     \"/api/*\": myFunction.url\n   *   }\n   * }\n   * ```\n   *\n   * You can also customize the route behavior with injecting some code into the CloudFront\n   * Functions. To do so, pass in an object, with the destination as the `url`.\n   *\n   * ```ts\n   * {\n   *   routes: {\n   *     \"/*\": {\n   *       url: \"https://example.com\",\n   *       edge: {\n   *         viewerRequest: {\n   *           injection: `event.request.headers[\"x-foo\"] = { value: \"bar\" };`\n   *         }\n   *       }\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * You can also `rewrite` the request path.\n   *\n   * ```ts\n   * {\n   *   routes: {\n   *     \"/files/*\": {\n   *       bucket: myBucket,\n   *       rewrite: {\n   *         regex: \"^/files/(.*)$\",\n   *         to: \"/$1\"\n   *       }\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  routes?: Input<\n    Record<\n      string,\n      Input<string | InlineUrlRouteArgs | InlineRouterBucketRouteArgs>\n    >\n  >;\n  /**\n   * Configure CloudFront Functions to customize the behavior of HTTP requests and responses at the edge.\n   */\n  edge?: {\n    /**\n     * Configure the viewer request function.\n     *\n     * The viewer request function can be used to modify incoming requests before they\n     * reach your origin server. For example, you can redirect users, rewrite URLs,\n     * or add headers.\n     */\n    viewerRequest?: Input<{\n      /**\n       * The code to inject into the viewer request function.\n       *\n       * By default, a viewer request function is created to:\n       * - Disable CloudFront default URL if custom domain is set.\n       * - Add the `x-forwarded-host` header.\n       * - Route requests to the corresponding target based on the domain and request path.\n       *\n       * The given code will be injected at the beginning of this function.\n       *\n       * ```js\n       * async function handler(event) {\n       *   // User injected code\n       *\n       *   // Default behavior code\n       *\n       *   return event.request;\n       * }\n       * ```\n       *\n       * @example\n       * To add a custom header to all requests.\n       *\n       * ```js\n       * {\n       *   edge: {\n       *     viewerRequest: {\n       *       injection: `event.request.headers[\"x-foo\"] = { value: \"bar\" };`\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      injection: Input<string>;\n      /**\n       * The KeyValueStore to associate with the viewer request function.\n       *\n       * @example\n       * ```js\n       * {\n       *   edge: {\n       *     viewerRequest: {\n       *       kvStore: \"arn:aws:cloudfront::123456789012:key-value-store/my-store\"\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      kvStore?: Input<string>;\n    }>;\n    /**\n     * Configure the viewer response function.\n     *\n     * The viewer response function can be used to modify outgoing responses before\n     * they are sent to the client. For example, you can add security headers or change\n     * the response status code.\n     *\n     * By default, no viewer response function is set. A new function will be created\n     * with the provided code.\n     */\n    viewerResponse?: Input<{\n      /**\n       * The code to inject into the viewer response function.\n       *\n       * ```js\n       * async function handler(event) {\n       *   // User injected code\n       *\n       *   return event.response;\n       * }\n       * ```\n       *\n       * @example\n       * To add a custom header to all responses.\n       *\n       * ```js\n       * {\n       *   edge: {\n       *     viewerResponse: {\n       *       injection: `event.response.headers[\"x-foo\"] = { value: \"bar\" };`\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      injection: Input<string>;\n      /**\n       * The KeyValueStore to associate with the viewer response function.\n       *\n       * @example\n       * ```js\n       * {\n       *   edge: {\n       *     viewerResponse: {\n       *       kvStore: \"arn:aws:cloudfront::123456789012:key-value-store/my-store\"\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      kvStore?: Input<string>;\n    }>;\n  };\n  /**\n   * Configure how the CloudFront cache invalidations are handled.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default Invalidation is turned off\n   * @example\n   * Setting this to `true` will invalidate all paths. It's equivalent\n   * to passing in `{ paths: [\"/*\"] }`.\n   *\n   * ```js\n   * {\n   *   invalidation: true\n   * }\n   * ```\n   */\n  invalidation?: Input<\n    | boolean\n    | {\n        /**\n         * Configure if `sst deploy` should wait for the CloudFront cache invalidation to finish.\n         *\n         * :::tip\n         * For non-prod environments it might make sense to pass in `false`.\n         * :::\n         *\n         * Waiting for this process to finish ensures that new content will be available after the deploy finishes. However, this process can sometimes take more than 5 mins.\n         * @default `false`\n         * @example\n         * ```js\n         * {\n         *   invalidation: {\n         *     wait: true\n         *   }\n         * }\n         * ```\n         */\n        wait?: Input<boolean>;\n        /**\n         * A token used to determine if the cache should be invalidated. If the\n         * token is the same as the previous deployment, the cache will not be invalidated.\n         *\n         * You can set this to a hash that's computed on every deploy. So if the hash\n         * changes, the cache will be invalidated.\n         *\n         * @default A unique value is auto-generated on each deploy\n         * @example\n         * ```js\n         * {\n         *   invalidation: {\n         *     token: \"foo123\"\n         *   }\n         * }\n         * ```\n         */\n        token?: Input<string>;\n        /**\n         * Specify an array of glob pattern of paths to invalidate.\n         *\n         * :::note\n         * Each glob pattern counts as a single invalidation. Whereas, invalidating\n         * `/*` counts as a single invalidation.\n         * :::\n         * @default `[\"/*\"]`\n         * @example\n         * Invalidate the `index.html` and all files under the `products/` route.\n         * ```js\n         * {\n         *   invalidation: {\n         *     paths: [\"/index.html\", \"/products/*\"]\n         *   }\n         * }\n         * ```\n         * This counts as two invalidations.\n         */\n        paths?: Input<Input<string>[]>;\n      }\n  >;\n\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Cache Policy that's attached to each CloudFront behavior.\n     */\n    cachePolicy?: Transform<cloudfront.CachePolicyArgs>;\n    /**\n     * Transform the CloudFront CDN resource.\n     */\n    cdn?: Transform<CdnArgs>;\n  };\n  /**\n   * @internal\n   */\n  _skipHint?: boolean;\n}\n\ninterface RouterRef {\n  ref: boolean;\n  distributionID: Input<string>;\n}\n\n/**\n * The `Router` component lets you use a CloudFront distribution to direct\n * requests to various parts of your application like:\n *\n * - A URL\n * - A function\n * - A frontend\n * - An S3 bucket\n *\n * @example\n *\n * #### Minimal example\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Router(\"MyRouter\");\n * ```\n *\n * #### Add a custom domain\n *\n * ```ts {2} title=\"sst.config.ts\"\n * new sst.aws.Router(\"MyRouter\", {\n *   domain: \"myapp.com\"\n * });\n * ```\n *\n * #### Sharing the router across stages\n *\n * ```ts title=\"sst.config.ts\"\n * const router = $app.stage === \"production\"\n *   ? new sst.aws.Router(\"MyRouter\", {\n *       domain: {\n *         name: \"example.com\",\n *         aliases: [\"*.example.com\"]\n *       }\n *     })\n *   : sst.aws.Router.get(\"MyRouter\", \"E1XWRGCYGTFB7Z\");\n * ```\n *\n * #### Route to a URL\n *\n * ```ts title=\"sst.config.ts\" {3}\n * const router = new sst.aws.Router(\"MyRouter\");\n *\n * router.route(\"/\", \"https://some-external-service.com\");\n * ```\n *\n * #### Route to an S3 bucket\n *\n * ```ts title=\"sst.config.ts\" {2,6}\n * const myBucket = new sst.aws.Bucket(\"MyBucket\", {\n *   access: \"cloudfront\"\n * });\n *\n * const router = new sst.aws.Router(\"MyRouter\");\n * router.routeBucket(\"/files\", myBucket);\n * ```\n *\n * You need to allow CloudFront to access the bucket by setting the `access` prop\n * on the bucket.\n *\n * #### Route to a function\n *\n * ```ts title=\"sst.config.ts\" {8-11}\n * const router = new sst.aws.Router(\"MyRouter\", {\n *   domain: \"example.com\"\n * });\n *\n * const myFunction = new sst.aws.Function(\"MyFunction\", {\n *   handler: \"src/api.handler\",\n *   url: {\n *     router: {\n *       instance: router,\n *       path: \"/api\"\n *     }\n *   }\n * });\n * ```\n *\n * Setting the route through the function, instead of `router.route()` makes\n * it so that `myFunction.url` gives you the URL based on the Router domain.\n *\n * #### Route to a frontend\n *\n * ```ts title=\"sst.config.ts\" {4-6}\n * const router = new sst.aws.Router(\"MyRouter\");\n *\n * const mySite = new sst.aws.Nextjs(\"MyWeb\", {\n *   router: {\n *     instance: router\n *   }\n * });\n * ```\n *\n * Setting the route through the site, instead of `router.route()` makes\n * it so that `mySite.url` gives you the URL based on the Router domain.\n *\n * #### Route to a frontend on a path\n *\n * ```ts title=\"sst.config.ts\" {4-7}\n * const router = new sst.aws.Router(\"MyRouter\");\n *\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   router: {\n *     instance: router,\n *     path: \"/docs\"\n *   }\n * });\n * ```\n *\n * If you are routing to a path, you'll need to configure the base path in your\n * frontend app as well. [Learn more](/docs/component/aws/nextjs/#router).\n *\n * #### Route to a frontend on a subdomain\n *\n * ```ts title=\"sst.config.ts\" {4,9-12}\n * const router = new sst.aws.Router(\"MyRouter\", {\n *   domain: {\n *     name: \"example.com\",\n *     aliases: [\"*.example.com\"]\n *   }\n * });\n *\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   router: {\n *     instance: router,\n *     domain: \"docs.example.com\"\n *   }\n * });\n * ```\n *\n * We configure `*.example.com` as an alias so that we can route to a subdomain.\n *\n * #### How it works\n *\n * This uses a CloudFront KeyValueStore to store the routing data and a CloudFront\n * function to route the request. As routes are added, the store is updated.\n *\n * So when a request comes in, it does a lookup in the store and dynamically sets\n * the origin based on the routing data. For frontends, that have their server\n * functions deployed to multiple `regions`, it routes to the closest region based\n * on the user's location.\n *\n * You might notice a _placeholder.sst.dev_ behavior in CloudFront. This is not\n * used and is only there because CloudFront requires a default behavior.\n *\n * #### Limits\n *\n * There are some limits on this setup but it's managed by SST.\n *\n * - The CloudFront function can be a maximum of 10KB in size. But because all\n *   the route data is stored in the KeyValueStore, the function can be kept small.\n * - Each value in the KeyValueStore needs to be less than 1KB. This component\n *   splits the routes into multiple values to keep it under the limit.\n * - The KeyValueStore can be a maximum of 5MB. This is fairly large. But to\n *   handle sites that have a lot of files, only top-level assets get individual\n *   entries.\n */\nexport class Router extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private cdn: Output<Cdn>;\n  private kvStoreArn?: Output<string>;\n  private kvNamespace?: Output<string>;\n  private hasInlineRoutes: Output<boolean>;\n\n  constructor(\n    name: string,\n    args: RouterArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const _refVersion = 2;\n    const self = this;\n    this.constructorName = name;\n    this.constructorOpts = opts;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.cdn = output(ref.cdn);\n      this.kvStoreArn = ref.kvStoreArn;\n      this.kvNamespace = ref.kvNamespace;\n      this.hasInlineRoutes = ref.hasInlineRoutes;\n      registerOutputs();\n      return;\n    }\n\n    const hasInlineRoutes = args.routes !== undefined;\n\n    let cdn, kvStoreArn, kvNamespace;\n    if (hasInlineRoutes) {\n      cdn = handleInlineRoutes();\n    } else {\n      const r = handleLazyRoutes();\n      cdn = output(r.distribution);\n      kvStoreArn = r.kvStoreArn;\n      kvNamespace = output(r.kvNamespace);\n    }\n\n    this.cdn = cdn;\n    this.kvStoreArn = kvStoreArn;\n    this.kvNamespace = kvNamespace;\n    this.hasInlineRoutes = output(hasInlineRoutes);\n    registerOutputs();\n\n    function reference() {\n      const ref = args as unknown as RouterRef;\n      const cdn = Cdn.get(`${name}Cdn`, ref.distributionID, { parent: self });\n      const tags = cdn.nodes.distribution.tags.apply((tags) => {\n        if (tags?.[\"sst:ref:version\"] !== _refVersion.toString()) {\n          throw new VisibleError(\n            [\n              `There have been some minor changes to the \"Router\" component that's being referenced by \"${name}\".\\n`,\n              `To update, you'll need to redeploy the stage where the Router was created. And then redeploy this stage.`,\n            ].join(\"\\n\"),\n          );\n        }\n\n        return {\n          kvStoreArn: tags?.[\"sst:ref:kv\"],\n          kvNamespace: tags?.[\"sst:ref:kv-namespace\"],\n          hasInlineRoutes: tags?.[\"sst:ref:kv\"] === undefined,\n        };\n      });\n\n      return {\n        cdn,\n        kvStoreArn: tags.kvStoreArn,\n        kvNamespace: tags.kvNamespace,\n        hasInlineRoutes: tags.hasInlineRoutes,\n      };\n    }\n\n    function registerOutputs() {\n      self.registerOutputs({\n        _hint: args._skipHint ? undefined : self.url,\n      });\n    }\n\n    function handleInlineRoutes() {\n      let defaultCachePolicy: cloudfront.CachePolicy;\n      let defaultCfFunction: cloudfront.Function;\n      let defaultOac: OriginAccessControl;\n      const routes = normalizeRoutes();\n      const cdn = createCdn();\n      return cdn;\n\n      function normalizeRoutes() {\n        return output(args.routes!).apply((routes) => {\n          const normalizedRoutes = Object.fromEntries(\n            Object.entries(routes).map(([path, route]) => {\n              // Route path must start with \"/\"\n              if (!path.startsWith(\"/\"))\n                throw new Error(\n                  `In \"${name}\" Router, the route path \"${path}\" must start with a \"/\"`,\n                );\n\n              route = typeof route === \"string\" ? { url: route } : route;\n\n              const hasUrl = \"url\" in route ? 1 : 0;\n              const hasBucket = \"bucket\" in route ? 1 : 0;\n              if (hasUrl + hasBucket !== 1)\n                throw new Error(\n                  `In \"${name}\" Router, the route path \"${path}\" can only have one of url or bucket`,\n                );\n\n              return [path, route];\n            }),\n          );\n\n          normalizedRoutes[\"/*\"] = normalizedRoutes[\"/*\"] ?? {\n            url: \"https://do-not-exist.sst.dev\",\n          };\n\n          return normalizedRoutes;\n        });\n      }\n\n      function createCfRequestDefaultFunction() {\n        defaultCfFunction =\n          defaultCfFunction ??\n          new cloudfront.Function(\n            `${name}CloudfrontFunction`,\n            {\n              runtime: \"cloudfront-js-2.0\",\n              code: [\n                `async function handler(event) {`,\n                `  event.request.headers[\"x-forwarded-host\"] = event.request.headers.host;`,\n                `  return event.request;`,\n                `}`,\n              ].join(\"\\n\"),\n            },\n            { parent: self },\n          );\n        return defaultCfFunction;\n      }\n\n      function createCfRequestFunction(\n        path: string,\n        config:\n          | {\n              injection: string;\n              kvStore?: string;\n              kvStores?: string[];\n            }\n          | undefined,\n        rewrite:\n          | {\n              regex: string;\n              to: string;\n            }\n          | undefined,\n        injectHostHeader: boolean,\n      ) {\n        return new cloudfront.Function(\n          `${name}CloudfrontFunction${hashStringToPrettyString(path, 8)}`,\n          {\n            runtime: \"cloudfront-js-2.0\",\n            keyValueStoreAssociations: config?.kvStore\n              ? [config.kvStore]\n              : config?.kvStores ?? [],\n            code: `\nasync function handler(event) {\n  ${\n    injectHostHeader\n      ? `event.request.headers[\"x-forwarded-host\"] = event.request.headers.host;`\n      : \"\"\n  }\n  ${\n    rewrite\n      ? `\nconst re = new RegExp(\"${rewrite.regex}\");\nevent.request.uri = event.request.uri.replace(re, \"${rewrite.to}\");`\n      : \"\"\n  }\n  ${config?.injection ?? \"\"}\n  return event.request;\n}`,\n          },\n          { parent: self },\n        );\n      }\n\n      function createCfResponseFunction(\n        path: string,\n        config: {\n          injection: string;\n          kvStore?: string;\n          kvStores?: string[];\n        },\n      ) {\n        return new cloudfront.Function(\n          `${name}CloudfrontFunctionResponse${hashStringToPrettyString(\n            path,\n            8,\n          )}`,\n          {\n            runtime: \"cloudfront-js-2.0\",\n            keyValueStoreAssociations: config.kvStore\n              ? [config.kvStore]\n              : config.kvStores ?? [],\n            code: `\nasync function handler(event) {\n  ${config.injection ?? \"\"}\n  return event.response;\n}`,\n          },\n          { parent: self },\n        );\n      }\n\n      function createOriginAccessControl() {\n        defaultOac =\n          defaultOac ??\n          new OriginAccessControl(\n            `${name}S3AccessControl`,\n            { name: physicalName(64, name) },\n            { parent: self, ignoreChanges: [\"name\"] },\n          );\n        return defaultOac;\n      }\n\n      function createCachePolicy() {\n        defaultCachePolicy =\n          defaultCachePolicy ??\n          new cloudfront.CachePolicy(\n            ...transform(\n              args.transform?.cachePolicy,\n              `${name}CachePolicy`,\n              {\n                comment: `${name} router cache policy`,\n                defaultTtl: 0,\n                maxTtl: 31536000, // 1 year\n                minTtl: 0,\n                parametersInCacheKeyAndForwardedToOrigin: {\n                  cookiesConfig: {\n                    cookieBehavior: \"none\",\n                  },\n                  headersConfig: {\n                    headerBehavior: \"none\",\n                  },\n                  queryStringsConfig: {\n                    queryStringBehavior: \"all\",\n                  },\n                  enableAcceptEncodingBrotli: true,\n                  enableAcceptEncodingGzip: true,\n                },\n              },\n              { parent: self },\n            ),\n          );\n\n        return defaultCachePolicy;\n      }\n\n      function createCdn() {\n        return routes.apply((routes) => {\n          const distributionData = Object.entries(routes).map(\n            ([path, route]) => {\n              if (\"url\" in route) {\n                return {\n                  origin: {\n                    originId: path,\n                    domainName: new URL(route.url).host,\n                    customOriginConfig: {\n                      httpPort: 80,\n                      httpsPort: 443,\n                      originProtocolPolicy: \"https-only\",\n                      originReadTimeout: 20,\n                      originSslProtocols: [\"TLSv1.2\"],\n                    },\n                  },\n                  behavior: {\n                    pathPattern: path,\n                    targetOriginId: path,\n                    functionAssociations: [\n                      {\n                        eventType: \"viewer-request\",\n                        functionArn:\n                          route.edge?.viewerRequest || route.rewrite\n                            ? createCfRequestFunction(\n                                path,\n                                route.edge?.viewerRequest,\n                                route.rewrite,\n                                true,\n                              ).arn\n                            : createCfRequestDefaultFunction().arn,\n                      },\n                      ...(route.edge?.viewerResponse\n                        ? [\n                            {\n                              eventType: \"viewer-response\",\n                              functionArn: createCfResponseFunction(\n                                path,\n                                route.edge.viewerResponse,\n                              ).arn,\n                            },\n                          ]\n                        : []),\n                    ],\n                    viewerProtocolPolicy: \"redirect-to-https\",\n                    allowedMethods: [\n                      \"DELETE\",\n                      \"GET\",\n                      \"HEAD\",\n                      \"OPTIONS\",\n                      \"PATCH\",\n                      \"POST\",\n                      \"PUT\",\n                    ],\n                    cachedMethods: [\"GET\", \"HEAD\"],\n                    defaultTtl: 0,\n                    compress: true,\n                    cachePolicyId: route.cachePolicy ?? createCachePolicy().id,\n                    // CloudFront's Managed-AllViewerExceptHostHeader policy\n                    originRequestPolicyId:\n                      \"b689b0a8-53d0-40ab-baf2-68738e2966ac\",\n                  },\n                };\n              } else if (\"bucket\" in route) {\n                return {\n                  origin: {\n                    originId: path,\n                    domainName:\n                      route.bucket instanceof Bucket\n                        ? route.bucket.nodes.bucket.bucketRegionalDomainName\n                        : route.bucket!,\n                    originPath: \"\",\n                    originAccessControlId: createOriginAccessControl().id,\n                  },\n                  behavior: {\n                    pathPattern: path,\n                    targetOriginId: path,\n                    functionAssociations: [\n                      ...(route.edge?.viewerRequest || route.rewrite\n                        ? [\n                            {\n                              eventType: \"viewer-request\",\n                              functionArn:\n                                route.edge?.viewerRequest || route.rewrite\n                                  ? createCfRequestFunction(\n                                      path,\n                                      route.edge?.viewerRequest,\n                                      route.rewrite,\n                                      false,\n                                    ).arn\n                                  : createCfRequestDefaultFunction().arn,\n                            },\n                          ]\n                        : []),\n                      ...(route.edge?.viewerResponse\n                        ? [\n                            {\n                              eventType: \"viewer-response\",\n                              functionArn: createCfResponseFunction(\n                                path,\n                                route.edge.viewerResponse,\n                              ).arn,\n                            },\n                          ]\n                        : []),\n                    ],\n                    viewerProtocolPolicy: \"redirect-to-https\",\n                    allowedMethods: [\"GET\", \"HEAD\", \"OPTIONS\"],\n                    cachedMethods: [\"GET\", \"HEAD\"],\n                    compress: true,\n                    // CloudFront's managed CachingOptimized policy\n                    cachePolicyId:\n                      route.cachePolicy ??\n                      \"658327ea-f89d-4fab-a63d-7e88639e58f6\",\n                  },\n                };\n              }\n              throw new Error(\"Invalid route type\");\n            },\n          );\n\n          return new Cdn(\n            ...transform(\n              args.transform?.cdn,\n              `${name}Cdn`,\n              {\n                comment: `${name} router`,\n                origins: distributionData.map((d) => d.origin),\n                defaultCacheBehavior: {\n                  ...distributionData.find(\n                    (d) => d.behavior.pathPattern === \"/*\",\n                  )!.behavior,\n                  // @ts-expect-error\n                  pathPattern: undefined,\n                },\n                orderedCacheBehaviors: distributionData\n                  .filter((d) => d.behavior.pathPattern !== \"/*\")\n                  .map((d) => d.behavior),\n                domain: args.domain,\n                wait: true,\n              },\n              { parent: self },\n            ),\n          );\n        });\n      }\n    }\n\n    function handleLazyRoutes() {\n      const kvNamespace = buildRequestKvNamespace();\n      const kvStoreArn = createRequestKvStore();\n      const requestFunction = createRequestFunction();\n      const responseFunction = createResponseFunction();\n      const cachePolicyId = createCachePolicy().id;\n      const distribution = createDistribution();\n\n      return { kvNamespace, kvStoreArn, distribution };\n\n      function buildRequestKvNamespace() {\n        // In the case multiple routers use the same kv store, we need to namespace the keys\n        return crypto\n          .createHash(\"md5\")\n          .update(`${$app.name}-${$app.stage}-${name}`)\n          .digest(\"hex\")\n          .substring(0, 4);\n      }\n\n      function createRequestKvStore() {\n        return output(args.edge).apply((edge) => {\n          const viewerRequest = edge?.viewerRequest;\n          const userKvStore = viewerRequest?.kvStore;\n          if (userKvStore) return output(userKvStore);\n\n          return new cloudfront.KeyValueStore(\n            `${name}KvStore`,\n            {},\n            { parent: self },\n          ).arn;\n        });\n      }\n\n      function createCachePolicy() {\n        return new cloudfront.CachePolicy(\n          ...transform(\n            args.transform?.cachePolicy,\n            `${name}ServerCachePolicy`,\n            {\n              comment: \"SST server response cache policy\",\n              defaultTtl: 0,\n              maxTtl: 31536000, // 1 year\n              minTtl: 0,\n              parametersInCacheKeyAndForwardedToOrigin: {\n                cookiesConfig: {\n                  cookieBehavior: \"none\",\n                },\n                headersConfig: {\n                  headerBehavior: \"whitelist\",\n                  headers: {\n                    items: [\"x-open-next-cache-key\"],\n                  },\n                },\n                queryStringsConfig: {\n                  queryStringBehavior: \"all\",\n                },\n                enableAcceptEncodingBrotli: true,\n                enableAcceptEncodingGzip: true,\n              },\n            },\n            { parent: self },\n          ),\n        );\n      }\n\n      function createRequestFunction() {\n        return output(args.edge).apply((edge) => {\n          const userInjection = edge?.viewerRequest?.injection ?? \"\";\n          const blockCloudfrontUrlInjection = args.domain\n            ? CF_BLOCK_CLOUDFRONT_URL_INJECTION\n            : \"\";\n          return new cloudfront.Function(\n            `${name}CloudfrontFunctionRequest`,\n            {\n              runtime: \"cloudfront-js-2.0\",\n              keyValueStoreAssociations: kvStoreArn ? [kvStoreArn] : [],\n              code: interpolate`\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  ${userInjection}\n  ${blockCloudfrontUrlInjection}\n  ${CF_ROUTER_INJECTION}\n\n  const routerNS = \"${kvNamespace}\";\n\n  async function getRoutes() {\n    let routes = [];\n    try {\n      const v = await cf.kvs().get(routerNS + \":routes\");\n      routes = JSON.parse(v);\n\n      // handle chunked routes\n      if (routes.parts) {\n        const chunkPromises = [];\n        for (let i = 0; i < routes.parts; i++) {\n          chunkPromises.push(cf.kvs().get(routerNS + \":routes:\" + i));\n        }\n        const chunks = await Promise.all(chunkPromises);\n        routes = JSON.parse(chunks.join(\"\"));\n      }\n    } catch (e) {}\n    return routes;\n  }\n\n  async function matchRoute(routes) {\n    const requestHost = event.request.headers.host.value;\n    const requestHostWithEscapedDots = requestHost.replace(/\\\\./g, \"\\\\\\\\.\");\n    const requestHostRegexPattern = \"^\" + requestHost + \"$\";\n    let match;\n    routes.forEach(r => {\n      ${\n        /*\n        Route format: [type, routeNamespace, hostRegex, pathPrefix]\n        - First sort by host pattern (longest first)\n        - Then sort by path prefix (longest first)\n      */ \"\"\n      }\n      var parts = r.split(\",\");\n      const type = parts[0];\n      const routeNs = parts[1];\n      const host = parts[2];\n      const hostLength = host.length;\n      const path = parts[3];\n      const pathLength = path.length;\n\n      // Do not consider if the current match is a better winner\n      if (match && (\n          hostLength < match.hostLength\n          || (hostLength === match.hostLength && pathLength < match.pathLength)\n      )) return;\n\n      const hostMatches = host === \"\"\n        || host === requestHostWithEscapedDots\n        || (host.includes(\"*\") && new RegExp(host).test(requestHostRegexPattern));\n      if (!hostMatches) return;\n\n      const pathMatches = event.request.uri.startsWith(path);\n      if (!pathMatches) return;\n\n      match = {\n        type,\n        routeNs,\n        host,\n        hostLength,\n        path,\n        pathLength,\n      };\n    });\n\n    // Load metadata\n    if (match) {\n      try {\n        const type = match.type;\n        const routeNs = match.routeNs;\n        const v = await cf.kvs().get(routeNs + \":metadata\");\n        return { type, routeNs, metadata: JSON.parse(v) };\n      } catch (e) {}\n    }\n  }\n\n  // Look up the route\n  const routes = await getRoutes();\n  const route = await matchRoute(routes);\n  if (!route) return event.request;\n  if (route.metadata.rewrite) {\n    const rw = route.metadata.rewrite;\n    event.request.uri = event.request.uri.replace(new RegExp(rw.regex), rw.to);\n  }\n  if (route.type === \"url\") setUrlOrigin(route.metadata.host, route.metadata.origin);\n  if (route.type === \"bucket\") setS3Origin(route.metadata.domain, route.metadata.origin);\n  if (route.type === \"site\") await routeSite(route.routeNs, route.metadata);\n  return event.request;\n}`,\n            },\n            { parent: self },\n          );\n        });\n      }\n\n      function createResponseFunction() {\n        return output(args.edge).apply((edge) => {\n          const userConfig = edge?.viewerResponse;\n          const userInjection = userConfig?.injection;\n          const kvStoreArn = userConfig?.kvStore;\n\n          if (!userInjection) return;\n\n          return new cloudfront.Function(\n            `${name}CloudfrontFunctionResponse`,\n            {\n              runtime: \"cloudfront-js-2.0\",\n              keyValueStoreAssociations: kvStoreArn ? [kvStoreArn] : [],\n              code: `\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  ${userInjection}\n  return event.response;\n}`,\n            },\n            { parent: self },\n          );\n        });\n      }\n\n      function createDistribution() {\n        return new Cdn(\n          ...transform(\n            args.transform?.cdn,\n            `${name}Cdn`,\n            {\n              comment: `${name} app`,\n              domain: args.domain,\n              origins: [\n                {\n                  originId: \"default\",\n                  domainName: \"placeholder.sst.dev\",\n                  customOriginConfig: {\n                    httpPort: 80,\n                    httpsPort: 443,\n                    originProtocolPolicy: \"http-only\",\n                    originReadTimeout: 20,\n                    originSslProtocols: [\"TLSv1.2\"],\n                  },\n                },\n              ],\n              defaultCacheBehavior: {\n                targetOriginId: \"default\",\n                viewerProtocolPolicy: \"redirect-to-https\",\n                allowedMethods: [\n                  \"DELETE\",\n                  \"GET\",\n                  \"HEAD\",\n                  \"OPTIONS\",\n                  \"PATCH\",\n                  \"POST\",\n                  \"PUT\",\n                ],\n                cachedMethods: [\"GET\", \"HEAD\"],\n                compress: true,\n                cachePolicyId,\n                // CloudFront's Managed-AllViewerExceptHostHeader policy\n                originRequestPolicyId: \"b689b0a8-53d0-40ab-baf2-68738e2966ac\",\n                functionAssociations: all([\n                  requestFunction,\n                  responseFunction,\n                ]).apply(([reqFn, resFn]) => [\n                  { eventType: \"viewer-request\", functionArn: reqFn.arn },\n                  ...(resFn\n                    ? [{ eventType: \"viewer-response\", functionArn: resFn.arn }]\n                    : []),\n                ]),\n              },\n              tags: {\n                \"sst:ref:kv\": kvStoreArn,\n                \"sst:ref:kv-namespace\": kvNamespace,\n                \"sst:ref:version\": _refVersion.toString(),\n              },\n            },\n            { parent: self },\n          ),\n        );\n      }\n    }\n  }\n\n  /**\n   * The ID of the Router distribution.\n   */\n  public get distributionID() {\n    return this.cdn.nodes.distribution.id;\n  }\n\n  /**\n   * The URL of the Router.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return all([this.cdn.domainUrl, this.cdn.url]).apply(\n      ([domainUrl, url]) => domainUrl ?? url,\n    );\n  }\n\n  /** @internal */\n  public get _kvStoreArn() {\n    return this.kvStoreArn;\n  }\n\n  /** @internal */\n  public get _kvNamespace() {\n    return this.kvNamespace;\n  }\n\n  /** @internal */\n  public get _hasInlineRoutes() {\n    return this.hasInlineRoutes;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon CloudFront CDN resource.\n       */\n      cdn: this.cdn,\n    };\n  }\n\n  /**\n   * Add a route to a destination URL.\n   *\n   * @param pattern The path prefix to match for this route.\n   * @param url The destination URL to route matching requests to.\n   * @param args Configure the route.\n   *\n   * @example\n   *\n   * You can match a route based on:\n   *\n   * - A path prefix like `/api`\n   * - A domain pattern like `api.example.com`\n   * - A combined pattern like `dev.example.com/api`\n   *\n   * For example, to match a path prefix.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * router.route(\"/api\", \"https://api.example.com\");\n   * ```\n   *\n   * Or match a domain.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * router.route(\"api.myapp.com/\", \"https://api.example.com\");\n   * ```\n   *\n   * Or a combined pattern.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * router.route(\"dev.myapp.com/api\", \"https://api.example.com\");\n   * ```\n   *\n   * You can also rewrite the request path.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * router.route(\"/api\", \"https://api.example.com\", {\n   *   rewrite: {\n   *     regex: \"^/api/(.*)$\",\n   *     to: \"/$1\"\n   *   }\n   * });\n   * ```\n   *\n   * Here something like `/api/users/profile` will be routed to\n   * `https://api.example.com/users/profile`.\n   */\n  public route(\n    pattern: Input<string>,\n    url: Input<string>,\n    args?: Input<RouterUrlRouteArgs>,\n  ) {\n    all([pattern, args, this.hasInlineRoutes]).apply(\n      ([pattern, args, hasInlineRoutes]) => {\n        if (hasInlineRoutes)\n          throw new VisibleError(\n            \"Cannot use both `routes` and `.route()` function to add routes.\",\n          );\n\n        new RouterUrlRoute(\n          `${this.constructorName}Route${pattern}`,\n          {\n            store: this.kvStoreArn!,\n            routerNamespace: this.kvNamespace!,\n            pattern,\n            url,\n            routeArgs: args,\n          },\n          { provider: this.constructorOpts.provider },\n        );\n      },\n    );\n  }\n\n  /**\n   * Add a route to an S3 bucket.\n   *\n   * @param pattern The path prefix to match for this route.\n   * @param bucket The S3 bucket to route matching requests to.\n   * @param args Configure the route.\n   *\n   * @example\n   *\n   * Let's say you have an S3 bucket that gives CloudFront `access`.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const bucket = new sst.aws.Bucket(\"MyBucket\", {\n   *   access: \"cloudfront\"\n   * });\n   * ```\n   *\n   * You can match a pattern and route to it based on:\n   *\n   * - A path prefix like `/api`\n   * - A domain pattern like `api.example.com`\n   * - A combined pattern like `dev.example.com/api`\n   *\n   * For example, to match a path prefix.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * router.routeBucket(\"/files\", bucket);\n   * ```\n   *\n   * Or match a domain.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * router.routeBucket(\"files.example.com\", bucket);\n   * ```\n   *\n   * Or a combined pattern.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * router.routeBucket(\"dev.example.com/files\", bucket);\n   * ```\n   *\n   * You can also rewrite the request path.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * router.routeBucket(\"/files\", bucket, {\n   *   rewrite: {\n   *     regex: \"^/files/(.*)$\",\n   *     to: \"/$1\"\n   *   }\n   * });\n   * ```\n   *\n   * Here something like `/files/logo.png` will be routed to\n   * `/logo.png`.\n   */\n  public routeBucket(\n    pattern: Input<string>,\n    bucket: Input<Bucket>,\n    args?: Input<RouterBucketRouteArgs>,\n  ) {\n    all([pattern, args, this.hasInlineRoutes]).apply(\n      ([pattern, args, hasInlineRoutes]) => {\n        if (hasInlineRoutes)\n          throw new VisibleError(\n            \"Cannot use both `routes` and `.routeBucket()` function to add routes.\",\n          );\n\n        new RouterBucketRoute(\n          `${this.constructorName}Route${pattern}`,\n          {\n            store: this.kvStoreArn!,\n            routerNamespace: this.kvNamespace!,\n            pattern,\n            bucket,\n            routeArgs: args,\n          },\n          { provider: this.constructorOpts.provider },\n        );\n      },\n    );\n  }\n\n  /**\n   * Add a route to a frontend or static site.\n   *\n   * @param pattern The path prefix to match for this route.\n   * @param site The frontend or static site to route matching requests to.\n   *\n   * @deprecated The `routeSite` function has been deprecated. Set the `route` on the\n   * site components to route the site through this Router.\n   */\n  public routeSite(pattern: Input<string>, site: any) {\n    throw new VisibleError(\n      `The \"routeSite\" function has been deprecated. Configure the new \"route\" prop on the site component to route the site through this Router.`,\n    );\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }\n\n  /**\n   * Reference an existing Router with the given Router distribution ID.\n   *\n   * @param name The name of the component.\n   * @param distributionID The ID of the existing Router distribution.\n   * @param opts? Resource options.\n   *\n   * This is useful when you create a Router in one stage and want to share it in\n   * another. It avoids having to create a new Router in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share a Router across stages.\n   * :::\n   *\n   * @example\n   * Let's say you create a Router in the `dev` stage. And in your personal stage\n   * `frank`, you want to share the same Router.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const router = $app.stage === \"frank\"\n   *   ? sst.aws.Router.get(\"MyRouter\", \"E2IDLMESRN6V62\")\n   *   : new sst.aws.Router(\"MyRouter\");\n   * ```\n   *\n   * Here `E2IDLMESRN6V62` is the ID of the Router distribution created in the\n   * `dev` stage. You can find this by outputting the distribution ID in the `dev`\n   * stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   router: router.distributionID\n   * };\n   * ```\n   *\n   * Learn more about [how to configure a router for your app](/docs/configure-a-router).\n   */\n  public static get(\n    name: string,\n    distributionID: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Router(\n      name,\n      {\n        ref: true,\n        distributionID: distributionID,\n      } as unknown as RouterArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Router\";\n// @ts-expect-error\nRouter.__pulumiType = __pulumiType;\n\nexport const CF_BLOCK_CLOUDFRONT_URL_INJECTION = `\nif (event.request.headers.host.value.includes('cloudfront.net')) {\n  return {\n    statusCode: 403,\n    statusDescription: 'Forbidden',\n    body: {\n      encoding: \"text\",\n      data: '<html><head><title>403 Forbidden</title></head><body><center><h1>403 Forbidden</h1></center></body></html>'\n    }\n  };\n}`;\n\nexport const CF_ROUTER_INJECTION = `\nasync function routeSite(kvNamespace, metadata) {\n  const baselessUri = metadata.base\n    ? event.request.uri.replace(metadata.base, \"\")\n    : event.request.uri;\n\n  // Route to S3 files\n  try {\n    // check using baselessUri b/c files are stored in the root\n    const u = decodeURIComponent(baselessUri);\n    const postfixes = u.endsWith(\"/\")\n      ? [\"index.html\"]\n      : [\"\", \".html\", \"/index.html\"];\n    const v = await Promise.any(postfixes.map(p => cf.kvs().get(kvNamespace + \":\" + u + p).then(v => p)));\n    // files are stored in a subdirectory, add it to the request uri\n    event.request.uri = metadata.s3.dir + event.request.uri + v;\n    setS3Origin(metadata.s3.domain);\n    return;\n  } catch (e) {}\n\n  // Route to S3 routes\n  if (metadata.s3 && metadata.s3.routes) {\n    for (var i=0, l=metadata.s3.routes.length; i<l; i++) {\n      const route = metadata.s3.routes[i];\n      if (baselessUri.startsWith(route)) {\n        event.request.uri = metadata.s3.dir + event.request.uri;\n        // uri ends with /, ie. /usage/ -> /usage/index.html\n        if (event.request.uri.endsWith(\"/\")) {\n          event.request.uri += \"index.html\";\n        }\n        // uri ends with non-file, ie. /usage -> /usage/index.html\n        else if (!event.request.uri.split(\"/\").pop().includes(\".\")) {\n          event.request.uri += \"/index.html\";\n        }\n        setS3Origin(metadata.s3.domain);\n        return;\n      }\n    }\n  }\n\n  // Route to S3 custom 404 (no servers)\n  if (metadata.custom404) {\n    event.request.uri = metadata.s3.dir + (metadata.base ? metadata.base : \"\") + metadata.custom404;\n    setS3Origin(metadata.s3.domain);\n    return;\n  }\n\n  // Route to image optimizer\n  if (metadata.image && baselessUri.startsWith(metadata.image.route)) {\n    setUrlOrigin(metadata.image.host);\n    return;\n  }\n\n  // Route to servers\n  if (metadata.servers){\n    event.request.headers[\"x-forwarded-host\"] = event.request.headers.host;\n    ${\n      // Note: In SvelteKit, form action requests contain \"/\" in request query string\n      //  ie. POST request with query string \"?/action\"\n      //  CloudFront does not allow query string with \"/\". It needs to be encoded.\n      \"\"\n    }\n    for (var key in event.request.querystring) {\n      if (key.includes(\"/\")) {\n        event.request.querystring[encodeURIComponent(key)] = event.request.querystring[key];\n        delete event.request.querystring[key];\n      }\n    }\n    setNextjsGeoHeaders();\n    setNextjsCacheKey();\n    setUrlOrigin(findNearestServer(metadata.servers), metadata.origin);\n  }\n\n  function setNextjsGeoHeaders() {\n    ${\n      // Inject the CloudFront viewer country, region, latitude, and longitude headers into\n      // the request headers for OpenNext to use them for OpenNext to use them\n      \"\"\n    }\n    if(event.request.headers[\"cloudfront-viewer-city\"]) {\n      event.request.headers[\"x-open-next-city\"] = event.request.headers[\"cloudfront-viewer-city\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-country\"]) {\n      event.request.headers[\"x-open-next-country\"] = event.request.headers[\"cloudfront-viewer-country\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-region\"]) {\n      event.request.headers[\"x-open-next-region\"] = event.request.headers[\"cloudfront-viewer-region\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-latitude\"]) {\n      event.request.headers[\"x-open-next-latitude\"] = event.request.headers[\"cloudfront-viewer-latitude\"];\n    }\n    if(event.request.headers[\"cloudfront-viewer-longitude\"]) {\n      event.request.headers[\"x-open-next-longitude\"] = event.request.headers[\"cloudfront-viewer-longitude\"];\n    }\n  }\n\n  function setNextjsCacheKey() {\n    ${\n      // This function is used to improve cache hit ratio by setting the cache key\n      // based on the request headers and the path. `next/image` only needs the\n      // accept header, and this header is not useful for the rest of the query\n      \"\"\n    }\n    var cacheKey = \"\";\n    if (event.request.uri.startsWith(\"/_next/image\")) {\n      cacheKey = getHeader(\"accept\");\n    } else {\n      cacheKey =\n        getHeader(\"rsc\") +\n        getHeader(\"next-router-prefetch\") +\n        getHeader(\"next-router-state-tree\") +\n        getHeader(\"next-url\") +\n        getHeader(\"x-prerender-revalidate\");\n    }\n    if (event.request.cookies[\"__prerender_bypass\"]) {\n      cacheKey += event.request.cookies[\"__prerender_bypass\"]\n        ? event.request.cookies[\"__prerender_bypass\"].value\n        : \"\";\n    }\n    var crypto = require(\"crypto\");\n    var hashedKey = crypto.createHash(\"md5\").update(cacheKey).digest(\"hex\");\n    event.request.headers[\"x-open-next-cache-key\"] = { value: hashedKey };\n  }\n\n  function getHeader(key) {\n    var header = event.request.headers[key];\n    if (header) {\n      if (header.multiValue) {\n        return header.multiValue.map((header) => header.value).join(\",\");\n      }\n      if (header.value) {\n        return header.value;\n      }\n    }\n    return \"\";\n  }\n\n  function findNearestServer(servers) {\n    if (servers.length === 1) return servers[0][0];\n\n    const h = event.request.headers;\n    const lat = h[\"cloudfront-viewer-latitude\"] && h[\"cloudfront-viewer-latitude\"].value;\n    const lon = h[\"cloudfront-viewer-longitude\"] && h[\"cloudfront-viewer-longitude\"].value;\n    if (!lat || !lon) return servers[0][0];\n\n    return servers\n      .map((s) => ({\n        distance: haversineDistance(lat, lon, s[1], s[2]),\n        host: s[0],\n      }))\n      .sort((a, b) => a.distance - b.distance)[0]\n      .host;\n  }\n\n  function haversineDistance(lat1, lon1, lat2, lon2) {\n    const toRad = angle => angle * Math.PI / 180;\n    const radLat1 = toRad(lat1);\n    const radLat2 = toRad(lat2);\n    const dLat = toRad(lat2 - lat1);\n    const dLon = toRad(lon2 - lon1);\n    const a = Math.sin(dLat / 2) ** 2 + Math.cos(radLat1) * Math.cos(radLat2) * Math.sin(dLon / 2) ** 2;\n    return 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  }\n}\n\nfunction setUrlOrigin(urlHost, override) {\n  event.request.headers[\"x-forwarded-host\"] = event.request.headers.host;\n  const origin = {\n    domainName: urlHost,\n    customOriginConfig: {\n      port: 443,\n      protocol: \"https\",\n      sslProtocols: [\"TLSv1.2\"],\n    },\n    originAccessControlConfig: {\n      enabled: false,\n    }\n  };\n  override = override ?? {};\n  if (override.protocol === \"http\") {\n    delete origin.customOriginConfig;\n  }\n  if (override.connectionAttempts) {\n    origin.connectionAttempts = override.connectionAttempts;\n  }\n  if (override.timeouts) {\n    origin.timeouts = override.timeouts;\n  }\n  cf.updateRequestOrigin(origin);\n}\n\nfunction setS3Origin(s3Domain, override) {\n  delete event.request.headers[\"Cookies\"];\n  delete event.request.headers[\"cookies\"];\n  delete event.request.cookies;\n\n  const origin = {\n    domainName: s3Domain,\n    originAccessControlConfig: {\n      enabled: true,\n      signingBehavior: \"always\",\n      signingProtocol: \"sigv4\",\n      originType: \"s3\",\n    }\n  };\n  override = override ?? {};\n  if (override.connectionAttempts) {\n    origin.connectionAttempts = override.connectionAttempts;\n  }\n  if (override.timeouts) {\n    origin.timeouts = override.timeouts;\n  }\n  cf.updateRequestOrigin(origin);\n}`;\n\nexport type KV_SITE_METADATA = {\n  base?: string; // Should be undefiend if no base path, should never be \"/\"\n  custom404?: string;\n  s3: {\n    domain: string;\n    dir: string; // Should be \"\" if no dir\n    routes: string[];\n  };\n  image?: {\n    host: string;\n    route: string;\n  };\n  servers?: [string, number, number][];\n  origin?: {\n    timeouts: {\n      readTimeout: number;\n    };\n  };\n};\n\nexport type RouterRouteArgs = {\n  /**\n   * The `Router` component to use for routing requests.\n   *\n   * @example\n   *\n   * Let's say you have a Router component.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const router = new sst.aws.Router(\"MyRouter\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * You can attach it to the Router, instead of creating a standalone CloudFront\n   * distribution.\n   *\n   * ```ts\n   * router: {\n   *   instance: router\n   * }\n   * ```\n   */\n  instance: Input<Router>;\n  /**\n   * Route requests matching a specific domain pattern.\n   *\n   * @example\n   *\n   * You can serve your resource from a subdomain. For example, if you want to make\n   * it available at `https://dev.example.com`, set the `Router` to match the\n   * domain or a wildcard.\n   *\n   * ```ts {2} title=\"sst.config.ts\"\n   * const router = new sst.aws.Router(\"MyRouter\", {\n   *   domain: \"*.example.com\"\n   * });\n   * ```\n   *\n   * Then set the domain pattern.\n   *\n   * ```ts {3}\n   * router: {\n   *   instance: router,\n   *   domain: \"dev.example.com\"\n   * }\n   * ```\n   *\n   * While `dev.example.com` matches `*.example.com`. Something like\n   * `docs.dev.example.com` will not match `*.example.com`.\n   *\n   * :::tip\n   * Nested wildcards domain patterns are not supported.\n   * :::\n   *\n   * You'll need to add `*.dev.example.com` as an alias.\n   */\n  domain?: Input<string>;\n  /**\n   * Route requests matching a specific path prefix.\n   *\n   * @default `\"/\"`\n   *\n   * @example\n   *\n   * ```ts {3}\n   * router: {\n   *   instance: router,\n   *   path: \"/docs\"\n   * }\n   * ```\n   */\n  path?: Input<string>;\n};\n\nexport type RouterRouteArgsDeprecated = {\n  router: Input<Router>;\n  domain?: Input<string>;\n  path?: Input<string>;\n};\n\nexport function normalizeRouteArgs(\n  route?: Input<RouterRouteArgs>,\n  routeDeprecated?: Input<RouterRouteArgsDeprecated>,\n) {\n  if (!route && !routeDeprecated) return undefined;\n\n  return all([route, routeDeprecated]).apply(([route, routeDeprecated]) => {\n    const v = route\n      ? route\n      : { ...routeDeprecated, instance: routeDeprecated!.router };\n\n    return v.instance._hasInlineRoutes.apply((hasInlineRoutes) => {\n      if (hasInlineRoutes)\n        throw new VisibleError(\n          \"Cannot route the site using the provided router. The Router component uses inline routes which has been deprecated.\",\n        );\n\n      const pathPrefix = v.path\n        ? \"/\" + v.path.replace(/^\\//, \"\").replace(/\\/$/, \"\")\n        : undefined;\n      return {\n        hostPattern: v.domain\n          ? v.domain\n              .replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\") // Escape special regex chars\n              .replace(/\\*/g, \".*\") // Replace * with .*\n          : undefined,\n        pathPrefix,\n        routerDistributionId: v.instance.nodes.cdn.nodes.distribution.id,\n        routerUrl: v.instance.url.apply(\n          (url) =>\n            (v.domain ? `https://${v.domain}` : url) + (pathPrefix ?? \"\"),\n        ),\n        routerKvNamespace: v.instance._kvNamespace!,\n        routerKvStoreArn: v.instance._kvStoreArn!,\n      };\n    });\n  });\n}\n", "import { CustomResourceOptions, dynamic, Input } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface OriginAccessControlInputs {\n  name: Input<string>;\n}\n\nexport class OriginAccessControl extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: OriginAccessControlInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.OriginAccessControl\"),\n      `${name}.sst.aws.OriginAccessControl`,\n      args,\n      opts,\n    );\n  }\n}\n", "import { ComponentResourceOptions, Input, all } from \"@pulumi/pulumi\";\nimport { Component } from \"../component\";\nimport {\n  buildKvNamespace,\n  createKvRouteData,\n  parsePattern,\n  RouterBaseRouteArgs,\n  updateKvRoutes,\n} from \"./router-base-route\";\nimport { RouterUrlRouteArgs } from \"./router\";\nimport { toSeconds } from \"../duration\";\n\nexport interface Args extends RouterBaseRouteArgs {\n  /**\n   * The URL to route to.\n   */\n  url: Input<string>;\n  /**\n   * Additional arguments for the route.\n   */\n  routeArgs?: Input<RouterUrlRouteArgs>;\n}\n\n/**\n * The `RouterUrlRoute` component is internally used by the `Router` component\n * to add routes.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `route` method of the `Router` component.\n */\nexport class RouterUrlRoute extends Component {\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    all([args.url, args.pattern, args.routeArgs]).apply(\n      ([url, pattern, routeArgs]) => {\n        const u = new URL(url);\n        const host = u.host;\n        const protocol = u.protocol.slice(0, -1);\n\n        const patternData = parsePattern(pattern);\n        const namespace = buildKvNamespace(name);\n        createKvRouteData(name, args, self, namespace, {\n          host,\n          rewrite: routeArgs?.rewrite,\n          origin: {\n            protocol: protocol === \"https\" ? undefined : protocol,\n            connectionAttempts: routeArgs?.connectionAttempts,\n            timeouts: (() => {\n              const timeouts = [\n                \"connectionTimeout\" as const,\n                \"readTimeout\" as const,\n                \"keepAliveTimeout\" as const,\n              ].flatMap((k) => {\n                const value = routeArgs?.[k];\n                return value ? [[k, toSeconds(value)]] : [];\n              });\n              return timeouts.length ? Object.fromEntries(timeouts) : undefined;\n            })(),\n          },\n        });\n        updateKvRoutes(name, args, self, \"url\", namespace, patternData);\n      },\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:RouterUrlRoute\";\n// @ts-expect-error\nRouterUrlRoute.__pulumiType = __pulumiType;\n", "import crypto from \"crypto\";\nimport { Input, jsonStringify } from \"@pulumi/pulumi\";\nimport { Component } from \"../component\";\nimport { KvRoutesUpdate } from \"./providers/kv-routes-update\";\nimport { KvKeys } from \"./providers/kv-keys\";\n\nexport interface RouterBaseRouteArgs {\n  /**\n   * The KV Namespace to use.\n   */\n  routerNamespace: Input<string>;\n  /**\n   * The KV Store to use.\n   */\n  store: Input<string>;\n  /**\n   * The pattern to match.\n   */\n  pattern: Input<string>;\n}\n\nexport function parsePattern(pattern: string) {\n  const [host, ...path] = pattern.split(\"/\");\n  return {\n    host: host\n      .replace(/[.+?^${}()|[\\]\\\\]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\*/g, \".*\"), // Replace * with .*\n    path: \"/\" + path.join(\"/\"),\n  };\n}\n\nexport function buildKvNamespace(name: string) {\n  // In the case multiple sites use the same kv store, we need to namespace the keys\n  return crypto\n    .createHash(\"md5\")\n    .update(`${$app.name}-${$app.stage}-${name}`)\n    .digest(\"hex\")\n    .substring(0, 4);\n}\n\nexport function createKvRouteData(\n  name: string,\n  args: RouterBaseRouteArgs,\n  parent: Component,\n  routeNs: string,\n  data: any,\n) {\n  new KvKeys(\n    `${name}RouteKey`,\n    {\n      store: args.store,\n      namespace: routeNs,\n      entries: {\n        metadata: jsonStringify(data),\n      },\n      purge: false,\n    },\n    { parent },\n  );\n}\n\nexport function updateKvRoutes(\n  name: string,\n  args: RouterBaseRouteArgs,\n  parent: Component,\n  routeType: \"url\" | \"bucket\" | \"site\",\n  routeNs: string,\n  pattern: {\n    host: string;\n    path: string;\n  },\n) {\n  return new KvRoutesUpdate(\n    `${name}RoutesUpdate`,\n    {\n      store: args.store,\n      namespace: args.routerNamespace,\n      key: \"routes\",\n      entry: [routeType, routeNs, pattern.host, pattern.path].join(\",\"),\n    },\n    { parent },\n  );\n}\n", "import { CustomResourceOptions, Input, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface KvRoutesUpdateInputs {\n  store: Input<string>;\n  key: Input<string>;\n  entry: Input<string>;\n  namespace: Input<string>;\n}\n\nexport class KvRoutesUpdate extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: KvRoutesUpdateInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.KvRoutesUpdate\"),\n      `${name}.sst.aws.KvRoutesUpdate`,\n      args,\n      opts,\n    );\n  }\n}\n", "import { CustomResourceOptions, Input, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface KvKeysInputs {\n  store: Input<string>;\n  namespace: Input<string>;\n  entries: Input<Record<string, Input<string>>>;\n  purge: Input<boolean>;\n}\n\nexport class KvKeys extends dynamic.Resource {\n  constructor(name: string, args: KvKeysInputs, opts?: CustomResourceOptions) {\n    super(new rpc.Provider(\"Aws.KvKeys\"), `${name}.sst.aws.KvKeys`, args, opts);\n  }\n}\n", "import { ComponentResourceOptions, Input, all, output } from \"@pulumi/pulumi\";\nimport { Component } from \"../component\";\nimport {\n  buildKvNamespace,\n  createKvRouteData,\n  parsePattern,\n  RouterBaseRouteArgs,\n  updateKvRoutes,\n} from \"./router-base-route\";\nimport { Bucket } from \"./bucket\";\nimport { RouterBucketRouteArgs } from \"./router\";\nimport { toSeconds } from \"../duration\";\n\nexport interface Args extends RouterBaseRouteArgs {\n  /**\n   * The bucket to route to.\n   */\n  bucket: Input<Bucket>;\n  /**\n   * Additional arguments for the route.\n   */\n  routeArgs?: Input<RouterBucketRouteArgs>;\n}\n\n/**\n * The `RouterBucketRoute` component is internally used by the `Router` component\n * to add routes.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `routeBucket` method of the `Router` component.\n */\nexport class RouterBucketRoute extends Component {\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    all([args.pattern, args.routeArgs]).apply(([pattern, routeArgs]) => {\n      const patternData = parsePattern(pattern);\n      const namespace = buildKvNamespace(name);\n      createKvRouteData(name, args, self, namespace, {\n        domain: output(args.bucket).nodes.bucket.bucketRegionalDomainName,\n        rewrite: routeArgs?.rewrite,\n        origin: {\n          connectionAttempts: routeArgs?.connectionAttempts,\n          timeouts: {\n            connectionTimeout:\n              routeArgs?.connectionTimeout &&\n              toSeconds(routeArgs?.connectionTimeout),\n          },\n        },\n      });\n      updateKvRoutes(name, args, self, \"bucket\", namespace, patternData);\n    });\n  }\n}\n\nconst __pulumiType = \"sst:aws:RouterBucketRoute\";\n// @ts-expect-error\nRouterBucketRoute.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { BucketSubscriberArgs } from \"./bucket\";\nimport { s3, sqs } from \"@pulumi/aws\";\nimport { Queue } from \"./queue\";\n\nexport interface Args extends BucketSubscriberArgs {\n  /**\n   * The bucket to use.\n   */\n  bucket: Input<{\n    /**\n     * The name of the bucket.\n     */\n    name: Input<string>;\n    /**\n     * The ARN of the bucket.\n     */\n    arn: Input<string>;\n  }>;\n  /**\n   * The subscriber ID.\n   */\n  subscriberId: Input<string>;\n  /**\n   * The ARN of the SQS Queue.\n   */\n  queue: Input<string>;\n}\n\n/**\n * The `BucketQueueSubscriber` component is internally used by the `Bucket` component\n * to add subscriptions to your [AWS S3 Bucket](https://aws.amazon.com/s3/).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribeQueue` method of the `Bucket` component.\n */\nexport class BucketQueueSubscriber extends Component {\n  private readonly policy: sqs.QueuePolicy;\n  private readonly notification: s3.BucketNotification;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const queueArn = output(args.queue);\n    const bucket = output(args.bucket);\n    const events = args.events\n      ? output(args.events)\n      : output([\n          \"s3:ObjectCreated:*\",\n          \"s3:ObjectRemoved:*\",\n          \"s3:ObjectRestore:*\",\n          \"s3:ReducedRedundancyLostObject\",\n          \"s3:Replication:*\",\n          \"s3:LifecycleExpiration:*\",\n          \"s3:LifecycleTransition\",\n          \"s3:IntelligentTiering\",\n          \"s3:ObjectTagging:*\",\n          \"s3:ObjectAcl:Put\",\n        ]);\n    const policy = createPolicy();\n    const notification = createNotification();\n\n    this.policy = policy;\n    this.notification = notification;\n\n    function createPolicy() {\n      return Queue.createPolicy(`${name}Policy`, queueArn);\n    }\n\n    function createNotification() {\n      return new s3.BucketNotification(\n        ...transform(\n          args.transform?.notification,\n          `${name}Notification`,\n          {\n            bucket: bucket.name,\n            queues: [\n              {\n                id: interpolate`Notification${args.subscriberId}`,\n                queueArn,\n                events,\n                filterPrefix: args.filterPrefix,\n                filterSuffix: args.filterSuffix,\n              },\n            ],\n          },\n          { parent: self, dependsOn: [policy] },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The SQS Queue policy.\n       */\n      policy: this.policy,\n      /**\n       * The S3 Bucket notification.\n       */\n      notification: this.notification,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:BucketQueueSubscriber\";\n// @ts-expect-error\nBucketQueueSubscriber.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  all,\n  output,\n  jsonStringify,\n  Output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { VisibleError } from \"../error\";\nimport { hashStringToPrettyString, logicalName } from \"../naming\";\nimport { parseQueueArn } from \"./helpers/arn\";\nimport { QueueLambdaSubscriber } from \"./queue-lambda-subscriber\";\nimport { iam, lambda, sqs } from \"@pulumi/aws\";\nimport { DurationHours, DurationMinutes, toSeconds } from \"../duration\";\nimport { permission } from \"./permission.js\";\n\nexport interface QueueArgs {\n  /**\n   * FIFO or _first-in-first-out_ queues are designed to guarantee that messages are processed exactly once and in the order that they are sent.\n   *\n   * :::caution\n   * Changing a standard queue to a FIFO queue (or the other way around) will cause the queue to be destroyed and recreated.\n   * :::\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   fifo: true\n   * }\n   * ```\n   *\n   * By default, content based deduplication is disabled. You can enable it by configuring\n   * the `fifo` property.\n   *\n   * ```js\n   * {\n   *   fifo: {\n   *     contentBasedDeduplication: true\n   *   }\n   * }\n   * ```\n   */\n  fifo?: Input<\n    | boolean\n    | {\n        /**\n         * Content-based deduplication automatically generates a deduplication ID by hashing\n         * the message body to prevent duplicate message delivery.\n         *\n         * @default `false`\n         */\n        contentBasedDeduplication?: Input<boolean>;\n      }\n  >;\n  /**\n   * The period of time which the delivery of all messages in the queue is delayed.\n   *\n   * This can range from 0 seconds to 900 seconds (15 minutes).\n   *\n   * @default `\"0 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   delay: \"10 seconds\"\n   * }\n   * ```\n   */\n  delay?: Input<DurationMinutes>;\n  /**\n   * Visibility timeout is a period of time during which a message is temporarily\n   * invisible to other consumers after a consumer has retrieved it from the queue.\n   * This mechanism prevents other consumers from processing the same message\n   * concurrently, ensuring that each message is processed only once.\n   *\n   * This timeout can range from 0 seconds to 12 hours.\n   *\n   * @default `\"30 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   visibilityTimeout: \"1 hour\"\n   * }\n   * ```\n   */\n  visibilityTimeout?: Input<DurationHours>;\n  /**\n   * Optionally add a dead-letter queue or DLQ for this queue.\n   *\n   * A dead-letter queue is used to store messages that can't be processed successfully by the\n   * subscriber function after the `retry` limit is reached.\n   *\n   * This takes either the ARN of the dead-letter queue or an object to configure how the\n   * dead-letter queue is used.\n   *\n   * @example\n   * For example, here's how you can create a dead-letter queue and link it to the main queue.\n   *\n   * ```ts title=\"sst.config.ts\" {4}\n   * const deadLetterQueue = new sst.aws.Queue(\"MyDLQ\");\n   *\n   * new sst.aws.Queue(\"MyQueue\", {\n   *   dlq: deadLetterQueue.arn,\n   * });\n   * ```\n   *\n   * By default, the main queue will retry processing the message 3 times before sending it to the dead-letter queue. You can customize this.\n   *\n   * ```ts title=\"sst.config.ts\" {3}\n   * new sst.aws.Queue(\"MyQueue\", {\n   *   dlq: {\n   *     retry: 5,\n   *     queue: deadLetterQueue.arn,\n   *   }\n   * });\n   * ```\n   */\n  dlq?: Input<\n    | string\n    | {\n        /**\n         * The ARN of the dead-letter queue.\n         */\n        queue: Input<string>;\n        /**\n         * The number of times the main queue will retry the message before sending it to the dead-letter queue.\n         * @default `3`\n         */\n        retry: Input<number>;\n      }\n  >;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the SQS Queue resource.\n     */\n    queue?: Transform<sqs.QueueArgs>;\n  };\n}\n\nexport interface QueueSubscriberArgs {\n  /**\n   * Filter the records that'll be processed by the `subscriber` function.\n   *\n   * :::tip\n   * You can pass in up to 5 different filters.\n   * :::\n   *\n   * You can pass in up to 5 different filter policies. These will logically ORed together. Meaning that if any single policy matches, the record will be processed. Learn more about the [filter rule syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).\n   *\n   * @example\n   * For example, if you Queue contains records in this JSON format.\n   * ```js\n   * {\n   *   RecordNumber: 0000,\n   *   RequestCode: \"AAAA\",\n   *   TimeStamp: \"yyyy-mm-ddThh:mm:ss\"\n   * }\n   * ```\n   *\n   * To process only those records where the `RequestCode` is `BBBB`.\n\n   * ```js\n   * {\n   *   filters: [\n   *     {\n   *       body: {\n   *         RequestCode: [\"BBBB\"]\n   *       }\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * And to process only those records where `RecordNumber` greater than `9999`.\n   *\n   * ```js\n   * {\n   *   filters: [\n   *     {\n   *       body: {\n   *         RecordNumber: [{ numeric: [ \">\", 9999 ] }]\n   *       }\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  filters?: Input<Input<Record<string, any>>[]>;\n  /**\n   * Configure batch processing options for the consumer function.\n   * @default `{size: 10, window: \"20 seconds\", partialResponses: false}`\n   */\n  batch?: Input<{\n    /**\n     * The maximum number of events that will be processed together in a single invocation\n     * of the consumer function.\n     *\n     * Value must be between 1 and 10000.\n     *\n     * :::note\n     * When `size` is set to a value greater than 10, `window` must be set to at least `1 second`.\n     * :::\n     *\n     * @default `10`\n     * @example\n     * Set batch size to 1. This will process events individually.\n     * ```js\n     * {\n     *   batch: {\n     *     size: 1\n     *   }\n     * }\n     * ```\n     */\n    size?: Input<number>;\n    /**\n     * The maximum amount of time to wait for collecting events before sending the batch to\n     * the consumer function, even if the batch size hasn't been reached.\n     *\n     * Value must be between 0 seconds and 5 minutes (300 seconds).\n     * @default `\"0 seconds\"`\n     * @example\n     * ```js\n     * {\n     *   batch: {\n     *     window: \"20 seconds\"\n     *   }\n     * }\n     * ```\n     */\n    window?: Input<DurationMinutes>;\n    /**\n     * Whether to return partial successful responses for a batch.\n     *\n     * Enables reporting of individual message failures in a batch. When enabled, only failed\n     * messages become visible in the queue again, preventing unnecessary reprocessing of\n     * successful messages.\n     *\n     * The handler function must return a response with failed message IDs.\n     *\n     * :::note\n     * Ensure your Lambda function is updated to handle `batchItemFailures` responses when\n     * enabling this option.\n     * :::\n     *\n     * Read more about [partial batch responses](https://docs.aws.amazon.com/lambda/latest/dg/services-sqs-errorhandling.html#services-sqs-batchfailurereporting).\n     * @default `false`\n     * @example\n     * Enable partial responses.\n     * ```js\n     * {\n     *   batch: {\n     *     partialResponses: true\n     *   }\n     * }\n     * ```\n     *\n     * For a batch of messages (id1, id2, id3, id4, id5), if id2 and id4 fail:\n     * ```json\n     * {\n     *   \"batchItemFailures\": [\n     *         {\n     *             \"itemIdentifier\": \"id2\"\n     *         },\n     *         {\n     *             \"itemIdentifier\": \"id4\"\n     *         }\n     *     ]\n     * }\n     * ```\n     *\n     * This makes only id2 and id4 visible again in the queue.\n     */\n    partialResponses?: Input<boolean>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Lambda Event Source Mapping resource.\n     */\n    eventSourceMapping?: Transform<lambda.EventSourceMappingArgs>;\n  };\n}\n\ninterface QueueRef {\n  ref: true;\n  queueUrl: Input<string>;\n}\n\n/**\n * The `Queue` component lets you add a serverless queue to your app. It uses [Amazon SQS](https://aws.amazon.com/sqs/).\n *\n * @example\n *\n * #### Create a queue\n *\n * ```ts title=\"sst.config.ts\"\n * const queue = new sst.aws.Queue(\"MyQueue\");\n * ```\n *\n * #### Make it a FIFO queue\n *\n * You can optionally make it a FIFO queue.\n *\n * ```ts {2} title=\"sst.config.ts\"\n * new sst.aws.Queue(\"MyQueue\", {\n *   fifo: true\n * });\n * ```\n *\n * #### Add a subscriber\n *\n * ```ts title=\"sst.config.ts\"\n * queue.subscribe(\"src/subscriber.handler\");\n * ```\n *\n * #### Link the queue to a resource\n *\n * You can link the queue to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [queue]\n * });\n * ```\n *\n * Once linked, you can send messages to the queue from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,7}\n * import { Resource } from \"sst\";\n * import { SQSClient, SendMessageCommand } from \"@aws-sdk/client-sqs\";\n *\n * const sqs = new SQSClient({});\n *\n * await sqs.send(new SendMessageCommand({\n *   QueueUrl: Resource.MyQueue.url,\n *   MessageBody: \"Hello from Next.js!\"\n * }));\n * ```\n */\nexport class Queue extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private queue: sqs.Queue;\n  private isSubscribed: boolean = false;\n\n  constructor(\n    name: string,\n    args: QueueArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const self = this;\n    this.constructorName = name;\n    this.constructorOpts = opts;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.queue = ref.queue;\n      return;\n    }\n\n    const fifo = normalizeFifo();\n    const dlq = normalizeDlq();\n    const visibilityTimeout = output(args?.visibilityTimeout ?? \"30 seconds\");\n    const delay = output(args?.delay ?? \"0 seconds\");\n\n    this.queue = createQueue();\n\n    function reference() {\n      const ref = args as QueueRef;\n      const queue = sqs.Queue.get(`${name}Queue`, ref.queueUrl, undefined, {\n        parent: self,\n      });\n\n      return { queue };\n    }\n\n    function normalizeFifo() {\n      return output(args?.fifo).apply((v) => {\n        if (!v) return false;\n        if (v === true)\n          return {\n            contentBasedDeduplication: false,\n          };\n\n        return {\n          contentBasedDeduplication: v.contentBasedDeduplication ?? false,\n        };\n      });\n    }\n\n    function normalizeDlq() {\n      if (args?.dlq === undefined) return;\n\n      return output(args?.dlq).apply((v) =>\n        typeof v === \"string\" ? { queue: v, retry: 3 } : v,\n      );\n    }\n\n    function createQueue() {\n      return new sqs.Queue(\n        ...transform(\n          args?.transform?.queue,\n          `${name}Queue`,\n          {\n            fifoQueue: fifo.apply((v) => v !== false),\n            contentBasedDeduplication: fifo.apply((v) =>\n              v === false ? false : v.contentBasedDeduplication,\n            ),\n            visibilityTimeoutSeconds: visibilityTimeout.apply((v) =>\n              toSeconds(v),\n            ),\n            delaySeconds: delay.apply((v) => toSeconds(v)),\n            redrivePolicy:\n              dlq &&\n              jsonStringify({\n                deadLetterTargetArn: dlq.queue,\n                maxReceiveCount: dlq.retry,\n              }),\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The ARN of the SQS Queue.\n   */\n  public get arn() {\n    return this.queue.arn;\n  }\n\n  /**\n   * The SQS Queue URL.\n   */\n  public get url() {\n    return this.queue.url;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon SQS Queue.\n       */\n      queue: this.queue,\n    };\n  }\n\n  /**\n   * Subscribe to this queue.\n   *\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * ```js title=\"sst.config.ts\"\n   * queue.subscribe(\"src/subscriber.handler\");\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * queue.subscribe(\"src/subscriber.handler\", {\n   *   filters: [\n   *     {\n   *       body: {\n   *         RequestCode: [\"BBBB\"]\n   *       }\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * queue.subscribe({\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * queue.subscribe(\"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public subscribe(\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: QueueSubscriberArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    if (this.isSubscribed)\n      throw new VisibleError(\n        `Cannot subscribe to the \"${this.constructorName}\" queue multiple times. An SQS Queue can only have one subscriber.`,\n      );\n    this.isSubscribed = true;\n\n    return Queue._subscribeFunction(\n      this.constructorName,\n      this.arn,\n      subscriber,\n      args,\n      { ...opts, provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Subscribe to an SQS Queue that was not created in your app.\n   *\n   * @param queueArn The ARN of the SQS Queue to subscribe to.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have an existing SQS Queue with the following ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const queueArn = \"arn:aws:sqs:us-east-1:123456789012:MyQueue\";\n   * ```\n   *\n   * You can subscribe to it by passing in the ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Queue.subscribe(queueArn, \"src/subscriber.handler\");\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Queue.subscribe(queueArn, \"src/subscriber.handler\", {\n   *   filters: [\n   *     {\n   *       body: {\n   *         RequestCode: [\"BBBB\"]\n   *       }\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Queue.subscribe(queueArn, {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   */\n  public static subscribe(\n    queueArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: QueueSubscriberArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    return output(queueArn).apply((queueArn) =>\n      this._subscribeFunction(\n        logicalName(parseQueueArn(queueArn).queueName),\n        queueArn,\n        subscriber,\n        args,\n        opts,\n      ),\n    );\n  }\n\n  private static _subscribeFunction(\n    name: string,\n    queueArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: QueueSubscriberArgs = {},\n    opts?: ComponentResourceOptions,\n  ) {\n    return output(queueArn).apply((queueArn) => {\n      const suffix = logicalName(hashStringToPrettyString(queueArn, 6));\n\n      return new QueueLambdaSubscriber(\n        `${name}Subscriber${suffix}`,\n        {\n          queue: { arn: queueArn },\n          subscriber,\n          ...args,\n        },\n        opts,\n      );\n    });\n  }\n\n  /**\n   * Reference an existing SQS Queue with its queue URL. This is useful when you create a\n   * queue in one stage and want to share it in another stage. It avoids having to create\n   * a new queue in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share SQS queues across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param queueUrl The URL of the existing SQS Queue.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a queue in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new queue, you want to share the queue from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const queue = $app.stage === \"frank\"\n   *   ? sst.aws.Queue.get(\"MyQueue\", \"https://sqs.us-east-1.amazonaws.com/123456789012/MyQueue\")\n   *   : new sst.aws.Queue(\"MyQueue\");\n   * ```\n   *\n   * Here `https://sqs.us-east-1.amazonaws.com/123456789012/MyQueue` is the URL of the queue\n   * created in the `dev` stage. You can find this by outputting the queue URL in the `dev`\n   * stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return queue.url;\n   * ```\n   */\n  public static get(\n    name: string,\n    queueUrl: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Queue(\n      name,\n      {\n        ref: true,\n        queueUrl,\n      } as QueueArgs,\n      opts,\n    );\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n      include: [\n        permission({\n          actions: [\"sqs:*\"],\n          resources: [this.arn],\n        }),\n      ],\n    };\n  }\n\n  /** @internal */\n  static createPolicy(\n    name: string,\n    arn: Output<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new sqs.QueuePolicy(\n      name,\n      {\n        queueUrl: arn.apply((arn) => parseQueueArn(arn).queueUrl),\n        policy: iam.getPolicyDocumentOutput({\n          statements: [\n            {\n              actions: [\"sqs:SendMessage\"],\n              resources: [arn],\n              principals: [\n                {\n                  type: \"Service\",\n                  identifiers: [\n                    \"sns.amazonaws.com\",\n                    \"s3.amazonaws.com\",\n                    \"events.amazonaws.com\",\n                  ],\n                },\n              ],\n            },\n          ],\n        }).json,\n      },\n      {\n        retainOnDelete: true,\n        ...opts,\n      },\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Queue\";\n// @ts-expect-error\nQueue.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { Function, FunctionArgs } from \"./function\";\nimport { QueueSubscriberArgs } from \"./queue\";\nimport { lambda } from \"@pulumi/aws\";\nimport { toSeconds } from \"../duration\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\nimport { parseFunctionArn } from \"./helpers/arn\";\n\nexport interface Args extends QueueSubscriberArgs {\n  /**\n   * The queue to use.\n   */\n  queue: Input<{\n    /**\n     * The ARN of the queue.\n     */\n    arn: Input<string>;\n  }>;\n  /**\n   * The subscriber function.\n   */\n  subscriber: Input<string | FunctionArgs>;\n}\n\n/**\n * The `QueueLambdaSubscriber` component is internally used by the `Queue` component to\n * add a consumer to [Amazon SQS](https://aws.amazon.com/sqs/).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribe` method of the `Queue` component.\n */\nexport class QueueLambdaSubscriber extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly eventSourceMapping: lambda.EventSourceMapping;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const queue = output(args.queue);\n    const fn = createFunction();\n    const eventSourceMapping = createEventSourceMapping();\n\n    this.fn = fn;\n    this.eventSourceMapping = eventSourceMapping;\n\n    function createFunction() {\n      return functionBuilder(\n        `${name}Function`,\n        args.subscriber,\n        {\n          description: `Subscribed to ${name}`,\n          permissions: [\n            {\n              actions: [\n                \"sqs:ChangeMessageVisibility\",\n                \"sqs:DeleteMessage\",\n                \"sqs:GetQueueAttributes\",\n                \"sqs:GetQueueUrl\",\n                \"sqs:ReceiveMessage\",\n              ],\n              resources: [queue.arn],\n            },\n          ],\n        },\n        undefined,\n        { parent: self },\n      );\n    }\n\n    function createEventSourceMapping() {\n      return new lambda.EventSourceMapping(\n        ...transform(\n          args.transform?.eventSourceMapping,\n          `${name}EventSourceMapping`,\n          {\n            functionResponseTypes: output(args.batch).apply((batch) =>\n              batch?.partialResponses ? [\"ReportBatchItemFailures\"] : [],\n            ),\n            batchSize: output(args.batch).apply((batch) => batch?.size ?? 10),\n            maximumBatchingWindowInSeconds: output(args.batch).apply((batch) =>\n              batch?.window ? toSeconds(batch.window) : 0,\n            ),\n            eventSourceArn: queue.arn,\n            functionName: fn.arn.apply(\n              (arn) => parseFunctionArn(arn).functionName,\n            ),\n            filterCriteria: args.filters && {\n              filters: output(args.filters).apply((filters) =>\n                filters.map((filter) => ({\n                  pattern: JSON.stringify(filter),\n                })),\n              ),\n            },\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function that'll be notified.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda event source mapping.\n       */\n      eventSourceMapping: this.eventSourceMapping,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:QueueLambdaSubscriber\";\n// @ts-expect-error\nQueueLambdaSubscriber.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { BucketSubscriberArgs } from \"./bucket\";\nimport { iam, s3, sns } from \"@pulumi/aws\";\n\nexport interface Args extends BucketSubscriberArgs {\n  /**\n   * The bucket to use.\n   */\n  bucket: Input<{\n    /**\n     * The name of the bucket.\n     */\n    name: Input<string>;\n    /**\n     * The ARN of the bucket.\n     */\n    arn: Input<string>;\n  }>;\n  /**\n   * The subscriber ID.\n   */\n  subscriberId: Input<string>;\n  /**\n   * The ARN of the SNS Topic.\n   */\n  topic: Input<string>;\n}\n\n/**\n * The `BucketTopicSubscriber` component is internally used by the `Bucket` component\n * to add subscriptions to your [AWS S3 Bucket](https://aws.amazon.com/s3/).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribeTopic` method of the `Bucket` component.\n */\nexport class BucketTopicSubscriber extends Component {\n  private readonly policy: sns.TopicPolicy;\n  private readonly notification: s3.BucketNotification;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const topicArn = output(args.topic);\n    const bucket = output(args.bucket);\n    const events = args.events\n      ? output(args.events)\n      : output([\n          \"s3:ObjectCreated:*\",\n          \"s3:ObjectRemoved:*\",\n          \"s3:ObjectRestore:*\",\n          \"s3:ReducedRedundancyLostObject\",\n          \"s3:Replication:*\",\n          \"s3:LifecycleExpiration:*\",\n          \"s3:LifecycleTransition\",\n          \"s3:IntelligentTiering\",\n          \"s3:ObjectTagging:*\",\n          \"s3:ObjectAcl:Put\",\n        ]);\n    const policy = createPolicy();\n    const notification = createNotification();\n\n    this.policy = policy;\n    this.notification = notification;\n\n    function createPolicy() {\n      return new sns.TopicPolicy(`${name}Policy`, {\n        arn: topicArn,\n        policy: iam.getPolicyDocumentOutput({\n          statements: [\n            {\n              actions: [\"sns:Publish\"],\n              resources: [topicArn],\n              principals: [\n                {\n                  type: \"Service\",\n                  identifiers: [\"s3.amazonaws.com\"],\n                },\n              ],\n              conditions: [\n                {\n                  test: \"ArnEquals\",\n                  variable: \"aws:SourceArn\",\n                  values: [bucket.arn],\n                },\n              ],\n            },\n          ],\n        }).json,\n      });\n    }\n\n    function createNotification() {\n      return new s3.BucketNotification(\n        ...transform(\n          args.transform?.notification,\n          `${name}Notification`,\n          {\n            bucket: bucket.name,\n            topics: [\n              {\n                id: interpolate`Notification${args.subscriberId}`,\n                topicArn,\n                events,\n                filterPrefix: args.filterPrefix,\n                filterSuffix: args.filterSuffix,\n              },\n            ],\n          },\n          { parent: self, dependsOn: [policy] },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The SNS Topic policy.\n       */\n      policy: this.policy,\n      /**\n       * The S3 Bucket notification.\n       */\n      notification: this.notification,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:BucketTopicSubscriber\";\n// @ts-expect-error\nBucketTopicSubscriber.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { BucketNotificationsArgs } from \"./bucket\";\nimport { iam, lambda, s3, sns } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\nimport { VisibleError } from \"../error\";\nimport { SnsTopic } from \"./sns-topic\";\nimport { Queue } from \"./queue\";\n\nexport interface Args extends BucketNotificationsArgs {\n  /**\n   * The bucket to use.\n   */\n  bucket: Input<{\n    /**\n     * The name of the bucket.\n     */\n    name: Input<string>;\n    /**\n     * The ARN of the bucket.\n     */\n    arn: Input<string>;\n  }>;\n}\n\n/**\n * The `BucketNotification` component is internally used by the `Bucket` component to\n * add bucket notifications to [AWS S3 Bucket](https://aws.amazon.com/s3/).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `notify` method of the `Bucket` component.\n */\nexport class BucketNotification extends Component {\n  private readonly functionBuilders: Output<FunctionBuilder[]>;\n  private readonly notification: s3.BucketNotification;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const bucket = output(args.bucket);\n    const notifications = normalizeNotifications();\n    const { config, functionBuilders } = createNotificationsConfig();\n    const notification = createNotification();\n\n    this.functionBuilders = functionBuilders;\n    this.notification = notification;\n\n    function normalizeNotifications() {\n      return output(args.notifications).apply((notifications) =>\n        notifications.map((n) => {\n          const count =\n            (n.function ? 1 : 0) + (n.queue ? 1 : 0) + (n.topic ? 1 : 0);\n          if (count === 0)\n            throw new VisibleError(\n              `At least one of function, queue, or topic is required for the \"${n.name}\" bucket notification.`,\n            );\n          if (count > 1)\n            throw new VisibleError(\n              `Only one of function, queue, or topic is allowed for the \"${n.name}\" bucket notification.`,\n            );\n\n          return {\n            ...n,\n            events: n.events ?? [\n              \"s3:ObjectCreated:*\",\n              \"s3:ObjectRemoved:*\",\n              \"s3:ObjectRestore:*\",\n              \"s3:ReducedRedundancyLostObject\",\n              \"s3:Replication:*\",\n              \"s3:LifecycleExpiration:*\",\n              \"s3:LifecycleTransition\",\n              \"s3:IntelligentTiering\",\n              \"s3:ObjectTagging:*\",\n              \"s3:ObjectAcl:Put\",\n            ],\n          };\n        }),\n      );\n    }\n\n    function createNotificationsConfig() {\n      return notifications.apply((notifications) => {\n        const config = notifications.map((n) => {\n          if (n.function) {\n            const fn = functionBuilder(\n              `${name}Notification${n.name}`,\n              n.function,\n              {\n                description:\n                  n.events.length < 5\n                    ? `Notified by ${name} on ${n.events.join(\", \")}`\n                    : `Notified by ${name} on ${n.events\n                        .slice(0, 3)\n                        .join(\", \")}, and ${n.events.length - 3} more events`,\n              },\n              undefined,\n              { parent: self },\n            );\n\n            const permission = new lambda.Permission(\n              `${name}Notification${n.name}Permission`,\n              {\n                action: \"lambda:InvokeFunction\",\n                function: fn.arn,\n                principal: \"s3.amazonaws.com\",\n                sourceArn: bucket.arn,\n              },\n              { parent: self },\n            );\n            return { args: n, functionBuilder: fn, dependsOn: permission };\n          }\n\n          if (n.topic) {\n            const arn =\n              n.topic instanceof SnsTopic ? n.topic.arn : output(n.topic);\n            const policy = new sns.TopicPolicy(\n              `${name}Notification${n.name}Policy`,\n              {\n                arn,\n                policy: iam.getPolicyDocumentOutput({\n                  statements: [\n                    {\n                      actions: [\"sns:Publish\"],\n                      resources: [arn],\n                      principals: [\n                        {\n                          type: \"Service\",\n                          identifiers: [\"s3.amazonaws.com\"],\n                        },\n                      ],\n                      conditions: [\n                        {\n                          test: \"ArnEquals\",\n                          variable: \"aws:SourceArn\",\n                          values: [bucket.arn],\n                        },\n                      ],\n                    },\n                  ],\n                }).json,\n              },\n              { parent: self },\n            );\n            return { args: n, topicArn: arn, dependsOn: policy };\n          }\n\n          if (n.queue) {\n            const arn =\n              n.queue instanceof Queue ? n.queue.arn : output(n.queue);\n            const policy = Queue.createPolicy(\n              `${name}Notification${n.name}Policy`,\n              arn,\n              { parent: self },\n            );\n            return { args: n, queueArn: arn, dependsOn: policy };\n          }\n        });\n        return {\n          config,\n          functionBuilders: config\n            .filter((c) => c!.functionBuilder)\n            .map((c) => c!.functionBuilder!),\n        };\n      });\n    }\n\n    function createNotification() {\n      return new s3.BucketNotification(\n        ...transform(\n          args.transform?.notification,\n          `${name}Notification`,\n          {\n            bucket: bucket.name,\n            lambdaFunctions: config.apply((config) =>\n              config\n                .filter((c) => c!.functionBuilder)\n                .map((c) => ({\n                  id: c!.args.name,\n                  lambdaFunctionArn: c!.functionBuilder!.arn,\n                  events: c!.args.events,\n                  filterPrefix: c!.args.filterPrefix,\n                  filterSuffix: c!.args.filterSuffix,\n                })),\n            ),\n            queues: config.apply((config) =>\n              config\n                .filter((c) => c!.queueArn)\n                .map((c) => ({\n                  id: c!.args.name,\n                  queueArn: c!.queueArn!,\n                  events: c!.args.events,\n                  filterPrefix: c!.args.filterPrefix,\n                  filterSuffix: c!.args.filterSuffix,\n                })),\n            ),\n            topics: config.apply((config) =>\n              config\n                .filter((c) => c!.topicArn)\n                .map((c) => ({\n                  id: c!.args.name,\n                  topicArn: c!.topicArn!,\n                  events: c!.args.events,\n                  filterPrefix: c!.args.filterPrefix,\n                  filterSuffix: c!.args.filterSuffix,\n                })),\n            ),\n          },\n          {\n            parent: self,\n            dependsOn: config.apply((config) =>\n              config.map((c) => c!.dependsOn),\n            ),\n          },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The functions that will be notified.\n       */\n      get functions() {\n        return output(self.functionBuilders).apply((functionBuilders) =>\n          functionBuilders.map((builder) => builder.getFunction()),\n        );\n      },\n      /**\n       * The notification resource that's created.\n       */\n      notification: this.notification,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:BucketNotification\";\n// @ts-expect-error\nBucketNotification.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Output, all, output } from \"@pulumi/pulumi\";\nimport { Component, outputId, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { hashStringToPrettyString, logicalName } from \"../naming\";\nimport { parseTopicArn } from \"./helpers/arn\";\nimport { SnsTopicLambdaSubscriber } from \"./sns-topic-lambda-subscriber\";\nimport { SnsTopicQueueSubscriber } from \"./sns-topic-queue-subscriber\";\nimport { sns } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\nimport { isFunctionSubscriber, isQueueSubscriber } from \"./helpers/subscriber\";\nimport { Queue } from \"./queue\";\n\nexport interface SnsTopicArgs {\n  /**\n   * FIFO (First-In-First-Out) topics are designed to provide strict message ordering.\n   *\n   * :::caution\n   * Changing a standard topic to a FIFO topic or the other way around will result in the destruction and recreation of the topic.\n   * :::\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   fifo: true\n   * }\n   * ```\n   */\n  fifo?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the SNS Topic resource.\n     */\n    topic?: Transform<sns.TopicArgs>;\n  };\n}\n\nexport interface SnsTopicSubscriberArgs {\n  /**\n   * Filter the messages that'll be processed by the subscriber.\n   *\n   * If any single property in the filter doesn't match\n   * an attribute assigned to the message, then the policy rejects the message.\n   *\n   * :::tip\n   * Learn more about [subscription filter policies](https://docs.aws.amazon.com/sns/latest/dg/sns-subscription-filter-policies.html).\n   * :::\n   *\n   * @example\n   * For example, if your SNS Topic message contains this in a JSON format.\n   * ```js\n   * {\n   *   store: \"example_corp\",\n   *   event: \"order-placed\",\n   *   customer_interests: [\n   *      \"soccer\",\n   *      \"rugby\",\n   *      \"hockey\"\n   *   ],\n   *   price_usd: 210.75\n   * }\n   * ```\n   *\n   * Then this filter policy accepts the message.\n   *\n   * ```js\n   * {\n   *   filter: {\n   *     store: [\"example_corp\"],\n   *     event: [{\"anything-but\": \"order_cancelled\"}],\n   *     customer_interests: [\n   *        \"rugby\",\n   *        \"football\",\n   *        \"baseball\"\n   *     ],\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * }\n   * ```\n   */\n  filter?: Input<Record<string, any>>;\n  /**\n   * [Transform](/docs/components#transform) how this subscription creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the SNS Topic Subscription resource.\n     */\n    subscription?: Transform<sns.TopicSubscriptionArgs>;\n  };\n}\n\ninterface SnsTopicRef {\n  ref: true;\n  topicArn: Input<string>;\n}\n\n/**\n * The `SnsTopic` component lets you add an [Amazon SNS Topic](https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html) to your app.\n *\n * :::note\n * The difference between an `SnsTopic` and a `Queue` is that with a topic you can deliver messages to multiple subscribers.\n * :::\n *\n * @example\n *\n * #### Create a topic\n *\n * ```ts title=\"sst.config.ts\"\n * const topic = new sst.aws.SnsTopic(\"MyTopic\");\n * ```\n *\n * #### Make it a FIFO topic\n *\n * You can optionally make it a FIFO topic.\n *\n * ```ts {2} title=\"sst.config.ts\"\n * new sst.aws.SnsTopic(\"MyTopic\", {\n *   fifo: true\n * });\n * ```\n *\n * #### Add a subscriber\n *\n * ```ts title=\"sst.config.ts\"\n * topic.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n * ```\n *\n * #### Link the topic to a resource\n *\n * You can link the topic to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [topic]\n * });\n * ```\n *\n * Once linked, you can publish messages to the topic from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,7}\n * import { Resource } from \"sst\";\n * import { SNSClient, PublishCommand } from \"@aws-sdk/client-sns\";\n *\n * const sns = new SNSClient({});\n *\n * await sns.send(new PublishCommand({\n *   TopicArn: Resource.MyTopic.arn,\n *   Message: \"Hello from Next.js!\"\n * }));\n * ```\n */\nexport class SnsTopic extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private topic: sns.Topic;\n\n  constructor(\n    name: string,\n    args: SnsTopicArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const self = this;\n    this.constructorName = name;\n    this.constructorOpts = opts;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.topic = ref.topic;\n      return;\n    }\n\n    const fifo = normalizeFifo();\n\n    this.topic = createTopic();\n\n    function reference() {\n      const ref = args as SnsTopicRef;\n      const topic = sns.Topic.get(`${name}Topic`, ref.topicArn, undefined, {\n        parent: self,\n      });\n\n      return { topic };\n    }\n\n    function normalizeFifo() {\n      return output(args.fifo).apply((v) => v ?? false);\n    }\n\n    function createTopic() {\n      return new sns.Topic(\n        ...transform(\n          args.transform?.topic,\n          `${name}Topic`,\n          {\n            fifoTopic: fifo,\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The ARN of the SNS Topic.\n   */\n  public get arn() {\n    return this.topic.arn;\n  }\n\n  /**\n   * The name of the SNS Topic.\n   */\n  public get name() {\n    return this.topic.name;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon SNS Topic.\n       */\n      topic: this.topic,\n    };\n  }\n\n  /**\n   * Subscribe to this SNS Topic.\n   *\n   * @param name The name of the subscriber.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * ```js title=\"sst.config.ts\"\n   * topic.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * topic.subscribe(\"MySubscriber\", \"src/subscriber.handler\", {\n   *   filter: {\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * topic.subscribe(\"MySubscriber\", {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * topic.subscribe(\"MySubscriber\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public subscribe(\n    name: string,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: SnsTopicSubscriberArgs,\n  ): Output<SnsTopicLambdaSubscriber>;\n  /**\n   * @deprecated The subscribe function now requires a `name` parameter as the first argument.\n   * To migrate, remove the current subscriber, deploy the changes, and then add the subscriber\n   * back with the new `name` argument.\n   */\n  public subscribe(\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: SnsTopicSubscriberArgs,\n  ): Output<SnsTopicLambdaSubscriber>;\n\n  public subscribe(nameOrSubscriber: any, subscriberOrArgs?: any, args?: any) {\n    return isFunctionSubscriber(subscriberOrArgs).apply((v) =>\n      v\n        ? SnsTopic._subscribeFunction(\n            nameOrSubscriber, // name\n            this.constructorName,\n            this.arn,\n            subscriberOrArgs, // subscriber\n            args,\n            { provider: this.constructorOpts.provider },\n          )\n        : SnsTopic._subscribeFunctionV1(\n            this.constructorName,\n            this.arn,\n            nameOrSubscriber, // subscriber\n            subscriberOrArgs, // args\n            { provider: this.constructorOpts.provider },\n          ),\n    );\n  }\n\n  /**\n   * Subscribe to an SNS Topic that was not created in your app.\n   *\n   * @param name The name of the subscriber.\n   * @param topicArn The ARN of the SNS Topic to subscribe to.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have an existing SNS Topic with the following ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const topicArn = \"arn:aws:sns:us-east-1:123456789012:MyTopic\";\n   * ```\n   *\n   * You can subscribe to it by passing in the ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.SnsTopic.subscribe(\"MySubscriber\", topicArn, \"src/subscriber.handler\");\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.SnsTopic.subscribe(\"MySubscriber\", topicArn, \"src/subscriber.handler\", {\n   *   filter: {\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.SnsTopic.subscribe(\"MySubscriber\", topicArn, {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   */\n  public static subscribe(\n    name: string,\n    topicArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: SnsTopicSubscriberArgs,\n  ): Output<SnsTopicLambdaSubscriber>;\n  /**\n   * @deprecated The subscribe function now requires a `name` parameter as the first argument.\n   * To migrate, remove the current subscriber, deploy the changes, and then add the subscriber\n   * back with the new `name` argument.\n   */\n  public static subscribe(\n    topicArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: SnsTopicSubscriberArgs,\n  ): Output<SnsTopicLambdaSubscriber>;\n\n  public static subscribe(\n    nameOrTopicArn: any,\n    topicArnOrSubscriber: any,\n    subscriberOrArgs?: any,\n    args?: any,\n  ) {\n    return isFunctionSubscriber(subscriberOrArgs).apply((v) =>\n      v\n        ? output(topicArnOrSubscriber).apply((topicArn) =>\n            this._subscribeFunction(\n              nameOrTopicArn, // name\n              logicalName(parseTopicArn(topicArn).topicName),\n              topicArn,\n              subscriberOrArgs, // subscriber\n              args,\n            ),\n          )\n        : output(nameOrTopicArn).apply((topicArn) =>\n            this._subscribeFunctionV1(\n              logicalName(parseTopicArn(topicArn).topicName),\n              topicArn,\n              topicArnOrSubscriber, // subscriber\n              subscriberOrArgs, // args\n            ),\n          ),\n    );\n  }\n\n  private static _subscribeFunction(\n    subscriberName: string,\n    name: string,\n    topicArn: string | Output<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: SnsTopicSubscriberArgs = {},\n    opts: $util.ComponentResourceOptions = {},\n  ) {\n    return output(args).apply(\n      (args) =>\n        new SnsTopicLambdaSubscriber(\n          `${name}Subscriber${subscriberName}`,\n          {\n            topic: { arn: topicArn },\n            subscriber,\n            ...args,\n          },\n          opts,\n        ),\n    );\n  }\n\n  private static _subscribeFunctionV1(\n    name: string,\n    topicArn: string | Output<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: SnsTopicSubscriberArgs = {},\n    opts: $util.ComponentResourceOptions = {},\n  ) {\n    return all([subscriber, args]).apply(([subscriber, args]) => {\n      const suffix = logicalName(\n        hashStringToPrettyString(\n          [\n            typeof topicArn === \"string\" ? topicArn : outputId,\n            JSON.stringify(args.filter ?? {}),\n            typeof subscriber === \"string\" ? subscriber : subscriber.handler,\n          ].join(\"\"),\n          6,\n        ),\n      );\n\n      return new SnsTopicLambdaSubscriber(\n        `${name}Subscriber${suffix}`,\n        {\n          topic: { arn: topicArn },\n          subscriber,\n          ...args,\n        },\n        opts,\n      );\n    });\n  }\n\n  /**\n   * Subscribe to this SNS Topic with an SQS Queue.\n   *\n   * @param name The name of the subscriber.\n   * @param queue The ARN of the queue or `Queue` component that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have a queue.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const queue = sst.aws.Queue(\"MyQueue\");\n   * ```\n   *\n   * You can subscribe to this topic with it.\n   *\n   * ```js title=\"sst.config.ts\"\n   * topic.subscribeQueue(\"MySubscriber\", queue.arn);\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * topic.subscribeQueue(\"MySubscriber\", queue.arn, {\n   *   filter: {\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * });\n   * ```\n   */\n  public subscribeQueue(\n    name: string,\n    queue: Input<string | Queue>,\n    args?: SnsTopicSubscriberArgs,\n  ): Output<SnsTopicQueueSubscriber>;\n  /**\n   * @deprecated The subscribe function now requires a `name` parameter as the first argument.\n   * To migrate, remove the current subscriber, deploy the changes, and then add the subscriber\n   * back with the new `name` argument.\n   */\n  public subscribeQueue(\n    queue: Input<string>,\n    args?: SnsTopicSubscriberArgs,\n  ): Output<SnsTopicQueueSubscriber>;\n\n  public subscribeQueue(nameOrQueue: any, queueOrArgs?: any, args?: any) {\n    return isQueueSubscriber(queueOrArgs).apply((v) =>\n      v\n        ? SnsTopic._subscribeQueue(\n            nameOrQueue, // name\n            this.constructorName,\n            this.arn,\n            queueOrArgs, // queue\n            args,\n          )\n        : SnsTopic._subscribeQueueV1(\n            this.constructorName,\n            this.arn,\n            nameOrQueue, // queue\n            queueOrArgs, // args\n          ),\n    );\n  }\n\n  /**\n   * Subscribe to an existing SNS Topic with a previously created SQS Queue.\n   *\n   * @param name The name of the subscriber.\n   * @param topicArn The ARN of the SNS Topic to subscribe to.\n   * @param queue The ARN of the queue or `Queue` component that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have an existing SNS Topic and SQS Queue with the following ARNs.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const topicArn = \"arn:aws:sns:us-east-1:123456789012:MyTopic\";\n   * const queueArn = \"arn:aws:sqs:us-east-1:123456789012:MyQueue\";\n   * ```\n   *\n   * You can subscribe to the topic with the queue.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.SnsTopic.subscribeQueue(\"MySubscriber\", topicArn, queueArn);\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.SnsTopic.subscribeQueue(\"MySubscriber\", topicArn, queueArn, {\n   *   filter: {\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * });\n   * ```\n   */\n  public static subscribeQueue(\n    name: string,\n    topicArn: Input<string>,\n    queue: Input<string | Queue>,\n    args?: SnsTopicSubscriberArgs,\n  ): Output<SnsTopicQueueSubscriber>;\n  /**\n   * @deprecated The subscribe function now requires a `name` parameter as the first argument.\n   * To migrate, remove the current subscriber, deploy the changes, and then add the subscriber\n   * back with the new `name` argument.\n   */\n  public static subscribeQueue(\n    topicArn: Input<string>,\n    queue: Input<string>,\n    args?: SnsTopicSubscriberArgs,\n  ): Output<SnsTopicQueueSubscriber>;\n  public static subscribeQueue(\n    nameOrTopicArn: any,\n    topicArnOrQueue: any,\n    queueOrArgs?: any,\n    args?: any,\n  ) {\n    return isQueueSubscriber(queueOrArgs).apply((v) =>\n      v\n        ? output(topicArnOrQueue).apply((topicArn) =>\n            this._subscribeQueue(\n              nameOrTopicArn, // name\n              logicalName(parseTopicArn(topicArn).topicName),\n              topicArn,\n              queueOrArgs, // queue\n              args,\n            ),\n          )\n        : output(nameOrTopicArn).apply((topicArn) =>\n            this._subscribeQueueV1(\n              logicalName(parseTopicArn(topicArn).topicName),\n              topicArn,\n              topicArnOrQueue, // queue\n              queueOrArgs, // args\n            ),\n          ),\n    );\n  }\n\n  private static _subscribeQueue(\n    subscriberName: string,\n    name: string,\n    topicArn: string | Output<string>,\n    queue: Input<string | Queue>,\n    args: SnsTopicSubscriberArgs = {},\n  ) {\n    return output(args).apply(\n      (args) =>\n        new SnsTopicQueueSubscriber(`${name}Subscriber${subscriberName}`, {\n          topic: { arn: topicArn },\n          queue,\n          ...args,\n        }),\n    );\n  }\n\n  private static _subscribeQueueV1(\n    name: string,\n    topicArn: string | Output<string>,\n    queueArn: Input<string>,\n    args: SnsTopicSubscriberArgs = {},\n  ) {\n    return all([queueArn, args]).apply(([queueArn, args]) => {\n      const suffix = logicalName(\n        hashStringToPrettyString(\n          [\n            typeof topicArn === \"string\" ? topicArn : outputId,\n            JSON.stringify(args.filter ?? {}),\n            queueArn,\n          ].join(\"\"),\n          6,\n        ),\n      );\n\n      return new SnsTopicQueueSubscriber(`${name}Subscriber${suffix}`, {\n        topic: { arn: topicArn },\n        queue: queueArn,\n        disableParent: true,\n        ...args,\n      });\n    });\n  }\n\n  /**\n   * Reference an existing SNS topic with its topic ARN. This is useful when you create a\n   * topic in one stage and want to share it in another stage. It avoids having to create\n   * a new topic in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share SNS topics across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param topicArn The ARN of the existing SNS Topic.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a topic in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new topic, you want to share the topic from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const topic = $app.stage === \"frank\"\n   *   ? sst.aws.SnsTopic.get(\"MyTopic\", \"arn:aws:sns:us-east-1:123456789012:MyTopic\")\n   *   : new sst.aws.SnsTopic(\"MyTopic\");\n   * ```\n   *\n   * Here `arn:aws:sns:us-east-1:123456789012:MyTopic` is the ARN of the topic created in\n   * the `dev` stage. You can find this by outputting the topic ARN in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return topic.arn;\n   * ```\n   */\n  public static get(\n    name: string,\n    topicArn: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new SnsTopic(\n      name,\n      {\n        ref: true,\n        topicArn,\n      } as SnsTopicArgs,\n      opts,\n    );\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        arn: this.arn,\n      },\n      include: [\n        permission({\n          actions: [\"sns:*\"],\n          resources: [this.arn],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:SnsTopic\";\n// @ts-expect-error\nSnsTopic.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  jsonStringify,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { Function, FunctionArgs } from \"./function\";\nimport { SnsTopicSubscriberArgs } from \"./sns-topic\";\nimport { lambda, sns } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\n\nexport interface Args extends SnsTopicSubscriberArgs {\n  /**\n   * The Topic to use.\n   */\n  topic: Input<{\n    /**\n     * The ARN of the Topic.\n     */\n    arn: Input<string>;\n  }>;\n  /**\n   * The subscriber function.\n   */\n  subscriber: Input<string | FunctionArgs>;\n}\n\n/**\n * The `SnsTopicLambdaSubscriber` component is internally used by the `SnsTopic` component\n * to add subscriptions to your [Amazon SNS Topic](https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribe` method of the `SnsTopic` component.\n */\nexport class SnsTopicLambdaSubscriber extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly permission: lambda.Permission;\n  private readonly subscription: sns.TopicSubscription;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const topic = output(args.topic);\n    const fn = createFunction();\n    const permission = createPermission();\n    const subscription = createSubscription();\n\n    this.fn = fn;\n    this.permission = permission;\n    this.subscription = subscription;\n\n    function createFunction() {\n      return functionBuilder(\n        `${name}Function`,\n        args.subscriber,\n        {\n          description: `Subscribed to ${name}`,\n        },\n        undefined,\n        { parent: self },\n      );\n    }\n\n    function createPermission() {\n      return new lambda.Permission(\n        `${name}Permission`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"sns.amazonaws.com\",\n          sourceArn: topic.arn,\n        },\n        { parent: self },\n      );\n    }\n\n    function createSubscription() {\n      return new sns.TopicSubscription(\n        ...transform(\n          args?.transform?.subscription,\n          `${name}Subscription`,\n          {\n            topic: topic.arn,\n            protocol: \"lambda\",\n            endpoint: fn.arn,\n            filterPolicy: args.filter && jsonStringify(args.filter),\n          },\n          { parent: self, dependsOn: [permission] },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function that'll be notified.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda permission.\n       */\n      permission: this.permission,\n      /**\n       * The SNS Topic subscription.\n       */\n      subscription: this.subscription,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:SnsTopicLambdaSubscriber\";\n// @ts-expect-error\nSnsTopicLambdaSubscriber.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  jsonStringify,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { SnsTopicSubscriberArgs } from \"./sns-topic\";\nimport { sns, sqs } from \"@pulumi/aws\";\nimport { Queue } from \"./queue\";\n\nexport interface Args extends SnsTopicSubscriberArgs {\n  /**\n   * The SNS Topic to use.\n   */\n  topic: Input<{\n    /**\n     * The ARN of the SNS Topic.\n     */\n    arn: Input<string>;\n  }>;\n  /**\n   * The ARN of the SQS Queue.\n   */\n  queue: Input<string | Queue>;\n  /**\n   * In early versions of SST, parent were forgotten to be set for resources in components.\n   * This flag is used to disable the automatic setting of the parent to prevent breaking\n   * changes.\n   * @internal\n   */\n  disableParent?: boolean;\n}\n\n/**\n * The `SnsTopicQueueSubscriber` component is internally used by the `SnsTopic` component\n * to add subscriptions to your [Amazon SNS Topic](https://docs.aws.amazon.com/sns/latest/dg/sns-create-topic.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribeQueue` method of the `SnsTopic` component.\n */\nexport class SnsTopicQueueSubscriber extends Component {\n  private readonly policy: sqs.QueuePolicy;\n  private readonly subscription: sns.TopicSubscription;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const topic = output(args.topic);\n    const queueArn = output(args.queue).apply((queue) =>\n      queue instanceof Queue ? queue.arn : output(queue),\n    );\n    const policy = createPolicy();\n    const subscription = createSubscription();\n\n    this.policy = policy;\n    this.subscription = subscription;\n\n    function createPolicy() {\n      return Queue.createPolicy(`${name}Policy`, queueArn, {\n        parent: args.disableParent ? undefined : self,\n      });\n    }\n\n    function createSubscription() {\n      return new sns.TopicSubscription(\n        ...transform(\n          args?.transform?.subscription,\n          `${name}Subscription`,\n          {\n            topic: topic.arn,\n            protocol: \"sqs\",\n            endpoint: queueArn,\n            filterPolicy: args.filter && jsonStringify(args.filter),\n          },\n          { parent: args.disableParent ? undefined : self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The SQS Queue policy.\n       */\n      policy: this.policy,\n      /**\n       * The SNS Topic subscription.\n       */\n      subscription: this.subscription,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:SnsTopicQueueSubscriber\";\n// @ts-expect-error\nSnsTopicQueueSubscriber.__pulumiType = __pulumiType;\n", "import { Input, output } from \"@pulumi/pulumi\";\nimport { FunctionArgs, FunctionArn } from \"../function\";\nimport { Queue } from \"../queue\";\n\nexport function isFunctionSubscriber(\n  subscriber?: Input<string | FunctionArgs | FunctionArn>,\n) {\n  if (!subscriber) return output(false);\n\n  return output(subscriber).apply(\n    (subscriber) =>\n      typeof subscriber === \"string\" || typeof subscriber.handler === \"string\",\n  );\n}\n\nexport function isQueueSubscriber(subscriber?: Input<string | Queue>) {\n  if (!subscriber) return output(false);\n\n  return output(subscriber).apply(\n    (subscriber) =>\n      typeof subscriber === \"string\" || subscriber instanceof Queue,\n  );\n}\n", "import { runtime } from \"@pulumi/pulumi\";\nimport { Provider, Region } from \"@pulumi/aws\";\nimport { lazy } from \"../../../util/lazy\";\n\nconst useProviderCache = lazy(() => new Map<string, Provider>());\n\nexport const useProvider = (region: Region) => {\n  const cache = useProviderCache();\n  const existing = cache.get(region);\n  if (existing) return existing;\n  const config = runtime.allConfig();\n  for (const key in config) {\n    const value = config[key];\n    delete config[key];\n    const [prefix, real] = key.split(\":\");\n    if (prefix !== \"aws\") continue;\n\n    // Array and Object values are JSON encoded, ie.\n    // {\n    //   allowedAccountIds: '[\"112245769880\"]',\n    //   defaultTags: '{\"tags\":{\"sst:app\":\"playground\",\"sst:stage\":\"frank\"}}',\n    //   region: 'us-east-1'\n    // }\n    try {\n      config[real] = JSON.parse(value);\n    } catch (e) {\n      config[real] = value;\n    }\n  }\n  const provider = new Provider(`AwsProvider.sst.${region}`, {\n    ...config,\n    region,\n  });\n  cache.set(region, provider);\n  return provider;\n};\n", "import { CustomResourceOptions, Input, Output, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface DistributionDeploymentWaiterInputs {\n  distributionId: Input<string>;\n  etag: Input<string>;\n  wait: Input<boolean>;\n}\n\nexport interface DistributionDeploymentWaiter {\n  isDone: Output<boolean>;\n}\n\nexport class DistributionDeploymentWaiter extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: DistributionDeploymentWaiterInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.DistributionDeploymentWaiter\"),\n      `${name}.sst.aws.DistributionDeploymentWaiter`,\n      args,\n      opts,\n    );\n  }\n}\n", "import { CustomResourceOptions, Input, Output, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface HostedZoneLookupInputs {\n  domain: Input<string>;\n}\n\nexport interface HostedZoneLookup {\n  zoneId: Output<string>;\n}\n\nexport class HostedZoneLookup extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: HostedZoneLookupInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.HostedZoneLookup\"),\n      `${name}.sst.aws.HostedZoneLookup`,\n      { ...args, zoneId: undefined },\n      opts,\n    );\n  }\n}\n", "/**\n * The AWS DNS Adapter is used to create DNS records to manage domains hosted on\n * [Route 53](https://aws.amazon.com/route53/).\n *\n * This adapter is passed in as `domain.dns` when setting a custom domain.\n *\n * @example\n *\n * ```ts\n * {\n *   domain: {\n *     name: \"example.com\",\n *     dns: sst.aws.dns()\n *   }\n * }\n * ```\n *\n * You can also specify a hosted zone ID if you have multiple hosted zones with the same domain.\n *\n * ```ts\n * {\n *   domain: {\n *     name: \"example.com\",\n *     dns: sst.aws.dns({\n *       zone: \"Z2FDTNDATAQYW2\"\n *     })\n *   }\n * }\n * ```\n *\n * @packageDocumentation\n */\n\nimport { AliasRecord, Dns, Record } from \"../dns\";\nimport { logicalName } from \"../naming\";\nimport { HostedZoneLookup } from \"./providers/hosted-zone-lookup\";\nimport { ComponentResourceOptions, output } from \"@pulumi/pulumi\";\nimport { Transform, transform } from \"../component\";\nimport { Input } from \"../input\";\nimport { route53 } from \"@pulumi/aws\";\nimport { VisibleError } from \"../error\";\n\nexport interface DnsArgs {\n  /**\n   * Set the hosted zone ID if you have multiple hosted zones that have the same\n   * domain in Route 53.\n   *\n   * The 14 letter ID of the [Route 53 hosted zone](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/hosted-zones-working-with.html) that contains the `domainName`. You can find the hosted zone ID in the Route 53 part of the AWS Console.\n   *\n   * @example\n   * ```js\n   * {\n   *   zone: \"Z2FDTNDATAQYW2\"\n   * }\n   * ```\n   */\n  zone?: Input<string>;\n  /**\n   * Set to `true` if you want to let the new DNS records replace the existing ones.\n   *\n   * :::tip\n   * Use this to migrate over your domain without any downtime.\n   * :::\n   *\n   * This is useful if your domain is currently used by another app and you want to switch it\n   * to your current app. Without setting this, you'll first have to remove the existing DNS\n   * records and then add the new one. This can cause downtime.\n   *\n   * You can avoid this by setting this to `true` and the existing DNS records will be replaced\n   * without any downtime. Just make sure that when you remove your old app, you don't remove\n   * the DNS records.\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   override: true\n   * }\n   * ```\n   */\n  override?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the AWS Route 53 record resource.\n     */\n    record?: Transform<route53.RecordArgs>;\n  };\n}\n\nexport function dns(args: DnsArgs = {}) {\n  return {\n    provider: \"aws\",\n    createAlias,\n    createCaa,\n    createRecord,\n  } satisfies Dns;\n\n  /**\n   * Creates alias records in the hosted zone.\n   *\n   * @param namePrefix The prefix to use for the resource names.\n   * @param record The alias record to create.\n   * @param opts The component resource options.\n   */\n  function createAlias(\n    namePrefix: string,\n    record: AliasRecord,\n    opts: ComponentResourceOptions,\n  ) {\n    return [\"A\", \"AAAA\"].map((type) =>\n      _createRecord(\n        namePrefix,\n        {\n          type,\n          name: record.name,\n          aliases: [\n            {\n              name: record.aliasName,\n              zoneId: record.aliasZone,\n              evaluateTargetHealth: true,\n            },\n          ],\n        },\n        opts,\n      ),\n    );\n  }\n\n  function createCaa(\n    namePrefix: string,\n    recordName: string,\n    opts: ComponentResourceOptions,\n  ) {\n    // placeholder\n    return undefined;\n  }\n\n  /**\n   * Creates a DNS record in the hosted zone.\n   *\n   * @param namePrefix The prefix to use for the resource names.\n   * @param record The DNS record to create.\n   * @param opts The component resource options.\n   */\n  function createRecord(\n    namePrefix: string,\n    record: Record,\n    opts: ComponentResourceOptions,\n  ) {\n    return _createRecord(\n      namePrefix,\n      {\n        type: record.type,\n        name: record.name,\n        ttl: 60,\n        records: [record.value],\n      },\n      opts,\n    );\n  }\n\n  function _createRecord(\n    namePrefix: string,\n    partial: Omit<route53.RecordArgs, \"zoneId\">,\n    opts: ComponentResourceOptions,\n  ) {\n    return output(partial).apply((partial) => {\n      const nameSuffix = logicalName(partial.name);\n      const zoneId = lookupZone();\n      const dnsRecord = createRecord();\n      return dnsRecord;\n\n      function lookupZone() {\n        if (args.zone) {\n          return output(args.zone).apply(async (zoneId) => {\n            const zone = await route53.getZone({ zoneId });\n            if (!partial.name.replace(/\\.$/, \"\").endsWith(zone.name)) {\n              throw new VisibleError(\n                `The DNS record \"${partial.name}\" cannot be created because the domain name does not match the hosted zone \"${zone.name}\" (${zoneId}).`,\n              );\n            }\n            return zoneId;\n          });\n        }\n\n        return new HostedZoneLookup(\n          `${namePrefix}${partial.type}ZoneLookup${nameSuffix}`,\n          {\n            domain: output(partial.name!).apply((name) =>\n              name.replace(/\\.$/, \"\"),\n            ),\n          },\n          opts,\n        ).zoneId;\n      }\n\n      function createRecord() {\n        return new route53.Record(\n          ...transform(\n            args.transform?.record,\n            `${namePrefix}${partial.type}Record${nameSuffix}`,\n            {\n              zoneId,\n              allowOverwrite: args.override,\n              ...partial,\n            },\n            opts,\n          ),\n        );\n      }\n    });\n  }\n}\n", "import { CustomResourceOptions, Input, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface BucketFile {\n  source: string;\n  key: string;\n  cacheControl?: string;\n  contentType: string;\n  hash?: string;\n}\n\nexport interface BucketFilesInputs {\n  bucketName: Input<string>;\n  files: Input<BucketFile[]>;\n  purge: Input<boolean>;\n  region: Input<string>;\n}\n\nexport class BucketFiles extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: BucketFilesInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.BucketFiles\"),\n      `${name}.sst.aws.BucketFiles`,\n      args,\n      opts,\n    );\n  }\n}\n", "import { all, ComponentResourceOptions, output, Output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { Input } from \"../input.js\";\nimport { cloudwatch, iam, lambda } from \"@pulumi/aws\";\nimport { functionBuilder, FunctionBuilder } from \"./helpers/function-builder\";\nimport { Task } from \"./task\";\nimport { VisibleError } from \"../error\";\n\nexport interface CronArgs {\n  /**\n   * The function that'll be executed when the cron job runs.\n   * @deprecated Use `function` instead.\n   *\n   * @example\n   *\n   * ```ts\n   * {\n   *   job: \"src/cron.handler\"\n   * }\n   * ```\n   *\n   * You can pass in the full function props.\n   *\n   * ```ts\n   * {\n   *   job: {\n   *     handler: \"src/cron.handler\",\n   *     timeout: \"60 seconds\"\n   *   }\n   * }\n   * ```\n   *\n   * You can also pass in a function ARN.\n   *\n   * ```ts\n   * {\n   *   job: \"arn:aws:lambda:us-east-1:000000000000:function:my-sst-app-jayair-MyFunction\",\n   * }\n   * ```\n   */\n  job?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * The function that'll be executed when the cron job runs.\n   *\n   * @example\n   *\n   * ```ts\n   * {\n   *   function: \"src/cron.handler\"\n   * }\n   * ```\n   *\n   * You can pass in the full function props.\n   *\n   * ```ts\n   * {\n   *   function: {\n   *     handler: \"src/cron.handler\",\n   *     timeout: \"60 seconds\"\n   *   }\n   * }\n   * ```\n   *\n   * You can also pass in a function ARN.\n   *\n   * ```ts\n   * {\n   *   function: \"arn:aws:lambda:us-east-1:000000000000:function:my-sst-app-jayair-MyFunction\",\n   * }\n   * ```\n   */\n  function?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * The task that'll be executed when the cron job runs.\n   *\n   * @example\n   *\n   * For example, let's say you have a task.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myCluster = new sst.aws.Cluster(\"MyCluster\");\n   * const myTask = new sst.aws.Task(\"MyTask\", { cluster: myCluster });\n   * ```\n   *\n   * You can then pass in the task to the cron job.\n   *\n   * ```js title=\"sst.config.ts\"\n   * new sst.aws.Cron(\"MyCronJob\", {\n   *   task: myTask,\n   *   schedule: \"rate(1 minute)\"\n   * });\n   * ```\n   *\n   */\n  task?: Task;\n  /**\n   * The event that'll be passed to the function or task.\n   *\n   * @example\n   * ```ts\n   * {\n   *   event: {\n   *     foo: \"bar\",\n   *   }\n   * }\n   * ```\n   *\n   * For Lambda functions, the event will be passed to the function as an event.\n   *\n   * ```ts\n   * function handler(event) {\n   *   console.log(event.foo);\n   * }\n   * ```\n   *\n   * For ECS Fargate tasks, the event will be passed to the task as the `SST_EVENT`\n   * environment variable.\n   *\n   * ```ts\n   * const event = JSON.parse(process.env.SST_EVENT);\n   * console.log(event.foo);\n   * ```\n   */\n  event?: Input<Record<string, Input<string>>>;\n  /**\n   * The schedule for the cron job.\n   *\n   * :::note\n   * The cron job continues to run even after you exit `sst dev`.\n   * :::\n   *\n   * @example\n   *\n   * You can use a [rate expression](https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents-expressions.html).\n   *\n   * ```ts\n   * {\n   *   schedule: \"rate(5 minutes)\"\n   *   // schedule: \"rate(1 minute)\"\n   *   // schedule: \"rate(5 minutes)\"\n   *   // schedule: \"rate(1 hour)\"\n   *   // schedule: \"rate(5 hours)\"\n   *   // schedule: \"rate(1 day)\"\n   *   // schedule: \"rate(5 days)\"\n   * }\n   * ```\n   * Or a [cron expression](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-create-rule-schedule.html#eb-cron-expressions).\n   *\n   * ```ts\n   * {\n   *   schedule: \"cron(15 10 * * ? *)\", // 10:15 AM (UTC) every day\n   * }\n   * ```\n   */\n  schedule: Input<`rate(${string})` | `cron(${string})`>;\n  /**\n   * Configures whether the cron job is enabled. When disabled, the cron job won't run.\n   * @default true\n   * @example\n   * ```ts\n   * {\n   *   enabled: false\n   * }\n   * ```\n   */\n  enabled?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying resources.\n   */\n  transform?: {\n    /**\n     * Transform the EventBridge Rule resource.\n     */\n    rule?: Transform<cloudwatch.EventRuleArgs>;\n    /**\n     * Transform the EventBridge Target resource.\n     */\n    target?: Transform<cloudwatch.EventTargetArgs>;\n  };\n}\n\n/**\n * The `Cron` component lets you add cron jobs to your app\n * using [Amazon Event Bus](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html). The cron job can invoke a `Function` or a container `Task`.\n *\n * @example\n * #### Cron job function\n *\n * Pass in a `schedule` and a `function` that'll be executed.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Cron(\"MyCronJob\", {\n *   function: \"src/cron.handler\",\n *   schedule: \"rate(1 minute)\"\n * });\n * ```\n *\n * #### Cron job container task\n *\n * Create a container task and pass in a `schedule` and a `task` that'll be executed.\n *\n * ```ts title=\"sst.config.ts\" {5}\n * const myCluster = new sst.aws.Cluster(\"MyCluster\");\n * const myTask = new sst.aws.Task(\"MyTask\", { cluster: myCluster });\n *\n * new sst.aws.Cron(\"MyCronJob\", {\n *   task: myTask,\n *   schedule: \"rate(1 day)\"\n * });\n * ```\n *\n * #### Customize the function\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.Cron(\"MyCronJob\", {\n *   schedule: \"rate(1 minute)\",\n *   function: {\n *     handler: \"src/cron.handler\",\n *     timeout: \"60 seconds\"\n *   }\n * });\n * ```\n */\nexport class Cron extends Component {\n  private name: string;\n  private fn?: FunctionBuilder;\n  private rule: cloudwatch.EventRule;\n  private target: cloudwatch.EventTarget;\n\n  constructor(name: string, args: CronArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const fnArgs = normalizeFunction();\n    const event = output(args.event || {});\n    normalizeTargets();\n    const enabled = output(args.enabled ?? true);\n    const rule = createRule();\n    const fn = createFunction();\n    const role = createRole();\n    const target = createTarget();\n\n    this.name = name;\n    this.fn = fn;\n    this.rule = rule;\n    this.target = target;\n\n    function normalizeFunction() {\n      if (args.job && args.function)\n        throw new VisibleError(\n          `You cannot provide both \"job\" and \"function\" in the \"${name}\" Cron component. The \"job\" property has been deprecated. Use \"function\" instead.`,\n        );\n\n      const input = args.function ?? args.job;\n      return input ? output(input) : undefined;\n    }\n\n    function normalizeTargets() {\n      if (fnArgs && args.task)\n        throw new VisibleError(\n          `You cannot provide both a function and a task in the \"${name}\" Cron component.`,\n        );\n    }\n\n    function createRule() {\n      return new cloudwatch.EventRule(\n        ...transform(\n          args.transform?.rule,\n          `${name}Rule`,\n          {\n            scheduleExpression: args.schedule,\n            state: enabled.apply((v) => (v ? \"ENABLED\" : \"DISABLED\")),\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createFunction() {\n      if (!fnArgs) return;\n\n      const fn = fnArgs.apply((fnArgs) =>\n        functionBuilder(`${name}Handler`, fnArgs, {}, undefined, {\n          parent,\n        }),\n      );\n\n      new lambda.Permission(\n        `${name}Permission`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"events.amazonaws.com\",\n          sourceArn: rule.arn,\n        },\n        { parent },\n      );\n\n      return fn;\n    }\n\n    function createRole() {\n      if (!args.task) return;\n\n      return new iam.Role(\n        `${name}TargetRole`,\n        {\n          assumeRolePolicy: iam.assumeRolePolicyForPrincipal({\n            Service: \"events.amazonaws.com\",\n          }),\n          inlinePolicies: [\n            {\n              name: \"inline\",\n              policy: iam.getPolicyDocumentOutput({\n                statements: [\n                  {\n                    actions: [\"ecs:RunTask\"],\n                    resources: [args.task.nodes.taskDefinition.arn],\n                  },\n                  {\n                    actions: [\"iam:PassRole\"],\n                    resources: [\n                      args.task.nodes.executionRole.arn,\n                      args.task.nodes.taskRole.arn,\n                    ],\n                  },\n                ],\n              }).json,\n            },\n          ],\n        },\n        { parent },\n      );\n    }\n\n    function createTarget() {\n      return new cloudwatch.EventTarget(\n        ...transform(\n          args.transform?.target,\n          `${name}Target`,\n          fn\n            ? {\n                arn: fn.arn,\n                rule: rule.name,\n                input: event.apply((event) => JSON.stringify(event)),\n              }\n            : {\n                arn: args.task!.cluster,\n                rule: rule.name,\n                ecsTarget: {\n                  launchType: \"FARGATE\",\n                  taskDefinitionArn: args.task!.nodes.taskDefinition.arn,\n                  networkConfiguration: {\n                    subnets: args.task!.subnets,\n                    securityGroups: args.task!.securityGroups,\n                    assignPublicIp: args.task!.assignPublicIp,\n                  },\n                },\n                roleArn: role!.arn,\n                input: all([event, args.task!.containers]).apply(\n                  ([event, containers]) => {\n                    return JSON.stringify({\n                      containerOverrides: containers.map((name) => ({\n                        name,\n                        environment: [\n                          {\n                            name: \"SST_EVENT\",\n                            value: JSON.stringify(event),\n                          },\n                        ],\n                      })),\n                    });\n                  },\n                ),\n              },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The AWS Lambda Function that'll be invoked when the cron job runs.\n       * @deprecated Use `nodes.function` instead.\n       */\n      get job() {\n        if (!self.fn)\n          throw new VisibleError(\n            `No function created for the \"${self.name}\" cron job.`,\n          );\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The AWS Lambda Function that'll be invoked when the cron job runs.\n       */\n      get function() {\n        if (!self.fn)\n          throw new VisibleError(\n            `No function created for the \"${self.name}\" cron job.`,\n          );\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The EventBridge Rule resource.\n       */\n      rule: this.rule,\n      /**\n       * The EventBridge Target resource.\n       */\n      target: this.target,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Cron\";\n// @ts-expect-error\nCron.__pulumiType = __pulumiType;\n", "import path from \"path\";\nimport { Input } from \"../input\";\n\nexport interface BaseSiteDev {\n  /**\n   * The `url` when this is running in dev mode.\n   *\n   * Since this component is not deployed in `sst dev`, there is no real URL. But if you are\n   * using this component's `url` or linking to this component's `url`, it can be useful to\n   * have a placeholder URL. It avoids having to handle it being `undefined`.\n   * @default `\"http://url-unavailable-in-dev.mode\"`\n   */\n  url?: Input<string>;\n  /**\n   * The command that `sst dev` runs to start this in dev mode.\n   * @default `\"npm run dev\"`\n   */\n  command?: Input<string>;\n  /**\n   * Configure if you want to automatically start this when `sst dev` starts. You can still\n   * start it manually later.\n   * @default `true`\n   */\n  autostart?: Input<boolean>;\n  /**\n   * Change the directory from where the `command` is run.\n   * @default Uses the `path`\n   */\n  directory?: Input<string>;\n  /**\n   * The title of the tab in the multiplexer.\n   */\n  title?: Input<string>;\n}\n\nexport interface BaseSiteFileOptions {\n  /**\n   * A glob pattern or array of glob patterns of files to apply these options to.\n   */\n  files: string | string[];\n  /**\n   * A glob pattern or array of glob patterns of files to exclude from the ones matched\n   * by the `files` glob pattern.\n   */\n  ignore?: string | string[];\n  /**\n   * The `Cache-Control` header to apply to the matched files.\n   */\n  cacheControl?: string;\n  /**\n   * The `Content-Type` header to apply to the matched files.\n   */\n  contentType?: string;\n}\n\nexport function getContentType(filename: string, textEncoding: string) {\n  const ext =\n    filename.endsWith(\".well-known/site-association-json\") ||\n    filename.endsWith(\".well-known/apple-app-site-association\")\n      ? \".json\"\n      : path.extname(filename);\n  const extensions = {\n    [\".txt\"]: { mime: \"text/plain\", isText: true },\n    [\".htm\"]: { mime: \"text/html\", isText: true },\n    [\".html\"]: { mime: \"text/html\", isText: true },\n    [\".xhtml\"]: { mime: \"application/xhtml+xml\", isText: true },\n    [\".css\"]: { mime: \"text/css\", isText: true },\n    [\".js\"]: { mime: \"text/javascript\", isText: true },\n    [\".mjs\"]: { mime: \"text/javascript\", isText: true },\n    [\".apng\"]: { mime: \"image/apng\", isText: false },\n    [\".avif\"]: { mime: \"image/avif\", isText: false },\n    [\".gif\"]: { mime: \"image/gif\", isText: false },\n    [\".jpeg\"]: { mime: \"image/jpeg\", isText: false },\n    [\".jpg\"]: { mime: \"image/jpeg\", isText: false },\n    [\".png\"]: { mime: \"image/png\", isText: false },\n    [\".svg\"]: { mime: \"image/svg+xml\", isText: true },\n    [\".bmp\"]: { mime: \"image/bmp\", isText: false },\n    [\".tiff\"]: { mime: \"image/tiff\", isText: false },\n    [\".webp\"]: { mime: \"image/webp\", isText: false },\n    [\".ico\"]: { mime: \"image/vnd.microsoft.icon\", isText: false },\n    [\".eot\"]: { mime: \"application/vnd.ms-fontobject\", isText: false },\n    [\".ttf\"]: { mime: \"font/ttf\", isText: false },\n    [\".otf\"]: { mime: \"font/otf\", isText: false },\n    [\".woff\"]: { mime: \"font/woff\", isText: false },\n    [\".woff2\"]: { mime: \"font/woff2\", isText: false },\n    [\".json\"]: { mime: \"application/json\", isText: true },\n    [\".jsonld\"]: { mime: \"application/ld+json\", isText: true },\n    [\".xml\"]: { mime: \"application/xml\", isText: true },\n    [\".pdf\"]: { mime: \"application/pdf\", isText: false },\n    [\".zip\"]: { mime: \"application/zip\", isText: false },\n    [\".wasm\"]: { mime: \"application/wasm\", isText: false },\n    [\".webmanifest\"]: { mime: \"application/manifest+json\", isText: true },\n  };\n  const extensionData = extensions[ext as keyof typeof extensions];\n  const mime = extensionData?.mime ?? \"application/octet-stream\";\n  const charset =\n    extensionData?.isText && textEncoding !== \"none\"\n      ? `;charset=${textEncoding}`\n      : \"\";\n  return `${mime}${charset}`;\n}\n", "import path from \"path\";\nimport fs from \"fs\";\nimport { Output, Resource, all, output } from \"@pulumi/pulumi\";\nimport { Prettify } from \"../component\";\nimport { Input } from \"../input\";\nimport { Link } from \"../link.js\";\nimport { VisibleError } from \"../error.js\";\nimport { BaseSiteDev } from \"./base-site\";\nimport { siteBuilder } from \"../aws/helpers/site-builder\";\n\nexport interface BaseSsrSiteArgs {\n  dev?: false | Prettify<BaseSiteDev>;\n  buildCommand?: Input<string>;\n  environment?: Input<Record<string, Input<string>>>;\n  link?: Input<any[]>;\n  path?: Input<string>;\n}\n\nexport function buildApp(\n  parent: Resource,\n  name: string,\n  args: BaseSsrSiteArgs,\n  sitePath: Output<string>,\n  buildCommand?: Output<string>,\n) {\n  return all([\n    sitePath,\n    buildCommand ?? args.buildCommand,\n    args.link,\n    args.environment,\n  ]).apply(([sitePath, userCommand, links, environment]) => {\n    const cmd = resolveBuildCommand();\n    const result = runBuild();\n    return result.id.apply(() => sitePath);\n\n    function resolveBuildCommand() {\n      if (userCommand) return userCommand;\n\n      // Ensure that the site has a build script defined\n      if (!userCommand) {\n        if (!fs.existsSync(path.join(sitePath, \"package.json\"))) {\n          throw new VisibleError(`No package.json found at \"${sitePath}\".`);\n        }\n        const packageJson = JSON.parse(\n          fs.readFileSync(path.join(sitePath, \"package.json\")).toString(),\n        );\n        if (!packageJson.scripts || !packageJson.scripts.build) {\n          throw new VisibleError(\n            `No \"build\" script found within package.json in \"${sitePath}\".`,\n          );\n        }\n      }\n\n      if (\n        fs.existsSync(path.join(sitePath, \"yarn.lock\")) ||\n        fs.existsSync(path.join($cli.paths.root, \"yarn.lock\"))\n      )\n        return \"yarn run build\";\n      if (\n        fs.existsSync(path.join(sitePath, \"pnpm-lock.yaml\")) ||\n        fs.existsSync(path.join($cli.paths.root, \"pnpm-lock.yaml\"))\n      )\n        return \"pnpm run build\";\n      if (\n        fs.existsSync(path.join(sitePath, \"bun.lockb\")) ||\n        fs.existsSync(path.join($cli.paths.root, \"bun.lockb\")) ||\n        fs.existsSync(path.join(sitePath, \"bun.lock\")) ||\n        fs.existsSync(path.join($cli.paths.root, \"bun.lock\"))\n      )\n        return \"bun run build\";\n\n      return \"npm run build\";\n    }\n\n    function runBuild() {\n      // Build link environment variables to inject\n      const linkData = Link.build(links || []);\n      const linkEnvs = output(linkData).apply((linkData) => {\n        const envs: Record<string, string> = {\n          SST_RESOURCE_App: JSON.stringify({\n            name: $app.name,\n            stage: $app.stage,\n          }),\n        };\n        for (const datum of linkData) {\n          envs[`SST_RESOURCE_${datum.name}`] = JSON.stringify(datum.properties);\n        }\n        return envs;\n      });\n\n      // Run build\n      return siteBuilder(\n        `${name}Builder`,\n        {\n          create: cmd,\n          update: cmd,\n          dir: path.join($cli.paths.root, sitePath),\n          environment: linkEnvs.apply((linkEnvs) => ({\n            SST: \"1\",\n            ...process.env,\n            ...environment,\n            ...linkEnvs,\n          })),\n          triggers: [Date.now().toString()],\n        },\n        {\n          parent,\n          ignoreChanges: process.env.SKIP ? [\"*\"] : undefined,\n        },\n      );\n    }\n  });\n}\n", "import { all, CustomResourceOptions } from \"@pulumi/pulumi\";\nimport { Semaphore } from \"../../../util/semaphore\";\nimport { local } from \"@pulumi/command\";\n\nconst limiter = new Semaphore(\n  parseInt(process.env.SST_BUILD_CONCURRENCY_SITE || \"1\"),\n);\n\nexport function siteBuilder(\n  name: string,\n  args: local.CommandArgs,\n  opts?: CustomResourceOptions,\n) {\n  // Wait for the all args values to be resolved before acquiring the semaphore\n  return all([args]).apply(async ([args]) => {\n    await limiter.acquire(name);\n\n    let waitOn;\n\n    const command = new local.Command(name, args, opts);\n    waitOn = command.urn;\n\n    // When running `sst diff`, `local.Command`'s `create` and `update` are not called.\n    // So we will also run `local.runOutput` to get the output of the command.\n    if ($cli.command === \"diff\") {\n      waitOn = local.runOutput(\n        {\n          command: args.create!,\n          dir: args.dir,\n          environment: args.environment,\n        },\n        opts,\n      ).stdout;\n    }\n\n    return waitOn.apply(() => {\n      limiter.release();\n      return command;\n    });\n  });\n}\n", "export class Semaphore {\n  private current: number;\n  private queue: (() => void)[];\n\n  constructor(private max: number) {\n    this.current = 0;\n    this.queue = [];\n  }\n\n  public async acquire(name: string): Promise<void> {\n    if (this.current < this.max) {\n      this.current++;\n      return Promise.resolve();\n    }\n\n    return new Promise<void>((resolve) => {\n      this.queue.push(resolve);\n    });\n  }\n\n  public release(): void {\n    if (this.queue.length > 0) {\n      const next = this.queue.shift();\n      next?.();\n      return;\n    }\n    this.current--;\n  }\n}\n", "import { VisibleError } from \"../error\";\nimport { FunctionPermissionArgs } from \"./function\";\n\nexport const URL_UNAVAILABLE = \"http://url-unavailable-in-dev.mode\";\n\n/** @deprecated\n * instead try\n * ```\n * sst.Linkable.wrap(MyResource, (resource) => ({\n *   properties: { ... },\n *   with: [\n *     sst.aws.permission({ actions: [\"foo:*\"], resources: [resource.arn] })\n *   ]\n * }))\n * ```\n */\nexport function linkable<T>(\n  obj: { new (...args: any[]): T },\n  cb: (resource: T) => FunctionPermissionArgs[],\n) {\n  throw new VisibleError(\n    [\n      \"sst.aws.linkable is deprecated. Use sst.Linkable.wrap instead.\",\n      \"sst.Linkable.wrap(MyResource, (resource) => ({\",\n      \"  properties: { ... },\",\n      \"  with: [\",\n      '    sst.aws.permission({ actions: [\"foo:*\"], resources: [resource.arn] })',\n      \"  ]\",\n      \"}))\",\n    ].join(\"\\n\"),\n  );\n}\n", "import { CustomResourceOptions, Input, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface DistributionInvalidationInputs {\n  distributionId: Input<string>;\n  paths: Input<string[]>;\n  wait: Input<boolean>;\n  version: Input<string>;\n}\n\nexport class DistributionInvalidation extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: DistributionInvalidationInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.DistributionInvalidation\"),\n      `${name}.sst.aws.DistributionInvalidation`,\n      args,\n      opts,\n    );\n  }\n}\n", "import { servicequotas } from \"@pulumi/aws\";\nimport { Output } from \"@pulumi/pulumi\";\nimport { useProvider } from \"./provider\";\n\nconst QUOTA_CODE = {\n  \"cloudfront-response-timeout\": [\"cloudfront\", \"L-AECE9FA7\"],\n};\nconst quotas: Record<string, Output<number>> = {};\n\nexport const CONSOLE_URL =\n  \"https://console.aws.amazon.com/support/home#/case/create?issueType=service-limit-increase\";\n\nexport function getQuota(name: keyof typeof QUOTA_CODE) {\n  if (quotas[name]) return quotas[name];\n\n  const quota = servicequotas.getServiceQuotaOutput(\n    {\n      serviceCode: QUOTA_CODE[name][0],\n      quotaCode: QUOTA_CODE[name][1],\n    },\n    {\n      provider: useProvider(\"us-east-1\"),\n    },\n  );\n\n  quotas[name] = quota.value;\n  return quota.value;\n}\n", "import path from \"path\";\n\nexport function toPosix(p: string) {\n  return p.split(path.sep).join(path.posix.sep);\n}\n", "import {\n  ComponentResourceOptions,\n  Output,\n  all,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport {\n  Component,\n  outputId,\n  Prettify,\n  Transform,\n  transform,\n} from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { hashStringToPrettyString, physicalName, logicalName } from \"../naming\";\nimport { VisibleError } from \"../error\";\nimport { RETENTION } from \"./logging\";\nimport { ApiGatewayV1LambdaRoute } from \"./apigatewayv1-lambda-route\";\nimport { ApiGatewayV1Authorizer } from \"./apigatewayv1-authorizer\";\nimport { setupApiGatewayAccount } from \"./helpers/apigateway-account\";\nimport { apigateway, cloudwatch, getRegionOutput } from \"@pulumi/aws\";\nimport { Dns } from \"../dns\";\nimport { dns as awsDns } from \"./dns\";\nimport { DnsValidatedCertificate } from \"./dns-validated-certificate\";\nimport { ApiGatewayV1IntegrationRoute } from \"./apigatewayv1-integration-route\";\nimport { ApiGatewayV1UsagePlan } from \"./apigatewayv1-usage-plan\";\nimport { useProvider } from \"./helpers/provider\";\n\nexport interface ApiGatewayV1DomainArgs {\n  /**\n   * Use an existing API Gateway domain name.\n   *\n   * By default, a new API Gateway domain name is created. If you'd like to use an existing\n   * domain name, set the `nameId` to the ID of the domain name and **do not** pass in `name`.\n   *\n   * @example\n   * ```js\n   * {\n   *   domain: {\n   *     nameId: \"example.com\"\n   *   }\n   * }\n   * ```\n   */\n  nameId?: Input<string>;\n  /**\n   * The custom domain you want to use.\n   *\n   * @example\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Can also include subdomains based on the current stage.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: `${$app.stage}.example.com`\n   *   }\n   * }\n   * ```\n   */\n  name: Input<string>;\n  /**\n   * The base mapping for the custom domain. This adds a suffix to the URL of the API.\n   *\n   * @example\n   *\n   * Given the following base path and domain name.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"api.example.com\",\n   *     path: \"v1\"\n   *   }\n   * }\n   * ```\n   *\n   * The full URL of the API will be `https://api.example.com/v1/`.\n   *\n   * :::note\n   * There's an extra trailing slash when a base path is set.\n   * :::\n   *\n   * By default there is no base path, so if the `name` is `api.example.com`, the full URL will be `https://api.example.com`.\n   */\n  path?: Input<string>;\n  /**\n   * The ARN of an ACM (AWS Certificate Manager) certificate that proves ownership of the\n   * domain. By default, a certificate is created and validated automatically.\n   *\n   * :::tip\n   * You need to pass in a `cert` for domains that are not hosted on supported `dns` providers.\n   * :::\n   *\n   * To manually set up a domain on an unsupported provider, you'll need to:\n   *\n   * 1. [Validate that you own the domain](https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html) by creating an ACM certificate. You can either validate it by setting a DNS record or by verifying an email sent to the domain owner.\n   * 2. Once validated, set the certificate ARN as the `cert` and set `dns` to `false`.\n   * 3. Add the DNS records in your provider to point to the API Gateway URL.\n   *\n   * @example\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: false,\n   *     cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n   *   }\n   * }\n   * ```\n   */\n  cert?: Input<string>;\n  /**\n   * The DNS provider to use for the domain. Defaults to the AWS.\n   *\n   * Takes an adapter that can create the DNS records on the provider. This can automate\n   * validating the domain and setting up the DNS routing.\n   *\n   * Supports Route 53, Cloudflare, and Vercel adapters. For other providers, you'll need\n   * to set `dns` to `false` and pass in a certificate validating ownership via `cert`.\n   *\n   * @default `sst.aws.dns`\n   *\n   * @example\n   *\n   * Specify the hosted zone ID for the Route 53 domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.aws.dns({\n   *       zone: \"Z2FDTNDATAQYW2\"\n   *     })\n   *   }\n   * }\n   * ```\n   *\n   * Use a domain hosted on Cloudflare, needs the Cloudflare provider.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Use a domain hosted on Vercel, needs the Vercel provider.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.vercel.dns()\n   *   }\n   * }\n   * ```\n   */\n  dns?: Input<false | (Dns & {})>;\n}\n\nexport interface ApiGatewayV1Args {\n  /**\n   * Set a custom domain for your REST API.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   */\n  domain?: Input<string | Prettify<ApiGatewayV1DomainArgs>>;\n  /**\n   * Configure the type of API Gateway REST API endpoint.\n   *\n   * - `edge`: The default; it creates a CloudFront distribution for the API.\n   *   Useful for cases where requests are geographically distributed.\n   * - `regional`: Endpoints are deployed in specific AWS regions and are\n   *   intended to be accessed directly by clients within or near that region.\n   * - `private`: Endpoints allows access to the API only from within a specified\n   *   Amazon VPC (Virtual Private Cloud) using VPC endpoints. These do not expose\n   *   the API to the public internet.\n   *\n   * Learn more about the [different types of endpoints](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-api-endpoint-types.html).\n   *\n   * @default `{type: \"edge\"}`\n   * @example\n   *\n   * For example, to create a regional endpoint.\n   * ```js\n   * {\n   *   endpoint: {\n   *     type: \"regional\"\n   *   }\n   * }\n   * ```\n   *\n   * And to create a private endpoint.\n   * ```js\n   * {\n   *   endpoint: {\n   *     type: \"private\",\n   *     vpcEndpointIds: [\"vpce-0dccab6fb1e828f36\"]\n   *   }\n   * }\n   * ```\n   */\n  endpoint?: Input<{\n    /**\n     * The type of the API Gateway REST API endpoint.\n     */\n    type: \"edge\" | \"regional\" | \"private\";\n    /**\n     * The VPC endpoint IDs for the `private` endpoint.\n     */\n    vpcEndpointIds?: Input<Input<string>[]>;\n  }>;\n  /**\n   * Enable the CORS or Cross-origin resource sharing for your API.\n   * @default `true`\n   * @example\n   * Disable CORS.\n   * ```js\n   * {\n   *   cors: false\n   * }\n   * ```\n   */\n  cors?: Input<boolean>;\n  /**\n   * Configure the [API Gateway logs](https://docs.aws.amazon.com/apigateway/latest/developerguide/view-cloudwatch-log-events-in-cloudwatch-console.html) in CloudWatch. By default, access logs are enabled and retained for 1 month.\n   * @default `{retention: \"1 month\"}`\n   * @example\n   * ```js\n   * {\n   *   accessLog: {\n   *     retention: \"forever\"\n   *   }\n   * }\n   * ```\n   */\n  accessLog?: Input<{\n    /**\n     * The duration the API Gateway logs are retained in CloudWatch.\n     * @default `1 month`\n     */\n    retention?: Input<keyof typeof RETENTION>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway REST API resource.\n     */\n    api?: Transform<apigateway.RestApiArgs>;\n    /**\n     * Transform the API Gateway REST API stage resource.\n     */\n    stage?: Transform<apigateway.StageArgs>;\n    /**\n     * Transform the API Gateway REST API deployment resource.\n     */\n    deployment?: Transform<apigateway.DeploymentArgs>;\n    /**\n     * Transform the CloudWatch LogGroup resource used for access logs.\n     */\n    accessLog?: Transform<cloudwatch.LogGroupArgs>;\n    /**\n     * Transform the API Gateway REST API domain name resource.\n     */\n    domainName?: Transform<apigateway.DomainNameArgs>;\n    /**\n     * Transform the routes. This is called for every route that is added.\n     *\n     * :::note\n     * This is applied right before the resource is created.\n     * :::\n     *\n     * You can use this to set any default props for all the routes and their handler function.\n     * Like the other transforms, you can either pass in an object or a callback.\n     *\n     * @example\n     *\n     * Here we are setting a default memory of `2048 MB` for our routes.\n     *\n     * ```js\n     * {\n     *   transform: {\n     *     route: {\n     *       handler: (args, opts) => {\n     *         // Set the default if it's not set by the route\n     *         args.memory ??= \"2048 MB\";\n     *       }\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Defaulting to IAM auth for all our routes.\n     *\n     * ```js\n     * {\n     *   transform: {\n     *     route: {\n     *       args: (props) => {\n     *         // Set the default if it's not set by the route\n     *         props.auth ??= { iam: true };\n     *       }\n     *     }\n     *   }\n     * }\n     * ```\n     */\n    route?: {\n      /**\n       * Transform the handler function of the route.\n       */\n      handler?: Transform<FunctionArgs>;\n      /**\n       * Transform the arguments for the route.\n       */\n      args?: Transform<ApiGatewayV1RouteArgs>;\n    };\n  };\n}\n\nexport interface ApiGatewayV1AuthorizerArgs {\n  /**\n   * The name of the authorizer.\n   * @example\n   * ```js\n   * {\n   *   name: \"myAuthorizer\"\n   * }\n   * ```\n   */\n  name: string;\n  /**\n   * The Lambda token authorizer function. Takes the handler path or the function args.\n   * @example\n   * ```js\n   * {\n   *   tokenFunction: \"src/authorizer.index\"\n   * }\n   * ```\n   */\n  tokenFunction?: Input<string | FunctionArgs>;\n  /**\n   * The Lambda request authorizer function. Takes the handler path or the function args.\n   * @example\n   * ```js\n   * {\n   *   requestFunction: \"src/authorizer.index\"\n   * }\n   * ```\n   */\n  requestFunction?: Input<string | FunctionArgs>;\n  /**\n   * A list of user pools used as the authorizer.\n   * @example\n   * ```js\n   * {\n   *   name: \"myAuthorizer\",\n   *   userPools: [userPool.arn]\n   * }\n   * ```\n   *\n   * Where `userPool` is:\n   *\n   * ```js\n   * const userPool = new aws.cognito.UserPool();\n   * ```\n   */\n  userPools?: Input<Input<string>[]>;\n  /**\n   * Time to live for cached authorizer results in seconds.\n   * @default `300`\n   * @example\n   * ```js\n   * {\n   *   ttl: 30\n   * }\n   * ```\n   */\n  ttl?: Input<number>;\n  /**\n   * Specifies where to extract the authorization token from the request.\n   * @default `\"method.request.header.Authorization\"`\n   * @example\n   * ```js\n   * {\n   *   identitySource: \"method.request.header.AccessToken\"\n   * }\n   * ```\n   */\n  identitySource?: Input<string>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway authorizer resource.\n     */\n    authorizer?: Transform<apigateway.AuthorizerArgs>;\n  };\n}\n\nexport interface ApiGatewayV1UsagePlanArgs {\n  /**\n   * Configure rate limits to protect your API from being overwhelmed by too many\n   * requests at once.\n   *\n   * @example\n   * ```js\n   * {\n   *   throttle: {\n   *     rate: 100,\n   *     burst: 200\n   *   }\n   * }\n   * ```\n   */\n  throttle?: Input<{\n    /**\n     * The maximum number of requests permitted in a short-term spike beyond the\n     * rate limit.\n     */\n    burst?: Input<number>;\n    /**\n     * The steady-state maximum number of requests allowed per second.\n     */\n    rate?: Input<number>;\n  }>;\n  /**\n   * Configure a cap on the total number of requests allowed within a specified time\n   * period.\n   * @example\n   * ```js\n   * {\n   *   quota: {\n   *     limit: 1000,\n   *     period: \"month\",\n   *     offset: 0\n   *   }\n   * }\n   * ```\n   */\n  quota?: Input<{\n    /**\n     * The maximum number of requests that can be made in the specified period of\n     * time.\n     */\n    limit: Input<number>;\n    /**\n     * The time period for which the quota applies.\n     */\n    period: Input<\"day\" | \"week\" | \"month\">;\n    /**\n     * The number of days into the period when the quota counter is reset.\n     *\n     * For example, this resets the quota at the beginning of each month.\n     *\n     * ```js\n     * {\n     *   period: \"month\",\n     *   offset: 0\n     * }\n     * ```\n     */\n    offset?: Input<number>;\n  }>;\n}\n\nexport interface ApiGatewayV1ApiKeyArgs {\n  /**\n   * The value of the API key. If not provided, it will be generated automatically.\n   * @example\n   * ```js\n   * {\n   *   value: \"d41d8cd98f00b204e9800998ecf8427e\"\n   * }\n   * ```\n   */\n  value?: Input<string>;\n}\n\nexport interface ApiGatewayV1RouteArgs {\n  /**\n   * Enable auth for your REST API. By default, auth is disabled.\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   auth: {\n   *     iam: true\n   *   }\n   * }\n   * ```\n   */\n  auth?: Input<\n    | false\n    | {\n      /**\n       * Enable IAM authorization for a given API route.\n       *\n       * When IAM auth is enabled, clients need to use Signature Version 4 to sign their requests with their AWS credentials.\n       */\n      iam?: Input<boolean>;\n      /**\n       * Enable custom Lambda authorization for a given API route. Pass in the authorizer ID.\n       * @example\n       * ```js\n       * {\n       *   auth: {\n       *     custom: myAuthorizer.id\n       *   }\n       * }\n       * ```\n       *\n       * Where `myAuthorizer` is:\n       *\n       * ```js\n       * const userPool = new aws.cognito.UserPool();\n       * const myAuthorizer = api.addAuthorizer({\n       *   name: \"MyAuthorizer\",\n       *   userPools: [userPool.arn]\n       * });\n       * ```\n       */\n      custom?: Input<string>;\n      /**\n       * Enable Cognito User Pool authorization for a given API route.\n       *\n       * @example\n       * You can configure JWT auth.\n       *\n       * ```js\n       * {\n       *   auth: {\n       *     cognito: {\n       *       authorizer: myAuthorizer.id,\n       *       scopes: [\"read:profile\", \"write:profile\"]\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * Where `myAuthorizer` is:\n       *\n       * ```js\n       * const userPool = new aws.cognito.UserPool();\n       *\n       * const myAuthorizer = api.addAuthorizer({\n       *   name: \"MyAuthorizer\",\n       *   userPools: [userPool.arn]\n       * });\n       * ```\n       */\n      cognito?: Input<{\n        /**\n         * Authorizer ID of the Cognito User Pool authorizer.\n         */\n        authorizer: Input<string>;\n        /**\n         * Defines the permissions or access levels that the authorization token grants.\n         */\n        scopes?: Input<Input<string>[]>;\n      }>;\n    }\n  >;\n  /**\n   * Specify if an API key is required for the route. By default, an API key is not\n   * required.\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   apiKey: true\n   * }\n   * ```\n   */\n  apiKey?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway REST API method resource.\n     */\n    method?: Transform<apigateway.MethodArgs>;\n    /**\n     * Transform the API Gateway REST API integration resource.\n     */\n    integration?: Transform<apigateway.IntegrationArgs>;\n  };\n}\n\nexport interface ApiGatewayV1IntegrationArgs {\n  /**\n   * The type of the API Gateway REST API integration.\n   */\n  type: Input<\"aws\" | \"aws-proxy\" | \"mock\" | \"http\" | \"http-proxy\">;\n  /**\n   * The URI of the API Gateway REST API integration.\n   */\n  uri?: Input<string>;\n  /**\n   * The credentials to use to call the AWS service.\n   */\n  credentials?: Input<string>;\n  /**\n   * The HTTP method to use to call the integration.\n   */\n  integrationHttpMethod?: Input<\n    \"GET\" | \"POST\" | \"PUT\" | \"DELETE\" | \"HEAD\" | \"OPTIONS\" | \"ANY\" | \"PATCH\"\n  >;\n  /**\n   * Map of request query string parameters and headers that should be passed to the backend responder.\n   */\n  requestParameters?: Input<Record<string, Input<string>>>;\n  /**\n   * Map of the integration's request templates.\n   */\n  requestTemplates?: Input<Record<string, Input<string>>>;\n  /**\n   * The passthrough behavior to use to call the integration.\n   *\n   * Required if `requestTemplates` is set.\n   */\n  passthroughBehavior?: Input<\"when-no-match\" | \"never\" | \"when-no-templates\">;\n}\n\n/**\n * The `ApiGatewayV1` component lets you add an [Amazon API Gateway REST API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html) to your app.\n *\n * @example\n *\n * #### Create the API\n *\n * ```ts title=\"sst.config.ts\"\n * const api = new sst.aws.ApiGatewayV1(\"MyApi\");\n * ```\n *\n * #### Add routes\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"GET /\", \"src/get.handler\");\n * api.route(\"POST /\", \"src/post.handler\");\n *\n * api.deploy();\n * ```\n *\n * :::note\n * You need to call `deploy` after you've added all your routes.\n * :::\n *\n * #### Configure the routes\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"GET /\", \"src/get.handler\", {\n *   auth: { iam: true }\n * });\n * ```\n *\n * #### Configure the route handler\n *\n * You can configure the Lambda function that'll handle the route.\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"POST /\", {\n *   handler: \"src/post.handler\",\n *   memory: \"2048 MB\"\n * });\n * ```\n *\n * #### Default props for all routes\n *\n * You can use a `transform` to set some default props for all your routes. For\n * example, instead of setting the `memory` for each route.\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"GET /\", { handler: \"src/get.handler\", memory: \"2048 MB\" });\n * api.route(\"POST /\", { handler: \"src/post.handler\", memory: \"2048 MB\" });\n * ```\n *\n * You can set it through the `transform`.\n *\n * ```ts title=\"sst.config.ts\" {6}\n * const api = new sst.aws.ApiGatewayV1(\"MyApi\", {\n *   transform: {\n *     route: {\n *       handler: (args, opts) => {\n *         // Set the default if it's not set by the route\n *         args.memory ??= \"2048 MB\";\n *       }\n *     }\n *   }\n * });\n *\n * api.route(\"GET /\", \"src/get.handler\");\n * api.route(\"POST /\", \"src/post.handler\");\n * ```\n *\n * With this we set the `memory` if it's not overridden by the route.\n */\nexport class ApiGatewayV1 extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorArgs: ApiGatewayV1Args;\n  private constructorOpts: ComponentResourceOptions;\n  private api: apigateway.RestApi;\n  private apigDomain?: Output<apigateway.DomainName>;\n  private apiMapping?: Output<apigateway.BasePathMapping>;\n  private region: Output<string>;\n  private resources: Record<string, Output<string>> = {};\n  private routes: (ApiGatewayV1LambdaRoute | ApiGatewayV1IntegrationRoute)[] =\n    [];\n  private stage?: apigateway.Stage;\n  private logGroup?: cloudwatch.LogGroup;\n  private endpointType: Output<\"EDGE\" | \"REGIONAL\" | \"PRIVATE\">;\n  private deployed: boolean = false;\n\n  constructor(\n    name: string,\n    args: ApiGatewayV1Args = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const region = normalizeRegion();\n    const endpoint = normalizeEndpoint();\n    const apigAccount = setupApiGatewayAccount(name, opts);\n    const api = createApi();\n\n    this.resources[\"/\"] = api.rootResourceId;\n    this.constructorName = name;\n    this.constructorArgs = args;\n    this.constructorOpts = opts;\n    this.api = api;\n    this.region = region;\n    this.endpointType = endpoint.types;\n\n    function normalizeRegion() {\n      return getRegionOutput(undefined, { parent }).name;\n    }\n\n    function normalizeEndpoint() {\n      return output(args.endpoint).apply((endpoint) => {\n        if (!endpoint) return { types: \"EDGE\" as const };\n\n        if (endpoint.type === \"private\" && !endpoint.vpcEndpointIds)\n          throw new VisibleError(\n            \"Please provide the VPC endpoint IDs for the private endpoint.\",\n          );\n\n        return endpoint.type === \"regional\"\n          ? { types: \"REGIONAL\" as const }\n          : endpoint.type === \"private\"\n            ? {\n              types: \"PRIVATE\" as const,\n              vpcEndpointIds: endpoint.vpcEndpointIds,\n            }\n            : { types: \"EDGE\" as const };\n      });\n    }\n\n    function createApi() {\n      return new apigateway.RestApi(\n        ...transform(\n          args.transform?.api,\n          `${name}Api`,\n          {\n            endpointConfiguration: endpoint,\n          },\n          { parent, dependsOn: apigAccount },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The URL of the API.\n   */\n  public get url() {\n    return this.apigDomain && this.apiMapping\n      ? all([this.apigDomain.domainName, this.apiMapping.basePath]).apply(\n        ([domain, key]) =>\n          key ? `https://${domain}/${key}/` : `https://${domain}`,\n      )\n      : interpolate`https://${this.api.id}.execute-api.${this.region}.amazonaws.com/${$app.stage}/`;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Amazon API Gateway REST API\n       */\n      api: this.api,\n      /**\n       * The Amazon API Gateway REST API stage\n       */\n      stage: this.stage,\n      /**\n       * The CloudWatch LogGroup for the access logs.\n       */\n      logGroup: this.logGroup,\n      /**\n       * The API Gateway REST API domain name.\n       */\n      get domainName() {\n        if (!self.deployed)\n          throw new VisibleError(\n            `\"nodes.domainName\" is not available before the \"${self.constructorName}\" API is deployed.`,\n          );\n        if (!self.apigDomain)\n          throw new VisibleError(\n            `\"nodes.domainName\" is not available when domain is not configured for the \"${self.constructorName}\" API.`,\n          );\n        return self.apigDomain;\n      },\n    };\n  }\n\n  /**\n   * Add a route to the API Gateway REST API. The route is a combination of an HTTP method and a path, `{METHOD} /{path}`.\n   *\n   * A method could be one of `GET`, `POST`, `PUT`, `DELETE`, `PATCH`, `HEAD`, `OPTIONS`, or `ANY`. Here `ANY` matches any HTTP method.\n   *\n   * The path can be a combination of\n   * - Literal segments, `/notes`, `/notes/new`, etc.\n   * - Parameter segments, `/notes/{noteId}`, `/notes/{noteId}/attachments/{attachmentId}`, etc.\n   * - Greedy segments, `/{proxy+}`, `/notes/{proxy+}`,  etc. The `{proxy+}` segment is a greedy segment that matches all child paths. It needs to be at the end of the path.\n   *\n   * :::tip\n   * The `{proxy+}` is a greedy segment, it matches all its child paths.\n   * :::\n   *\n   * When a request comes in, the API Gateway will look for the most specific match.\n   *\n   * :::note\n   * You cannot have duplicate routes.\n   * :::\n   *\n   * @param route The path for the route.\n   * @param handler The function that'll be invoked.\n   * @param args Configure the route.\n   *\n   * @example\n   * Add a simple route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"src/get.handler\");\n   * ```\n   *\n   * Match any HTTP method.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"ANY /\", \"src/route.handler\");\n   * ```\n   *\n   * Add a default or fallback route. Here for every request other than `GET /hi`,\n   * the `default.handler` function will be invoked.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /hi\", \"src/get.handler\");\n   *\n   * api.route(\"ANY /\", \"src/default.handler\");\n   * api.route(\"ANY /{proxy+}\", \"src/default.handler\");\n   * ```\n   *\n   * The `/{proxy+}` matches any path that starts with `/`, so if you want a\n   * fallback route for the root `/` path, you need to add a `ANY /` route as well.\n   *\n   * Add a parameterized route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /notes/{id}\", \"src/get.handler\");\n   * ```\n   *\n   * Add a greedy route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /notes/{proxy+}\", \"src/greedy.handler\");\n   * ```\n   *\n   * Enable auth for a route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"src/get.handler\")\n   * api.route(\"POST /\", \"src/post.handler\", {\n   *   auth: {\n   *     iam: true\n   *   }\n   * });\n   * ```\n   *\n   * Customize the route handler.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", {\n   *   handler: \"src/get.handler\",\n   *   memory: \"2048 MB\"\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public route(\n    route: string,\n    handler: Input<string | FunctionArgs | FunctionArn>,\n    args: ApiGatewayV1RouteArgs = {},\n  ) {\n    const { method, path } = this.parseRoute(route);\n    this.createResource(path);\n\n    const transformed = transform(\n      this.constructorArgs.transform?.route?.args,\n      this.buildRouteId(method, path),\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n\n    const apigRoute = new ApiGatewayV1LambdaRoute(\n      transformed[0],\n      {\n        api: {\n          name: this.constructorName,\n          id: this.api.id,\n          executionArn: this.api.executionArn,\n        },\n        method,\n        path,\n        resourceId: this.resources[path],\n        handler,\n        handlerTransform: this.constructorArgs.transform?.route?.handler,\n        ...transformed[1],\n      },\n      transformed[2],\n    );\n\n    this.routes.push(apigRoute);\n\n    return apigRoute;\n  }\n\n  /**\n   * Add a custom integration to the API Gateway REST API. [Learn more about\n   * integrations](https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-integration-settings.html).\n   *\n   * @param route The path for the route.\n   * @param integration The integration configuration.\n   * @param args Configure the route.\n   *\n   * @example\n   * Add a route to trigger a Step Function state machine execution.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.routeIntegration(\"POST /run-my-state-machine\", {\n   *   type: \"aws\",\n   *   uri: \"arn:aws:apigateway:us-east-1:states:startExecution\",\n   *   credentials: \"arn:aws:iam::123456789012:role/apigateway-execution-role\",\n   *   integrationHttpMethod: \"POST\",\n   *   requestTemplates: {\n   *     \"application/json\": JSON.stringify({\n   *       input: \"$input.json('$')\",\n   *       stateMachineArn: \"arn:aws:states:us-east-1:123456789012:stateMachine:MyStateMachine\"\n   *     })\n   *   },\n   *   passthroughBehavior: \"when-no-match\"\n   * });\n   * ```\n   */\n  public routeIntegration(\n    route: string,\n    integration: ApiGatewayV1IntegrationArgs,\n    args: ApiGatewayV1RouteArgs = {},\n  ) {\n    const { method, path } = this.parseRoute(route);\n    this.createResource(path);\n\n    const transformed = transform(\n      this.constructorArgs.transform?.route?.args,\n      this.buildRouteId(method, path),\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n\n    const apigRoute = new ApiGatewayV1IntegrationRoute(\n      transformed[0],\n      {\n        api: {\n          name: this.constructorName,\n          id: this.api.id,\n          executionArn: this.api.executionArn,\n        },\n        method,\n        path,\n        resourceId: this.resources[path],\n        integration,\n        ...transformed[1],\n      },\n      transformed[2],\n    );\n\n    this.routes.push(apigRoute);\n\n    return apigRoute;\n  }\n\n  private parseRoute(route: string) {\n    const parts = route.split(\" \");\n    if (parts.length !== 2) {\n      throw new VisibleError(\n        `Invalid route ${route}. A route must be in the format \"METHOD /path\".`,\n      );\n    }\n    const [methodRaw, path] = route.split(\" \");\n    const method = methodRaw.toUpperCase();\n    if (\n      ![\n        \"ANY\",\n        \"DELETE\",\n        \"GET\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"PATCH\",\n        \"POST\",\n        \"PUT\",\n      ].includes(method)\n    )\n      throw new VisibleError(`Invalid method ${methodRaw} in route ${route}`);\n\n    if (!path.startsWith(\"/\"))\n      throw new VisibleError(\n        `Invalid path ${path} in route ${route}. Path must start with \"/\".`,\n      );\n\n    return { method, path };\n  }\n\n  private buildRouteId(method: string, path: string) {\n    const suffix = logicalName(\n      hashStringToPrettyString([outputId, method, path].join(\"\"), 6),\n    );\n    return `${this.constructorName}Route${suffix}`;\n  }\n\n  private createResource(path: string) {\n    const pathParts = path.replace(/^\\//, \"\").split(\"/\");\n    for (let i = 0, l = pathParts.length; i < l; i++) {\n      const parentPath = \"/\" + pathParts.slice(0, i).join(\"/\");\n      const subPath = \"/\" + pathParts.slice(0, i + 1).join(\"/\");\n      if (!this.resources[subPath]) {\n        const suffix = logicalName(\n          hashStringToPrettyString([this.api.id, subPath].join(\"\"), 6),\n        );\n        const resource = new apigateway.Resource(\n          `${this.constructorName}Resource${suffix}`,\n          {\n            restApi: this.api.id,\n            parentId:\n              parentPath === \"/\"\n                ? this.api.rootResourceId\n                : this.resources[parentPath],\n            pathPart: pathParts[i],\n          },\n          { parent: this },\n        );\n\n        this.resources[subPath] = resource.id;\n      }\n    }\n  }\n\n  /**\n   * Add an authorizer to the API Gateway REST API.\n   *\n   * @param args Configure the authorizer.\n   * @example\n   * For example, add a Lambda token authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addAuthorizer({\n   *   name: \"myAuthorizer\",\n   *   tokenFunction: \"src/authorizer.index\"\n   * });\n   * ```\n   *\n   * Add a Lambda REQUEST authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addAuthorizer({\n   *   name: \"myAuthorizer\",\n   *   requestFunction: \"src/authorizer.index\"\n   * });\n   * ```\n   *\n   * Add a Cognito User Pool authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const userPool = new aws.cognito.UserPool();\n   *\n   * api.addAuthorizer({\n   *   name: \"myAuthorizer\",\n   *   userPools: [userPool.arn]\n   * });\n   * ```\n   *\n   * You can also customize the authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addAuthorizer({\n   *   name: \"myAuthorizer\",\n   *   tokenFunction: \"src/authorizer.index\",\n   *   ttl: 30\n   * });\n   * ```\n   */\n  public addAuthorizer(args: ApiGatewayV1AuthorizerArgs) {\n    const self = this;\n    const selfName = this.constructorName;\n    const nameSuffix = logicalName(args.name);\n\n    return new ApiGatewayV1Authorizer(\n      `${selfName}Authorizer${nameSuffix}`,\n      {\n        api: {\n          id: self.api.id,\n          name: selfName,\n          executionArn: self.api.executionArn,\n        },\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Add a usage plan to the API Gateway REST API.\n   *\n   * @param name The name of the usage plan.\n   * @param args Configure the usage plan.\n   * @example\n   *\n   * To add a usage plan to an API, you need to enable the API key for a route, and\n   * then deploy the API.\n   *\n   * ```ts title=\"sst.config.ts\" {4}\n   * const api = new sst.aws.ApiGatewayV1(\"MyApi\");\n   *\n   * api.route(\"GET /\", \"src/get.handler\", {\n   *   apiKey: true\n   * });\n   *\n   * api.deploy();\n   * ```\n   *\n   * Then define your usage plan.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const plan = api.addUsagePlan(\"MyPlan\", {\n   *   throttle: {\n   *     rate: 100,\n   *     burst: 200\n   *   },\n   *   quota: {\n   *     limit: 1000,\n   *     period: \"month\",\n   *     offset: 0\n   *   }\n   * });\n   * ```\n   *\n   * And create the API key for the plan.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const key = plan.addApiKey(\"MyKey\");\n   * ```\n   *\n   * You can now link the API and API key to other resources, like a function.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * new sst.aws.Function(\"MyFunction\", {\n   *   handler: \"src/lambda.handler\",\n   *   link: [api, key]\n   * });\n   * ```\n   *\n   * Once linked, include the key in the `x-api-key` header with your requests.\n   *\n   * ```ts title=\"src/lambda.ts\"\n   * import { Resource } from \"sst\";\n   *\n   * await fetch(Resource.MyApi.url, {\n   *   headers: {\n   *     \"x-api-key\": Resource.MyKey.value\n   *   }\n   * });\n   * ```\n   */\n  public addUsagePlan(name: string, args: ApiGatewayV1UsagePlanArgs) {\n    if (!this.stage)\n      throw new VisibleError(\n        `Cannot add a usage plan to the \"${this.constructorName}\" API before it's deployed. Make sure to call deploy() to deploy the API first.`,\n      );\n\n    return new ApiGatewayV1UsagePlan(\n      name,\n      {\n        apiId: this.api.id,\n        apiStage: this.stage.stageName,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Creates a deployment for the API Gateway REST API.\n   *\n   * :::caution\n   * Your routes won't be added if `deploy` isn't called.\n   * :::\n   *\n   * Your routes won't be added if this isn't called after you've added them. This\n   * is due to a quirk in the way API Gateway V1 is created internally.\n   */\n  public deploy() {\n    const name = this.constructorName;\n    const args = this.constructorArgs;\n    const parent = this;\n    const api = this.api;\n    const routes = this.routes;\n    const region = this.region;\n    const endpointType = this.endpointType;\n    const accessLog = normalizeAccessLog();\n    const domain = normalizeDomain();\n    const corsRoutes = createCorsRoutes();\n    const corsResponses = createCorsResponses();\n    const deployment = createDeployment();\n    const logGroup = createLogGroup();\n    const stage = createStage();\n\n    const certificateArn = createSsl();\n    const apigDomain = createDomainName();\n    createDnsRecords();\n    const apiMapping = createDomainMapping();\n\n    this.deployed = true;\n    this.logGroup = logGroup;\n    this.stage = stage;\n    this.apigDomain = apigDomain;\n    this.apiMapping = apiMapping;\n\n    this.registerOutputs({\n      _hint: this.url,\n    });\n\n    function normalizeAccessLog() {\n      return output(args.accessLog).apply((accessLog) => ({\n        ...accessLog,\n        retention: accessLog?.retention ?? \"1 month\",\n      }));\n    }\n\n    function normalizeDomain() {\n      if (!args.domain) return;\n\n      return output(args.domain).apply((domain) => {\n        // validate\n        if (typeof domain !== \"string\") {\n          if (domain.name && domain.nameId)\n            throw new VisibleError(\n              `Cannot configure both domain \"name\" and \"nameId\" for the \"${name}\" API.`,\n            );\n          if (!domain.name && !domain.nameId)\n            throw new VisibleError(\n              `Either domain \"name\" or \"nameId\" is required for the \"${name}\" API.`,\n            );\n          if (domain.dns === false && !domain.cert)\n            throw new VisibleError(\n              `Domain \"cert\" is required when \"dns\" is disabled for the \"${name}\" API.`,\n            );\n        }\n\n        // normalize\n        const norm = typeof domain === \"string\" ? { name: domain } : domain;\n        return {\n          name: norm.name,\n          nameId: norm.nameId,\n          path: norm.path,\n          dns: norm.dns === false ? undefined : norm.dns ?? awsDns(),\n          cert: norm.cert,\n        };\n      });\n    }\n\n    function createCorsRoutes() {\n      const resourceIds = routes.map(\n        (route) => route.nodes.integration.resourceId,\n      );\n\n      return all([args.cors, resourceIds]).apply(([cors, resourceIds]) => {\n        if (cors === false) return [];\n\n        // filter unique resource ids\n        const uniqueResourceIds = [...new Set(resourceIds)];\n\n        // create cors integrations for the paths\n        return uniqueResourceIds.map((resourceId) => {\n          const method = new apigateway.Method(\n            `${name}CorsMethod${resourceId}`,\n            {\n              restApi: api.id,\n              resourceId,\n              httpMethod: \"OPTIONS\",\n              authorization: \"NONE\",\n            },\n            { parent },\n          );\n\n          const methodResponse = new apigateway.MethodResponse(\n            `${name}CorsMethodResponse${resourceId}`,\n            {\n              restApi: api.id,\n              resourceId,\n              httpMethod: method.httpMethod,\n              statusCode: \"204\",\n              responseParameters: {\n                \"method.response.header.Access-Control-Allow-Headers\": true,\n                \"method.response.header.Access-Control-Allow-Methods\": true,\n                \"method.response.header.Access-Control-Allow-Origin\": true,\n              },\n            },\n            { parent },\n          );\n\n          const integration = new apigateway.Integration(\n            `${name}CorsIntegration${resourceId}`,\n            {\n              restApi: api.id,\n              resourceId,\n              httpMethod: method.httpMethod,\n              type: \"MOCK\",\n              requestTemplates: {\n                \"application/json\": \"{ statusCode: 200 }\",\n              },\n            },\n            { parent },\n          );\n\n          const integrationResponse = new apigateway.IntegrationResponse(\n            `${name}CorsIntegrationResponse${resourceId}`,\n            {\n              restApi: api.id,\n              resourceId,\n              httpMethod: method.httpMethod,\n              statusCode: methodResponse.statusCode,\n              responseParameters: {\n                \"method.response.header.Access-Control-Allow-Headers\": \"'*'\",\n                \"method.response.header.Access-Control-Allow-Methods\":\n                  \"'OPTIONS,GET,PUT,POST,DELETE,PATCH,HEAD'\",\n                \"method.response.header.Access-Control-Allow-Origin\": \"'*'\",\n              },\n            },\n            { parent, dependsOn: [integration] },\n          );\n\n          return { method, methodResponse, integration, integrationResponse };\n        });\n      });\n    }\n\n    function createCorsResponses() {\n      return output(args.cors).apply((cors) => {\n        if (cors === false) return [];\n\n        return [\"4XX\", \"5XX\"].map(\n          (type) =>\n            new apigateway.Response(\n              `${name}Cors${type}Response`,\n              {\n                restApiId: api.id,\n                responseType: `DEFAULT_${type}`,\n                responseParameters: {\n                  \"gatewayresponse.header.Access-Control-Allow-Origin\": \"'*'\",\n                  \"gatewayresponse.header.Access-Control-Allow-Headers\": \"'*'\",\n                },\n                responseTemplates: {\n                  \"application/json\":\n                    '{\"message\":$context.error.messageString}',\n                },\n              },\n              { parent },\n            ),\n        );\n      });\n    }\n\n    function createDeployment() {\n      const resources = all([corsRoutes, corsResponses]).apply(\n        ([corsRoutes, corsResponses]) =>\n          [\n            api,\n            corsRoutes.map((v) => Object.values(v)),\n            corsResponses,\n            routes.map((route) => [\n              route.nodes.integration,\n              route.nodes.method,\n            ]),\n          ].flat(3),\n      );\n\n      // filter serializable output values\n      const resourcesSanitized = all([resources]).apply(([resources]) =>\n        resources.map((resource) =>\n          Object.fromEntries(\n            Object.entries(resource).filter(\n              ([k, v]) => !k.startsWith(\"_\") && typeof v !== \"function\",\n            ),\n          ),\n        ),\n      );\n\n      return new apigateway.Deployment(\n        ...transform(\n          args.transform?.deployment,\n          `${name}Deployment`,\n          {\n            restApi: api.id,\n            triggers: all([resourcesSanitized]).apply(([resources]) =>\n              Object.fromEntries(\n                resources.map((resource) => [\n                  resource.urn,\n                  JSON.stringify(resource),\n                ]),\n              ),\n            ),\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createLogGroup() {\n      return new cloudwatch.LogGroup(\n        ...transform(\n          args.transform?.accessLog,\n          `${name}AccessLog`,\n          {\n            name: `/aws/vendedlogs/apis/${physicalName(64, name)}`,\n            retentionInDays: accessLog.apply(\n              (accessLog) => RETENTION[accessLog.retention],\n            ),\n          },\n          { parent, ignoreChanges: [\"name\"] },\n        ),\n      );\n    }\n\n    function createStage() {\n      return new apigateway.Stage(\n        ...transform(\n          args.transform?.stage,\n          `${name}Stage`,\n          {\n            restApi: api.id,\n            stageName: $app.stage,\n            deployment: deployment.id,\n            accessLogSettings: {\n              destinationArn: logGroup.arn,\n              format: JSON.stringify({\n                // request info\n                requestTime: `\"$context.requestTime\"`,\n                requestId: `\"$context.requestId\"`,\n                httpMethod: `\"$context.httpMethod\"`,\n                path: `\"$context.path\"`,\n                resourcePath: `\"$context.resourcePath\"`,\n                status: `$context.status`, // integer value, do not wrap in quotes\n                responseLatency: `$context.responseLatency`, // integer value, do not wrap in quotes\n                xrayTraceId: `\"$context.xrayTraceId\"`,\n                // integration info\n                functionResponseStatus: `\"$context.integration.status\"`,\n                integrationRequestId: `\"$context.integration.requestId\"`,\n                integrationLatency: `\"$context.integration.latency\"`,\n                integrationServiceStatus: `\"$context.integration.integrationStatus\"`,\n                // caller info\n                ip: `\"$context.identity.sourceIp\"`,\n                userAgent: `\"$context.identity.userAgent\"`,\n                principalId: `\"$context.authorizer.principalId\"`,\n              }),\n            },\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createSsl() {\n      if (!domain) return;\n\n      return all([domain, endpointType, region]).apply(\n        ([domain, endpointType, region]) => {\n          if (domain.cert) return output(domain.cert);\n          if (domain.nameId) return output(undefined);\n\n          return new DnsValidatedCertificate(\n            `${name}Ssl`,\n            {\n              domainName: domain.name,\n              dns: domain.dns!,\n            },\n            {\n              parent,\n              provider:\n                endpointType === \"EDGE\" && region !== \"us-east-1\"\n                  ? useProvider(\"us-east-1\")\n                  : undefined,\n            },\n          ).arn;\n        },\n      );\n    }\n\n    function createDomainName() {\n      if (!domain || !certificateArn) return;\n\n      return all([domain, endpointType]).apply(([domain, endpointType]) =>\n        domain.nameId\n          ? apigateway.DomainName.get(\n            `${name}DomainName`,\n            domain.nameId,\n            {},\n            { parent },\n          )\n          : new apigateway.DomainName(\n            ...transform(\n              args.transform?.domainName,\n              `${name}DomainName`,\n              {\n                domainName: domain?.name,\n                endpointConfiguration: { types: endpointType },\n                ...(endpointType === \"REGIONAL\"\n                  ? {\n                    regionalCertificateArn:\n                      certificateArn as Output<string>,\n                  }\n                  : { certificateArn: certificateArn as Output<string> }),\n              },\n              { parent },\n            ),\n          ),\n      );\n    }\n\n    function createDnsRecords(): void {\n      if (!domain || !apigDomain) return;\n\n      domain.apply((domain) => {\n        if (!domain.dns) return;\n        if (domain.nameId) return;\n\n        domain.dns.createAlias(\n          name,\n          {\n            name: domain.name,\n            aliasName: endpointType.apply((v) =>\n              v === \"EDGE\"\n                ? apigDomain.cloudfrontDomainName\n                : apigDomain.regionalDomainName,\n            ),\n            aliasZone: endpointType.apply((v) =>\n              v === \"EDGE\"\n                ? apigDomain.cloudfrontZoneId\n                : apigDomain.regionalZoneId,\n            ),\n          },\n          { parent },\n        );\n      });\n    }\n\n    function createDomainMapping() {\n      if (!domain || !apigDomain) return;\n\n      return domain.path?.apply(\n        (path) =>\n          new apigateway.BasePathMapping(\n            `${name}DomainMapping`,\n            {\n              restApi: api.id,\n              domainName: apigDomain.id,\n              stageName: stage.stageName,\n              basePath: path,\n            },\n            { parent },\n          ),\n      );\n    }\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV1\";\n// @ts-expect-error\nApiGatewayV1.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { FunctionArgs } from \"./function\";\nimport { apigateway, lambda } from \"@pulumi/aws\";\nimport {\n  ApiGatewayV1BaseRouteArgs,\n  createMethod,\n} from \"./apigatewayv1-base-route\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\n\nexport interface Args extends ApiGatewayV1BaseRouteArgs {\n  /**\n   * The route function.\n   */\n  handler: Input<string | FunctionArgs>;\n  /**\n   * @internal\n   */\n  handlerTransform?: Transform<FunctionArgs>;\n}\n\n/**\n * The `ApiGatewayV1LambdaRoute` component is internally used by the `ApiGatewayV1` component\n * to add routes to your [API Gateway REST API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `route` method of the `ApiGatewayV1` component.\n */\nexport class ApiGatewayV1LambdaRoute extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly permission: lambda.Permission;\n  private readonly method: Output<apigateway.Method>;\n  private readonly integration: apigateway.Integration;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const api = output(args.api);\n\n    const method = createMethod(name, args, self);\n    const fn = createFunction();\n    const permission = createPermission();\n    const integration = createIntegration();\n\n    this.fn = fn;\n    this.permission = permission;\n    this.method = method;\n    this.integration = integration;\n\n    function createFunction() {\n      const { method, path } = args;\n\n      return functionBuilder(\n        `${name}Handler`,\n        args.handler,\n        {\n          description: interpolate`${api.name} route ${method} ${path}`,\n        },\n        args.handlerTransform,\n        { parent: self },\n      );\n    }\n\n    function createPermission() {\n      return new lambda.Permission(\n        `${name}Permissions`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"apigateway.amazonaws.com\",\n          sourceArn: interpolate`${api.executionArn}/*`,\n        },\n        { parent: self },\n      );\n    }\n\n    function createIntegration() {\n      return new apigateway.Integration(\n        ...transform(\n          args.transform?.integration,\n          `${name}Integration`,\n          {\n            restApi: api.id,\n            resourceId: args.resourceId,\n            httpMethod: method.httpMethod,\n            integrationHttpMethod: \"POST\",\n            type: \"AWS_PROXY\",\n            uri: fn.invokeArn,\n          },\n          { parent: self, dependsOn: [permission] },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda permission.\n       */\n      permission: this.permission,\n      /**\n       * The API Gateway REST API integration.\n       */\n      integration: this.integration,\n      /**\n       * The API Gateway REST API method.\n       */\n      method: this.method,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV1LambdaRoute\";\n// @ts-expect-error\nApiGatewayV1LambdaRoute.__pulumiType = __pulumiType;\n", "import { Input, Output, interpolate, output } from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { apigateway } from \"@pulumi/aws\";\nimport { ApiGatewayV1RouteArgs } from \"./apigatewayv1\";\n\nexport interface ApiGatewayV1BaseRouteArgs extends ApiGatewayV1RouteArgs {\n  /**\n   * The API Gateway to use for the route.\n   */\n  api: Input<{\n    /**\n     * The name of the API Gateway.\n     */\n    name: Input<string>;\n    /**\n     * The ID of the API Gateway.\n     */\n    id: Input<string>;\n    /**\n     * The execution ARN of the API Gateway.\n     */\n    executionArn: Input<string>;\n  }>;\n  /**\n   * The route method.\n   */\n  method: string;\n  /**\n   * The route path.\n   */\n  path: string;\n  /**\n   * The route resource ID.\n   */\n  resourceId: Input<string>;\n}\n\nexport function createMethod(\n  name: string,\n  args: ApiGatewayV1BaseRouteArgs,\n  parent: Component,\n) {\n  const { api, method, resourceId, auth, apiKey } = args;\n\n  const authArgs = output(auth).apply((auth) => {\n    if (!auth) return { authorization: \"NONE\" };\n    if (auth.iam) return { authorization: \"AWS_IAM\" };\n    if (auth.custom)\n      return { authorization: \"CUSTOM\", authorizerId: auth.custom };\n    if (auth.cognito)\n      return {\n        authorization: \"COGNITO_USER_POOLS\",\n        authorizerId: auth.cognito.authorizer,\n        authorizationScopes: auth.cognito.scopes,\n      };\n    return { authorization: \"NONE\" };\n  });\n\n  return authArgs.apply(\n    (authArgs) =>\n      new apigateway.Method(\n        ...transform(\n          args.transform?.method,\n          `${name}Method`,\n          {\n            restApi: output(api).id,\n            resourceId: resourceId,\n            httpMethod: method,\n            authorization: authArgs.authorization,\n            authorizerId: authArgs.authorizerId,\n            authorizationScopes: authArgs.authorizationScopes,\n            apiKeyRequired: apiKey,\n          },\n          { parent },\n        ),\n      ),\n  );\n}\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { VisibleError } from \"../error\";\nimport { ApiGatewayV1AuthorizerArgs } from \"./apigatewayv1\";\nimport { apigateway, lambda } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\n\nexport interface AuthorizerArgs extends ApiGatewayV1AuthorizerArgs {\n  /**\n   * The API Gateway to use for the route.\n   */\n  api: Input<{\n    /**\n     * The name of the API Gateway.\n     */\n    name: Input<string>;\n    /**\n     * The ID of the API Gateway.\n     */\n    id: Input<string>;\n    /**\n     * The execution ARN of the API Gateway.\n     */\n    executionArn: Input<string>;\n  }>;\n}\n\n/**\n * The `ApiGatewayV1Authorizer` component is internally used by the `ApiGatewayV1` component\n * to add authorizers to [Amazon API Gateway REST API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addAuthorizer` method of the `ApiGatewayV1` component.\n */\nexport class ApiGatewayV1Authorizer extends Component {\n  private readonly authorizer: apigateway.Authorizer;\n  private readonly fn?: FunctionBuilder;\n\n  constructor(\n    name: string,\n    args: AuthorizerArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    const api = output(args.api);\n\n    validateSingleAuthorizer();\n    const type = getType();\n\n    const fn = createFunction();\n    const authorizer = createAuthorizer();\n    createPermission();\n\n    this.fn = fn;\n    this.authorizer = authorizer;\n\n    function validateSingleAuthorizer() {\n      const authorizers = [\n        args.requestFunction,\n        args.tokenFunction,\n        args.userPools,\n      ].filter((e) => e);\n\n      if (authorizers.length === 0)\n        throw new VisibleError(\n          `Please provide one of \"requestFunction\", \"tokenFunction\", or \"userPools\" for the ${args.name} authorizer.`,\n        );\n\n      if (authorizers.length > 1) {\n        throw new VisibleError(\n          `Please provide only one of \"requestFunction\", \"tokenFunction\", or \"userPools\" for the ${args.name} authorizer.`,\n        );\n      }\n    }\n\n    function getType() {\n      if (args.tokenFunction) return \"TOKEN\";\n      if (args.requestFunction) return \"REQUEST\";\n      if (args.userPools) return \"COGNITO_USER_POOLS\";\n    }\n\n    function createFunction() {\n      const fn = args.tokenFunction ?? args.requestFunction;\n      if (!fn) return;\n\n      return functionBuilder(\n        `${name}Handler`,\n        fn,\n        {\n          description: interpolate`${api.name} authorizer`,\n        },\n        undefined,\n        { parent: self },\n      );\n    }\n\n    function createPermission() {\n      if (!fn) return;\n\n      return new lambda.Permission(\n        `${name}Permission`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"apigateway.amazonaws.com\",\n          sourceArn: interpolate`${api.executionArn}/authorizers/${authorizer.id}`,\n        },\n        { parent: self },\n      );\n    }\n\n    function createAuthorizer() {\n      return new apigateway.Authorizer(\n        ...transform(\n          args.transform?.authorizer,\n          `${name}Authorizer`,\n          {\n            restApi: api.id,\n            type,\n            name: args.name,\n            providerArns: args.userPools,\n            authorizerUri: fn?.invokeArn,\n            authorizerResultTtlInSeconds: args.ttl,\n            identitySource: args.identitySource,\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The ID of the authorizer.\n   */\n  public get id() {\n    return this.authorizer.id;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The API Gateway Authorizer.\n       */\n      authorizer: this.authorizer,\n      /**\n       * The Lambda function used by the authorizer.\n       */\n      get function() {\n        if (!self.fn)\n          throw new VisibleError(\n            \"Cannot access `nodes.function` because the data source does not use a Lambda function.\",\n          );\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV1Authorizer\";\n// @ts-expect-error\nApiGatewayV1Authorizer.__pulumiType = __pulumiType;\n", "import { getPartitionOutput, apigateway, iam } from \"@pulumi/aws\";\nimport {\n  ComponentResourceOptions,\n  jsonStringify,\n  interpolate,\n} from \"@pulumi/pulumi\";\nimport { $print } from \"../../component\";\n\nexport function setupApiGatewayAccount(\n  namePrefix: string,\n  opts: ComponentResourceOptions,\n) {\n  const account = apigateway.Account.get(\n    `${namePrefix}APIGatewayAccount`,\n    \"APIGatewayAccount\",\n    undefined,\n    { provider: opts.provider },\n  );\n\n  return account.cloudwatchRoleArn.apply((arn) => {\n    if (arn) return account;\n\n    const partition = getPartitionOutput(undefined, opts).partition;\n    const role = new iam.Role(\n      `APIGatewayPushToCloudWatchLogsRole`,\n      {\n        assumeRolePolicy: jsonStringify({\n          Version: \"2012-10-17\",\n          Statement: [\n            {\n              Effect: \"Allow\",\n              Principal: {\n                Service: \"apigateway.amazonaws.com\",\n              },\n              Action: \"sts:AssumeRole\",\n            },\n          ],\n        }),\n        managedPolicyArns: [\n          interpolate`arn:${partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs`,\n        ],\n      },\n      { retainOnDelete: true, provider: opts.provider },\n    );\n\n    return new apigateway.Account(\n      `${namePrefix}APIGatewayAccountSetup`,\n      {\n        cloudwatchRoleArn: role.arn,\n      },\n      { provider: opts.provider },\n    );\n  });\n}\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { ApiGatewayV1IntegrationArgs } from \"./apigatewayv1\";\nimport { apigateway } from \"@pulumi/aws\";\nimport {\n  ApiGatewayV1BaseRouteArgs,\n  createMethod,\n} from \"./apigatewayv1-base-route\";\n\nexport interface Args extends ApiGatewayV1BaseRouteArgs {\n  /**\n   * The route integration.\n   */\n  integration: ApiGatewayV1IntegrationArgs;\n}\n\n/**\n * The `ApiGatewayV1IntegrationRoute` component is internally used by the `ApiGatewayV1` component\n * to add routes to your [API Gateway REST API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `routeIntegration` method of the `ApiGatewayV1` component.\n */\nexport class ApiGatewayV1IntegrationRoute extends Component {\n  private readonly method: Output<apigateway.Method>;\n  private readonly integration: apigateway.Integration;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const api = output(args.api);\n\n    const method = createMethod(name, args, self);\n    const integration = createIntegration();\n\n    this.method = method;\n    this.integration = integration;\n\n    function createIntegration() {\n      return new apigateway.Integration(\n        ...transform(\n          args.transform?.integration,\n          `${name}Integration`,\n          {\n            restApi: api.id,\n            resourceId: args.resourceId,\n            httpMethod: method.httpMethod,\n            ...args.integration,\n            type: output(args.integration.type).apply((v) =>\n              v.toUpperCase().replaceAll(\"-\", \"_\"),\n            ),\n            passthroughBehavior:\n              args.integration.passthroughBehavior &&\n              output(args.integration.passthroughBehavior).apply((v) =>\n                v.toUpperCase().replaceAll(\"-\", \"_\"),\n              ),\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The API Gateway REST API integration.\n       */\n      integration: this.integration,\n      /**\n       * The API Gateway REST API method.\n       */\n      method: this.method,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV1IntegrationRoute\";\n// @ts-expect-error\nApiGatewayV1IntegrationRoute.__pulumiType = __pulumiType;\n", "import { apigateway } from \"@pulumi/aws\";\nimport { ComponentResourceOptions, Input, output } from \"@pulumi/pulumi\";\nimport { Component } from \"../component\";\nimport {\n  ApiGatewayV1ApiKeyArgs,\n  ApiGatewayV1UsagePlanArgs,\n} from \"./apigatewayv1\";\nimport { ApiGatewayV1ApiKey } from \"./apigatewayv1-api-key\";\n\nexport interface UsagePlanArgs extends ApiGatewayV1UsagePlanArgs {\n  /**\n   * The API Gateway REST API to use for the usage plan.\n   */\n  apiId: Input<string>;\n  /**\n   * The stage of the API Gateway REST API.\n   */\n  apiStage: Input<string>;\n}\n\n/**\n * The `ApiGatewayV1UsagePlan` component is internally used by the `ApiGatewayV1` component\n * to add usage plans to [Amazon API Gateway REST API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addUsagePlan` method of the `ApiGatewayV1` component.\n */\nexport class ApiGatewayV1UsagePlan extends Component {\n  private constructorArgs: UsagePlanArgs;\n  private constructorOpts: ComponentResourceOptions;\n  private readonly plan: apigateway.UsagePlan;\n\n  constructor(\n    name: string,\n    args: UsagePlanArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    this.plan = new apigateway.UsagePlan(\n      `${name}UsagePlan`,\n      {\n        apiStages: [{ apiId: args.apiId, stage: args.apiStage }],\n        quotaSettings:\n          args.quota &&\n          output(args.quota).apply((quota) => ({\n            limit: quota.limit,\n            period: quota.period.toUpperCase(),\n            offset: quota.offset,\n          })),\n        throttleSettings:\n          args.throttle &&\n          output(args.throttle).apply((throttle) => ({\n            burstLimit: throttle.burst,\n            rateLimit: throttle.rate,\n          })),\n      },\n      { parent: self },\n    );\n\n    this.constructorArgs = args;\n    this.constructorOpts = opts;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The API Gateway Usage Plan.\n       */\n      usagePlan: this.plan,\n    };\n  }\n\n  /**\n   * Add an API key to the API Gateway usage plan.\n   *\n   * @param name The name of the API key.\n   * @param args Configure the API key.\n   * @example\n   * ```js title=\"sst.config.ts\"\n   * plan.addApiKey(\"MyKey\", {\n   *   value: \"d41d8cd98f00b204e9800998ecf8427e\",\n   * });\n   * ```\n   */\n  public addApiKey(name: string, args?: ApiGatewayV1ApiKeyArgs) {\n    return new ApiGatewayV1ApiKey(\n      name,\n      {\n        apiId: this.constructorArgs.apiId,\n        usagePlanId: this.plan.id,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV1UsagePlan\";\n// @ts-expect-error\nApiGatewayV1UsagePlan.__pulumiType = __pulumiType;\n", "import { apigateway } from \"@pulumi/aws\";\nimport { ComponentResourceOptions, Input } from \"@pulumi/pulumi\";\nimport { Component } from \"../component\";\nimport { ApiGatewayV1ApiKeyArgs } from \"./apigatewayv1\";\nimport { Link } from \"../link\";\n\nexport interface ApiKeyArgs extends ApiGatewayV1ApiKeyArgs {\n  /**\n   * The API Gateway REST API to use for the API key.\n   */\n  apiId: Input<string>;\n  /**\n   * The API Gateway Usage Plan to use for the API key.\n   */\n  usagePlanId: Input<string>;\n}\n\n/**\n * The `ApiGatewayV1ApiKey` component is internally used by the `ApiGatewayV1UsagePlan` component\n * to add API keys to [Amazon API Gateway REST API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-rest-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addApiKey` method of the `ApiGatewayV1UsagePlan` component.\n */\nexport class ApiGatewayV1ApiKey extends Component implements Link.Linkable {\n  private readonly key: apigateway.ApiKey;\n\n  constructor(\n    name: string,\n    args: ApiKeyArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    this.key = new apigateway.ApiKey(\n      `${name}ApiKey`,\n      {\n        value: args.value,\n      },\n      { parent: self },\n    );\n\n    new apigateway.UsagePlanKey(\n      `${name}UsagePlanKey`,\n      {\n        keyId: this.key.id,\n        keyType: \"API_KEY\",\n        usagePlanId: args.usagePlanId,\n      },\n      { parent: self },\n    );\n  }\n\n  /**\n   * The API key value.\n   */\n  public get value() {\n    return this.key.value;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The API Gateway API Key.\n       */\n      apiKey: this.key,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        value: this.value,\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV1ApiKey\";\n// @ts-expect-error\nApiGatewayV1ApiKey.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Output, all, output } from \"@pulumi/pulumi\";\nimport {\n  Component,\n  outputId,\n  Prettify,\n  Transform,\n  transform,\n} from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { hashStringToPrettyString, physicalName, logicalName } from \"../naming\";\nimport { VisibleError } from \"../error\";\nimport { DnsValidatedCertificate } from \"./dns-validated-certificate\";\nimport { RETENTION } from \"./logging\";\nimport { dns as awsDns } from \"./dns\";\nimport { ApiGatewayV2DomainArgs } from \"./helpers/apigatewayv2-domain\";\nimport { ApiGatewayV2LambdaRoute } from \"./apigatewayv2-lambda-route\";\nimport { ApiGatewayV2Authorizer } from \"./apigatewayv2-authorizer\";\nimport { apigatewayv2, cloudwatch, types } from \"@pulumi/aws\";\nimport { ApiGatewayV2UrlRoute } from \"./apigatewayv2-url-route\";\nimport {\n  Duration,\n  DurationHours,\n  DurationMinutes,\n  toSeconds,\n} from \"../duration\";\nimport { ApiGatewayV2PrivateRoute } from \"./apigatewayv2-private-route\";\nimport { Vpc } from \"./vpc\";\n\ninterface ApiGatewayV2CorsArgs {\n  /**\n   * Allow cookies or other credentials in requests to the HTTP API.\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     allowCredentials: true\n   *   }\n   * }\n   * ```\n   */\n  allowCredentials?: Input<boolean>;\n  /**\n   * The HTTP headers that origins can include in requests to the HTTP API.\n   * @default `[\"*\"]`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     allowHeaders: [\"date\", \"keep-alive\", \"x-custom-header\"]\n   *   }\n   * }\n   * ```\n   */\n  allowHeaders?: Input<Input<string>[]>;\n  /**\n   * The origins that can access the HTTP API.\n   * @default `[\"*\"]`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     allowOrigins: [\"https://www.example.com\", \"http://localhost:60905\"]\n   *   }\n   * }\n   * ```\n   * Or the wildcard for all origins.\n   * ```js\n   * {\n   *   cors: {\n   *     allowOrigins: [\"*\"]\n   *   }\n   * }\n   * ```\n   */\n  allowOrigins?: Input<Input<string>[]>;\n  /**\n   * The HTTP methods that are allowed when calling the HTTP API.\n   * @default `[\"*\"]`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     allowMethods: [\"GET\", \"POST\", \"DELETE\"]\n   *   }\n   * }\n   * ```\n   * Or the wildcard for all methods.\n   * ```js\n   * {\n   *   cors: {\n   *     allowMethods: [\"*\"]\n   *   }\n   * }\n   * ```\n   */\n  allowMethods?: Input<\n    Input<\n      \"*\" | \"DELETE\" | \"GET\" | \"HEAD\" | \"OPTIONS\" | \"PATCH\" | \"POST\" | \"PUT\"\n    >[]\n  >;\n  /**\n   * The HTTP headers you want to expose in your function to an origin that calls the HTTP API.\n   * @default `[]`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     exposeHeaders: [\"date\", \"keep-alive\", \"x-custom-header\"]\n   *   }\n   * }\n   * ```\n   */\n  exposeHeaders?: Input<Input<string>[]>;\n  /**\n   * The maximum amount of time the browser can cache results of a preflight request. By\n   * default the browser doesn't cache the results. The maximum value is `86400 seconds` or `1 day`.\n   * @default `\"0 seconds\"`\n   * @example\n   * ```js\n   * {\n   *   cors: {\n   *     maxAge: \"1 day\"\n   *   }\n   * }\n   * ```\n   */\n  maxAge?: Input<Duration>;\n}\n\nexport interface ApiGatewayV2Args {\n  /**\n   * [Link resources](/docs/linking/) to all your API Gateway routes.\n   *\n   * Linked resources will be merged with the resources linked to each route.\n   *\n   * @example\n   *\n   * Takes a list of resources to link to all the routes.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: FunctionArgs[\"link\"];\n  /**\n   * Set a custom domain for your HTTP API.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   */\n  domain?: Input<string | Prettify<ApiGatewayV2DomainArgs>>;\n  /**\n   * Customize the CORS (Cross-origin resource sharing) settings for your HTTP API.\n   * @default `true`\n   * @example\n   * Disable CORS.\n   * ```js\n   * {\n   *   cors: false\n   * }\n   * ```\n   * Only enable the `GET` and `POST` methods for `https://example.com`.\n   * ```js\n   * {\n   *   cors: {\n   *     allowMethods: [\"GET\", \"POST\"],\n   *     allowOrigins: [\"https://example.com\"]\n   *   }\n   * }\n   * ```\n   */\n  cors?: Input<boolean | Prettify<ApiGatewayV2CorsArgs>>;\n  /**\n   * Configure the [API Gateway logs](https://docs.aws.amazon.com/apigateway/latest/developerguide/view-cloudwatch-log-events-in-cloudwatch-console.html) in CloudWatch. By default, access logs are enabled and kept for 1 month.\n   * @default `{retention: \"1 month\"}`\n   * @example\n   * ```js\n   * {\n   *   accessLog: {\n   *     retention: \"forever\"\n   *   }\n   * }\n   * ```\n   */\n  accessLog?: Input<{\n    /**\n     * The duration the API Gateway logs are kept in CloudWatch.\n     * @default `1 month`\n     */\n    retention?: Input<keyof typeof RETENTION>;\n  }>;\n  /**\n   * Configure the API to connect to private resources in a virtual private cloud or VPC.\n   * This creates a VPC link for your HTTP API.\n   *\n   * @example\n   * Create a `Vpc` component.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * Or reference an existing VPC.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = sst.aws.Vpc.get(\"MyVpc\", {\n   *   id: \"vpc-12345678901234567\"\n   * });\n   * ```\n   *\n   * And pass it in. The VPC link will be placed in the public subnets.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   *\n   * The above is equivalent to:\n   *\n   * ```js\n   * {\n   *   vpc: {\n   *     securityGroups: myVpc.securityGroups,\n   *     subnets: myVpc.publicSubnets\n   *   }\n   * }\n   * ```\n   */\n  vpc?:\n  | Vpc\n  | Input<{\n    /**\n     * A list of VPC security group IDs.\n     */\n    securityGroups: Input<Input<string>[]>;\n    /**\n     * A list of VPC subnet IDs.\n     */\n    subnets: Input<Input<string>[]>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway HTTP API resource.\n     */\n    api?: Transform<apigatewayv2.ApiArgs>;\n    /**\n     * Transform the API Gateway HTTP API stage resource.\n     */\n    stage?: Transform<apigatewayv2.StageArgs>;\n    /**\n     * Transform the API Gateway HTTP API domain name resource.\n     */\n    domainName?: Transform<apigatewayv2.DomainNameArgs>;\n    /**\n     * Transform the API Gateway HTTP API VPC link resource.\n     */\n    vpcLink?: Transform<apigatewayv2.VpcLinkArgs>;\n    /**\n     * Transform the CloudWatch LogGroup resource used for access logs.\n     */\n    logGroup?: Transform<cloudwatch.LogGroupArgs>;\n    /**\n     * Transform the routes. This is called for every route that is added.\n     *\n     * :::note\n     * This is applied right before the resource is created.\n     * :::\n     *\n     * You can use this to set any default props for all the routes and their handler function.\n     * Like the other transforms, you can either pass in an object or a callback.\n     *\n     * @example\n     *\n     * Here we are setting a default memory of `2048 MB` for our routes.\n     *\n     * ```js\n     * {\n     *   transform: {\n     *     route: {\n     *       handler: (args, opts) => {\n     *         // Set the default if it's not set by the route\n     *         args.memory ??= \"2048 MB\";\n     *       }\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * Defaulting to IAM auth for all our routes.\n     *\n     * ```js\n     * {\n     *   transform: {\n     *     route: {\n     *       args: (props) => {\n     *         // Set the default if it's not set by the route\n     *         props.auth ??= { iam: true };\n     *       }\n     *     }\n     *   }\n     * }\n     * ```\n     */\n    route?: {\n      /**\n       * Transform the handler function of the route.\n       */\n      handler?: Transform<FunctionArgs>;\n      /**\n       * Transform the arguments for the route.\n       */\n      args?: Transform<ApiGatewayV2RouteArgs>;\n    };\n  };\n}\n\nexport interface ApiGatewayV2AuthorizerArgs {\n  /**\n   * The name of the authorizer.\n   * @example\n   * ```js\n   * {\n   *   name: \"myAuthorizer\"\n   * }\n   * ```\n   */\n  name: string;\n  /**\n   * Create a JWT or JSON Web Token authorizer that can be used by the routes.\n   *\n   * @example\n   * Configure JWT auth.\n   *\n   * ```js\n   * {\n   *   jwt: {\n   *     issuer: \"https://issuer.com/\",\n   *     audiences: [\"https://api.example.com\"],\n   *     identitySource: \"$request.header.AccessToken\"\n   *   }\n   * }\n   * ```\n   *\n   * You can also use Cognito as the identity provider.\n   *\n   * ```js\n   * {\n   *   jwt: {\n   *     audiences: [userPoolClient.id],\n   *     issuer: $interpolate`https://cognito-idp.${aws.getArnOutput(userPool).region}.amazonaws.com/${userPool.id}`,\n   *   }\n   * }\n   * ```\n   *\n   * Where `userPool` and `userPoolClient` are:\n   *\n   * ```js\n   * const userPool = new aws.cognito.UserPool();\n   * const userPoolClient = new aws.cognito.UserPoolClient();\n   * ```\n   */\n  jwt?: Input<{\n    /**\n     * Base domain of the identity provider that issues JSON Web Tokens.\n     * @example\n     * ```js\n     * {\n     *   issuer: \"https://issuer.com/\"\n     * }\n     * ```\n     */\n    issuer: Input<string>;\n    /**\n     * List of the intended recipients of the JWT. A valid JWT must provide an `aud` that matches at least one entry in this list.\n     */\n    audiences: Input<Input<string>[]>;\n    /**\n     * Specifies where to extract the JWT from the request.\n     * @default `\"$request.header.Authorization\"`\n     */\n    identitySource?: Input<string>;\n  }>;\n  /**\n   * Create a Lambda authorizer that can be used by the routes.\n   *\n   * @example\n   * Configure Lambda auth.\n   *\n   * ```js\n   * {\n   *   lambda: {\n   *     function: \"src/authorizer.index\"\n   *   }\n   * }\n   * ```\n   */\n  lambda?: Input<{\n    /**\n     * The Lambda authorizer function. Takes the handler path or the function args.\n     * @example\n     * Add a simple authorizer.\n     *\n     * ```js\n     * {\n     *   function: \"src/authorizer.index\"\n     * }\n     * ```\n     *\n     * Customize the authorizer handler.\n     *\n     * ```js\n     * {\n     *   function: {\n     *     handler: \"src/authorizer.index\",\n     *     memory: \"2048 MB\"\n     *   }\n     * }\n     * ```\n     */\n    function: Input<string | FunctionArgs | FunctionArn>;\n    /**\n     * The JWT payload version.\n     * @default `\"2.0\"`\n     * @example\n     * ```js\n     * {\n     *   payload: \"2.0\"\n     * }\n     * ```\n     */\n    payload?: Input<\"1.0\" | \"2.0\">;\n    /**\n     * The response type.\n     * @default `\"simple\"`\n     * @example\n     * ```js\n     * {\n     *   response: \"iam\"\n     * }\n     * ```\n     */\n    response?: Input<\"simple\" | \"iam\">;\n    /**\n     * The time to live (TTL) for the authorizer.\n     * @default Not cached\n     * @example\n     * ```js\n     * {\n     *   ttl: \"300 seconds\"\n     * }\n     * ```\n     */\n    ttl?: Input<DurationHours>;\n    /**\n     * Specifies where to extract the identity from.\n     * @default `[\"$request.header.Authorization\"]`\n     * @example\n     * ```js\n     * {\n     *   identitySources: [\"$request.header.RequestToken\"]\n     * }\n     * ```\n     */\n    identitySources?: Input<Input<string>[]>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway authorizer resource.\n     */\n    authorizer?: Transform<apigatewayv2.AuthorizerArgs>;\n  };\n}\n\nexport interface ApiGatewayV2RouteArgs {\n  /**\n   * Enable auth for your HTTP API. By default, auth is disabled.\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   auth: {\n   *     iam: true\n   *   }\n   * }\n   * ```\n   */\n  auth?: Input<\n    | false\n    | {\n      /**\n       * Enable IAM authorization for a given API route. When IAM auth is enabled, clients\n       * need to use Signature Version 4 to sign their requests with their AWS credentials.\n       */\n      iam?: Input<boolean>;\n      /**\n       * Enable JWT or JSON Web Token authorization for a given API route. When JWT auth is enabled, clients need to include a valid JWT in their requests.\n       *\n       * @example\n       * You can configure JWT auth.\n       *\n       * ```js\n       * {\n       *   auth: {\n       *     jwt: {\n       *       authorizer: myAuthorizer.id,\n       *       scopes: [\"read:profile\", \"write:profile\"]\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * Where `myAuthorizer` is created by calling the `addAuthorizer` method.\n       */\n      jwt?: Input<{\n        /**\n         * Authorizer ID of the JWT authorizer.\n         */\n        authorizer: Input<string>;\n        /**\n         * Defines the permissions or access levels that the JWT grants. If the JWT does not have the required scope, the request is rejected. By default it does not require any scopes.\n         */\n        scopes?: Input<Input<string>[]>;\n      }>;\n      /**\n       * Enable custom Lambda authorization for a given API route. Pass in the authorizer ID.\n       *\n       * @example\n       * ```js\n       * {\n       *   auth: {\n       *     lambda: myAuthorizer.id\n       *   }\n       * }\n       * ```\n       *\n       * Where `myAuthorizer` is created by calling the `addAuthorizer` method.\n       */\n      lambda?: Input<string>;\n    }\n  >;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway HTTP API integration resource.\n     */\n    integration?: Transform<apigatewayv2.IntegrationArgs>;\n    /**\n     * Transform the API Gateway HTTP API route resource.\n     */\n    route?: Transform<apigatewayv2.RouteArgs>;\n  };\n}\n\n/**\n * The `ApiGatewayV2` component lets you add an [Amazon API Gateway HTTP API](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html) to your app.\n *\n * @example\n *\n * #### Create the API\n *\n * ```ts title=\"sst.config.ts\"\n * const api = new sst.aws.ApiGatewayV2(\"MyApi\");\n * ```\n *\n * #### Add a custom domain\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.ApiGatewayV2(\"MyApi\", {\n *   domain: \"api.example.com\"\n * });\n * ```\n *\n * #### Add routes\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"GET /\", \"src/get.handler\");\n * api.route(\"POST /\", \"src/post.handler\");\n * ```\n *\n * #### Configure the routes\n *\n * You can configure the route.\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"GET /\", \"src/get.handler\", {\n *   auth: { iam: true }\n * });\n * ```\n *\n * #### Configure the route handler\n *\n * You can configure the route handler function.\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"POST /\", {\n *   handler: \"src/post.handler\",\n *   memory: \"2048 MB\"\n * });\n * ```\n *\n * #### Default props for all routes\n *\n * You can use the `transform` to set some default props for all your routes. For example,\n * instead of setting the `memory` for each route.\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"GET /\", { handler: \"src/get.handler\", memory: \"2048 MB\" });\n * api.route(\"POST /\", { handler: \"src/post.handler\", memory: \"2048 MB\" });\n * ```\n *\n * You can set it through the `transform`.\n *\n * ```ts title=\"sst.config.ts\" {6}\n * const api = new sst.aws.ApiGatewayV2(\"MyApi\", {\n *   transform: {\n *     route: {\n *       handler: (args, opts) => {\n *         // Set the default if it's not set by the route\n *         args.memory ??= \"2048 MB\";\n *       }\n *     }\n *   }\n * });\n *\n * api.route(\"GET /\", \"src/get.handler\");\n * api.route(\"POST /\", \"src/post.handler\");\n * ```\n *\n * With this we set the `memory` if it's not overridden by the route.\n */\nexport class ApiGatewayV2 extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorArgs: ApiGatewayV2Args;\n  private constructorOpts: ComponentResourceOptions;\n  private api: apigatewayv2.Api;\n  private apigDomain?: Output<apigatewayv2.DomainName>;\n  private apiMapping?: Output<apigatewayv2.ApiMapping>;\n  private logGroup: cloudwatch.LogGroup;\n  private vpcLink?: apigatewayv2.VpcLink;\n\n  constructor(\n    name: string,\n    args: ApiGatewayV2Args = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const accessLog = normalizeAccessLog();\n    const domain = normalizeDomain();\n    const cors = normalizeCors();\n    const vpc = normalizeVpc();\n\n    const vpcLink = createVpcLink();\n    const api = createApi();\n    const logGroup = createLogGroup();\n    const stage = createStage();\n\n    const certificateArn = createSsl();\n    const apigDomain = createDomainName();\n    createDnsRecords();\n    const apiMapping = createDomainMapping();\n\n    this.constructorName = name;\n    this.constructorArgs = args;\n    this.constructorOpts = opts;\n    this.api = api;\n    this.apigDomain = apigDomain;\n    this.apiMapping = apiMapping;\n    this.logGroup = logGroup;\n    this.vpcLink = vpcLink;\n\n    this.registerOutputs({\n      _hint: this.url,\n    });\n\n    function normalizeAccessLog() {\n      return output(args.accessLog).apply((accessLog) => ({\n        ...accessLog,\n        retention: accessLog?.retention ?? \"1 month\",\n      }));\n    }\n\n    function normalizeDomain() {\n      if (!args.domain) return;\n\n      return output(args.domain).apply((domain) => {\n        // validate\n        if (typeof domain !== \"string\") {\n          if (domain.name && domain.nameId)\n            throw new VisibleError(\n              `Cannot configure both domain \"name\" and \"nameId\" for the \"${name}\" API.`,\n            );\n          if (!domain.name && !domain.nameId)\n            throw new VisibleError(\n              `Either domain \"name\" or \"nameId\" is required for the \"${name}\" API.`,\n            );\n          if (domain.dns === false && !domain.cert)\n            throw new VisibleError(\n              `Domain \"cert\" is required when \"dns\" is disabled for the \"${name}\" API.`,\n            );\n        }\n\n        // normalize\n        const norm = typeof domain === \"string\" ? { name: domain } : domain;\n        return {\n          name: norm.name,\n          nameId: norm.nameId,\n          path: norm.path,\n          dns: norm.dns === false ? undefined : norm.dns ?? awsDns(),\n          cert: norm.cert,\n        };\n      });\n    }\n\n    function normalizeCors() {\n      return output(args.cors).apply((cors) => {\n        if (cors === false) return {};\n\n        const defaultCors: types.input.apigatewayv2.ApiCorsConfiguration = {\n          allowHeaders: [\"*\"],\n          allowMethods: [\"*\"],\n          allowOrigins: [\"*\"],\n        };\n        return cors === true || cors === undefined\n          ? defaultCors\n          : {\n            ...defaultCors,\n            ...cors,\n            maxAge: cors.maxAge && toSeconds(cors.maxAge),\n          };\n      });\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is undefined\n      if (!args.vpc) return;\n\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        return {\n          subnets: args.vpc.publicSubnets,\n          securityGroups: args.vpc.securityGroups,\n        };\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc);\n    }\n\n    function createVpcLink() {\n      if (!vpc) return;\n\n      return new apigatewayv2.VpcLink(\n        ...transform(\n          args.transform?.vpcLink,\n          `${name}VpcLink`,\n          {\n            securityGroupIds: vpc.securityGroups,\n            subnetIds: vpc.subnets,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createApi() {\n      return new apigatewayv2.Api(\n        ...transform(\n          args.transform?.api,\n          `${name}Api`,\n          {\n            protocolType: \"HTTP\",\n            corsConfiguration: cors,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createLogGroup() {\n      return new cloudwatch.LogGroup(\n        ...transform(\n          args.transform?.logGroup,\n          `${name}AccessLog`,\n          {\n            name: `/aws/vendedlogs/apis/${physicalName(64, name)}`,\n            retentionInDays: accessLog.apply(\n              (accessLog) => RETENTION[accessLog.retention],\n            ),\n          },\n          { parent, ignoreChanges: [\"name\"] },\n        ),\n      );\n    }\n\n    function createStage() {\n      return new apigatewayv2.Stage(\n        ...transform(\n          args.transform?.stage,\n          `${name}Stage`,\n          {\n            apiId: api.id,\n            autoDeploy: true,\n            name: \"$default\",\n            accessLogSettings: {\n              destinationArn: logGroup.arn,\n              format: JSON.stringify({\n                // request info\n                requestTime: `\"$context.requestTime\"`,\n                requestId: `\"$context.requestId\"`,\n                httpMethod: `\"$context.httpMethod\"`,\n                path: `\"$context.path\"`,\n                routeKey: `\"$context.routeKey\"`,\n                status: `$context.status`, // integer value, do not wrap in quotes\n                responseLatency: `$context.responseLatency`, // integer value, do not wrap in quotes\n                // integration info\n                integrationRequestId: `\"$context.integration.requestId\"`,\n                integrationStatus: `\"$context.integration.status\"`,\n                integrationLatency: `\"$context.integration.latency\"`,\n                integrationServiceStatus: `\"$context.integration.integrationStatus\"`,\n                // caller info\n                ip: `\"$context.identity.sourceIp\"`,\n                userAgent: `\"$context.identity.userAgent\"`,\n                //cognitoIdentityId:`\"$context.identity.cognitoIdentityId\"`, // not supported in us-west-2 region\n              }),\n            },\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createSsl() {\n      if (!domain) return output(undefined);\n\n      return domain.apply((domain) => {\n        if (domain.cert) return output(domain.cert);\n        if (domain.nameId) return output(undefined);\n\n        return new DnsValidatedCertificate(\n          `${name}Ssl`,\n          {\n            domainName: domain.name!,\n            dns: domain.dns!,\n          },\n          { parent },\n        ).arn;\n      });\n    }\n\n    function createDomainName() {\n      if (!domain || !certificateArn) return;\n\n      return output(domain).apply((domain) => {\n        return domain.nameId\n          ? apigatewayv2.DomainName.get(\n            `${name}DomainName`,\n            domain.nameId,\n            {},\n            { parent },\n          )\n          : new apigatewayv2.DomainName(\n            ...transform(\n              args.transform?.domainName,\n              `${name}DomainName`,\n              {\n                domainName: domain.name!,\n                domainNameConfiguration: certificateArn.apply(\n                  (certificateArn) => ({\n                    certificateArn: certificateArn!,\n                    endpointType: \"REGIONAL\",\n                    securityPolicy: \"TLS_1_2\",\n                  }),\n                ),\n              },\n              { parent },\n            ),\n          );\n      });\n    }\n\n    function createDnsRecords(): void {\n      if (!domain || !apigDomain) return;\n\n      domain.apply((domain) => {\n        if (!domain.dns) return;\n        if (domain.nameId) return;\n\n        domain.dns.createAlias(\n          name,\n          {\n            name: domain.name!,\n            aliasName: apigDomain.domainNameConfiguration.targetDomainName,\n            aliasZone: apigDomain.domainNameConfiguration.hostedZoneId,\n          },\n          { parent },\n        );\n      });\n    }\n\n    function createDomainMapping() {\n      if (!domain || !apigDomain) return;\n\n      return domain.path?.apply(\n        (path) =>\n          new apigatewayv2.ApiMapping(\n            `${name}DomainMapping`,\n            {\n              apiId: api.id,\n              domainName: apigDomain.id,\n              stage: stage.name,\n              apiMappingKey: path,\n            },\n            { parent },\n          ),\n      );\n    }\n  }\n\n  /**\n   * The URL of the API.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated API Gateway URL.\n   */\n  public get url() {\n    // Note: If mapping key is set, the URL needs a trailing slash. Without the\n    //       trailing slash, the API fails with the error {\"message\":\"Not Found\"}\n    return this.apigDomain && this.apiMapping\n      ? all([this.apigDomain.domainName, this.apiMapping.apiMappingKey]).apply(\n        ([domain, key]) =>\n          key ? `https://${domain}/${key}/` : `https://${domain}`,\n      )\n      : this.api.apiEndpoint;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Amazon API Gateway HTTP API.\n       */\n      api: this.api,\n      /**\n       * The API Gateway HTTP API domain name.\n       */\n      get domainName() {\n        if (!self.apigDomain)\n          throw new VisibleError(\n            `\"nodes.domainName\" is not available when domain is not configured for the \"${self.constructorName}\" API.`,\n          );\n        return self.apigDomain;\n      },\n      /**\n       * The CloudWatch LogGroup for the access logs.\n       */\n      logGroup: this.logGroup,\n      /**\n       * The API Gateway HTTP API VPC link.\n       */\n      vpcLink: this.vpcLink,\n    };\n  }\n\n  /**\n   * Add a route to the API Gateway HTTP API. The route is a combination of\n   * - An HTTP method and a path, `{METHOD} /{path}`.\n   * - Or a `$default` route.\n   *\n   * :::tip\n   * The `$default` route is a default or catch-all route. It'll match if no other route matches.\n   * :::\n   *\n   * A method could be one of `GET`, `POST`, `PUT`, `DELETE`, `PATCH`, `HEAD`, `OPTIONS`, or `ANY`. Here `ANY` matches any HTTP method.\n   *\n   * The path can be a combination of\n   * - Literal segments, `/notes`, `/notes/new`, etc.\n   * - Parameter segments, `/notes/{noteId}`, `/notes/{noteId}/attachments/{attachmentId}`, etc.\n   * - Greedy segments, `/{proxy+}`, `/notes/{proxy+}`,  etc. The `{proxy+}` segment is a greedy segment that matches all child paths. It needs to be at the end of the path.\n   *\n   * :::tip\n   * The `{proxy+}` is a greedy segment, it matches all its child paths.\n   * :::\n   *\n   * The `$default` is a reserved keyword for the default route. It'll be matched\n   * if no other route matches. When a request comes in, the API Gateway will look\n   * for the most specific match. If no route matches, the `$default` route will\n   * be invoked.\n   *\n   * :::note\n   * You cannot have duplicate routes.\n   * :::\n   *\n   * @param rawRoute The path for the route.\n   * @param handler The function that'll be invoked.\n   * @param args Configure the route.\n   *\n   * @example\n   * Add a simple route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"src/get.handler\");\n   * ```\n   *\n   * Match any HTTP method.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"ANY /\", \"src/route.handler\");\n   * ```\n   *\n   * Add a default or fallback route. Here for every request other than `GET /`,\n   * the `$default` route will be invoked.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"src/get.handler\");\n   *\n   * api.route(\"$default\", \"src/default.handler\");\n   * ```\n   *\n   * Add a parameterized route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /notes/{id}\", \"src/get.handler\");\n   * ```\n   *\n   * Add a greedy route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /notes/{proxy+}\", \"src/greedy.handler\");\n   * ```\n   *\n   * Enable auth for a route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"src/get.handler\")\n   * api.route(\"POST /\", \"src/post.handler\", {\n   *   auth: {\n   *     iam: true\n   *   }\n   * });\n   * ```\n   *\n   * Customize the route handler.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", {\n   *   handler: \"src/get.handler\",\n   *   memory: \"2048 MB\"\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public route(\n    rawRoute: string,\n    handler: Input<string | FunctionArgs | FunctionArn>,\n    args: ApiGatewayV2RouteArgs = {},\n  ) {\n    const route = this.parseRoute(rawRoute);\n    const transformed = transform(\n      this.constructorArgs.transform?.route?.args,\n      this.buildRouteId(route),\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n    return new ApiGatewayV2LambdaRoute(\n      transformed[0],\n      {\n        api: {\n          name: this.constructorName,\n          id: this.api.id,\n          executionArn: this.api.executionArn,\n        },\n        route,\n        handler,\n        handlerLink: this.constructorArgs.link,\n        handlerTransform: this.constructorArgs.transform?.route?.handler,\n        ...transformed[1],\n      },\n      transformed[2],\n    );\n  }\n\n  /**\n   * Add a URL route to the API Gateway HTTP API.\n   *\n   * @param rawRoute The path for the route.\n   * @param url The URL to forward to.\n   * @param args Configure the route.\n   *\n   * @example\n   * Add a simple route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.routeUrl(\"GET /\", \"https://google.com\");\n   * ```\n   *\n   * Enable auth for a route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.routeUrl(\"POST /\", \"https://google.com\", {\n   *   auth: {\n   *     iam: true\n   *   }\n   * });\n   * ```\n   */\n  public routeUrl(\n    rawRoute: string,\n    url: Input<string>,\n    args: ApiGatewayV2RouteArgs = {},\n  ) {\n    const route = this.parseRoute(rawRoute);\n    const transformed = transform(\n      this.constructorArgs.transform?.route?.args,\n      this.buildRouteId(route),\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n    return new ApiGatewayV2UrlRoute(\n      transformed[0],\n      {\n        api: {\n          name: this.constructorName,\n          id: this.api.id,\n          executionArn: this.api.executionArn,\n        },\n        route,\n        url,\n        ...transformed[1],\n      },\n      transformed[2],\n    );\n  }\n\n  /**\n   * Adds a private route to the API Gateway HTTP API.\n   *\n   * To add private routes, you need to have a VPC link. Make sure to pass in a `vpc`.\n   * Learn more about [adding private routes](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-integrations-private.html).\n   *\n   * :::tip\n   * You need to pass `vpc` to add a private route.\n   * :::\n   *\n   * A couple of things to note:\n   *\n   * 1. Your API Gateway HTTP API also needs to be in the **same VPC** as the service.\n   *\n   * 2. You also need to verify that your VPC's [**availability zones support VPC link**](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vpc-links.html#http-api-vpc-link-availability).\n   *\n   * 3. Run `aws ec2 describe-availability-zones` to get a list of AZs for your\n   *    account.\n   *\n   * 4. Only list the AZ ID's that support VPC link.\n   *    ```ts title=\"sst.config.ts\" {4}\n   *    vpc: {\n   *      az: [\"eu-west-3a\", \"eu-west-3c\"]\n   *    }\n   *    ```\n   *    If the VPC picks an AZ automatically that doesn't support VPC link, you'll get\n   *    the following error:\n   *    ```\n   *    operation error ApiGatewayV2: BadRequestException: Subnet is in Availability\n   *    Zone 'euw3-az2' where service is not available\n   *    ```\n   *\n   * @param rawRoute The path for the route.\n   * @param arn The ARN of the AWS Load Balancer or Cloud Map service.\n   * @param args Configure the route.\n   *\n   * @example\n   * Here are a few examples using the private route. Add a route to Application Load Balancer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const loadBalancerArn = \"arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188\";\n   * api.routePrivate(\"GET /\", loadBalancerArn);\n   * ```\n   *\n   * Add a route to AWS Cloud Map service.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const serviceArn = \"arn:aws:servicediscovery:us-east-2:123456789012:service/srv-id?stage=prod&deployment=green_deployment\";\n   * api.routePrivate(\"GET /\", serviceArn);\n   * ```\n   *\n   * Enable IAM authentication for a route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.routePrivate(\"GET /\", serviceArn, {\n   *   auth: {\n   *     iam: true\n   *   }\n   * });\n   * ```\n   */\n  public routePrivate(\n    rawRoute: string,\n    arn: Input<string>,\n    args: ApiGatewayV2RouteArgs = {},\n  ) {\n    if (!this.vpcLink)\n      throw new VisibleError(\n        `To add private routes, you need to have a VPC link. Configure \"vpc\" for the \"${this.constructorName}\" API to create a VPC link.`,\n      );\n\n    const route = this.parseRoute(rawRoute);\n    const transformed = transform(\n      this.constructorArgs.transform?.route?.args,\n      this.buildRouteId(route),\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n    return new ApiGatewayV2PrivateRoute(\n      transformed[0],\n      {\n        api: {\n          name: this.constructorName,\n          id: this.api.id,\n          executionArn: this.api.executionArn,\n        },\n        route,\n        vpcLink: this.vpcLink.id,\n        arn,\n        ...transformed[1],\n      },\n      transformed[2],\n    );\n  }\n\n  private parseRoute(rawRoute: string) {\n    if (rawRoute.toLowerCase() === \"$default\") return \"$default\";\n\n    const parts = rawRoute.split(\" \");\n    if (parts.length !== 2) {\n      throw new VisibleError(\n        `Invalid route ${rawRoute}. A route must be in the format \"METHOD /path\".`,\n      );\n    }\n    const [methodRaw, path] = rawRoute.split(\" \");\n    const method = methodRaw.toUpperCase();\n    if (\n      ![\n        \"ANY\",\n        \"DELETE\",\n        \"GET\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"PATCH\",\n        \"POST\",\n        \"PUT\",\n      ].includes(method)\n    )\n      throw new VisibleError(\n        `Invalid method ${methodRaw} in route ${rawRoute}`,\n      );\n\n    if (!path.startsWith(\"/\"))\n      throw new VisibleError(\n        `Invalid path ${path} in route ${rawRoute}. Path must start with \"/\".`,\n      );\n\n    return `${method} ${path}`;\n  }\n\n  private buildRouteId(route: string) {\n    const suffix = logicalName(\n      hashStringToPrettyString([outputId, route].join(\"\"), 6),\n    );\n    return `${this.constructorName}Route${suffix}`;\n  }\n\n  /**\n   * Add an authorizer to the API Gateway HTTP API.\n   *\n   * @param args Configure the authorizer.\n   * @example\n   * Add a Lambda authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addAuthorizer({\n   *   name: \"myAuthorizer\",\n   *   lambda: {\n   *     function: \"src/authorizer.index\"\n   *   }\n   * });\n   * ```\n   *\n   * Add a JWT authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const authorizer = api.addAuthorizer({\n   *   name: \"myAuthorizer\",\n   *   jwt: {\n   *     issuer: \"https://issuer.com/\",\n   *     audiences: [\"https://api.example.com\"],\n   *     identitySource: \"$request.header.AccessToken\"\n   *   }\n   * });\n   * ```\n   *\n   * Add a Cognito UserPool as a JWT authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const pool = new sst.aws.CognitoUserPool(\"MyUserPool\");\n   * const poolClient = userPool.addClient(\"Web\");\n   *\n   * const authorizer = api.addAuthorizer({\n   *   name: \"myCognitoAuthorizer\",\n   *   jwt: {\n   *     issuer: $interpolate`https://cognito-idp.${aws.getRegionOutput().name}.amazonaws.com/${pool.id}`,\n   *     audiences: [poolClient.id]\n   *   }\n   * });\n   * ```\n   *\n   * Now you can use the authorizer in your routes.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"src/get.handler\", {\n   *   auth: {\n   *     jwt: {\n   *       authorizer: authorizer.id\n   *     }\n   *   }\n   * });\n   * ```\n   */\n  public addAuthorizer(args: ApiGatewayV2AuthorizerArgs) {\n    const self = this;\n    const selfName = this.constructorName;\n    const nameSuffix = logicalName(args.name);\n\n    return new ApiGatewayV2Authorizer(\n      `${selfName}Authorizer${nameSuffix}`,\n      {\n        api: {\n          id: self.api.id,\n          name: selfName,\n          executionArn: this.api.executionArn,\n        },\n        type: \"http\",\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV2\";\n// @ts-expect-error\nApiGatewayV2.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { apigatewayv2, lambda } from \"@pulumi/aws\";\nimport {\n  ApiGatewayV2BaseRouteArgs,\n  createApiRoute,\n} from \"./apigatewayv2-base-route\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\n\nexport interface Args extends ApiGatewayV2BaseRouteArgs {\n  /**\n   * The route function.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  handler: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * The resources to link to the route function.\n   */\n  handlerLink?: FunctionArgs[\"link\"];\n  /**\n   * @internal\n   */\n  handlerTransform?: Transform<FunctionArgs>;\n}\n\n/**\n * The `ApiGatewayV2LambdaRoute` component is internally used by the `ApiGatewayV2` component\n * to add routes to your [API Gateway HTTP API](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `route` method of the `ApiGatewayV2` component.\n */\nexport class ApiGatewayV2LambdaRoute extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly permission: lambda.Permission;\n  private readonly apiRoute: Output<apigatewayv2.Route>;\n  private readonly integration: apigatewayv2.Integration;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const api = output(args.api);\n    const route = output(args.route);\n\n    const fn = createFunction();\n    const permission = createPermission();\n    const integration = createIntegration();\n    const apiRoute = createApiRoute(name, args, integration.id, self);\n\n    this.fn = fn;\n    this.permission = permission;\n    this.apiRoute = apiRoute;\n    this.integration = integration;\n\n    function createFunction() {\n      return functionBuilder(\n        `${name}Handler`,\n        args.handler,\n        {\n          description: interpolate`${api.name} route ${route}`,\n          link: args.handlerLink,\n        },\n        args.handlerTransform,\n        { parent: self },\n      );\n    }\n\n    function createPermission() {\n      return new lambda.Permission(\n        `${name}Permissions`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"apigateway.amazonaws.com\",\n          sourceArn: interpolate`${api.executionArn}/*`,\n        },\n        { parent: self },\n      );\n    }\n\n    function createIntegration() {\n      return new apigatewayv2.Integration(\n        ...transform(\n          args.transform?.integration,\n          `${name}Integration`,\n          {\n            apiId: api.id,\n            integrationType: \"AWS_PROXY\",\n            integrationUri: fn.arn,\n            payloadFormatVersion: \"2.0\",\n          },\n          { parent: self, dependsOn: [permission] },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda permission.\n       */\n      permission: this.permission,\n      /**\n       * The API Gateway HTTP API route.\n       */\n      route: this.apiRoute,\n      /**\n       * The API Gateway HTTP API integration.\n       */\n      integration: this.integration,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV2LambdaRoute\";\n// @ts-expect-error\nApiGatewayV2LambdaRoute.__pulumiType = __pulumiType;\n", "import { Input, Output, interpolate, output } from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { ApiGatewayV2RouteArgs } from \"./apigatewayv2\";\nimport { apigatewayv2 } from \"@pulumi/aws\";\n\nexport interface ApiGatewayV2BaseRouteArgs extends ApiGatewayV2RouteArgs {\n  /**\n   * The API Gateway to use for the route.\n   */\n  api: Input<{\n    /**\n     * The name of the API Gateway.\n     */\n    name: Input<string>;\n    /**\n     * The ID of the API Gateway.\n     */\n    id: Input<string>;\n    /**\n     * The execution ARN of the API Gateway.\n     */\n    executionArn: Input<string>;\n  }>;\n  /**\n   * The path for the route.\n   */\n  route: Input<string>;\n}\n\nexport function createApiRoute(\n  name: string,\n  args: ApiGatewayV2BaseRouteArgs,\n  integrationId: Output<string>,\n  parent: Component,\n) {\n  const authArgs = output(args.auth).apply((auth) => {\n    if (!auth) return { authorizationType: \"NONE\" };\n    if (auth.iam) return { authorizationType: \"AWS_IAM\" };\n    if (auth.lambda)\n      return {\n        authorizationType: \"CUSTOM\",\n        authorizerId: auth.lambda,\n      };\n    if (auth.jwt)\n      return {\n        authorizationType: \"JWT\",\n        authorizationScopes: auth.jwt.scopes,\n        authorizerId: auth.jwt.authorizer,\n      };\n    return { authorizationType: \"NONE\" };\n  });\n\n  return authArgs.apply(\n    (authArgs) =>\n      new apigatewayv2.Route(\n        ...transform(\n          args.transform?.route,\n          `${name}Route`,\n          {\n            apiId: output(args.api).id,\n            routeKey: args.route,\n            target: interpolate`integrations/${integrationId}`,\n            ...authArgs,\n          },\n          { parent },\n        ),\n      ),\n  );\n}\n", "import {\n  ComponentResourceOptions,\n  Input,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { ApiGatewayV2AuthorizerArgs } from \"./apigatewayv2\";\nimport { apigatewayv2, lambda } from \"@pulumi/aws\";\nimport { VisibleError } from \"../error\";\nimport { toSeconds } from \"../duration\";\nimport { functionBuilder } from \"./helpers/function-builder\";\n\nexport interface AuthorizerArgs extends ApiGatewayV2AuthorizerArgs {\n  /**\n   * The API Gateway to use for the route.\n   */\n  api: Input<{\n    /**\n     * The name of the API Gateway.\n     */\n    name: Input<string>;\n    /**\n     * The ID of the API Gateway.\n     */\n    id: Input<string>;\n    /**\n     * The execution ARN of the API Gateway.\n     */\n    executionArn: Input<string>;\n  }>;\n  /**\n   * The type of the API Gateway.\n   */\n  type: \"http\" | \"websocket\";\n}\n\n/**\n * The `ApiGatewayV2Authorizer` component is internally used by the `ApiGatewayV2` component\n * to add authorizers to [Amazon API Gateway HTTP API](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addAuthorizer` method of the `ApiGatewayV2` component.\n */\nexport class ApiGatewayV2Authorizer extends Component {\n  private readonly authorizer: apigatewayv2.Authorizer;\n\n  constructor(\n    name: string,\n    args: AuthorizerArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    const api = output(args.api);\n    const lamb = args.lambda && output(args.lambda);\n    const jwt = args.jwt && output(args.jwt);\n\n    validateSingleAuthorizer();\n    const fn = createFunction();\n    const authorizer = createAuthorizer();\n    createPermission();\n\n    this.authorizer = authorizer;\n\n    function validateSingleAuthorizer() {\n      const authorizers = [lamb, jwt].filter((e) => e);\n\n      if (authorizers.length === 0)\n        throw new VisibleError(\n          `Please provide one of \"lambda\" or \"jwt\" for the ${args.name} authorizer.`,\n        );\n\n      if (authorizers.length > 1)\n        throw new VisibleError(\n          `Please provide only one of \"lambda\" or \"jwt\" for the ${args.name} authorizer.`,\n        );\n    }\n\n    function createFunction() {\n      if (!lamb) return;\n\n      return functionBuilder(\n        `${name}Handler`,\n        lamb.function,\n        {\n          description: interpolate`${api.name} authorizer`,\n        },\n        undefined,\n        { parent: self },\n      );\n    }\n\n    function createAuthorizer() {\n      const defaultIdentitySource =\n        args.type === \"http\"\n          ? \"$request.header.Authorization\"\n          : \"route.request.header.Authorization\";\n\n      return new apigatewayv2.Authorizer(\n        ...transform(\n          args.transform?.authorizer,\n          `${name}Authorizer`,\n          {\n            apiId: api.id,\n            ...(lamb\n              ? {\n                  authorizerType: \"REQUEST\",\n                  identitySources: lamb.apply(\n                    (lamb) => lamb.identitySources ?? [defaultIdentitySource],\n                  ),\n                  authorizerUri: fn!.invokeArn,\n                  ...(args.type === \"http\"\n                    ? {\n                        authorizerResultTtlInSeconds: lamb.apply((lamb) =>\n                          toSeconds(lamb.ttl ?? \"0 seconds\"),\n                        ),\n                        authorizerPayloadFormatVersion: lamb.apply(\n                          (lamb) => lamb.payload ?? \"2.0\",\n                        ),\n                        enableSimpleResponses: lamb.apply(\n                          (lamb) => (lamb.response ?? \"simple\") === \"simple\",\n                        ),\n                      }\n                    : {}),\n                }\n              : {\n                  authorizerType: \"JWT\",\n                  identitySources: [\n                    jwt!.apply(\n                      (jwt) => jwt.identitySource ?? defaultIdentitySource,\n                    ),\n                  ],\n                  jwtConfiguration: jwt!.apply((jwt) => ({\n                    audiences: jwt.audiences,\n                    issuer: jwt.issuer,\n                  })),\n                }),\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createPermission() {\n      if (!fn) return;\n\n      return new lambda.Permission(\n        `${name}Permission`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"apigateway.amazonaws.com\",\n          sourceArn: interpolate`${api.executionArn}/authorizers/${authorizer.id}`,\n        },\n        { parent: self },\n      );\n    }\n  }\n\n  /**\n   * The ID of the authorizer.\n   */\n  public get id() {\n    return this.authorizer.id;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The API Gateway V2 authorizer.\n       */\n      authorizer: this.authorizer,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV2Authorizer\";\n// @ts-expect-error\nApiGatewayV2Authorizer.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { apigatewayv2 } from \"@pulumi/aws\";\nimport {\n  ApiGatewayV2BaseRouteArgs,\n  createApiRoute,\n} from \"./apigatewayv2-base-route\";\n\nexport interface Args extends ApiGatewayV2BaseRouteArgs {\n  /**\n   * The URL to route to.\n   * @example\n   * ```js\n   * {\n   *   url: \"https://example.com\"\n   * }\n   * ```\n   */\n  url: Input<string>;\n}\n\n/**\n * The `ApiGatewayV2UrlRoute` component is internally used by the `ApiGatewayV2` component\n * to add routes to [Amazon API Gateway HTTP API](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `routeUrl` method of the `ApiGatewayV2` component.\n */\nexport class ApiGatewayV2UrlRoute extends Component {\n  private readonly apiRoute: Output<apigatewayv2.Route>;\n  private readonly integration: apigatewayv2.Integration;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const api = output(args.api);\n\n    const integration = createIntegration();\n    const apiRoute = createApiRoute(name, args, integration.id, self);\n\n    this.apiRoute = apiRoute;\n    this.integration = integration;\n\n    function createIntegration() {\n      return new apigatewayv2.Integration(\n        ...transform(\n          args.transform?.integration,\n          `${name}Integration`,\n          {\n            apiId: api.id,\n            integrationType: \"HTTP_PROXY\",\n            integrationUri: args.url,\n            integrationMethod: \"ANY\",\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The API Gateway HTTP API route.\n       */\n      route: this.apiRoute,\n      /**\n       * The API Gateway HTTP API integration.\n       */\n      integration: this.integration,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV2UrlRoute\";\n// @ts-expect-error\nApiGatewayV2UrlRoute.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { apigatewayv2 } from \"@pulumi/aws\";\nimport {\n  ApiGatewayV2BaseRouteArgs,\n  createApiRoute,\n} from \"./apigatewayv2-base-route\";\n\nexport interface Args extends ApiGatewayV2BaseRouteArgs {\n  /**\n   * The ARN of the AWS Load Balancer or Cloud Map service.\n   * @example\n   * ```js\n   * {\n   *   arn: \"arn:aws:elasticloadbalancing:us-east-1:123456789012:loadbalancer/app/my-load-balancer/50dc6c495c0c9188\"\n   * }\n   * ```\n   */\n  arn: Input<string>;\n  /**\n   * The ID of the VPC link.\n   * @example\n   * ```js\n   * {\n   *   vpcLink: \"vpcl-0123456789abcdef\"\n   * }\n   * ```\n   */\n  vpcLink: Input<string>;\n}\n\n/**\n * The `ApiGatewayV2PrivateRoute` component is internally used by the `ApiGatewayV2` component\n * to add routes to [Amazon API Gateway HTTP API](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `routePrivate` method of the `ApiGatewayV2` component.\n */\nexport class ApiGatewayV2PrivateRoute extends Component {\n  private readonly apiRoute: Output<apigatewayv2.Route>;\n  private readonly integration: apigatewayv2.Integration;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const api = output(args.api);\n\n    const integration = createIntegration();\n    const apiRoute = createApiRoute(name, args, integration.id, self);\n\n    this.apiRoute = apiRoute;\n    this.integration = integration;\n\n    function createIntegration() {\n      return new apigatewayv2.Integration(\n        ...transform(\n          args.transform?.integration,\n          `${name}Integration`,\n          {\n            apiId: api.id,\n            connectionId: args.vpcLink,\n            connectionType: \"VPC_LINK\",\n            integrationType: \"HTTP_PROXY\",\n            integrationUri: args.arn,\n            integrationMethod: \"ANY\",\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The API Gateway HTTP API route.\n       */\n      route: this.apiRoute,\n      /**\n       * The API Gateway HTTP API integration.\n       */\n      integration: this.integration,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayV2PrivateRoute\";\n// @ts-expect-error\nApiGatewayV2PrivateRoute.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Output,\n  all,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport {\n  Component,\n  outputId,\n  Prettify,\n  Transform,\n  transform,\n} from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { hashStringToPrettyString, physicalName, logicalName } from \"../naming\";\nimport { DnsValidatedCertificate } from \"./dns-validated-certificate\";\nimport { RETENTION } from \"./logging\";\nimport { dns as awsDns } from \"./dns.js\";\nimport { ApiGatewayV2DomainArgs } from \"./helpers/apigatewayv2-domain\";\nimport { ApiGatewayV2Authorizer } from \"./apigatewayv2-authorizer\";\nimport { ApiGatewayWebSocketRoute } from \"./apigateway-websocket-route\";\nimport { setupApiGatewayAccount } from \"./helpers/apigateway-account\";\nimport { apigatewayv2, cloudwatch } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\nimport { VisibleError } from \"../error\";\n\nexport interface ApiGatewayWebSocketArgs {\n  /**\n   * Set a custom domain for your WebSocket API.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   */\n  domain?: Input<string | Prettify<ApiGatewayV2DomainArgs>>;\n  /**\n   * Configure the [API Gateway logs](https://docs.aws.amazon.com/apigateway/latest/developerguide/view-cloudwatch-log-events-in-cloudwatch-console.html) in CloudWatch. By default, access logs are enabled and kept for 1 month.\n   * @default `{retention: \"1 month\"}`\n   * @example\n   * ```js\n   * {\n   *   accessLog: {\n   *     retention: \"forever\"\n   *   }\n   * }\n   * ```\n   */\n  accessLog?: Input<{\n    /**\n     * The duration the API Gateway logs are kept in CloudWatch.\n     * @default `1 month`\n     */\n    retention?: Input<keyof typeof RETENTION>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway WebSocket API resource.\n     */\n    api?: Transform<apigatewayv2.ApiArgs>;\n    /**\n     * Transform the API Gateway WebSocket API stage resource.\n     */\n    stage?: Transform<apigatewayv2.StageArgs>;\n    /**\n     * Transform the API Gateway WebSocket API domain name resource.\n     */\n    domainName?: Transform<apigatewayv2.DomainNameArgs>;\n    /**\n     * Transform the CloudWatch LogGroup resource used for access logs.\n     */\n    accessLog?: Transform<cloudwatch.LogGroupArgs>;\n    /**\n     * Transform the routes. This can be used to customize the handler function and\n     * the arguments for each route.\n     *\n     * @example\n     * ```js\n     * {\n     *   transform: {\n     *     route: {\n     *       handler: {\n     *         link: [bucket, stripeKey]\n     *       },\n     *       args: {\n     *         auth: { iam: true }\n     *       }\n     *     }\n     *   }\n     * }\n     * ```\n     */\n    route?: {\n      /**\n       * Transform the handler function for the route.\n       */\n      handler?: Transform<FunctionArgs>;\n      /**\n       * Transform the arguments for the route.\n       */\n      args?: Transform<ApiGatewayWebSocketRouteArgs>;\n    };\n  };\n}\n\nexport interface ApiGatewayWebSocketAuthorizerArgs {\n  /**\n   * Create a JWT or JSON Web Token authorizer that can be used by the routes.\n   *\n   * @example\n   * Configure JWT auth.\n   *\n   * ```js\n   * {\n   *   jwt: {\n   *     issuer: \"https://issuer.com/\",\n   *     audiences: [\"https://api.example.com\"],\n   *     identitySource: \"$request.header.AccessToken\"\n   *   }\n   * }\n   * ```\n   *\n   * You can also use Cognito as the identity provider.\n   *\n   * ```js\n   * {\n   *   jwt: {\n   *     audiences: [userPoolClient.id],\n   *     issuer: $interpolate`https://cognito-idp.${aws.getArnOutput(userPool).region}.amazonaws.com/${userPool.id}`,\n   *   }\n   * }\n   * ```\n   *\n   * Where `userPool` and `userPoolClient` are:\n   *\n   * ```js\n   * const userPool = new aws.cognito.UserPool();\n   * const userPoolClient = new aws.cognito.UserPoolClient();\n   * ```\n   */\n  jwt?: Input<{\n    /**\n     * Base domain of the identity provider that issues JSON Web Tokens.\n     * @example\n     * ```js\n     * {\n     *   issuer: \"https://issuer.com/\"\n     * }\n     * ```\n     */\n    issuer: Input<string>;\n    /**\n     * List of the intended recipients of the JWT. A valid JWT must provide an `aud` that matches at least one entry in this list.\n     */\n    audiences: Input<Input<string>[]>;\n    /**\n     * Specifies where to extract the JWT from the request.\n     * @default `\"route.request.header.Authorization\"`\n     */\n    identitySource?: Input<string>;\n  }>;\n  /**\n   * Create a Lambda authorizer that can be used by the routes.\n   *\n   * @example\n   * Configure Lambda auth.\n   *\n   * ```js\n   * {\n   *   lambda: {\n   *     function: \"src/authorizer.index\"\n   *   }\n   * }\n   * ```\n   */\n  lambda?: Input<{\n    /**\n     * The Lambda authorizer function. Takes the handler path or the function args.\n     * @example\n     * Add a simple authorizer.\n     *\n     * ```js\n     * {\n     *   function: \"src/authorizer.index\"\n     * }\n     * ```\n     *\n     * Customize the authorizer handler.\n     *\n     * ```js\n     * {\n     *   function: {\n     *     handler: \"src/authorizer.index\",\n     *     memory: \"2048 MB\"\n     *   }\n     * }\n     * ```\n     */\n    function: Input<string | FunctionArgs>;\n    /**\n     * The JWT payload version.\n     * @default `\"2.0\"`\n     * @example\n     * ```js\n     * {\n     *   payload: \"2.0\"\n     * }\n     * ```\n     */\n    payload?: Input<\"1.0\" | \"2.0\">;\n    /**\n     * The response type.\n     * @default `\"simple\"`\n     * @example\n     * ```js\n     * {\n     *   response: \"iam\"\n     * }\n     * ```\n     */\n    response?: Input<\"simple\" | \"iam\">;\n    /**\n     * Specifies where to extract the identity from.\n     * @default `[\"route.request.header.Authorization\"]`\n     * @example\n     * ```js\n     * {\n     *   identitySources: [\"$request.header.RequestToken\"]\n     * }\n     * ```\n     */\n    identitySources?: Input<Input<string>[]>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway authorizer resource.\n     */\n    authorizer?: Transform<apigatewayv2.AuthorizerArgs>;\n  };\n}\n\nexport interface ApiGatewayWebSocketRouteArgs {\n  /**\n   * Enable auth for your WebSocket API. By default, auth is disabled.\n   *\n   * @example\n   * ```js\n   * {\n   *   auth: {\n   *     iam: true\n   *   }\n   * }\n   * ```\n   */\n  auth?: Input<\n    | false\n    | {\n      /**\n       * Enable IAM authorization for a given API route. When IAM auth is enabled, clients\n       * need to use Signature Version 4 to sign their requests with their AWS credentials.\n       */\n      iam?: Input<boolean>;\n      /**\n       * Enable JWT or JSON Web Token authorization for a given API route. When JWT auth is enabled, clients need to include a valid JWT in their requests.\n       *\n       * @example\n       * You can configure JWT auth.\n       *\n       * ```js\n       * {\n       *   auth: {\n       *     jwt: {\n       *       authorizer: myAuthorizer.id,\n       *       scopes: [\"read:profile\", \"write:profile\"]\n       *     }\n       *   }\n       * }\n       * ```\n       *\n       * Where `myAuthorizer` is created by calling the `addAuthorizer` method.\n       */\n      jwt?: Input<{\n        /**\n         * Authorizer ID of the JWT authorizer.\n         */\n        authorizer: Input<string>;\n        /**\n         * Defines the permissions or access levels that the JWT grants. If the JWT does not have the required scope, the request is rejected. By default it does not require any scopes.\n         */\n        scopes?: Input<Input<string>[]>;\n      }>;\n      /**\n       * Enable custom Lambda authorization for a given API route. Pass in the authorizer ID.\n       *\n       * @example\n       * ```js\n       * {\n       *   auth: {\n       *     lambda: myAuthorizer.id\n       *   }\n       * }\n       * ```\n       *\n       * Where `myAuthorizer` is created by calling the `addAuthorizer` method.\n       */\n      lambda?: Input<string>;\n    }\n  >;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the API Gateway WebSocket API integration resource.\n     */\n    integration?: Transform<apigatewayv2.IntegrationArgs>;\n    /**\n     * Transform the API Gateway WebSocket API route resource.\n     */\n    route?: Transform<apigatewayv2.RouteArgs>;\n  };\n}\n\n/**\n * The `ApiGatewayWebSocket` component lets you add an [Amazon API Gateway WebSocket API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html)\n * to your app.\n *\n * @example\n *\n * #### Create the API\n *\n * ```ts title=\"sst.config.ts\"\n * const api = new sst.aws.ApiGatewayWebSocket(\"MyApi\");\n * ```\n *\n * #### Add a custom domain\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.ApiGatewayWebSocket(\"MyApi\", {\n *   domain: \"api.example.com\"\n * });\n * ```\n *\n * #### Add routes\n *\n * ```ts title=\"sst.config.ts\"\n * api.route(\"$connect\", \"src/connect.handler\");\n * api.route(\"$disconnect\", \"src/disconnect.handler\");\n * api.route(\"$default\", \"src/default.handler\");\n * api.route(\"sendMessage\", \"src/sendMessage.handler\");\n * ```\n */\nexport class ApiGatewayWebSocket extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorArgs: ApiGatewayWebSocketArgs;\n  private constructorOpts: ComponentResourceOptions;\n  private api: apigatewayv2.Api;\n  private stage: apigatewayv2.Stage;\n  private apigDomain?: Output<apigatewayv2.DomainName>;\n  private apiMapping?: Output<apigatewayv2.ApiMapping>;\n  private logGroup: cloudwatch.LogGroup;\n\n  constructor(\n    name: string,\n    args: ApiGatewayWebSocketArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const accessLog = normalizeAccessLog();\n    const domain = normalizeDomain();\n\n    const apigAccount = setupApiGatewayAccount(name, opts);\n    const api = createApi();\n    const logGroup = createLogGroup();\n    const stage = createStage();\n\n    const certificateArn = createSsl();\n    const apigDomain = createDomainName();\n    createDnsRecords();\n    const apiMapping = createDomainMapping();\n\n    this.constructorName = name;\n    this.constructorArgs = args;\n    this.constructorOpts = opts;\n    this.api = api;\n    this.stage = stage;\n    this.apigDomain = apigDomain;\n    this.apiMapping = apiMapping;\n    this.logGroup = logGroup;\n\n    this.registerOutputs({\n      _hint: this.url,\n    });\n\n    function normalizeAccessLog() {\n      return output(args.accessLog).apply((accessLog) => ({\n        ...accessLog,\n        retention: accessLog?.retention ?? \"1 month\",\n      }));\n    }\n\n    function normalizeDomain() {\n      if (!args.domain) return;\n\n      return output(args.domain).apply((domain) => {\n        // validate\n        if (typeof domain !== \"string\") {\n          if (domain.name && domain.nameId)\n            throw new VisibleError(\n              `Cannot configure both domain \"name\" and \"nameId\" for the \"${name}\" API.`,\n            );\n          if (!domain.name && !domain.nameId)\n            throw new VisibleError(\n              `Either domain \"name\" or \"nameId\" is required for the \"${name}\" API.`,\n            );\n          if (domain.dns === false && !domain.cert)\n            throw new VisibleError(\n              `Domain \"cert\" is required when \"dns\" is disabled for the \"${name}\" API.`,\n            );\n        }\n\n        // normalize\n        const norm = typeof domain === \"string\" ? { name: domain } : domain;\n        return {\n          name: norm.name,\n          nameId: norm.nameId,\n          path: norm.path,\n          dns: norm.dns === false ? undefined : norm.dns ?? awsDns(),\n          cert: norm.cert,\n        };\n      });\n    }\n\n    function createApi() {\n      return new apigatewayv2.Api(\n        ...transform(\n          args.transform?.api,\n          `${name}Api`,\n          {\n            protocolType: \"WEBSOCKET\",\n            routeSelectionExpression: \"$request.body.action\",\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createLogGroup() {\n      return new cloudwatch.LogGroup(\n        ...transform(\n          args.transform?.accessLog,\n          `${name}AccessLog`,\n          {\n            name: `/aws/vendedlogs/apis/${physicalName(64, name)}`,\n            retentionInDays: accessLog.apply(\n              (accessLog) => RETENTION[accessLog.retention],\n            ),\n          },\n          { parent, ignoreChanges: [\"name\"] },\n        ),\n      );\n    }\n\n    function createStage() {\n      return new apigatewayv2.Stage(\n        ...transform(\n          args.transform?.stage,\n          `${name}Stage`,\n          {\n            apiId: api.id,\n            autoDeploy: true,\n            name: \"$default\",\n            accessLogSettings: {\n              destinationArn: logGroup.arn,\n              format: JSON.stringify({\n                // request info\n                requestTime: `\"$context.requestTime\"`,\n                requestId: `\"$context.requestId\"`,\n                eventType: `\"$context.eventType\"`,\n                routeKey: `\"$context.routeKey\"`,\n                status: `$context.status`, // integer value, do not wrap in quotes\n                // integration info\n                integrationRequestId: `\"$context.awsEndpointRequestId\"`,\n                integrationStatus: `\"$context.integrationStatus\"`,\n                integrationLatency: `\"$context.integrationLatency\"`,\n                integrationServiceStatus: `\"$context.integration.integrationStatus\"`,\n                // caller info\n                ip: `\"$context.identity.sourceIp\"`,\n                userAgent: `\"$context.identity.userAgent\"`,\n                //cognitoIdentityId:`\"$context.identity.cognitoIdentityId\"`, // not supported in us-west-2 region\n                connectedAt: `\"$context.connectedAt\"`,\n                connectionId: `\"$context.connectionId\"`,\n              }),\n            },\n          },\n          { parent, dependsOn: apigAccount },\n        ),\n      );\n    }\n\n    function createSsl() {\n      if (!domain) return output(undefined);\n\n      return domain.apply((domain) => {\n        if (domain.cert) return output(domain.cert);\n        if (domain.nameId) return output(undefined);\n\n        return new DnsValidatedCertificate(\n          `${name}Ssl`,\n          {\n            domainName: domain.name!,\n            dns: domain.dns!,\n          },\n          { parent },\n        ).arn;\n      });\n    }\n\n    function createDomainName() {\n      if (!domain || !certificateArn) return;\n\n      return all([domain, certificateArn]).apply(([domain, certificateArn]) => {\n        return domain.nameId\n          ? apigatewayv2.DomainName.get(\n            `${name}DomainName`,\n            domain.nameId,\n            {},\n            { parent },\n          )\n          : new apigatewayv2.DomainName(\n            ...transform(\n              args.transform?.domainName,\n              `${name}DomainName`,\n              {\n                domainName: domain.name!,\n                domainNameConfiguration: {\n                  certificateArn: certificateArn!,\n                  endpointType: \"REGIONAL\",\n                  securityPolicy: \"TLS_1_2\",\n                },\n              },\n              { parent },\n            ),\n          );\n      });\n    }\n\n    function createDnsRecords(): void {\n      if (!domain || !apigDomain) return;\n\n      domain.apply((domain) => {\n        if (!domain.dns) return;\n        if (domain.nameId) return;\n\n        domain.dns.createAlias(\n          name,\n          {\n            name: domain.name!,\n            aliasName: apigDomain.domainNameConfiguration.targetDomainName,\n            aliasZone: apigDomain.domainNameConfiguration.hostedZoneId,\n          },\n          { parent },\n        );\n      });\n    }\n\n    function createDomainMapping() {\n      if (!domain || !apigDomain) return;\n\n      return domain.path?.apply(\n        (path) =>\n          new apigatewayv2.ApiMapping(\n            `${name}DomainMapping`,\n            {\n              apiId: api.id,\n              domainName: apigDomain.id,\n              stage: \"$default\",\n              apiMappingKey: path,\n            },\n            { parent },\n          ),\n      );\n    }\n  }\n\n  /**\n   * The URL of the API.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated API Gateway URL.\n   */\n  public get url() {\n    // Note: If mapping key is set, the URL needs a trailing slash. Without the\n    //       trailing slash, the API fails with the error {\"message\":\"Not Found\"}\n    return this.apigDomain && this.apiMapping\n      ? all([this.apigDomain.domainName, this.apiMapping.apiMappingKey]).apply(\n        ([domain, key]) =>\n          key ? `wss://${domain}/${key}/` : `wss://${domain}`,\n      )\n      : interpolate`${this.api.apiEndpoint}/${this.stage.name}`;\n  }\n\n  /**\n   * The management endpoint for the API used by the API Gateway Management API client.\n   * This is useful for sending messages to connected clients.\n   *\n   * @example\n   * ```js\n   * import { Resource } from \"sst\";\n   * import { ApiGatewayManagementApiClient } from \"@aws-sdk/client-apigatewaymanagementapi\";\n   *\n   * const client = new ApiGatewayManagementApiClient({\n   *   endpoint: Resource.MyApi.managementEndpoint,\n   * });\n   * ```\n   */\n  public get managementEndpoint() {\n    // ie. https://v1lmfez2nj.execute-api.us-east-1.amazonaws.com/$default\n    return this.api.apiEndpoint.apply(\n      (endpoint) =>\n        interpolate`${endpoint.replace(\"wss\", \"https\")}/${this.stage.name}`,\n    );\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Amazon API Gateway V2 API.\n       */\n      api: this.api,\n      /**\n       * The API Gateway HTTP API domain name.\n       */\n      get domainName() {\n        if (!self.apigDomain)\n          throw new VisibleError(\n            `\"nodes.domainName\" is not available when domain is not configured for the \"${self.constructorName}\" API.`,\n          );\n        return self.apigDomain;\n      },\n      /**\n       * The CloudWatch LogGroup for the access logs.\n       */\n      logGroup: this.logGroup,\n    };\n  }\n\n  /**\n   * Add a route to the API Gateway WebSocket API.\n   *\n   * There are three predefined routes:\n   * - `$connect`: When the client connects to the API.\n   * - `$disconnect`: When the client or the server disconnects from the API.\n   * - `$default`: The default or catch-all route.\n   *\n   * In addition, you can create custom routes. When a request comes in, the API Gateway\n   * will look for the specific route defined by the user. If no route matches, the `$default`\n   * route will be invoked.\n   *\n   * @param route The path for the route.\n   * @param handler The function that'll be invoked.\n   * @param args Configure the route.\n   *\n   * @example\n   * Add a simple route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"sendMessage\", \"src/sendMessage.handler\");\n   * ```\n   *\n   * Add a predefined route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"$default\", \"src/default.handler\");\n   * ```\n   *\n   * Enable auth for a route.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"sendMessage\", \"src/sendMessage.handler\", {\n   *   auth: {\n   *     iam: true\n   *   }\n   * });\n   * ```\n   *\n   * Customize the route handler.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"sendMessage\", {\n   *   handler: \"src/sendMessage.handler\",\n   *   memory: \"2048 MB\"\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"sendMessage\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public route(\n    route: string,\n    handler: Input<string | FunctionArgs | FunctionArn>,\n    args: ApiGatewayWebSocketRouteArgs = {},\n  ) {\n    const prefix = this.constructorName;\n    const suffix = logicalName(\n      [\"$connect\", \"$disconnect\", \"$default\"].includes(route)\n        ? route\n        : hashStringToPrettyString(`${outputId}${route}`, 6),\n    );\n\n    const transformed = transform(\n      this.constructorArgs.transform?.route?.args,\n      `${prefix}Route${suffix}`,\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n\n    return new ApiGatewayWebSocketRoute(\n      transformed[0],\n      {\n        api: {\n          name: prefix,\n          id: this.api.id,\n          executionArn: this.api.executionArn,\n        },\n        route,\n        handler,\n        handlerTransform: this.constructorArgs.transform?.route?.handler,\n        ...transformed[1],\n      },\n      transformed[2],\n    );\n  }\n\n  /**\n   * Add an authorizer to the API Gateway WebSocket API.\n   *\n   * @param name The name of the authorizer.\n   * @param args Configure the authorizer.\n   *\n   * @example\n   * Add a Lambda authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addAuthorizer({\n   *   name: \"myAuthorizer\",\n   *   lambda: {\n   *     function: \"src/authorizer.index\"\n   *   }\n   * });\n   * ```\n   *\n   * Add a JWT authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const authorizer = api.addAuthorizer({\n   *   name: \"myAuthorizer\",\n   *   jwt: {\n   *     issuer: \"https://issuer.com/\",\n   *     audiences: [\"https://api.example.com\"],\n   *     identitySource: \"$request.header.AccessToken\"\n   *   }\n   * });\n   * ```\n   *\n   * Add a Cognito UserPool as a JWT authorizer.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const pool = new sst.aws.CognitoUserPool(\"MyUserPool\");\n   * const poolClient = userPool.addClient(\"Web\");\n   *\n   * const authorizer = api.addAuthorizer({\n   *   name: \"myCognitoAuthorizer\",\n   *   jwt: {\n   *     issuer: $interpolate`https://cognito-idp.${aws.getRegionOutput().name}.amazonaws.com/${pool.id}`,\n   *     audiences: [poolClient.id]\n   *   }\n   * });\n   * ```\n   *\n   * Now you can use the authorizer in your routes.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.route(\"GET /\", \"src/get.handler\", {\n   *   auth: {\n   *     jwt: {\n   *       authorizer: authorizer.id\n   *     }\n   *   }\n   * });\n   * ```\n   */\n  public addAuthorizer(name: string, args: ApiGatewayWebSocketAuthorizerArgs) {\n    const self = this;\n    const constructorName = this.constructorName;\n\n    return new ApiGatewayV2Authorizer(\n      `${constructorName}Authorizer${name}`,\n      {\n        api: {\n          id: self.api.id,\n          name: constructorName,\n          executionArn: this.api.executionArn,\n        },\n        type: \"websocket\",\n        name,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n        managementEndpoint: this.managementEndpoint,\n      },\n      include: [\n        permission({\n          actions: [\"execute-api:ManageConnections\"],\n          resources: [interpolate`${this.api.executionArn}/*/*/@connections/*`],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayWebSocket\";\n// @ts-expect-error\nApiGatewayWebSocket.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  all,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { ApiGatewayWebSocketRouteArgs } from \"./apigateway-websocket\";\nimport { apigatewayv2, lambda } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\n\nexport interface Args extends ApiGatewayWebSocketRouteArgs {\n  /**\n   * The API Gateway to use for the service.\n   */\n  api: Input<{\n    /**\n     * The name of the API Gateway.\n     */\n    name: Input<string>;\n    /**\n     * The ID of the API Gateway.\n     */\n    id: Input<string>;\n    /**\n     * The execution ARN of the API Gateway.\n     */\n    executionArn: Input<string>;\n  }>;\n  /**\n   * The path for the route.\n   */\n  route: Input<string>;\n  /**\n   * The function that\u2019ll be invoked.\n   */\n  handler: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * @internal\n   */\n  handlerTransform?: Transform<FunctionArgs>;\n}\n\n/**\n * The `ApiGatewayWebSocketRoute` component is internally used by the `ApiGatewayWebSocket`\n * component to add routes to your [API Gateway WebSocket API](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `route` method of the `ApiGatewayWebSocket` component.\n */\nexport class ApiGatewayWebSocketRoute extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly permission: lambda.Permission;\n  private readonly apiRoute: Output<apigatewayv2.Route>;\n  private readonly integration: apigatewayv2.Integration;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const api = output(args.api);\n    const route = output(args.route);\n\n    const fn = createFunction();\n    const permission = createPermission();\n    const integration = createIntegration();\n    const apiRoute = createApiRoute();\n\n    this.fn = fn;\n    this.permission = permission;\n    this.apiRoute = apiRoute;\n    this.integration = integration;\n\n    function createFunction() {\n      return functionBuilder(\n        `${name}Handler`,\n        args.handler,\n        {\n          description: interpolate`${api.name} route ${route}`,\n        },\n        args.handlerTransform,\n        { parent: self },\n      );\n    }\n\n    function createPermission() {\n      return new lambda.Permission(\n        `${name}Permissions`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"apigateway.amazonaws.com\",\n          sourceArn: interpolate`${api.executionArn}/*`,\n        },\n        { parent: self },\n      );\n    }\n\n    function createIntegration() {\n      return new apigatewayv2.Integration(\n        ...transform(\n          args.transform?.integration,\n          `${name}Integration`,\n          {\n            apiId: api.id,\n            integrationType: \"AWS_PROXY\",\n            integrationUri: fn.arn.apply((arn) => {\n              const [, partition, , region] = arn.split(\":\");\n              return `arn:${partition}:apigateway:${region}:lambda:path/2015-03-31/functions/${arn}/invocations`;\n            }),\n          },\n          { parent: self, dependsOn: [permission] },\n        ),\n      );\n    }\n\n    function createApiRoute() {\n      const authArgs = all([args.route, args.auth]).apply(([route, auth]) => {\n        if (route !== \"$connect\") return { authorizationType: \"NONE\" };\n        if (!auth) return { authorizationType: \"NONE\" };\n        if (auth.iam) return { authorizationType: \"AWS_IAM\" };\n        if (auth.lambda)\n          return {\n            authorizationType: \"CUSTOM\",\n            authorizerId: auth.lambda,\n          };\n        if (auth.jwt)\n          return {\n            authorizationType: \"JWT\",\n            authorizationScopes: auth.jwt.scopes,\n            authorizerId: auth.jwt.authorizer,\n          };\n        return { authorizationType: \"NONE\" };\n      });\n\n      return authArgs.apply(\n        (authArgs) =>\n          new apigatewayv2.Route(\n            ...transform(\n              args.transform?.route,\n              `${name}Route`,\n              {\n                apiId: api.id,\n                routeKey: route,\n                target: interpolate`integrations/${integration.id}`,\n                ...authArgs,\n              },\n              { parent: self },\n            ),\n          ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda permission.\n       */\n      permission: this.permission,\n      /**\n       * The API Gateway HTTP API route.\n       */\n      route: this.apiRoute,\n      /**\n       * The API Gateway HTTP API integration.\n       */\n      integration: this.integration,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:ApiGatewayWebSocketRoute\";\n// @ts-expect-error\nApiGatewayWebSocketRoute.__pulumiType = __pulumiType;\n", "import fs from \"fs/promises\";\nimport { ComponentResourceOptions, interpolate, output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { logicalName } from \"../naming\";\nimport { VisibleError } from \"../error\";\nimport { AppSyncDataSource } from \"./app-sync-data-source\";\nimport { AppSyncResolver } from \"./app-sync-resolver\";\nimport { AppSyncFunction } from \"./app-sync-function\";\nimport { dns as awsDns } from \"./dns.js\";\nimport { Dns } from \"../dns\";\nimport { DnsValidatedCertificate } from \"./dns-validated-certificate\";\nimport { useProvider } from \"./helpers/provider\";\nimport { appsync, iam } from \"@pulumi/aws\";\n\nexport interface AppSyncArgs {\n  /**\n   * Path to the GraphQL schema file. This path is relative to your `sst.config.ts`.\n   * @example\n   * ```js\n   * {\n   *   schema: \"schema.graphql\",\n   * }\n   * ```\n   */\n  schema: Input<string>;\n  /**\n   * Set a custom domain for your AppSync GraphQL API.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   */\n  domain?: Input<\n    | string\n    | {\n        /**\n         * The custom domain you want to use.\n         *\n         * @example\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\"\n         *   }\n         * }\n         * ```\n         *\n         * Can also include subdomains based on the current stage.\n         *\n         * ```js\n         * {\n         *   domain: {\n         *     name: `${$app.stage}.example.com`\n         *   }\n         * }\n         * ```\n         */\n        name: Input<string>;\n        /**\n         * The ARN of an ACM (AWS Certificate Manager) certificate that proves ownership of the\n         * domain. By default, a certificate is created and validated automatically.\n         *\n         * The certificate will be created in the `us-east-1` region as required by AWS AppSync.\n         * If you are creating your own certificate, you must also create it in `us-east-1`.\n         *\n         * :::tip\n         * You need to pass in a `cert` for domains that are not hosted on supported `dns` providers.\n         * :::\n         *\n         * To manually set up a domain on an unsupported provider, you'll need to:\n         *\n         * 1. [Validate that you own the domain](https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html) by creating an ACM certificate. You can either validate it by setting a DNS record or by verifying an email sent to the domain owner.\n         * 2. Once validated, set the certificate ARN as the `cert` and set `dns` to `false`.\n         * 3. Add the DNS records in your provider to point to the API Gateway URL.\n         *\n         * @example\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\",\n         *     dns: false,\n         *     cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n         *   }\n         * }\n         * ```\n         */\n        cert?: Input<string>;\n        /**\n         * The DNS provider to use for the domain. Defaults to the AWS.\n         *\n         * Takes an adapter that can create the DNS records on the provider. This can automate\n         * validating the domain and setting up the DNS routing.\n         *\n         * Supports Route 53, Cloudflare, and Vercel adapters. For other providers, you'll need\n         * to set `dns` to `false` and pass in a certificate validating ownership via `cert`.\n         *\n         * @default `sst.aws.dns`\n         *\n         * @example\n         *\n         * Specify the hosted zone ID for the Route 53 domain.\n         *\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\",\n         *     dns: sst.aws.dns({\n         *       zone: \"Z2FDTNDATAQYW2\"\n         *     })\n         *   }\n         * }\n         * ```\n         *\n         * Use a domain hosted on Cloudflare, needs the Cloudflare provider.\n         *\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\",\n         *     dns: sst.cloudflare.dns()\n         *   }\n         * }\n         * ```\n         *\n         * Use a domain hosted on Vercel, needs the Vercel provider.\n         *\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\",\n         *     dns: sst.vercel.dns()\n         *   }\n         * }\n         * ```\n         */\n        dns?: Input<false | (Dns & {})>;\n      }\n  >;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the AppSync GraphQL API resource.\n     */\n    api?: Transform<appsync.GraphQLApiArgs>;\n    /**\n     * Transform the AppSync domain name resource.\n     */\n    domainName?: Transform<appsync.DomainNameArgs>;\n  };\n}\n\nexport interface AppSyncDataSourceArgs {\n  /**\n   * The name of the data source.\n   * @example\n   * ```js\n   * {\n   *   name: \"lambdaDS\"\n   * }\n   * ```\n   */\n  name: string;\n  /**\n   * The handler for the Lambda function.\n   * @example\n   * ```js\n   * {\n   *   lambda: \"src/lambda.handler\"\n   * }\n   * ```\n   *\n   * You can pass in the full function props.\n   *\n   * ```js\n   * {\n   *   lambda: {\n   *     handler: \"src/lambda.handler\",\n   *     timeout: \"60 seconds\"\n   *   }\n   * }\n   * ```\n   *\n   * You can also pass in the function ARN.\n   *\n   * ```js\n   * {\n   *   lambda: \"arn:aws:lambda:us-east-1:123456789012:function:my-function\"\n   * }\n   * ```\n   */\n  lambda?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * The ARN for the DynamoDB table.\n   * @example\n   * ```js\n   * {\n   *   dynamodb: \"arn:aws:dynamodb:us-east-1:123456789012:table/my-table\"\n   * }\n   * ```\n   */\n  dynamodb?: Input<string>;\n  /**\n   * The ARN for the Elasticsearch domain.\n   * @example\n   * ```js\n   * {\n   *   elasticSearch: \"arn:aws:es:us-east-1:123456789012:domain/my-domain\"\n   * }\n   * ```\n   */\n  elasticSearch?: Input<string>;\n  /**\n   * The ARN for the EventBridge event bus.\n   * @example\n   * ```js\n   * {\n   *   eventBridge: \"arn:aws:events:us-east-1:123456789012:event-bus/my-event-bus\"\n   * }\n   * ```\n   */\n  eventBridge?: Input<string>;\n  /**\n   * The URL for the HTTP endpoint.\n   * @example\n   * ```js\n   * {\n   *   http: \"https://api.example.com\"\n   * }\n   * ```\n   */\n  http?: Input<string>;\n  /**\n   * The ARN for the OpenSearch domain.\n   * @example\n   * ```js\n   * {\n   *   openSearch: \"arn:aws:opensearch:us-east-1:123456789012:domain/my-domain\"\n   * }\n   * ```\n   */\n  openSearch?: Input<string>;\n  /**\n   * Configure the RDS data source.\n   * @example\n   * ```js\n   * {\n   *   rds: {\n   *     cluster: \"arn:aws:rds:us-east-1:123456789012:cluster:my-cluster\",\n   *     credentials: \"arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret\"\n   *   }\n   * }\n   * ```\n   */\n  rds?: Input<{\n    /**\n     * The ARN for the RDS cluster.\n     */\n    cluster: Input<string>;\n    /**\n     * The ARN for the credentials secret store.\n     */\n    credentials: Input<string>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the AppSync DataSource resource.\n     */\n    dataSource?: Transform<appsync.DataSourceArgs>;\n    /**\n     * Transform the AppSync DataSource service role resource.\n     */\n    serviceRole?: Transform<iam.RoleArgs>;\n  };\n}\n\nexport interface AppSyncResolverArgs {\n  /**\n   * The type of the resolver.\n   * @default `\"unit\"`\n   * @example\n   * ```js\n   * {\n   *   kind: \"pipeline\"\n   * }\n   * ```\n   */\n  kind?: Input<\"unit\" | \"pipeline\">;\n  /**\n   * The data source this resolver is using. This only applies for `unit` resolvers.\n   * @example\n   * ```js\n   * {\n   *   dataSource: \"lambdaDS\"\n   * }\n   * ```\n   */\n  dataSource?: Input<string>;\n  /**\n   * The functions this resolver is using. This only applies for `pipeline` resolvers.\n   * @example\n   * ```js\n   * {\n   *  functions: [\"myFunction1\", \"myFunction2\"]\n   * }\n   * ```\n   */\n  functions?: Input<Input<string>[]>;\n  /**\n   * The function code that contains the request and response functions.\n   * @example\n   * ```js\n   * {\n   *   code: fs.readFileSync(\"functions.js\")\n   * }\n   * ```\n   */\n  code?: Input<string>;\n  /**\n   * For `unit` resolvers, this is the request mapping template. And for `pipeline`\n   * resolvers, this is the before mapping template.\n   * @example\n   * ```js\n   * {\n   *   requestTemplate: `{\n   *     \"version\": \"2017-02-28\",\n   *     \"operation\": \"Scan\"\n   *   }`\n   * }\n   * ```\n   */\n  requestTemplate?: Input<string>;\n  /**\n   * For `unit` resolvers, this is the response mapping template. And for `pipeline`\n   * resolvers, this is the after mapping template.\n   * @example\n   * ```js\n   * {\n   *   responseTemplate: `{\n   *     \"users\": $utils.toJson($context.result.items)\n   *   }`\n   * }\n   * ```\n   */\n  responseTemplate?: Input<string>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the AppSync Resolver resource.\n     */\n    resolver?: Transform<appsync.ResolverArgs>;\n  };\n}\n\nexport interface AppSyncFunctionArgs {\n  /**\n   * The name of the AppSync function.\n   * @example\n   * ```js\n   * {\n   *   name: \"myFunction\"\n   * }\n   * ```\n   */\n  name: string;\n  /**\n   * The data source this resolver is using.\n   * @example\n   * ```js\n   * {\n   *   dataSource: \"lambdaDS\"\n   * }\n   * ```\n   */\n  dataSource: Input<string>;\n  /**\n   * The function code that contains the request and response functions.\n   * @example\n   * ```js\n   * {\n   *   code: fs.readFileSync(\"functions.js\")\n   * }\n   * ```\n   */\n  code?: Input<string>;\n  /**\n   * The function request mapping template.\n   * @example\n   * ```js\n   * {\n   *   requestTemplate: `{\n   *     \"version\": \"2018-05-29\",\n   *     \"operation\": \"Scan\",\n   *   }`,\n   * }\n   * ```\n   */\n  requestMappingTemplate?: Input<string>;\n  /**\n   * The function response mapping template.\n   * @example\n   * ```js\n   * {\n   *   responseTemplate: `{\n   *     \"users\": $utils.toJson($context.result.items)\n   *   }`,\n   * }\n   * ```\n   */\n  responseMappingTemplate?: Input<string>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the AppSync Function resource.\n     */\n    function?: Transform<appsync.FunctionArgs>;\n  };\n}\n\n/**\n * The `AppSync` component lets you add an [Amazon AppSync GraphQL API](https://docs.aws.amazon.com/appsync/latest/devguide/what-is-appsync.html) to your app.\n *\n * @example\n *\n * #### Create a GraphQL API\n *\n * ```ts title=\"sst.config.ts\"\n * const api = new sst.aws.AppSync(\"MyApi\", {\n *   schema: \"schema.graphql\",\n * });\n * ```\n *\n * #### Add a data source\n *\n * ```ts title=\"sst.config.ts\"\n * const lambdaDS = api.addDataSource({\n *   name: \"lambdaDS\",\n *   lambda: \"src/lambda.handler\",\n * });\n * ```\n *\n * #### Add a resolver\n *\n * ```ts title=\"sst.config.ts\"\n * api.addResolver(\"Query user\", {\n *   dataSource: lambdaDS.name,\n * });\n * ```\n */\nexport class AppSync extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private api: appsync.GraphQLApi;\n  private domainName?: appsync.DomainName;\n\n  constructor(\n    name: string,\n    args: AppSyncArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const domain = normalizeDomain();\n\n    const schema = loadSchema();\n    const api = createGraphQLApi();\n    const certificateArn = createSsl();\n    const domainName = createDomainName();\n    createDnsRecords();\n\n    this.constructorName = name;\n    this.constructorOpts = opts;\n    this.api = api;\n    this.domainName = domainName;\n\n    this.registerOutputs({ _hint: this.url });\n\n    function normalizeDomain() {\n      if (!args.domain) return;\n\n      // validate\n      output(args.domain).apply((domain) => {\n        if (typeof domain === \"string\") return;\n\n        if (!domain.name) throw new Error(`Missing \"name\" for domain.`);\n        if (domain.dns === false && !domain.cert)\n          throw new Error(\n            `Need to provide a validated certificate via \"cert\" when DNS is disabled`,\n          );\n      });\n\n      // normalize\n      return output(args.domain).apply((domain) => {\n        const norm = typeof domain === \"string\" ? { name: domain } : domain;\n\n        return {\n          name: norm.name,\n          dns: norm.dns === false ? undefined : norm.dns ?? awsDns(),\n          cert: norm.cert,\n        };\n      });\n    }\n\n    function loadSchema() {\n      return output(args.schema).apply(async (schema) =>\n        fs.readFile(schema, { encoding: \"utf-8\" }),\n      );\n    }\n\n    function createGraphQLApi() {\n      return new appsync.GraphQLApi(\n        ...transform(\n          args.transform?.api,\n          `${name}Api`,\n          {\n            schema,\n            authenticationType: \"API_KEY\",\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createSsl() {\n      if (!domain) return;\n\n      return domain.apply((domain) => {\n        if (domain.cert) return output(domain.cert);\n\n        // Certificates used for AppSync are required to be created in the us-east-1 region\n        return new DnsValidatedCertificate(\n          `${name}Ssl`,\n          {\n            domainName: domain.name,\n            dns: domain.dns!,\n          },\n          { parent, provider: useProvider(\"us-east-1\") },\n        ).arn;\n      });\n    }\n\n    function createDomainName() {\n      if (!domain || !certificateArn) return;\n\n      const domainName = new appsync.DomainName(\n        ...transform(\n          args.transform?.domainName,\n          `${name}DomainName`,\n          {\n            domainName: domain?.name,\n            certificateArn,\n          },\n          { parent },\n        ),\n      );\n\n      new appsync.DomainNameApiAssociation(`${name}DomainAssociation`, {\n        apiId: api.id,\n        domainName: domainName.domainName,\n      });\n\n      return domainName;\n    }\n\n    function createDnsRecords() {\n      if (!domain || !domainName) return;\n\n      domain.apply((domain) => {\n        if (!domain.dns) return;\n\n        domain.dns.createAlias(\n          name,\n          {\n            name: domain.name,\n            aliasName: domainName.appsyncDomainName,\n            aliasZone: domainName.hostedZoneId,\n          },\n          { parent },\n        );\n      });\n    }\n  }\n\n  /**\n   * The GraphQL API ID.\n   */\n  public get id() {\n    return this.api.id;\n  }\n\n  /**\n   * The URL of the GraphQL API.\n   */\n  public get url() {\n    return this.domainName\n      ? interpolate`https://${this.domainName.domainName}/graphql`\n      : this.api.uris[\"GRAPHQL\"];\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon AppSync GraphQL API.\n       */\n      api: this.api,\n    };\n  }\n\n  /**\n   * Add a data source to this AppSync API.\n   *\n   * @param args Configure the data source.\n   *\n   * @example\n   *\n   * Add a Lambda function as a data source.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addDataSource({\n   *   name: \"lambdaDS\",\n   *   lambda: \"src/lambda.handler\"\n   * });\n   * ```\n   *\n   * Customize the Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addDataSource({\n   *   name: \"lambdaDS\",\n   *   lambda: {\n   *     handler: \"src/lambda.handler\",\n   *     timeout: \"60 seconds\"\n   *   }\n   * });\n   * ```\n   *\n   * Add a data source with an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addDataSource({\n   *   name: \"lambdaDS\",\n   *   lambda: \"arn:aws:lambda:us-east-1:123456789012:function:my-function\"\n   * })\n   * ```\n   *\n   * Add a DynamoDB table as a data source.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addDataSource({\n   *   name: \"dynamoDS\",\n   *   dynamodb: \"arn:aws:dynamodb:us-east-1:123456789012:table/my-table\"\n   * })\n   * ```\n   */\n  public addDataSource(args: AppSyncDataSourceArgs) {\n    const self = this;\n    const selfName = this.constructorName;\n    const nameSuffix = logicalName(args.name);\n\n    return new AppSyncDataSource(\n      `${selfName}DataSource${nameSuffix}`,\n      {\n        apiId: self.api.id,\n        apiComponentName: selfName,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Add a function to this AppSync API.\n   *\n   * @param args Configure the function.\n   *\n   * @example\n   *\n   * Add a function using a Lambda data source.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addFunction({\n   *   name: \"myFunction\",\n   *   dataSource: \"lambdaDS\",\n   * });\n   * ```\n   *\n   * Add a function using a DynamoDB data source.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addResolver(\"Query user\", {\n   *   name: \"myFunction\",\n   *   dataSource: \"dynamoDS\",\n   *   requestTemplate: `{\n   *     \"version\": \"2017-02-28\",\n   *     \"operation\": \"Scan\",\n   *   }`,\n   *   responseTemplate: `{\n   *     \"users\": $utils.toJson($context.result.items)\n   *   }`,\n   * });\n   * ```\n   */\n  public addFunction(args: AppSyncFunctionArgs) {\n    const self = this;\n    const selfName = this.constructorName;\n    const nameSuffix = logicalName(args.name);\n\n    return new AppSyncFunction(\n      `${selfName}Function${nameSuffix}`,\n      {\n        apiId: self.api.id,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Add a resolver to this AppSync API.\n   *\n   * @param operation The type and name of the operation.\n   * @param args Configure the resolver.\n   *\n   * @example\n   *\n   * Add a resolver using a Lambda data source.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addResolver(\"Query user\", {\n   *   dataSource: \"lambdaDS\",\n   * });\n   * ```\n   *\n   * Add a resolver using a DynamoDB data source.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addResolver(\"Query user\", {\n   *   dataSource: \"dynamoDS\",\n   *   requestTemplate: `{\n   *     \"version\": \"2017-02-28\",\n   *     \"operation\": \"Scan\",\n   *   }`,\n   *   responseTemplate: `{\n   *     \"users\": $utils.toJson($context.result.items)\n   *   }`,\n   * });\n   * ```\n   *\n   * Add a pipeline resolver.\n   *\n   * ```js title=\"sst.config.ts\"\n   * api.addResolver(\"Query user\", {\n   *   functions: [\n   *     \"MyFunction1\",\n   *     \"MyFunction2\"\n   *   ]\n   *   code: `\n   *     export function request(ctx) {\n   *       return {};\n   *     }\n   *     export function response(ctx) {\n   *       return ctx.result;\n   *     }\n   *   `,\n   * });\n   * ```\n   */\n  public addResolver(operation: string, args: AppSyncResolverArgs) {\n    const self = this;\n    const selfName = this.constructorName;\n\n    // Parse field and type\n    const parts = operation.trim().split(/\\s+/);\n    if (parts.length !== 2)\n      throw new VisibleError(`Invalid resolver ${operation}`);\n    const [type, field] = parts;\n\n    const nameSuffix = `${logicalName(type)}` + `${logicalName(field)}`;\n    return new AppSyncResolver(\n      `${selfName}Resolver${nameSuffix}`,\n      {\n        apiId: self.api.id,\n        type,\n        field,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:AppSync\";\n// @ts-expect-error\nAppSync.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { Function } from \"./function\";\nimport { VisibleError } from \"../error\";\nimport { AppSyncDataSourceArgs } from \"./app-sync\";\nimport { parseDynamoArn } from \"./helpers/arn\";\nimport { appsync, iam } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\n\nexport interface DataSourceArgs extends AppSyncDataSourceArgs {\n  /**\n   * The AppSync GraphQL API ID.\n   */\n  apiId: Input<string>;\n  /**\n   * The AppSync component name.\n   */\n  apiComponentName: string;\n}\n\n/**\n * The `AppSyncDataSource` component is internally used by the `AppSync` component to add\n * data sources to [AWS AppSync](https://docs.aws.amazon.com/appsync/latest/devguide/what-is-appsync.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addDataSource` method of the `AppSync` component.\n */\nexport class AppSyncDataSource extends Component {\n  private readonly dataSource: appsync.DataSource;\n  private readonly lambda?: FunctionBuilder;\n  private readonly serviceRole?: iam.Role;\n\n  constructor(\n    name: string,\n    args: DataSourceArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    const apiId = output(args.apiId);\n\n    validateSingleDataSource();\n    const type = getType();\n\n    const lambda = createFunction();\n    const serviceRole = createServiceRole();\n    const dataSource = createDataSource();\n\n    this.dataSource = dataSource;\n    this.lambda = lambda;\n    this.serviceRole = serviceRole;\n\n    function validateSingleDataSource() {\n      const sources = [\n        args.lambda,\n        args.dynamodb,\n        args.elasticSearch,\n        args.eventBridge,\n        args.http,\n        args.openSearch,\n        args.rds,\n      ].filter((source) => source);\n\n      if (sources.length > 1) {\n        throw new Error(\n          `Expected only one data source, but found ${sources.length}.`,\n        );\n      }\n    }\n\n    function getType() {\n      if (args.lambda) return \"AWS_LAMBDA\";\n      if (args.dynamodb) return \"AMAZON_DYNAMODB\";\n      if (args.elasticSearch) return \"AMAZON_ELASTICSEARCH\";\n      if (args.eventBridge) return \"AMAZON_EVENTBRIDGE\";\n      if (args.http) return \"HTTP\";\n      if (args.openSearch) return \"AMAZON_OPENSEARCH_SERVICE\";\n      if (args.rds) return \"RELATIONAL_DATABASE\";\n      return \"NONE\";\n    }\n\n    function createFunction() {\n      if (!args.lambda) return;\n\n      return functionBuilder(`${name}Function`, args.lambda, {\n        description: `${args.apiComponentName} data source`,\n      });\n    }\n\n    function createServiceRole() {\n      if (\n        !lambda &&\n        !args.dynamodb &&\n        !args.elasticSearch &&\n        !args.eventBridge &&\n        !args.openSearch\n      )\n        return;\n\n      return new iam.Role(\n        ...transform(\n          args.transform?.serviceRole,\n          `${name}ServiceRole`,\n          {\n            assumeRolePolicy: iam.getPolicyDocumentOutput({\n              statements: [\n                {\n                  actions: [\"sts:AssumeRole\"],\n                  principals: [\n                    {\n                      type: \"Service\",\n                      identifiers: [\"appsync.amazonaws.com\"],\n                    },\n                  ],\n                },\n              ],\n            }).json,\n            inlinePolicies: [\n              {\n                name: \"inline\",\n                policy: iam.getPolicyDocumentOutput({\n                  statements: [\n                    ...(lambda\n                      ? [{ actions: [\"lambda:*\"], resources: [lambda.arn] }]\n                      : []),\n                    ...(args.dynamodb\n                      ? [\n                          {\n                            actions: [\"dynamodb:*\"],\n                            resources: [args.dynamodb],\n                          },\n                        ]\n                      : []),\n                    ...(args.elasticSearch\n                      ? [\n                          {\n                            actions: [\"es:*\"],\n                            resources: [args.elasticSearch],\n                          },\n                        ]\n                      : []),\n                    ...(args.eventBridge\n                      ? [\n                          {\n                            actions: [\"events:*\"],\n                            resources: [args.eventBridge],\n                          },\n                        ]\n                      : []),\n                    ...(args.openSearch\n                      ? [\n                          {\n                            actions: [\"opensearch:*\"],\n                            resources: [args.openSearch],\n                          },\n                        ]\n                      : []),\n                  ],\n                }).json,\n              },\n            ],\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createDataSource() {\n      return new appsync.DataSource(\n        ...transform(\n          args.transform?.dataSource,\n          `${name}DataSource`,\n          {\n            apiId,\n            type,\n            name: args.name,\n            serviceRoleArn: serviceRole?.arn,\n            lambdaConfig: lambda ? { functionArn: lambda.arn } : undefined,\n            dynamodbConfig: args.dynamodb\n              ? {\n                  tableName: output(args.dynamodb).apply(\n                    (arn) => parseDynamoArn(arn).tableName,\n                  ),\n                }\n              : undefined,\n            elasticsearchConfig: args.elasticSearch\n              ? { endpoint: args.elasticSearch }\n              : undefined,\n            eventBridgeConfig: args.eventBridge\n              ? { eventBusArn: args.eventBridge }\n              : undefined,\n            httpConfig: args.http ? { endpoint: args.http } : undefined,\n            opensearchserviceConfig: args.openSearch\n              ? { endpoint: args.openSearch }\n              : undefined,\n            relationalDatabaseConfig: args.rds\n              ? {\n                  httpEndpointConfig: {\n                    dbClusterIdentifier: output(args.rds).cluster,\n                    awsSecretStoreArn: output(args.rds).credentials,\n                  },\n                }\n              : undefined,\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The name of the data source.\n   */\n  public get name() {\n    return this.dataSource.name;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Amazon AppSync DataSource.\n       */\n      dataSource: this.dataSource,\n      /**\n       * The Lambda function used by the data source.\n       */\n      get function() {\n        if (!self.lambda)\n          throw new VisibleError(\n            \"Cannot access `nodes.function` because the data source does not use a Lambda function.\",\n          );\n        return self.lambda.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The DataSource service's IAM role.\n       */\n      get serviceRole() {\n        if (!self.serviceRole)\n          throw new VisibleError(\n            \"Cannot access `nodes.serviceRole` because the data source does not have a service role.\",\n          );\n        return self.serviceRole;\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:AppSyncDataSource\";\n// @ts-expect-error\nAppSyncDataSource.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Input, output } from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { AppSyncResolverArgs } from \"./app-sync\";\nimport { VisibleError } from \"../error\";\nimport { appsync } from \"@pulumi/aws\";\n\nexport interface ResolverArgs extends AppSyncResolverArgs {\n  /**\n   * The AppSync GraphQL API ID.\n   */\n  apiId: Input<string>;\n  /**\n   * The type name from the schema defined.\n   */\n  type: Input<string>;\n  /**\n   * The field name from the schema defined.\n   */\n  field: Input<string>;\n}\n\n/**\n * The `AppSyncResolver` component is internally used by the `AppSync` component to add\n * resolvers to [AWS AppSync](https://docs.aws.amazon.com/appsync/latest/devguide/what-is-appsync.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addResolver` method of the `AppSync` component.\n */\nexport class AppSyncResolver extends Component {\n  private readonly resolver: appsync.Resolver;\n\n  constructor(\n    name: string,\n    args: ResolverArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    const kind = normalizeKind();\n    const resolver = createResolver();\n\n    this.resolver = resolver;\n\n    function normalizeKind() {\n      return output(args.kind ?? \"unit\").apply((kind) => {\n        if (kind === \"unit\" && args.functions)\n          throw new VisibleError(\n            \"The `functions` property is not supported for `unit` resolvers.\",\n          );\n\n        if (kind === \"pipeline\" && args.dataSource)\n          throw new VisibleError(\n            \"The `dataSource` property is not supported for `pipeline` resolvers.\",\n          );\n\n        return kind;\n      });\n    }\n\n    function createResolver() {\n      return new appsync.Resolver(\n        ...transform(\n          args.transform?.resolver,\n          `${name}Resolver`,\n          {\n            apiId: args.apiId,\n            kind: kind.apply((kind) => kind.toUpperCase()),\n            type: args.type,\n            field: args.field,\n            dataSource: args.dataSource,\n            requestTemplate: args.requestTemplate,\n            responseTemplate: args.responseTemplate,\n            code: args.code,\n            runtime: args.code\n              ? {\n                  name: \"APPSYNC_JS\",\n                  runtimeVersion: \"1.0.0\",\n                }\n              : undefined,\n            pipelineConfig: args.functions\n              ? { functions: args.functions }\n              : undefined,\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon AppSync Resolver.\n       */\n      resolver: this.resolver,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:AppSyncResolver\";\n// @ts-expect-error\nAppSyncResolver.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Input } from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { AppSyncFunctionArgs } from \"./app-sync\";\nimport { appsync } from \"@pulumi/aws\";\n\nexport interface FunctionArgs extends AppSyncFunctionArgs {\n  /**\n   * The AppSync GraphQL API ID.\n   */\n  apiId: Input<string>;\n}\n\n/**\n * The `AppSyncFunction` component is internally used by the `AppSync` component to add\n * functions to [AWS AppSync](https://docs.aws.amazon.com/appsync/latest/devguide/what-is-appsync.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addFunction` method of the `AppSync` component.\n */\nexport class AppSyncFunction extends Component {\n  private readonly fn: appsync.Function;\n\n  constructor(\n    name: string,\n    args: FunctionArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    const fn = createFunction();\n\n    this.fn = fn;\n\n    function createFunction() {\n      return new appsync.Function(\n        ...transform(\n          args.transform?.function,\n          `${name}Function`,\n          {\n            apiId: args.apiId,\n            name: args.name,\n            dataSource: args.dataSource,\n            requestMappingTemplate: args.requestMappingTemplate,\n            responseMappingTemplate: args.responseMappingTemplate,\n            code: args.code,\n            runtime: args.code\n              ? {\n                  name: \"APPSYNC_JS\",\n                  runtimeVersion: \"1.0.0\",\n                }\n              : undefined,\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon AppSync Function.\n       */\n      function: this.fn,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:AppSyncFunction\";\n// @ts-expect-error\nAppSyncFunction.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output } from \"@pulumi/pulumi\";\nimport { isALtB } from \"../../util/compare-semver.js\";\nimport { VisibleError } from \"../error.js\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\n\nexport interface AstroArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your Astro site is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your Astro site, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your Astro site needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your Astro site is located.  This path is relative to your `sst.config.ts`.\n   *\n   * By default it assumes your Astro site is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your Astro site is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your Astro site. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your Astro site has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * Set [environment variables](https://docs.astro.build/en/guides/environment-variables/) in your Astro site. These are made available:\n   *\n   * 1. In `astro build`, they are loaded into `import.meta.env`.\n   * 2. Locally while running `astro dev` through `sst dev`.\n   *\n   * :::tip\n   * You can also `link` resources to your Astro site and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * Recall that in Astro, you need to prefix your environment variables with `PUBLIC_` to access them on the client-side. [Read more here](https://docs.astro.build/en/guides/environment-variables/).\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     // Accessible on the client-side\n   *     PUBLIC_STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Set a custom domain for your Astro site.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Serve your Astro site through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your Astro site **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * You also need to set the\n   * [`base`](https://docs.astro.build/en/reference/configuration-reference/#base)\n   * in your `astro.config.mjs`.\n   *\n   * :::caution\n   * If routing to a path, you need to set that as the base path in your Astro\n   * site as well.\n   * :::\n   *\n   * ```js title=\"astro.config.mjs\" {3}\n   * export default defineConfig({\n   *   adapter: sst(),\n   *   base: \"/docs\"\n   * });\n   * ```\n   *\n   * To serve your Astro site **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your Astro site **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set this as the `base` in your `astro.config.mjs`, like\n   * above.\n   */\n  router?: SsrSiteArgs[\"router\"];\n  /**\n   * The command used internally to build your Astro site.\n   *\n   * @default `\"npm run build\"`\n   *\n   * @example\n   *\n   * If you want to use a different build command.\n   * ```js\n   * {\n   *   buildCommand: \"yarn build\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * Configure how the Astro site assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the Astro site to use an existing CloudFront cache policy.\n   *\n   * :::note\n   * CloudFront has a limit of 20 cache policies per account, though you can request a limit\n   * increase.\n   * :::\n   *\n   * By default, a new cache policy is created for it. This allows you to reuse an existing\n   * policy instead of creating a new one.\n   *\n   * @default A new cache policy is created\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `Astro` component lets you deploy an [Astro](https://astro.build) site to AWS.\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy the Astro site that's in the project root.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.Astro(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys the Astro site in the `my-astro-app/` directory.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Astro(\"MyWeb\", {\n *   path: \"my-astro-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your Astro site.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Astro(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.Astro(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your Astro site. This will grant permissions\n * to the resources and allow you to access it in your site.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.Astro(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your Astro site.\n *\n * ```astro title=\"src/pages/index.astro\"\n * ---\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ---\n * ```\n */\nexport class Astro extends SsrSite {\n  constructor(\n    name: string,\n    args: AstroArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand() { }\n\n  protected buildPlan(outputPath: Output<string>): Output<Plan> {\n    return outputPath.apply((outputPath) => {\n      const BUILD_META_FILE_NAME = \"sst.buildMeta.json\";\n      const filePath = path.join(outputPath, \"dist\", BUILD_META_FILE_NAME);\n      if (!fs.existsSync(filePath)) {\n        throw new VisibleError(\n          `Build metadata file not found at \"${filePath}\". Update your \"astro-sst\" adapter and rebuild your Astro site.`,\n        );\n      }\n      const buildMeta = JSON.parse(fs.readFileSync(filePath, \"utf-8\")) as {\n        base: string;\n        pluginVersion: string;\n        outputMode: \"server\" | \"static\";\n        responseMode: \"stream\" | \"buffer\";\n        clientBuildOutputDir: string;\n        clientBuildVersionedSubDir: string;\n      };\n      const serverOutputPath = path.join(outputPath, \"dist\", \"server\");\n\n      if (\n        buildMeta.pluginVersion === undefined ||\n        isALtB(buildMeta.pluginVersion, \"3.1.2\")\n      ) {\n        throw new VisibleError(\n          `Incompatible \"astro-sst\" adapter version detected. The Astro component requires \"astro-sst\" adapter version 3.1.2 or later.`,\n        );\n      }\n\n      // Note about handling 404 pages. Here is Astro's behavior:\n      // - when static/prerendered, Astro builds a /404.html file in the client build output dir\n      // - when SSR, Astro server handles /404 route\n      //\n      // We could handle the /404.html with CloudFront's custom error response feature, but that will not work when routing the Astro through the `Router` component. It does not make sense for `Router` to have a custom error response shared across all routes (ie. API). Each route's 404 behavior are different.\n      //\n      // So here is what we do when a request comes in for ie. /garbage:\n      //\n      // - Case 1: static (no server) => In CF function S3 look up will fail, and uri will rewrite to /404.html\n      //   x that's why we set `plan.custom404` to `/404.html`\n      //\n      // - Case 2: prerendered (has server) => In CF function S3 look up will fail, and request will be sent to the server function. Server fails to serve /garbage, and cannot find the route. Server tries to serve /404, and cannot find the route. Server finally serves the 404.html file manually bundled into it.\n      //   x that's why we configure `plan.server.copyFiles` include /404.html\n      //\n      // - Case 3: SSR (has server) => In CF function S3 look up will fail, and request is sent to the server function. Server fails to serve /garbage, and cannot find the route. Server tries to serve /404.\n      const isStatic = buildMeta.outputMode === \"static\";\n      const base = buildMeta.base === \"/\" ? undefined : buildMeta.base;\n      return {\n        base,\n        server: isStatic\n          ? undefined\n          : {\n            handler: path.join(serverOutputPath, \"entry.handler\"),\n            nodejs: { install: [\"sharp\"] },\n            streaming: buildMeta.responseMode === \"stream\",\n            copyFiles: fs.existsSync(path.join(serverOutputPath, \"404.html\"))\n              ? [\n                {\n                  from: path.join(serverOutputPath, \"404.html\"),\n                  to: \"404.html\",\n                },\n              ]\n              : [],\n          },\n        assets: [\n          {\n            from: buildMeta.clientBuildOutputDir,\n            to: \"\",\n            cached: true,\n            versionedSubDir: buildMeta.clientBuildVersionedSubDir,\n          },\n        ],\n        custom404:\n          isStatic &&\n            fs.existsSync(\n              path.join(outputPath, buildMeta.clientBuildOutputDir, \"404.html\"),\n            )\n            ? \"/404.html\"\n            : undefined,\n      };\n    });\n  }\n\n  /**\n   * The URL of the Astro site.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n}\nconst __pulumiType = \"sst:aws:Astro\";\n// @ts-expect-error\nAstro.__pulumiType = __pulumiType;\n", "export function compareSemver(v1: string, v2: string): number {\n  if (v1 === \"latest\") return 1;\n  if (/^[^\\d]/.test(v1)) {\n    v1 = v1.substring(1);\n  }\n  if (/^[^\\d]/.test(v2)) {\n    v2 = v2.substring(1);\n  }\n  const [major1, minor1, patch1] = v1.split(\".\").map(Number);\n  const [major2, minor2, patch2] = v2.split(\".\").map(Number);\n\n  if (major1 !== major2) return major1 - major2;\n  if (minor1 !== minor2) return minor1 - minor2;\n  return patch1 - patch2;\n}\n\nexport function isALteB(a: string, b: string): boolean {\n  return compareSemver(a, b) <= 0;\n}\n\nexport function isALtB(a: string, b: string): boolean {\n  return compareSemver(a, b) < 0;\n}\n", "import {\n  all,\n  ComponentResourceOptions,\n  interpolate,\n  jsonStringify,\n  output,\n  Output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component.js\";\nimport { Link } from \"../link.js\";\nimport { Input } from \"../input.js\";\nimport { iam, rds, secretsmanager } from \"@pulumi/aws\";\nimport { VisibleError } from \"../error.js\";\nimport { Vpc } from \"./vpc.js\";\nimport { RandomPassword } from \"@pulumi/random\";\nimport { DevCommand } from \"../experimental/dev-command.js\";\nimport { RdsRoleLookup } from \"./providers/rds-role-lookup.js\";\nimport { DurationHours, toSeconds } from \"../duration.js\";\nimport { permission } from \"./permission.js\";\n\ntype ACU = `${number} ACU`;\n\nfunction parseACU(acu: ACU) {\n  const result = parseFloat(acu.split(\" \")[0]);\n  return result;\n}\n\nexport interface AuroraArgs {\n  /**\n   * The Aurora engine to use.\n   *\n   * @example\n   * ```js\n   * {\n   *   engine: \"postgres\"\n   * }\n   * ```\n   */\n  engine: Input<\"postgres\" | \"mysql\">;\n  /**\n   * The version of the Aurora engine.\n   *\n   * The default is `\"16.4\"` for Postgres and `\"3.08.0\"` for MySQL.\n   *\n   * Check out the [available Postgres versions](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.ServerlessV2.html#Concepts.Aurora_Fea_Regions_DB-eng.Feature.ServerlessV2.apg) and [available MySQL versions](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.ServerlessV2.html#Concepts.Aurora_Fea_Regions_DB-eng.Feature.ServerlessV2.amy) in your region.\n   *\n   * :::tip\n   * Not all versions support scaling to 0 with auto-pause and resume.\n   * :::\n   *\n   * Auto-pause and resume is only supported in the following versions:\n   * - Aurora PostgresSQL 16.3 and higher\n   * - Aurora PostgresSQL 15.7 and higher\n   * - Aurora PostgresSQL 14.12 and higher\n   * - Aurora PostgresSQL 13.15 and higher\n   * - Aurora MySQL 3.08.0 and higher\n   *\n   * @default `\"16.4\"` for Postgres, `\"3.08.0\"` for MySQL\n   * @example\n   * ```js\n   * {\n   *   version: \"16.3\"\n   * }\n   * ```\n   */\n  version?: Input<string>;\n  /**\n   * The username of the master user.\n   *\n   * :::danger\n   * Changing the username will cause the database to be destroyed and recreated.\n   * :::\n   *\n   * @default `\"postgres\"` for Postgres, `\"root\"` for MySQL\n   * @example\n   * ```js\n   * {\n   *   username: \"admin\"\n   * }\n   * ```\n   */\n  username?: Input<string>;\n  /**\n   * The password of the master user.\n   * @default A random password is generated.\n   * @example\n   * ```js\n   * {\n   *   password: \"Passw0rd!\"\n   * }\n   * ```\n   *\n   * You can use a [`Secret`](/docs/component/secret) to manage the password.\n   *\n   * ```js\n   * {\n   *   password: (new sst.Secret(\"MyDBPassword\")).value\n   * }\n   * ```\n   */\n  password?: Input<string>;\n  /**\n   * Name of a database that is automatically created inside the cluster.\n   *\n   * The name must begin with a letter and contain only lowercase letters, numbers, or\n   * underscores.\n   *\n   * By default, it takes the name of the app, and replaces the hyphens with underscores.\n   *\n   * @default Based on the name of the current app\n   * @example\n   * ```js\n   * {\n   *   databaseName: \"acme\"\n   * }\n   * ```\n   */\n  database?: Input<string>;\n  /**\n   * The Aurora Serverless v2 scaling config.\n   *\n   * By default, the cluster has one DB instance that is used for both writes and reads. The\n   * instance can scale from a minimum number of ACUs to the maximum number of ACUs.\n   *\n   * :::tip\n   * Pick the `min` and `max` ACUs based on the baseline and peak memory usage of your app.\n   * :::\n   *\n   * An ACU or _Aurora Capacity Unit_ is roughly equivalent to 2 GB of memory and a corresponding\n   * amount of CPU and network resources. So pick the minimum and maximum based on the baseline\n   * and peak memory usage of your app.\n   *\n   * If you set a `min` of 0 ACUs, the database will be paused when there are no active\n   * connections in the `pauseAfter` specified time period.\n   *\n   * This is useful for dev environments since you are not charged when the database is paused.\n   * But it's not recommended for production environments because it takes around 15 seconds for\n   * the database to resume.\n   *\n   * @default `{min: \"0 ACU\", max: \"4 ACU\"}`\n   */\n  scaling?: Input<{\n    /**\n     * The minimum number of ACUs or _Aurora Capacity Units_. Ranges from 0 to 256, in\n     * increments of 0.5. Where each ACU is roughly equivalent to 2 GB of memory.\n     *\n     * If you set this to 0 ACUs, the database will be paused when there are no active\n     * connections in the `pauseAfter` specified time period.\n     *\n     * :::note\n     * If you set a `min` ACU to 0, the database will be paused after the `pauseAfter` time\n     * period.\n     * :::\n     *\n     * On the next database connection, the database will resume. It takes about 15 seconds for\n     * the database to resume.\n     *\n     * :::tip\n     * Avoid setting a low number of `min` ACUs for production workloads.\n     * :::\n     *\n     * For your production workloads, setting a minimum of 0.5 ACUs might not be a great idea\n     * because:\n     *\n     * 1. It takes longer to scale from a low number of ACUs to a much higher number.\n     * 2. Query performance depends on the buffer cache. So if frequently accessed data cannot\n     *   fit into the buffer cache, you might see uneven performance.\n     * 3. The max connections for a 0.5 ACU instance is capped at 2000.\n     *\n     * You can [read more here](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.setting-capacity.html#aurora-serverless-v2.setting-capacity.incompatible_parameters).\n     *\n     * @default `0.5 ACU`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     min: \"2 ACU\"\n     *   }\n     * }\n     * ```\n     */\n    min?: Input<ACU>;\n    /**\n     * The maximum number of ACUs or _Aurora Capacity Units_. Ranges from 1 to 128, in\n     * increments of 0.5. Where each ACU is roughly equivalent to 2 GB of memory.\n     *\n     * @default `4 ACU`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     max: \"128 ACU\"\n     *   }\n     * }\n     * ```\n     */\n    max?: Input<ACU>;\n    /**\n     * The amount of time before the database is paused when there are no active connections.\n     * Only applies when the `min` is set to 0 ACUs.\n     *\n     * :::note\n     * This only applies when the `min` is set to 0 ACUs.\n     * :::\n     *\n     * Must be between `\"5 minutes\"` and `\"60 minutes\"` or `\"1 hour\"`. So if the `min` is set\n     * to 0 ACUs, by default, the database will be auto-paused after `\"5 minutes\"`.\n     *\n     * When the database is paused, you are not charged for the ACUs. On the next database\n     * connection, the database will resume. It takes about 15 seconds for the database to\n     * resume.\n     *\n     * :::tip\n     * Auto-pause is not recommended for production environments.\n     * :::\n     *\n     * Auto-pause is useful for minimizing costs in the development environments where the\n     * database is not used frequently. It's not recommended for production environments.\n     *\n     * @default `\"5 minutes\"`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     pauseAfter: \"20 minutes\"\n     *   }\n     * }\n     * ```\n     */\n    pauseAfter?: Input<DurationHours>;\n  }>;\n  /**\n   * The number of read-only Aurora replicas to create.\n   *\n   * By default, the cluster has one primary DB instance that is used for both writes and\n   * reads. You can add up to 15 read-only replicas to offload the read traffic from the\n   * primary instance.\n   *\n   * @default `0`\n   * @example\n   * ```js\n   * {\n   *   replicas: 2\n   * }\n   * ```\n   */\n  replicas?: Input<number>;\n  /**\n   * Enable [RDS Data API](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html)\n   * for the database.\n   *\n   * The RDS Data API provides a secure HTTP endpoint and does not need a persistent connection.\n   * You also doesn't need the `sst tunnel` or a VPN to connect to it from your local machine.\n   *\n   * RDS Data API is [billed per request](#cost). Check out the [RDS Data API\n   * pricing](https://aws.amazon.com/rds/aurora/pricing/#Data_API_costs) for more details.\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   dataApi: true\n   * }\n   * ```\n   */\n  dataApi?: Input<boolean>;\n  /**\n   * Enable [RDS Proxy](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-proxy.html)\n   * for the database.\n   *\n   * Amazon RDS Proxy sits between your application and the database and manages connections to\n   * it. It's useful for serverless applications, or Lambda functions where each invocation\n   * might create a new connection.\n   *\n   * There's an [extra cost](#cost) attached to enabling this. Check out the [RDS Proxy\n   * pricing](https://aws.amazon.com/rds/proxy/pricing/) for more details.\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   proxy: true\n   * }\n   * ```\n   */\n  proxy?: Input<\n    | boolean\n    | {\n        /**\n         * Add extra credentials the proxy can use to connect to the database.\n         *\n         * Your app will use the master `username` and `password`. So you don't need to specify\n         * them here.\n         *\n         * These credentials are for any other services that need to connect to your database\n         * directly.\n         *\n         * :::tip\n         * You need to create these credentials manually in the database.\n         * :::\n         *\n         * These credentials are not automatically created. You'll need to create these\n         * credentials manually in the database.\n         *\n         * @example\n         * ```js\n         * {\n         *   credentials: [\n         *     {\n         *       username: \"metabase\",\n         *       password: \"Passw0rd!\"\n         *     }\n         *   ]\n         * }\n         * ```\n         *\n         * You can use a [`Secret`](/docs/component/secret) to manage the password.\n         *\n         * ```js\n         * {\n         *   credentials: [\n         *     {\n         *       username: \"metabase\",\n         *       password: (new sst.Secret(\"MyDBPassword\")).value\n         *     }\n         *   ]\n         * }\n         * ```\n         */\n        credentials?: Input<\n          Input<{\n            /**\n             * The username of the user.\n             */\n            username: Input<string>;\n            /**\n             * The password of the user.\n             */\n            password: Input<string>;\n          }>[]\n        >;\n      }\n  >;\n  /**\n   * The VPC to use for the database cluster.\n   *\n   * @example\n   * Create a VPC component.\n   *\n   * ```js\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   *\n   * Or pass in a custom VPC configuration.\n   *\n   * ```js\n   * {\n   *   vpc: {\n   *     subnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"],\n   *     securityGroups: [\"sg-0399348378a4c256c\"]\n   *   }\n   * }\n   * ```\n   */\n  vpc:\n    | Vpc\n    | Input<{\n        /**\n         * A list of subnet IDs in the VPC to deploy the Aurora cluster in.\n         */\n        subnets: Input<Input<string>[]>;\n        /**\n         * A list of VPC security group IDs.\n         */\n        securityGroups: Input<Input<string>[]>;\n      }>;\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * By default, your Aurora database is deployed in `sst dev`. But if you want to instead\n   * connect to a locally running database, you can configure the `dev` prop.\n   *\n   * This will skip deploying an Aurora database and link to the locally running database\n   * instead.\n   *\n   * @example\n   *\n   * Setting the `dev` prop also means that any linked resources will connect to the right\n   * database both in `sst dev` and `sst deploy`.\n   *\n   * ```ts\n   * {\n   *   dev: {\n   *     username: \"postgres\",\n   *     password: \"password\",\n   *     database: \"postgres\",\n   *     host: \"localhost\",\n   *     port: 5432\n   *   }\n   * }\n   * ```\n   */\n  dev?: {\n    /**\n     * The host of the local database to connect to when running in dev.\n     * @default `\"localhost\"`\n     */\n    host?: Input<string>;\n    /**\n     * The port of the local database to connect to when running in dev.\n     * @default `5432`\n     */\n    port?: Input<number>;\n    /**\n     * The database of the local database to connect to when running in dev.\n     * @default Inherit from the top-level [`database`](#database).\n     */\n    database?: Input<string>;\n    /**\n     * The username of the local database to connect to when running in dev.\n     * @default Inherit from the top-level [`username`](#username).\n     */\n    username?: Input<string>;\n    /**\n     * The password of the local database to connect to when running in dev.\n     * @default Inherit from the top-level [`password`](#password).\n     */\n    password?: Input<string>;\n  };\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the RDS subnet group.\n     */\n    subnetGroup?: Transform<rds.SubnetGroupArgs>;\n    /**\n     * Transform the RDS cluster parameter group.\n     */\n    clusterParameterGroup?: Transform<rds.ClusterParameterGroupArgs>;\n    /**\n     * Transform the RDS instance parameter group.\n     */\n    instanceParameterGroup?: Transform<rds.ParameterGroupArgs>;\n    /**\n     * Transform the RDS Cluster.\n     */\n    cluster?: Transform<rds.ClusterArgs>;\n    /**\n     * Transform the database instance in the RDS Cluster.\n     */\n    instance?: Transform<rds.ClusterInstanceArgs>;\n    /**\n     * Transform the RDS Proxy.\n     */\n    proxy?: Transform<rds.ProxyArgs>;\n  };\n}\n\ninterface AuroraRef {\n  ref: boolean;\n  id: Input<string>;\n}\n\n/**\n * The `Aurora` component lets you add a Aurora Postgres or MySQL cluster to your app\n * using [Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html).\n *\n * @example\n *\n * #### Create an Aurora Postgres cluster\n *\n * ```js title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const database = new sst.aws.Aurora(\"MyDatabase\", {\n *   engine: \"postgres\",\n *   vpc\n * });\n * ```\n *\n * #### Create an Aurora MySQL cluster\n *\n * ```js title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const database = new sst.aws.Aurora(\"MyDatabase\", {\n *   engine: \"mysql\",\n *   vpc\n * });\n * ```\n *\n * #### Change the scaling config\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.Aurora(\"MyDatabase\", {\n *   engine: \"postgres\",\n *   scaling: {\n *     min: \"2 ACU\",\n *     max: \"128 ACU\"\n *   },\n *   vpc\n * });\n * ```\n *\n * #### Link to a resource\n *\n * You can link your database to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [database],\n *   vpc\n * });\n * ```\n *\n * Once linked, you can connect to it from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,5-9}\n * import { Resource } from \"sst\";\n * import postgres from \"postgres\";\n *\n * const sql = postgres({\n *   username: Resource.MyDatabase.username,\n *   password: Resource.MyDatabase.password,\n *   database: Resource.MyDatabase.database,\n *   host: Resource.MyDatabase.host,\n *   port: Resource.MyDatabase.port\n * });\n * ```\n *\n * #### Enable the RDS Data API\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Aurora(\"MyDatabase\", {\n *   engine: \"postgres\",\n *   dataApi: true,\n *   vpc\n * });\n * ```\n *\n * When using the Data API, connecting to the database does not require a persistent\n * connection, and works over HTTP. You also don't need the `sst tunnel` or a VPN to connect\n * to it from your local machine.\n *\n * ```ts title=\"app/page.tsx\" {1,6,7,8}\n * import { Resource } from \"sst\";\n * import { drizzle } from \"drizzle-orm/aws-data-api/pg\";\n * import { RDSDataClient } from \"@aws-sdk/client-rds-data\";\n *\n * drizzle(new RDSDataClient({}), {\n *   database: Resource.MyDatabase.database,\n *   secretArn: Resource.MyDatabase.secretArn,\n *   resourceArn: Resource.MyDatabase.clusterArn\n * });\n * ```\n *\n * #### Running locally\n *\n * By default, your Aurora database is deployed in `sst dev`. But let's say you are running\n * Postgres locally.\n *\n * ```bash\n * docker run \\\n *   --rm \\\n *   -p 5432:5432 \\\n *   -v $(pwd)/.sst/storage/postgres:/var/lib/postgresql/data \\\n *   -e POSTGRES_USER=postgres \\\n *   -e POSTGRES_PASSWORD=password \\\n *   -e POSTGRES_DB=local \\\n *   postgres:16.4\n * ```\n *\n * You can connect to it in `sst dev` by configuring the `dev` prop.\n *\n * ```ts title=\"sst.config.ts\" {4-9}\n * new sst.aws.Aurora(\"MyDatabase\", {\n *   engine: \"postgres\",\n *   vpc,\n *   dev: {\n *     username: \"postgres\",\n *     password: \"password\",\n *     database: \"local\",\n *     port: 5432\n *   }\n * });\n * ```\n *\n * This will skip deploying the database and link to the locally running Postgres database\n * instead. [Check out the full example](/docs/examples/#aws-aurora-local).\n *\n * ---\n *\n * ### Cost\n *\n * This component has one DB instance that is used for both writes and reads. The\n * instance can scale from the minimum number of ACUs to the maximum number of ACUs. By default,\n * this uses a `min` of 0 ACUs and a `max` of 4 ACUs.\n *\n * When the database is paused, you are not charged for the ACUs.\n *\n * Each ACU costs $0.12 per hour for both `postgres` and `mysql` engine. The storage costs\n * $0.01 per GB per month for standard storage.\n *\n * So if your database is constantly using 1GB of memory or 0.5 ACUs, then you are charged\n * $0.12 x 0.5 x 24 x 30 or **$43 per month**. And add the storage costs to this as well.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [Amazon Aurora pricing](https://aws.amazon.com/rds/aurora/pricing) for more details.\n *\n * #### RDS Proxy\n *\n * If you enable the `proxy`, it uses _Aurora Capacity Units_ with a minumum of 8 ACUs at\n * $0.015 per ACU hour.\n *\n * That works out to an **additional** $0.015 x 8 x 24 x 30 or **$86 per month**. Adjust\n * this if you end up using more than 8 ACUs.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [RDS Proxy pricing](https://aws.amazon.com/rds/proxy/pricing/) for more details.\n *\n * #### RDS Data API\n *\n * If you enable `dataApi`, you get charged an **additional** $0.35 per million requests for\n * the first billion requests. After that, it's $0.20 per million requests.\n *\n * Check out the [RDS Data API pricing](https://aws.amazon.com/rds/aurora/pricing/#Data_API_costs)\n * for more details.\n */\nexport class Aurora extends Component implements Link.Linkable {\n  private cluster?: rds.Cluster;\n  private instance?: rds.ClusterInstance;\n  private secret?: secretsmanager.Secret;\n  private _password?: Output<string>;\n  private proxy?: Output<rds.Proxy | undefined>;\n  private dev?: {\n    enabled: boolean;\n    host: Output<string>;\n    port: Output<number>;\n    username: Output<string>;\n    password: Output<string>;\n    database: Output<string>;\n  };\n\n  constructor(name: string, args: AuroraArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n    const self = this;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.cluster = ref.cluster;\n      this.instance = ref.instance;\n      this._password = ref.password;\n      this.proxy = output(ref.proxy);\n      this.secret = ref.secret;\n      return;\n    }\n\n    const engine = output(args.engine);\n    const version = all([args.version, engine]).apply(\n      ([version, engine]) =>\n        version ?? { postgres: \"16.4\", mysql: \"3.08.0\" }[engine],\n    );\n    const username = all([args.username, engine]).apply(\n      ([username, engine]) =>\n        username ?? { postgres: \"postgres\", mysql: \"root\" }[engine],\n    );\n    const dbName = output(args.database).apply(\n      (name) => name ?? $app.name.replaceAll(\"-\", \"_\"),\n    );\n    const dataApi = output(args.dataApi).apply((v) => v ?? false);\n    const scaling = normalizeScaling();\n    const replicas = normalizeReplicas();\n    const vpc = normalizeVpc();\n\n    const dev = registerDev();\n    if (dev?.enabled) {\n      this.dev = dev;\n      return;\n    }\n\n    const password = createPassword();\n    const secret = createSecret();\n    const subnetGroup = createSubnetGroup();\n    const instanceParameterGroup = createInstanceParameterGroup();\n    const clusterParameterGroup = createClusterParameterGroup();\n    const proxy = createProxy();\n    const cluster = createCluster();\n    const instance = createInstances();\n    createProxyTarget();\n\n    this.cluster = cluster;\n    this.instance = instance;\n    this.secret = secret;\n    this._password = password;\n    this.proxy = proxy;\n\n    function reference() {\n      const ref = args as unknown as AuroraRef;\n      const cluster = rds.Cluster.get(`${name}Cluster`, ref.id, undefined, {\n        parent: self,\n      });\n\n      const instance = rds.ClusterInstance.get(\n        `${name}Instance`,\n        rds\n          .getInstancesOutput(\n            {\n              filters: [\n                {\n                  name: \"db-cluster-id\",\n                  values: [cluster.id],\n                },\n              ],\n            },\n            { parent: self },\n          )\n          .instanceIdentifiers.apply((ids) => {\n            if (!ids.length) {\n              throw new VisibleError(\n                `Database instance not found in cluster ${cluster.id}`,\n              );\n            }\n            return ids[0];\n          }),\n        undefined,\n        { parent: self },\n      );\n\n      const secretId = cluster.tags\n        .apply((tags) => tags?.[\"sst:ref:password\"])\n        .apply((passwordTag) => {\n          if (!passwordTag)\n            throw new VisibleError(\n              `Failed to get password for Postgres ${name}.`,\n            );\n          return passwordTag;\n        });\n\n      const secret = secretsmanager.Secret.get(\n        `${name}ProxySecret`,\n        secretId,\n        undefined,\n        { parent: self },\n      );\n      const secretVersion = secretsmanager.getSecretVersionOutput(\n        { secretId },\n        { parent: self },\n      );\n      const password = $jsonParse(secretVersion.secretString).apply(\n        (v) => v.password as string,\n      );\n\n      const proxy = cluster.tags\n        .apply((tags) => tags?.[\"sst:ref:proxy\"])\n        .apply((proxyTag) =>\n          proxyTag\n            ? rds.Proxy.get(`${name}Proxy`, proxyTag, undefined, {\n                parent: self,\n              })\n            : undefined,\n        );\n\n      return { cluster, instance, proxy, password, secret };\n    }\n\n    function normalizeScaling() {\n      return output(args.scaling).apply((scaling) => {\n        const max = scaling?.max ?? \"4 ACU\";\n        const min = scaling?.min ?? \"0 ACU\";\n        const isAutoPauseEnabled = parseACU(min) === 0;\n        if (scaling?.pauseAfter && !isAutoPauseEnabled) {\n          throw new VisibleError(\n            `Cannot configure \"pauseAfter\" when the minimum ACU is not 0 for the \"${name}\" Aurora database.`,\n          );\n        }\n\n        return {\n          max,\n          min,\n          pauseAfter: isAutoPauseEnabled\n            ? scaling?.pauseAfter ?? \"5 minutes\"\n            : undefined,\n        };\n      });\n    }\n\n    function normalizeReplicas() {\n      return output(args.replicas ?? 0).apply((replicas) => {\n        if (replicas > 15) {\n          throw new VisibleError(\n            `Cannot create more than 15 read-only replicas for the \"${name}\" Aurora database.`,\n          );\n        }\n        return replicas;\n      });\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        return {\n          subnets: args.vpc.privateSubnets,\n          securityGroups: args.vpc.securityGroups,\n        };\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc);\n    }\n\n    function registerDev() {\n      if (!args.dev) return undefined;\n\n      if (\n        $dev &&\n        args.dev.password === undefined &&\n        args.password === undefined\n      ) {\n        throw new VisibleError(\n          `You must provide the password to connect to your locally running database either by setting the \"dev.password\" or by setting the top-level \"password\" property.`,\n        );\n      }\n\n      const dev = {\n        enabled: $dev,\n        host: output(args.dev.host ?? \"localhost\"),\n        port: all([args.dev.port, engine]).apply(\n          ([port, engine]) => port ?? { postgres: 5432, mysql: 3306 }[engine],\n        ),\n        username: args.dev.username ? output(args.dev.username) : username,\n        password: output(args.dev.password ?? args.password ?? \"\"),\n        database: args.dev.database ? output(args.dev.database) : dbName,\n      };\n\n      new DevCommand(`${name}Dev`, {\n        dev: {\n          title: name,\n          autostart: true,\n          command: `sst print-and-not-quit`,\n        },\n        environment: {\n          SST_DEV_COMMAND_MESSAGE: interpolate`Make sure your local database is using:\n\n  username: \"${dev.username}\"\n  password: \"${dev.password}\"\n  database: \"${dev.database}\"\n\nListening on \"${dev.host}:${dev.port}\"...`,\n        },\n      });\n\n      return dev;\n    }\n\n    function createPassword() {\n      return args.password\n        ? output(args.password)\n        : new RandomPassword(\n            `${name}Password`,\n            {\n              length: 32,\n              special: false,\n            },\n            { parent: self },\n          ).result;\n    }\n\n    function createSecret() {\n      const secret = new secretsmanager.Secret(\n        `${name}ProxySecret`,\n        {\n          recoveryWindowInDays: 0,\n        },\n        { parent: self },\n      );\n\n      new secretsmanager.SecretVersion(\n        `${name}ProxySecretVersion`,\n        {\n          secretId: secret.id,\n          secretString: jsonStringify({ username, password }),\n        },\n        { parent: self },\n      );\n\n      return secret;\n    }\n\n    function createSubnetGroup() {\n      return new rds.SubnetGroup(\n        ...transform(\n          args.transform?.subnetGroup,\n          `${name}SubnetGroup`,\n          {\n            subnetIds: vpc.subnets,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createInstanceParameterGroup() {\n      return new rds.ParameterGroup(\n        ...transform(\n          args.transform?.instanceParameterGroup,\n          `${name}ParameterGroup`,\n          {\n            family: all([engine, version]).apply(([engine, version]) => {\n              if (engine === \"postgres\")\n                return `aurora-postgresql${version.split(\".\")[0]}`;\n              return version.startsWith(\"2\")\n                ? `aurora-mysql5.7`\n                : `aurora-mysql8.0`;\n            }),\n            parameters: [],\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createClusterParameterGroup() {\n      return new rds.ClusterParameterGroup(\n        ...transform(\n          args.transform?.clusterParameterGroup,\n          `${name}ClusterParameterGroup`,\n          {\n            family: all([engine, version]).apply(([engine, version]) => {\n              if (engine === \"postgres\")\n                return `aurora-postgresql${version.split(\".\")[0]}`;\n              return version.startsWith(\"2\")\n                ? `aurora-mysql5.7`\n                : `aurora-mysql8.0`;\n            }),\n            parameters: [],\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createCluster() {\n      return new rds.Cluster(\n        ...transform(\n          args.transform?.cluster,\n          `${name}Cluster`,\n          {\n            engine: engine.apply((engine) =>\n              engine === \"postgres\"\n                ? rds.EngineType.AuroraPostgresql\n                : rds.EngineType.AuroraMysql,\n            ),\n            engineMode: \"provisioned\",\n            engineVersion: all([engine, version]).apply(([engine, version]) => {\n              if (engine === \"postgres\") return version;\n\n              return version.startsWith(\"2\")\n                ? `5.7.mysql_aurora.${version}`\n                : `8.0.mysql_aurora.${version}`;\n            }),\n            databaseName: dbName,\n            masterUsername: username,\n            masterPassword: password,\n            dbClusterParameterGroupName: clusterParameterGroup.name,\n            dbInstanceParameterGroupName: instanceParameterGroup.name,\n            serverlessv2ScalingConfiguration: scaling.apply((scaling) => ({\n              maxCapacity: parseACU(scaling.max),\n              minCapacity: parseACU(scaling.min),\n              secondsUntilAutoPause: scaling.pauseAfter\n                ? toSeconds(scaling.pauseAfter)\n                : undefined,\n            })),\n            skipFinalSnapshot: true,\n            storageEncrypted: true,\n            enableHttpEndpoint: dataApi,\n            dbSubnetGroupName: subnetGroup?.name,\n            vpcSecurityGroupIds: vpc.securityGroups,\n            tags: proxy.apply((proxy) => ({\n              \"sst:ref:password\": secret.id,\n              ...(proxy ? { \"sst:ref:proxy\": proxy.id } : {}),\n            })),\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createInstances() {\n      const props = {\n        clusterIdentifier: cluster.id,\n        instanceClass: \"db.serverless\",\n        engine: cluster.engine.apply((v) => v as rds.EngineType),\n        engineVersion: cluster.engineVersion,\n        dbSubnetGroupName: cluster.dbSubnetGroupName,\n        dbParameterGroupName: instanceParameterGroup.name,\n      };\n\n      // Create primary instance\n      const instance = new rds.ClusterInstance(\n        ...transform(args.transform?.instance, `${name}Instance`, props, {\n          parent: self,\n        }),\n      );\n\n      // Create replicas\n      replicas.apply((replicas) => {\n        for (let i = 0; i < replicas; i++) {\n          new rds.ClusterInstance(\n            ...transform(\n              args.transform?.instance,\n              `${name}Replica${i}`,\n              {\n                ...props,\n                promotionTier: 15,\n              },\n              { parent: self },\n            ),\n          );\n        }\n      });\n\n      return instance;\n    }\n\n    function createProxy() {\n      return all([args.proxy]).apply(([proxy]) => {\n        if (!proxy) return;\n\n        const credentials = proxy === true ? [] : proxy.credentials ?? [];\n\n        // Create secrets\n        const secrets = credentials.map((credential) => {\n          const secret = new secretsmanager.Secret(\n            `${name}ProxySecret${credential.username}`,\n            {\n              recoveryWindowInDays: 0,\n            },\n            { parent: self },\n          );\n\n          new secretsmanager.SecretVersion(\n            `${name}ProxySecretVersion${credential.username}`,\n            {\n              secretId: secret.id,\n              secretString: jsonStringify({\n                username: credential.username,\n                password: credential.password,\n              }),\n            },\n            { parent: self },\n          );\n          return secret;\n        });\n\n        const role = new iam.Role(\n          `${name}ProxyRole`,\n          {\n            assumeRolePolicy: iam.assumeRolePolicyForPrincipal({\n              Service: \"rds.amazonaws.com\",\n            }),\n            inlinePolicies: [\n              {\n                name: \"inline\",\n                policy: iam.getPolicyDocumentOutput({\n                  statements: [\n                    {\n                      actions: [\"secretsmanager:GetSecretValue\"],\n                      resources: [secret.arn, ...secrets.map((s) => s.arn)],\n                    },\n                  ],\n                }).json,\n              },\n            ],\n          },\n          { parent: self },\n        );\n\n        const lookup = new RdsRoleLookup(\n          `${name}ProxyRoleLookup`,\n          { name: \"AWSServiceRoleForRDS\" },\n          { parent: self },\n        );\n\n        return new rds.Proxy(\n          ...transform(\n            args.transform?.proxy,\n            `${name}Proxy`,\n            {\n              engineFamily: engine.apply((engine) =>\n                engine === \"postgres\" ? \"POSTGRESQL\" : \"MYSQL\",\n              ),\n              auths: [\n                {\n                  authScheme: \"SECRETS\",\n                  iamAuth: \"DISABLED\",\n                  secretArn: secret.arn,\n                },\n                ...secrets.map((s) => ({\n                  authScheme: \"SECRETS\",\n                  iamAuth: \"DISABLED\",\n                  secretArn: s.arn,\n                })),\n              ],\n              roleArn: role.arn,\n              vpcSubnetIds: vpc.subnets,\n            },\n            { parent: self, dependsOn: [lookup] },\n          ),\n        );\n      });\n    }\n\n    function createProxyTarget() {\n      proxy.apply((proxy) => {\n        if (!proxy) return;\n\n        const targetGroup = new rds.ProxyDefaultTargetGroup(\n          `${name}ProxyTargetGroup`,\n          {\n            dbProxyName: proxy.name,\n          },\n          { parent: self },\n        );\n\n        new rds.ProxyTarget(\n          `${name}ProxyTarget`,\n          {\n            dbProxyName: proxy.name,\n            targetGroupName: targetGroup.name,\n            dbClusterIdentifier: cluster.clusterIdentifier,\n          },\n          { parent: self },\n        );\n      });\n    }\n  }\n\n  /**\n   * The ID of the RDS Cluster.\n   */\n  public get id() {\n    if (this.dev?.enabled) return output(\"placeholder\");\n    return this.cluster!.id;\n  }\n\n  /**\n   * The ARN of the RDS Cluster.\n   */\n  public get clusterArn() {\n    if (this.dev?.enabled) return output(\"placeholder\");\n    return this.cluster!.arn;\n  }\n\n  /**\n   * The ARN of the master user secret.\n   */\n  public get secretArn() {\n    if (this.dev?.enabled) return output(\"placeholder\");\n    return this.secret!.arn;\n  }\n\n  /** The username of the master user. */\n  public get username() {\n    if (this.dev?.enabled) return this.dev.username;\n    return this.cluster!.masterUsername;\n  }\n\n  /** The password of the master user. */\n  public get password() {\n    if (this.dev?.enabled) return this.dev.password;\n    return this._password!;\n  }\n\n  /**\n   * The name of the database.\n   */\n  public get database() {\n    if (this.dev?.enabled) return this.dev.database;\n    return this.cluster!.databaseName;\n  }\n\n  /**\n   * The port of the database.\n   */\n  public get port() {\n    if (this.dev?.enabled) return this.dev.port;\n    return this.instance!.port;\n  }\n\n  /**\n   * The host of the database.\n   */\n  public get host() {\n    if (this.dev?.enabled) return this.dev.host;\n    return all([this.cluster!.endpoint, this.proxy!]).apply(\n      ([endpoint, proxy]) => proxy?.endpoint ?? output(endpoint.split(\":\")[0]),\n    );\n  }\n\n  /**\n   * The reader endpoint of the database.\n   */\n  public get reader() {\n    if (this.dev?.enabled) return this.dev.host;\n    return all([this.cluster!.readerEndpoint, this.proxy!]).apply(\n      ([endpoint, proxy]) => {\n        if (proxy) {\n          throw new VisibleError(\n            \"Reader endpoint is not currently supported for RDS Proxy. Please contact us on Discord or open a GitHub issue.\",\n          );\n        }\n        return output(endpoint.split(\":\")[0]);\n      },\n    );\n  }\n\n  public get nodes() {\n    return {\n      cluster: this.cluster,\n      instance: this.instance,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        clusterArn: this.clusterArn,\n        secretArn: this.secretArn,\n        database: this.database,\n        username: this.username,\n        password: this.password,\n        port: this.port,\n        host: this.host,\n        reader: this.dev?.enabled\n          ? this.dev.host\n          : all([this.cluster!.readerEndpoint, this.proxy!]).apply(\n              ([endpoint, proxy]) => {\n                if (proxy) return output(undefined);\n                return output(endpoint.split(\":\")[0]);\n              },\n            ),\n      },\n      include: this.dev?.enabled\n        ? []\n        : [\n            permission({\n              actions: [\"secretsmanager:GetSecretValue\"],\n              resources: [this.secretArn],\n            }),\n            permission({\n              actions: [\n                \"rds-data:BatchExecuteStatement\",\n                \"rds-data:BeginTransaction\",\n                \"rds-data:CommitTransaction\",\n                \"rds-data:ExecuteStatement\",\n                \"rds-data:RollbackTransaction\",\n              ],\n              resources: [this.clusterArn],\n            }),\n          ],\n    };\n  }\n\n  /**\n   * Reference an existing Aurora cluster with its RDS cluster ID. This is useful when you\n   * create a Aurora cluster in one stage and want to share it in another. It avoids having to\n   * create a new Aurora cluster in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share Aurora clusters across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param id The ID of the existing Aurora cluster.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a cluster in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new cluster, you want to share the same cluster from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const database = $app.stage === \"frank\"\n   *   ? sst.aws.Aurora.get(\"MyDatabase\", \"app-dev-mydatabase\")\n   *   : new sst.aws.Aurora(\"MyDatabase\");\n   * ```\n   *\n   * Here `app-dev-mydatabase` is the ID of the cluster created in the `dev` stage.\n   * You can find this by outputting the cluster ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return database.id;\n   * ```\n   */\n  public static get(\n    name: string,\n    id: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Aurora(\n      name,\n      {\n        ref: true,\n        id,\n      } as unknown as AuroraArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Aurora\";\n// @ts-expect-error\nAurora.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, output } from \"@pulumi/pulumi\";\nimport { Component } from \"../component\";\nimport { Link } from \"../link.js\";\nimport { Input } from \"../input\";\n\nexport interface DevCommandArgs {\n  dev?: {\n    /**\n     * The command that `sst dev` runs to start this in dev mode.\n     * @default `\"npm run dev\"`\n     */\n    command?: Input<string>;\n    /**\n     * Configure if you want to automatically start this when `sst dev` starts. You can still\n     * start it manually later.\n     * @default `true`\n     */\n    autostart?: Input<boolean>;\n    /**\n     * Change the directory from where the `command` is run.\n     * @default The project root.\n     */\n    directory?: Input<string>;\n    /**\n     * The title of the tab in the multiplexer.\n     *\n     * @default The name of the component.\n     */\n    title?: Input<string>;\n  };\n  /**\n   * [Link resources](/docs/linking/) to your command. This will allow you to access it in your\n   * command using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: Input<any[]>;\n  /**\n   * Set environment variables for this command.\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: Input<Record<string, Input<string>>>;\n  /**\n   * @internal\n   */\n  aws?: {\n    role: Input<string>;\n  };\n}\n\n/**\n * The `DevCommand` lets you run a command in a separate pane when you run `sst dev`.\n *\n * :::note\n * This is an experimental feature and the API may change in the future.\n * :::\n *\n * The `sst dev` CLI starts a multiplexer with panes for separate processes. This component allows you to add a process to it.\n *\n * :::tip\n * This component does not do anything on deploy.\n * :::\n *\n * This component only works in `sst dev`. It does not do anything in `sst deploy`.\n *\n * #### Example\n *\n * For example, you can use this to run Drizzle Studio locally.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.x.DevCommand(\"Studio\", {\n *   link: [rds],\n *   dev: {\n *     autostart: true,\n *     command: \"npx drizzle-kit studio\",\n *   },\n * });\n * ```\n *\n * Here `npx drizzle-kit studio` will be run in `sst dev` and will show up under the **Studio** tab. It'll also have access to the links from `rds`.\n */\nexport class DevCommand extends Component {\n  constructor(\n    name: string,\n    args: DevCommandArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    this.registerOutputs({\n      _dev: {\n        links: output(args.link || [])\n          .apply(Link.build)\n          .apply((links) => links.map((link) => link.name)),\n        environment: args.environment,\n        title: args.dev?.title,\n        directory: args.dev?.directory,\n        autostart: args.dev?.autostart !== false,\n        command: args.dev?.command,\n        aws: {\n          role: args.aws?.role,\n        },\n      },\n    });\n  }\n}\n\nconst __pulumiType = \"sst:sst:DevCommand\";\n// @ts-expect-error\nDevCommand.__pulumiType = __pulumiType;\n", "import { CustomResourceOptions, Input, Output, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface RdsRoleLookupInputs {\n  name: Input<string>;\n}\n\nexport class RdsRoleLookup extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: RdsRoleLookupInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.RdsRoleLookup\"),\n      `${name}.sst.aws.RdsRoleLookup`,\n      args,\n      opts,\n    );\n  }\n}\n", "import {\n  ComponentResourceOptions,\n  jsonStringify,\n  Output,\n} from \"@pulumi/pulumi\";\nimport { Component } from \"../component\";\nimport { Link } from \"../link\";\nimport { FunctionArgs, Function, Dynamo, CdnArgs, Router } from \".\";\nimport { functionBuilder } from \"./helpers/function-builder\";\nimport { env } from \"../linkable\";\nimport { Auth as AuthV1 } from \"./auth-v1\";\nimport { Input } from \"../input\";\n\nexport interface AuthArgs {\n  /**\n   * The issuer function.\n   * @deprecated renamed to `issuer`\n   * @example\n   * ```js\n   * {\n   *   authorizer: \"src/auth.handler\"\n   * }\n   * ```\n   *\n   * You can also pass in the full `FunctionArgs`.\n   *\n   * ```js\n   * {\n   *   authorizer: {\n   *     handler: \"src/auth.handler\",\n   *     link: [table]\n   *   }\n   * }\n   * ```\n   */\n  authorizer?: Input<string | FunctionArgs>;\n  /**\n   * The function that's running your OpenAuth server.\n   *\n   * @example\n   * ```js\n   * {\n   *   issuer: \"src/auth.handler\"\n   * }\n   * ```\n   *\n   * You can also pass in the full `FunctionArgs`.\n   *\n   * ```js\n   * {\n   *   issuer: {\n   *     handler: \"src/auth.handler\",\n   *     link: [table]\n   *   }\n   * }\n   * ```\n   *\n   * Since the `issuer` function is a Hono app, you want to export it with the Lambda adapter.\n   *\n   * ```ts title=\"src/auth.ts\"\n   * import { handle } from \"hono/aws-lambda\";\n   * import { issuer } from \"@openauthjs/openauth\";\n   *\n   * const app = issuer({\n   *   // ...\n   * });\n   *\n   * export const handler = handle(app);\n   * ```\n   *\n   * This `Auth` component will always use the\n   * [`DynamoStorage`](https://openauth.js.org/docs/storage/dynamo/) storage provider.\n   *\n   * :::note\n   * This will always use the `DynamoStorage` storage provider.\n   * :::\n   *\n   * Learn more on the [OpenAuth docs](https://openauth.js.org/docs/issuer/) on how to configure\n   * the `issuer` function.\n   */\n  issuer?: Input<string | FunctionArgs>;\n  /**\n   * Set a custom domain for your Auth server.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"auth.example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"auth.example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   */\n  domain?: CdnArgs[\"domain\"];\n  /**\n   * Force upgrade from `Auth.v1` to the latest `Auth` version. The only valid value\n   * is `v2`, which is the version of the new `Auth`.\n   *\n   * The latest `Auth` is powered by [OpenAuth](https://openauth.js.org). To\n   * upgrade, add the prop.\n   *\n   * ```ts\n   * {\n   *   forceUpgrade: \"v2\"\n   * }\n   * ```\n   *\n   * Run `sst deploy`.\n   *\n   * :::tip\n   * You can remove this prop after you upgrade.\n   * :::\n   *\n   * This upgrades your component and the resources it created. You can now optionally\n   * remove the prop.\n   *\n   * @internal\n   */\n  forceUpgrade?: \"v2\";\n}\n\n/**\n * The `Auth` component lets you create centralized auth servers on AWS. It deploys\n * [OpenAuth](https://openauth.js.org) to [AWS Lambda](https://aws.amazon.com/lambda/)\n * and uses [Amazon DynamoDB](https://aws.amazon.com/dynamodb/) for storage.\n *\n * :::note\n * `Auth` and OpenAuth are currently in beta.\n * :::\n *\n * @example\n *\n * #### Create an OpenAuth server\n *\n * ```ts title=\"sst.config.ts\"\n * const auth = new sst.aws.Auth(\"MyAuth\", {\n *   issuer: \"src/auth.handler\"\n * });\n * ```\n *\n * Where the `issuer` function might look like this.\n *\n * ```ts title=\"src/auth.ts\"\n * import { handle } from \"hono/aws-lambda\";\n * import { issuer } from \"@openauthjs/openauth\";\n * import { CodeProvider } from \"@openauthjs/openauth/provider/code\";\n * import { subjects } from \"./subjects\";\n *\n * const app = issuer({\n *   subjects,\n *   providers: {\n *     code: CodeProvider()\n *   },\n *   success: async (ctx, value) => {}\n * });\n *\n * export const handler = handle(app);\n * ```\n *\n * This `Auth` component will always use the\n * [`DynamoStorage`](https://openauth.js.org/docs/storage/dynamo/) storage provider.\n *\n * Learn more on the [OpenAuth docs](https://openauth.js.org/docs/issuer/) on how to configure\n * the `issuer` function.\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your auth server.\n *\n * ```js {3} title=\"sst.config.ts\"\n * new sst.aws.Auth(\"MyAuth\", {\n *   issuer: \"src/auth.handler\",\n *   domain: \"auth.example.com\"\n * });\n * ```\n *\n * #### Link to a resource\n *\n * You can link the auth server to other resources, like a function or your Next.js app,\n * that needs authentication.\n *\n * ```ts title=\"sst.config.ts\" {2}\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [auth]\n * });\n * ```\n *\n * Once linked, you can now use it to create an [OpenAuth\n * client](https://openauth.js.org/docs/client/).\n *\n * ```ts title=\"app/page.tsx\" {1,6}\n * import { Resource } from \"sst\"\n * import { createClient } from \"@openauthjs/openauth/client\"\n *\n * export const client = createClient({\n *   clientID: \"nextjs\",\n *   issuer: Resource.MyAuth.url\n * });\n * ```\n */\nexport class Auth extends Component implements Link.Linkable {\n  private readonly _table: Dynamo;\n  private readonly _issuer: Output<Function>;\n  private readonly _router?: Router;\n  public static v1 = AuthV1;\n\n  constructor(name: string, args: AuthArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n    const _version = 2;\n    const self = this;\n\n    self.registerVersion({\n      new: _version,\n      old: $cli.state.version[name],\n      message: [\n        `There is a new version of \"Auth\" that has breaking changes.`,\n        ``,\n        `What changed:`,\n        `  - The latest version is now powered by OpenAuth - https://openauth.js.org`,\n        ``,\n        `To upgrade:`,\n        `  - Set \\`forceUpgrade: \"v${_version}\"\\` on the \"Auth\" component. Learn more https://sst.dev/docs/component/aws/auth#forceupgrade`,\n        ``,\n        `To continue using v${$cli.state.version[name]}:`,\n        `  - Rename \"Auth\" to \"Auth.v${$cli.state.version[name]}\". Learn more about versioning - https://sst.dev/docs/components/#versioning`,\n      ].join(\"\\n\"),\n      forceUpgrade: args.forceUpgrade,\n    });\n\n    const table = createTable();\n    const issuer = createIssuer();\n    const router = createRouter();\n\n    this._table = table;\n    this._issuer = issuer;\n    this._router = router;\n    registerOutputs();\n\n    function registerOutputs() {\n      self.registerOutputs({\n        _hint: self.url,\n      });\n    }\n\n    function createTable() {\n      return new Dynamo(\n        `${name}Storage`,\n        {\n          fields: { pk: \"string\", sk: \"string\" },\n          primaryIndex: { hashKey: \"pk\", rangeKey: \"sk\" },\n          ttl: \"expiry\",\n        },\n        { parent: self },\n      );\n    }\n\n    function createIssuer() {\n      const fn = args.authorizer || args.issuer;\n      if (!fn) throw new Error(\"Auth: issuer field must be set\");\n      return functionBuilder(\n        `${name}Issuer`,\n        fn,\n        {\n          link: [table],\n          environment: {\n            OPENAUTH_STORAGE: jsonStringify({\n              type: \"dynamo\",\n              options: { table: table.name },\n            }),\n          },\n          _skipHint: true,\n        },\n        (args) => {\n          args.url = {\n            cors: false,\n          };\n        },\n        { parent: self },\n      ).apply((v) => v.getFunction());\n    }\n\n    function createRouter() {\n      if (!args.domain) return;\n\n      const router = new Router(\n        `${name}Router`,\n        {\n          domain: args.domain,\n          _skipHint: true,\n        },\n        { parent: self },\n      );\n      router.route(\"/\", issuer.url);\n\n      return router;\n    }\n  }\n\n  /**\n   * The URL of the Auth component.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated function URL for the issuer.\n   */\n  public get url() {\n    return this._router?.url ?? this._issuer.url.apply((v) => v.slice(0, -1));\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The DynamoDB component.\n       */\n      table: this._table,\n      /**\n       * The Function component for the issuer.\n       */\n      issuer: this._issuer,\n      /**\n       * @deprecated Use `issuer` instead.\n       * The Function component for the issuer.\n       */\n      authorizer: this._issuer,\n      /**\n       * The Router component for the custom domain.\n       */\n      router: this._router,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n      include: [\n        env({\n          OPENAUTH_ISSUER: this.url,\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Auth\";\n// @ts-expect-error\nAuth.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Output,\n  output,\n  secret,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform } from \"../component\";\nimport { Link } from \"../link\";\nimport { FunctionArgs, Function } from \"./function\";\nimport { PrivateKey } from \"@pulumi/tls\";\nimport { s3 } from \"@pulumi/aws\";\n\nexport interface AuthArgs {\n  authenticator: FunctionArgs;\n  transform?: {\n    bucketPolicy?: Transform<s3.BucketPolicyArgs>;\n  };\n}\n\nexport class Auth extends Component implements Link.Linkable {\n  private readonly _key: PrivateKey;\n  private readonly _authenticator: Output<Function>;\n\n  constructor(name: string, args: AuthArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    this._key = new PrivateKey(`${name}Keypair`, {\n      algorithm: \"RSA\",\n    });\n\n    this._authenticator = output(args.authenticator).apply((args) => {\n      return new Function(`${name}Authenticator`, {\n        url: true,\n        ...args,\n        environment: {\n          ...args.environment,\n          AUTH_PRIVATE_KEY: secret(this.key.privateKeyPemPkcs8),\n          AUTH_PUBLIC_KEY: secret(this.key.publicKeyPem),\n        },\n        _skipHint: true,\n      });\n    });\n  }\n\n  public get key() {\n    return this._key;\n  }\n\n  public get authenticator() {\n    return this._authenticator;\n  }\n\n  public get url() {\n    return this._authenticator.url!;\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        publicKey: secret(this.key.publicKeyPem),\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Auth\";\n// @ts-expect-error\nAuth.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Output, output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { parseEventBusArn } from \"./helpers/arn\";\nimport { BusLambdaSubscriber } from \"./bus-lambda-subscriber\";\nimport { cloudwatch } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\nimport { Queue } from \"./queue\";\nimport { BusQueueSubscriber } from \"./bus-queue-subscriber\";\n\nexport interface BusArgs {\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the EventBus resource.\n     */\n    bus?: Transform<cloudwatch.EventBusArgs>;\n  };\n}\n\nexport interface BusSubscriberArgs {\n  /**\n   * Filter the messages that'll be processed by the subscriber.\n   *\n   * If any single property in the pattern doesn't match\n   * an attribute assigned to the message, then the pattern rejects the message.\n   *\n   *\n   * :::tip\n   * Learn more about [event patterns](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-patterns.html).\n   * :::\n   *\n   * @example\n   * For example, if your EventBus message contains this in a JSON format.\n   * ```js\n   * {\n   *   source: \"my.source\",\n   *   detail: {\n   *      price_usd: 210.75\n   *   },\n   *   \"detail-type\": \"orderPlaced\"\n   * }\n   * ```\n   *\n   * Then this pattern accepts the message.\n   *\n   * ```js\n   * {\n   *   pattern: {\n   *     source: [\"my.source\", \"my.source2\"]\n   *   }\n   * }\n   * ```\n   */\n  pattern?: Input<{\n    /**\n     * A list of `source` values to match against. The `source` indicates where the\n     * event originated.\n     *\n     * @example\n     *\n     * ```js\n     * {\n     *   pattern: {\n     *     source: [\"my.source\", \"my.source2\"]\n     *   }\n     * }\n     * ```\n     */\n    source?: (string | any)[];\n    /**\n     * An object of `detail` values to match against, where the key is the name and\n     * the value is the pattern to match. The `detail` contains the actual\n     * data associated with the event.\n     *\n     * @example\n     * ```js\n     * {\n     *   pattern: {\n     *     detail: {\n     *       price_usd: [{numeric: [\">=\", 100]}]\n     *     }\n     *   }\n     * }\n     * ```\n     */\n    detail?: Record<string, any>;\n    /**\n     * A list of `detail-type` values to match against. The `detail-type` typically\n     * defines the kind of event that is emitted.\n     *\n     * @example\n     * ```js\n     * {\n     *   pattern: {\n     *     detailType: [\"orderPlaced\"]\n     *   }\n     * }\n     * ```\n     */\n    detailType?: (string | any)[];\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this subscription creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the EventBus rule resource.\n     */\n    rule?: Transform<cloudwatch.EventRuleArgs>;\n    /**\n     * Transform the EventBus target resource.\n     */\n    target?: Transform<cloudwatch.EventTargetArgs>;\n  };\n}\n\ninterface BusRef {\n  ref: true;\n  busName: Input<string>;\n}\n\n/**\n * The `Bus` component lets you add an [Amazon EventBridge Event Bus](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html) to your app.\n *\n * @example\n *\n * #### Create a bus\n *\n * ```ts\n * const bus = new sst.aws.Bus(\"MyBus\");\n * ```\n *\n * #### Add a subscriber\n *\n * ```ts\n * bus.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n * ```\n *\n * #### Customize the subscriber\n *\n * ```ts\n * bus.subscribe(\"MySubscriber\", {\n *   handler: \"src/subscriber.handler\",\n *   timeout: \"60 seconds\"\n * });\n * ```\n *\n * #### Link the bus to a resource\n *\n * You can link the bus to other resources, like a function or your Next.js app.\n *\n * ```ts\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [bus]\n * });\n * ```\n *\n * Once linked, you can publish messages to the bus from your app.\n *\n * ```ts title=\"app/page.tsx\" {1,9}\n * import { Resource } from \"sst\";\n * import { EventBridgeClient, PutEventsCommand } from \"@aws-sdk/client-eventbridge\";\n *\n * const eb = new EventBridgeClient({});\n *\n * await eb.send(new PutEventsCommand({\n *   Entries: [\n *     {\n *       EventBusName: Resource.MyBus.name,\n *       Source: \"my.source\",\n *       Detail: JSON.stringify({ foo: \"bar\" })\n *     }\n *   ]\n * }));\n * ```\n */\nexport class Bus extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private bus: cloudwatch.EventBus;\n\n  constructor(\n    name: string,\n    args: BusArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const self = this;\n    this.constructorName = name;\n    this.constructorOpts = opts;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.bus = ref.bus;\n      return;\n    }\n\n    const bus = createBus();\n    this.bus = bus;\n\n    function reference() {\n      const ref = args as BusRef;\n      const bus = cloudwatch.EventBus.get(\n        `${name}Bus`,\n        ref.busName,\n        undefined,\n        {\n          parent: self,\n        },\n      );\n      return { bus };\n    }\n\n    function createBus() {\n      return new cloudwatch.EventBus(\n        ...transform(args.transform?.bus, `${name}Bus`, {}, { parent: self }),\n      );\n    }\n  }\n\n  /**\n   * The ARN of the EventBus.\n   */\n  public get arn() {\n    return this.bus.arn;\n  }\n\n  /**\n   * The name of the EventBus.\n   */\n  public get name() {\n    return this.bus.name;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon EventBus resource.\n       */\n      bus: this.bus,\n    };\n  }\n\n  /**\n   * Subscribe to this EventBus with a function.\n   *\n   * @param name The name of the subscription.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * ```js title=\"sst.config.ts\"\n   * bus.subscribe(\"MySubscription\", \"src/subscriber.handler\");\n   * ```\n   *\n   * You can add a pattern to the subscription.\n   *\n   * ```js\n   * bus.subscribe(\"MySubscription\", \"src/subscriber.handler\", {\n   *   pattern: {\n   *     source: [\"my.source\", \"my.source2\"],\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * });\n   * ```\n   *\n   * To customize the subscriber function:\n   *\n   * ```js\n   * bus.subscribe(\"MySubscription\", {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * bus.subscribe(\"MySubscription\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public subscribe(\n    name: string,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: BusSubscriberArgs = {},\n  ) {\n    return Bus._subscribeFunction(\n      this.constructorName,\n      name,\n      this.nodes.bus.name,\n      this.nodes.bus.arn,\n      subscriber,\n      args,\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Subscribe to an EventBus that was not created in your app with a function.\n   *\n   * @param name The name of the subscription.\n   * @param busArn The ARN of the EventBus to subscribe to.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have an existing EventBus with the following ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const busArn = \"arn:aws:events:us-east-1:123456789012:event-bus/my-bus\";\n   * ```\n   *\n   * You can subscribe to it by passing in the ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bus.subscribe(\"MySubscription\", busArn, \"src/subscriber.handler\");\n   * ```\n   *\n   * To add a pattern to the subscription.\n   *\n   * ```js\n   * sst.aws.Bus.subscribe(\"MySubscription\", busArn, \"src/subscriber.handler\", {\n   *   pattern: {\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * });\n   * ```\n   *\n   * Or customize the subscriber function.\n   *\n   * ```js\n   * sst.aws.Bus.subscribe(\"MySubscription\", busArn, {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   */\n  public static subscribe(\n    name: string,\n    busArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: BusSubscriberArgs,\n  ) {\n    return output(busArn).apply((busArn) => {\n      const busName = parseEventBusArn(busArn).busName;\n      return this._subscribeFunction(\n        busName,\n        name,\n        busName,\n        busArn,\n        subscriber,\n        args,\n      );\n    });\n  }\n\n  private static _subscribeFunction(\n    name: string,\n    subscriberName: string,\n    busName: Input<string>,\n    busArn: string | Output<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: BusSubscriberArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    return output(args).apply((args) => {\n      return new BusLambdaSubscriber(\n        `${name}Subscriber${subscriberName}`,\n        {\n          bus: { name: busName, arn: busArn },\n          subscriber,\n          ...args,\n        },\n        opts,\n      );\n    });\n  }\n\n  /**\n   * Subscribe to this EventBus with an SQS Queue.\n   *\n   * @param name The name of the subscription.\n   * @param queue The queue that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have a queue.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const queue = new sst.aws.Queue(\"MyQueue\");\n   * ```\n   *\n   * You can subscribe to this bus with it.\n   *\n   * ```js title=\"sst.config.ts\"\n   * bus.subscribeQueue(\"MySubscription\", queue);\n   * ```\n   *\n   * You can also add a filter to the subscription.\n   *\n   * ```js\n   * bus.subscribeQueue(\"MySubscription\", queue, {\n   *   filter: {\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing SQS queue.\n   *\n   * ```js\n   * bus.subscribeQueue(\"MySubscription\", \"arn:aws:sqs:us-east-1:123456789012:my-queue\");\n   * ```\n   */\n  public subscribeQueue(\n    name: string,\n    queue: Input<string | Queue>,\n    args: BusSubscriberArgs = {},\n  ) {\n    return Bus._subscribeQueue(\n      this.constructorName,\n      name,\n      this.nodes.bus.arn,\n      this.nodes.bus.name,\n      queue,\n      args,\n    );\n  }\n\n  /**\n   * Subscribe to an existing EventBus with an SQS Queue.\n   *\n   * @param name The name of the subscription.\n   * @param busArn The ARN of the EventBus to subscribe to.\n   * @param queue The queue that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have an existing EventBus and an SQS Queue.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const busArn = \"arn:aws:events:us-east-1:123456789012:event-bus/MyBus\";\n   * const queue = new sst.aws.Queue(\"MyQueue\");\n   * ```\n   *\n   * You can subscribe to the bus with the queue.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bus.subscribeQueue(\"MySubscription\", busArn, queue);\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Bus.subscribeQueue(MySubscription, busArn, queue, {\n   *   filter: {\n   *     price_usd: [{numeric: [\">=\", 100]}]\n   *   }\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing SQS queue.\n   *\n   * ```js\n   * sst.aws.Bus.subscribeQueue(\"MySubscription\", busArn, \"arn:aws:sqs:us-east-1:123456789012:my-queue\");\n   * ```\n   */\n  public static subscribeQueue(\n    name: string,\n    busArn: Input<string>,\n    queue: Input<string | Queue>,\n    args?: BusSubscriberArgs,\n  ) {\n    return output(busArn).apply((busArn) => {\n      const busName = parseEventBusArn(busArn).busName;\n      return this._subscribeQueue(busName, name, busArn, busName, queue, args);\n    });\n  }\n\n  private static _subscribeQueue(\n    name: string,\n    subscriberName: string,\n    busArn: Input<string>,\n    busName: Input<string>,\n    queue: Input<string | Queue>,\n    args: BusSubscriberArgs = {},\n  ) {\n    return output(args).apply((args) => {\n      return new BusQueueSubscriber(`${name}Subscriber${subscriberName}`, {\n        bus: { name: busName, arn: busArn },\n        queue,\n        ...args,\n      });\n    });\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        name: this.name,\n        arn: this.arn,\n      },\n      include: [\n        permission({\n          actions: [\"events:*\"],\n          resources: [this.nodes.bus.arn],\n        }),\n      ],\n    };\n  }\n\n  /**\n   * Reference an existing EventBus with its ARN. This is useful when you create a\n   * bus in one stage and want to share it in another stage. It avoids having to create\n   * a new bus in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share EventBus across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param busName The name of the existing EventBus.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a bus in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new bus, you want to share the bus from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const bus = $app.stage === \"frank\"\n   *   ? sst.aws.Bus.get(\"MyBus\", \"app-dev-MyBus\")\n   *   : new sst.aws.Bus(\"MyBus\");\n   * ```\n   *\n   * Here `app-dev-MyBus` is the name of the bus created in the `dev` stage. You can find\n   * this by outputting the bus name in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return bus.name;\n   * ```\n   */\n  public static get(\n    name: string,\n    busName: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Bus(\n      name,\n      {\n        ref: true,\n        busName,\n      } as BusArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Bus\";\n// @ts-expect-error\nBus.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { Function, FunctionArgs } from \"./function\";\nimport { BusBaseSubscriberArgs, createRule } from \"./bus-base-subscriber\";\nimport { cloudwatch, lambda } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\n\nexport interface Args extends BusBaseSubscriberArgs {\n  /**\n   * The subscriber function.\n   */\n  subscriber: Input<string | FunctionArgs>;\n}\n\n/**\n * The `BusLambdaSubscriber` component is internally used by the `Bus` component\n * to add subscriptions to [Amazon EventBridge Event Bus](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribe` method of the `Bus` component.\n */\nexport class BusLambdaSubscriber extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly permission: lambda.Permission;\n  private readonly rule: cloudwatch.EventRule;\n  private readonly target: cloudwatch.EventTarget;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const bus = output(args.bus);\n    const rule = createRule(name, bus.name, args, self);\n    const fn = createFunction();\n    const permission = createPermission();\n    const target = createTarget();\n\n    this.fn = fn;\n    this.permission = permission;\n    this.rule = rule;\n    this.target = target;\n\n    function createFunction() {\n      return functionBuilder(\n        `${name}Function`,\n        args.subscriber,\n        {\n          description: interpolate`Subscribed to ${bus.name}`,\n        },\n        undefined,\n        { parent: self },\n      );\n    }\n\n    function createPermission() {\n      return new lambda.Permission(\n        `${name}Permission`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn,\n          principal: \"events.amazonaws.com\",\n          sourceArn: rule.arn,\n        },\n        { parent: self },\n      );\n    }\n\n    function createTarget() {\n      return new cloudwatch.EventTarget(\n        ...transform(\n          args?.transform?.target,\n          `${name}Target`,\n          {\n            arn: fn.arn,\n            rule: rule.name,\n            eventBusName: bus.name,\n          },\n          { parent: self, dependsOn: [permission] },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function that'll be notified.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda permission.\n       */\n      permission: this.permission,\n      /**\n       * The EventBus rule.\n       */\n      rule: this.rule,\n      /**\n       * The EventBus target.\n       */\n      target: this.target,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:BusLambdaSubscriber\";\n// @ts-expect-error\nBusLambdaSubscriber.__pulumiType = __pulumiType;\n", "import { Input, output } from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { cloudwatch } from \"@pulumi/aws\";\nimport { BusSubscriberArgs } from \"./bus\";\n\nexport interface BusBaseSubscriberArgs extends BusSubscriberArgs {\n  /**\n   * The bus to use.\n   */\n  bus: Input<{\n    /**\n     * The ARN of the bus.\n     */\n    arn: Input<string>;\n    /**\n     * The name of the bus.\n     */\n    name: Input<string>;\n  }>;\n}\n\nexport function createRule(\n  name: string,\n  eventBusName: Input<string>,\n  args: BusBaseSubscriberArgs,\n  parent: Component,\n) {\n  return new cloudwatch.EventRule(\n    ...transform(\n      args?.transform?.rule,\n      `${name}Rule`,\n      {\n        eventBusName,\n        eventPattern: args.pattern\n          ? output(args.pattern).apply((pattern) =>\n              JSON.stringify({\n                \"detail-type\": pattern.detailType,\n                source: pattern.source,\n                detail: pattern.detail,\n              }),\n            )\n          : JSON.stringify({\n              source: [{ prefix: \"\" }],\n            }),\n      },\n      { parent },\n    ),\n  );\n}\n", "import { ComponentResourceOptions, Input, output } from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { BusBaseSubscriberArgs, createRule } from \"./bus-base-subscriber\";\nimport { cloudwatch, sqs } from \"@pulumi/aws\";\nimport { Queue } from \"./queue\";\n\nexport interface Args extends BusBaseSubscriberArgs {\n  /**\n   * The ARN of the SQS Queue.\n   */\n  queue: Input<string | Queue>;\n}\n\n/**\n * The `BusQueueSubscriber` component is internally used by the `Bus` component\n * to add subscriptions to [Amazon EventBridge Event Bus](https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-event-bus.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribeQueue` method of the `Bus` component.\n */\nexport class BusQueueSubscriber extends Component {\n  private readonly policy: sqs.QueuePolicy;\n  private readonly rule: cloudwatch.EventRule;\n  private readonly target: cloudwatch.EventTarget;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const bus = output(args.bus);\n    const queueArn = output(args.queue).apply((queue) =>\n      queue instanceof Queue ? queue.arn : output(queue),\n    );\n    const policy = createPolicy();\n    const rule = createRule(name, bus.name, args, self);\n    const target = createTarget();\n\n    this.policy = policy;\n    this.rule = rule;\n    this.target = target;\n\n    function createPolicy() {\n      return Queue.createPolicy(`${name}Policy`, queueArn, { parent: self });\n    }\n\n    function createTarget() {\n      return new cloudwatch.EventTarget(\n        ...transform(\n          args?.transform?.target,\n          `${name}Target`,\n          {\n            arn: queueArn,\n            rule: rule.name,\n            eventBusName: bus.name,\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The SQS Queue policy.\n       */\n      policy: this.policy,\n      /**\n       * The EventBus rule.\n       */\n      rule: this.rule,\n      /**\n       * The EventBus target.\n       */\n      target: this.target,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:BusQueueSubscriber\";\n// @ts-expect-error\nBusQueueSubscriber.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Output, output } from \"@pulumi/pulumi\";\nimport {\n  Component,\n  ComponentVersion,\n  parseComponentVersion,\n  Prettify,\n  Transform,\n  transform,\n} from \"../component\";\nimport { Input } from \"../input\";\nimport { Service, ServiceArgs } from \"./service\";\nimport { ecs } from \"@pulumi/aws\";\nimport { Cluster as ClusterV1 } from \"./cluster-v1\";\nimport { Vpc } from \"./vpc\";\nimport { Vpc as VpcV1 } from \"./vpc-v1.js\";\nimport { Task, TaskArgs } from \"./task\";\nimport { VisibleError } from \"../error\";\nexport type { ClusterArgs as ClusterV1Args } from \"./cluster-v1\";\n\ntype ClusterVpcArgs = {\n  /**\n   * The ID of the VPC.\n   */\n  id: Input<string>;\n  /**\n   * A list of VPC security group IDs for the service.\n   */\n  securityGroups: Input<Input<string>[]>;\n  /**\n   * A list of subnet IDs in the VPC to place the services in.\n   * @deprecated Use `containerSubnets` instead.\n   */\n  serviceSubnets?: Input<Input<string>[]>;\n  /**\n   * A list of subnet IDs in the VPC to place the containers in.\n   */\n  containerSubnets?: Input<Input<string>[]>;\n  /**\n   * A list of subnet IDs in the VPC to place the load balancer in.\n   */\n  loadBalancerSubnets: Input<Input<string>[]>;\n  /**\n   * The ID of the Cloud Map namespace to use for the service.\n   */\n  cloudmapNamespaceId?: Input<string>;\n  /**\n   * The name of the Cloud Map namespace to use for the service.\n   */\n  cloudmapNamespaceName?: Input<string>;\n};\n\nexport interface ClusterArgs {\n  /**\n   * The VPC to use for the cluster.\n   *\n   * @example\n   * Create a `Vpc` component.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * Or reference an existing VPC.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = sst.aws.Vpc.get(\"MyVpc\", {\n   *   id: \"vpc-12345678901234567\"\n   * });\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   *\n   * By default, both the load balancer and the services are deployed in public subnets.\n   * The above is equivalent to:\n   *\n   * ```js\n   * {\n   *   vpc: {\n   *     id: myVpc.id,\n   *     securityGroups: myVpc.securityGroups,\n   *     containerSubnets: myVpc.publicSubnets,\n   *     loadBalancerSubnets: myVpc.publicSubnets,\n   *     cloudmapNamespaceId: myVpc.nodes.cloudmapNamespace.id,\n   *     cloudmapNamespaceName: myVpc.nodes.cloudmapNamespace.name\n   *   }\n   * }\n   * ```\n   */\n  vpc: Vpc | Input<Prettify<ClusterVpcArgs>>;\n  /** @internal */\n  forceUpgrade?: \"v2\";\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the ECS Cluster resource.\n     */\n    cluster?: Transform<ecs.ClusterArgs>;\n  };\n}\n\nexport interface ClusterGetArgs {\n  /**\n   * The ID of the cluster.\n   */\n  id: Input<string>;\n  /**\n   * The VPC used for the cluster.\n   */\n  vpc: ClusterArgs[\"vpc\"];\n}\n\ninterface ClusterRef {\n  ref: true;\n  id: Input<string>;\n  vpc: ClusterArgs[\"vpc\"];\n}\n\n/**\n * The `Cluster` component lets you create an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html) for your app.\n * add `Service` and `Task` components to it.\n *\n * @example\n *\n * ```ts title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n * ```\n *\n * Once created, you can add the following to it:\n *\n * 1. `Service`: These are containers that are always running, like web or\n *   application servers. They automatically restart if they fail.\n * 2. `Task`: These are containers that are used for long running asynchronous work,\n *   like data processing.\n */\nexport class Cluster extends Component {\n  private constructorOpts: ComponentResourceOptions;\n  private cluster: Output<ecs.Cluster>;\n  private _vpc:\n    | Vpc\n    | Output<\n        Required<Pick<ClusterVpcArgs, \"containerSubnets\">> &\n          Omit<ClusterVpcArgs, \"containerSubnets\" | \"serviceSubnets\">\n      >;\n  public static v1 = ClusterV1;\n\n  constructor(\n    name: string,\n    args: ClusterArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const _version = { major: 2, minor: 0 };\n    const self = this;\n    this.constructorOpts = opts;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      const vpc = normalizeVpc();\n      this.cluster = ref.cluster;\n      this._vpc = vpc;\n      return;\n    }\n\n    registerVersion();\n    const vpc = normalizeVpc();\n    const cluster = createCluster();\n    createCapacityProviders();\n\n    this.cluster = output(cluster);\n    this._vpc = vpc;\n\n    function reference() {\n      const ref = args as ClusterRef;\n      const cluster = ecs.Cluster.get(`${name}Cluster`, ref.id, undefined, {\n        parent: self,\n      });\n      const clusterValidated = cluster.tags.apply((tags) => {\n        const refVersion = tags?.[\"sst:ref:version\"]\n          ? parseComponentVersion(tags[\"sst:ref:version\"])\n          : undefined;\n\n        if (refVersion?.minor !== _version.minor) {\n          throw new VisibleError(\n            [\n              `There have been some minor changes to the \"Cluster\" component that's being referenced by \"${name}\".\\n`,\n              `To update, you'll need to redeploy the stage where the cluster was created. And then redeploy this stage.`,\n            ].join(\"\\n\"),\n          );\n        }\n\n        registerVersion(refVersion);\n\n        return cluster;\n      });\n\n      return { cluster: clusterValidated };\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc.v1 component\n      if (args.vpc instanceof VpcV1) {\n        throw new VisibleError(\n          `You are using the \"Vpc.v1\" component. Please migrate to the latest \"Vpc\" component.`,\n        );\n      }\n\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        return args.vpc;\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc).apply((vpc) => {\n        if (vpc.containerSubnets && vpc.serviceSubnets)\n          throw new VisibleError(\n            `You cannot provide both \"vpc.containerSubnets\" and \"vpc.serviceSubnets\" in the \"${name}\" Cluster component. The \"serviceSubnets\" property has been deprecated. Use \"containerSubnets\" instead.`,\n          );\n        if (!vpc.containerSubnets && !vpc.serviceSubnets)\n          throw new VisibleError(\n            `Missing \"vpc.containerSubnets\" for the \"${name}\" Cluster component.`,\n          );\n\n        if (\n          (vpc.cloudmapNamespaceId && !vpc.cloudmapNamespaceName) ||\n          (!vpc.cloudmapNamespaceId && vpc.cloudmapNamespaceName)\n        )\n          throw new VisibleError(\n            `You must provide both \"vpc.cloudmapNamespaceId\" and \"vpc.cloudmapNamespaceName\" for the \"${name}\" Cluster component.`,\n          );\n\n        return {\n          ...vpc,\n          containerSubnets: (vpc.containerSubnets ?? vpc.serviceSubnets)!,\n          serviceSubnets: undefined,\n        };\n      });\n    }\n\n    function createCluster() {\n      return new ecs.Cluster(\n        ...transform(\n          args.transform?.cluster,\n          `${name}Cluster`,\n          {\n            tags: {\n              \"sst:ref:version\": `${_version.major}.${_version.minor}`,\n            },\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function registerVersion(overrideVersion?: ComponentVersion) {\n      const newMajorVersion = _version.major;\n      const oldMajorVersion =\n        overrideVersion?.major ?? $cli.state.version[name];\n      self.registerVersion({\n        new: newMajorVersion,\n        old: oldMajorVersion,\n        message: [\n          `There is a new version of \"Cluster\" that has breaking changes.`,\n          ``,\n          `What changed:`,\n          `  - In the old version, load balancers were deployed in public subnets, and services were deployed in private subnets. The VPC was required to have NAT gateways.`,\n          `  - In the latest version, both the load balancer and the services are deployed in public subnets. The VPC is not required to have NAT gateways. So the new default makes this cheaper to run.`,\n          ``,\n          `To upgrade:`,\n          `  - Set \\`forceUpgrade: \"v${newMajorVersion}\"\\` on the \"Cluster\" component. Learn more https://sst.dev/docs/component/aws/cluster#forceupgrade`,\n          ``,\n          `To continue using v${$cli.state.version[name]}:`,\n          `  - Rename \"Cluster\" to \"Cluster.v${$cli.state.version[name]}\". Learn more about versioning - https://sst.dev/docs/components/#versioning`,\n        ].join(\"\\n\"),\n        forceUpgrade: args.forceUpgrade,\n      });\n    }\n\n    function createCapacityProviders() {\n      return new ecs.ClusterCapacityProviders(\n        `${name}CapacityProviders`,\n        {\n          clusterName: cluster.name,\n          capacityProviders: [\"FARGATE\", \"FARGATE_SPOT\"],\n        },\n        { parent: self },\n      );\n    }\n  }\n\n  /**\n   * The cluster ID.\n   */\n  public get id() {\n    return this.cluster.id;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon ECS Cluster.\n       */\n      cluster: this.cluster,\n    };\n  }\n\n  /**\n   * The VPC configuration for the cluster.\n   * @internal\n   */\n  public get vpc() {\n    return this._vpc;\n  }\n\n  /**\n   * Add a service to the cluster.\n   *\n   * @deprecated Use the `Service` component directly to create services. To migrate, change\n   *\n   * ```ts\n   * cluster.addService(\"MyService\", { ...args });\n   * ```\n   *\n   * to\n   *\n   * ```ts\n   * new sst.aws.Service(\"MyService\", { cluster, ...args });\n   * ```\n   *\n   * @param name Name of the service.\n   * @param args? Configure the service.\n   * @param opts? Resource options.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * cluster.addService(\"MyService\");\n   * ```\n   *\n   * You can also configure the service. For example, set a custom domain.\n   *\n   * ```js {2} title=\"sst.config.ts\"\n   * cluster.addService(\"MyService\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Enable auto-scaling.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * cluster.addService(\"MyService\", {\n   *   scaling: {\n   *     min: 4,\n   *     max: 16,\n   *     cpuUtilization: 50,\n   *     memoryUtilization: 50,\n   *   }\n   * });\n   * ```\n   *\n   * By default this starts a single container. To add multiple containers in the service, pass in an array of containers args.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * cluster.addService(\"MyService\", {\n   *   architecture: \"arm64\",\n   *   containers: [\n   *     {\n   *       name: \"app\",\n   *       image: \"nginxdemos/hello:plain-text\"\n   *     },\n   *     {\n   *       name: \"admin\",\n   *       image: {\n   *         context: \"./admin\",\n   *         dockerfile: \"Dockerfile\"\n   *       }\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * This is useful for running sidecar containers.\n   */\n  public addService(\n    name: string,\n    args?: Omit<ServiceArgs, \"cluster\">,\n    opts?: ComponentResourceOptions,\n  ) {\n    // Do not prefix the service to allow `Resource.MyService` to work.\n    return new Service(\n      name,\n      {\n        cluster: this,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider, ...opts },\n    );\n  }\n\n  /**\n   * Add a task to the cluster.\n   *\n   * @deprecated Use the `Task` component directly to create tasks. To migrate, change\n   *\n   * ```ts\n   * cluster.addTask(\"MyTask\", { ...args });\n   * ```\n   *\n   * to\n   *\n   * ```ts\n   * new sst.aws.Task(\"MyTask\", { cluster, ...args });\n   * ```\n   *\n   * @param name Name of the task.\n   * @param args? Configure the task.\n   * @param opts? Resource options.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * cluster.addTask(\"MyTask\");\n   * ```\n   *\n   * You can also configure the task. By default this starts a single container.\n   * To add multiple containers in the task, pass in an array of containers args.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * cluster.addTask(\"MyTask\", {\n   *   architecture: \"arm64\",\n   *   containers: [\n   *     {\n   *       name: \"app\",\n   *       image: \"nginxdemos/hello:plain-text\"\n   *     },\n   *     {\n   *       name: \"admin\",\n   *       image: {\n   *         context: \"./admin\",\n   *         dockerfile: \"Dockerfile\"\n   *       }\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * This is useful for running sidecar containers.\n   */\n  public addTask(\n    name: string,\n    args?: Omit<TaskArgs, \"cluster\">,\n    opts?: ComponentResourceOptions,\n  ) {\n    // Do not prefix the task to allow `Resource.MyTask` to work.\n    return new Task(\n      name,\n      {\n        cluster: this,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider, ...opts },\n    );\n  }\n\n  /**\n   * Reference an existing ECS Cluster with the given ID. This is useful when you\n   * create a cluster in one stage and want to share it in another. It avoids\n   * having to create a new cluster in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share cluster across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param args The arguments to get the cluster.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a cluster in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new cluster, you want to share the same cluster from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const cluster = $app.stage === \"frank\"\n   *   ? sst.aws.Cluster.get(\"MyCluster\", {\n   *       id: \"arn:aws:ecs:us-east-1:123456789012:cluster/app-dev-MyCluster\",\n   *       vpc,\n   *     })\n   *   : new sst.aws.Cluster(\"MyCluster\", { vpc });\n   * ```\n   *\n   * Here `arn:aws:ecs:us-east-1:123456789012:cluster/app-dev-MyCluster` is the ID of the\n   * cluster created in the `dev` stage. You can find these by outputting the cluster ID\n   * in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   id: cluster.id,\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    args: ClusterGetArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Cluster(\n      name,\n      { ref: true, id: args.id, vpc: args.vpc } as ClusterArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Cluster\";\n// @ts-expect-error\nCluster.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Output,\n  all,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Prettify, Transform, transform } from \"../component.js\";\nimport { dns as awsDns } from \"./dns.js\";\nimport { VisibleError } from \"../error.js\";\nimport { DnsValidatedCertificate } from \"./dns-validated-certificate.js\";\nimport { Link } from \"../link.js\";\nimport { URL_UNAVAILABLE } from \"./linkable.js\";\nimport {\n  appautoscaling,\n  ec2,\n  ecs,\n  getRegionOutput,\n  iam,\n  lb,\n  servicediscovery,\n} from \"@pulumi/aws\";\nimport { Vpc } from \"./vpc.js\";\nimport { DevCommand } from \"../experimental/dev-command.js\";\nimport { DurationMinutes, toSeconds } from \"../duration.js\";\nimport { Input } from \"../input.js\";\nimport {\n  FargateBaseArgs,\n  FargateContainerArgs,\n  createExecutionRole,\n  createTaskDefinition,\n  createTaskRole,\n  normalizeArchitecture,\n  normalizeContainers,\n  normalizeCpu,\n  normalizeMemory,\n  normalizeStorage,\n} from \"./fargate.js\";\nimport { Dns } from \"../dns.js\";\nimport { hashStringToPrettyString } from \"../naming.js\";\n\ntype Port = `${number}/${\"http\" | \"https\" | \"tcp\" | \"udp\" | \"tcp_udp\" | \"tls\"}`;\n\ninterface ServiceRules {\n  /**\n   * The port and protocol the service listens on. Uses the format `{port}/{protocol}`.\n   *\n   * @example\n   * ```js\n   * {\n   *   listen: \"80/http\"\n   * }\n   * ```\n   */\n  listen: Input<Port>;\n  /**\n   * The port and protocol of the container the service forwards the traffic to. Uses the\n   * format `{port}/{protocol}`.\n   *\n   * @example\n   * ```js\n   * {\n   *   forward: \"80/http\"\n   * }\n   * ```\n   * @default The same port and protocol as `listen`.\n   */\n  forward?: Input<Port>;\n  /**\n   * The name of the container to forward the traffic to. This maps to the `name` defined in the\n   * `container` prop.\n   *\n   * You only need this if there's more than one container. If there's only one container, the\n   * traffic is automatically forwarded there.\n   */\n  container?: Input<string>;\n  /**\n   * The port and protocol to redirect the traffic to. Uses the format `{port}/{protocol}`.\n   *\n   * @example\n   * ```js\n   * {\n   *   redirect: \"80/http\"\n   * }\n   * ```\n   */\n  redirect?: Input<Port>;\n  /**\n   * @deprecated Use `conditions.path` instead.\n   */\n  path?: Input<string>;\n  /**\n   * The conditions for the redirect. Only applicable to `http` and `https` protocols.\n   */\n  conditions?: Input<{\n    /**\n     * Configure path-based routing. Only requests matching the path are forwarded to\n     * the container.\n     *\n     * ```js\n     * {\n     *   path: \"/api/*\"\n     * }\n     * ```\n     *\n     * The path pattern is case-sensitive, supports wildcards, and can be up to 128\n     * characters.\n     * - `*` matches 0 or more characters. For example, `/api/*` matches `/api/` or\n     *   `/api/orders`.\n     * - `?` matches exactly 1 character. For example, `/api/?.png` matches `/api/a.png`.\n     *\n     * @default Requests to all paths are forwarded.\n     */\n    path?: Input<string>;\n    /**\n     * Configure query string based routing. Only requests matching one of the query\n     * string conditions are forwarded to the container.\n     *\n     * Takes a list of `key`, the name of the query string parameter, and `value` pairs.\n     * Where `value` is the value of the query string parameter. But it can be a pattern as well.\n     *\n     * If multiple `key` and `value` pairs are provided, it'll match requests with **any** of the\n     * query string parameters.\n     *\n     * @default Query string is not checked when forwarding requests.\n     *\n     * @example\n     *\n     * For example, to match requests with query string `version=v1`.\n     *\n     * ```js\n     * {\n     *   query: [\n     *     { key: \"version\", value: \"v1\" }\n     *   ]\n     * }\n     * ```\n     *\n     * Or match requests with query string matching `env=test*`.\n     *\n     * ```js\n     * {\n     *   query: [\n     *     { key: \"env\", value: \"test*\" }\n     *   ]\n     * }\n     * ```\n     *\n     * Match requests with query string `version=v1` **or** `env=test*`.\n     *\n     * ```js\n     * {\n     *   query: [\n     *     { key: \"version\", value: \"v1\" },\n     *     { key: \"env\", value: \"test*\" }\n     *   ]\n     * }\n     * ```\n     *\n     * Match requests with any query string key with value `example`.\n     *\n     * ```js\n     * {\n     *   query: [\n     *     { value: \"example\" }\n     *   ]\n     * }\n     * ```\n     */\n    query?: Input<\n      Input<{\n        /**\n         * The name of the query string parameter.\n         */\n        key?: Input<string>;\n        /**\n         * The value of the query string parameter.\n         *\n         * If no `key` is provided, it'll match any request where a query string parameter with\n         * the given value exists.\n         */\n        value: Input<string>;\n      }>[]\n    >;\n    /**\n     * Configure header based routing. Only requests matching the header\n     * name and values are forwarded to the container.\n     *\n     * Both the header name and values are case insensitive.\n     *\n     * @default Header is not checked when forwarding requests.\n     *\n     * @example\n     *\n     * For example, if you specify `X-Custom-Header` as the name and `Value1`\n     * as a value, it will match requests with the header\n     * `x-custom-header: value1` as well.\n     *\n     * ```js\n     * {\n     *   header: {\n     *     name: \"X-Custom-Header\",\n     *     values: [\"Value1\", \"Value2\", \"Prefix*\"]\n     *   }\n     * }\n     * ```\n     */\n    header?: Input<{\n      /**\n       * The name of the HTTP header field to check. This is case-insensitive.\n       */\n      name: Input<string>;\n\n      /**\n       * The values to match against the header value. The rule matches if the\n       * request header matches any of these values. Values are case-insensitive\n       * and support wildcards (`*` and `?`) for pattern matching.\n       */\n      values: Input<Input<string>>[];\n    }>;\n  }>;\n}\n\ninterface ServiceContainerArgs extends FargateContainerArgs {\n  /**\n   * Configure the health check for the container. Same as the top-level\n   * [`health`](#health).\n   */\n  health?: ServiceArgs[\"health\"];\n  /**\n   * Configure how this container works in `sst dev`. Same as the top-level\n   * [`dev`](#dev).\n   */\n  dev?: {\n    /**\n     * The command that `sst dev` runs to start this in dev mode. Same as the top-level\n     * [`dev.command`](#dev-command).\n     */\n    command: Input<string>;\n    /**\n     * Configure if you want to automatically start this when `sst dev` starts. Same as the\n     * top-level [`dev.autostart`](#dev-autostart).\n     */\n    autostart?: Input<boolean>;\n    /**\n     * Change the directory from where the `command` is run. Same as the top-level\n     * [`dev.directory`](#dev-directory).\n     */\n    directory?: Input<string>;\n  };\n}\n\nexport interface ServiceArgs extends FargateBaseArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your service is not deployed.\n   * :::\n   *\n   * By default, your service in not deployed in `sst dev`. Instead, you can set the\n   * `dev.command` and it'll be started locally in a separate tab in the\n   * `sst dev` multiplexer. Read more about [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * This makes it so that the container doesn't have to be redeployed on every change. To\n   * disable this and deploy your service in `sst dev`, pass in `false`.\n   */\n  dev?:\n    | false\n    | {\n        /**\n         * The `url` when this is running in dev mode.\n         *\n         * Since this component is not deployed in `sst dev`, there is no real URL. But if you are\n         * using this component's `url` or linking to this component's `url`, it can be useful to\n         * have a placeholder URL. It avoids having to handle it being `undefined`.\n         * @default `\"http://url-unavailable-in-dev.mode\"`\n         */\n        url?: Input<string>;\n        /**\n         * The command that `sst dev` runs to start this in dev mode. This is the command you run\n         * when you want to run your service locally.\n         */\n        command?: Input<string>;\n        /**\n         * Configure if you want to automatically start this when `sst dev` starts. You can still\n         * start it manually later.\n         * @default `true`\n         */\n        autostart?: Input<boolean>;\n        /**\n         * Change the directory from where the `command` is run.\n         * @default Uses the `image.dockerfile` path\n         */\n        directory?: Input<string>;\n      };\n  /**\n   * Configure a public endpoint for the service. When configured, a load balancer\n   * will be created to route traffic to the containers. By default, the endpoint is an\n   * auto-generated load balancer URL.\n   *\n   * You can also add a custom domain for the public endpoint.\n   * @deprecated Use `loadBalancer` instead.\n   * @example\n   *\n   * ```js\n   * {\n   *   public: {\n   *     domain: \"example.com\",\n   *     rules: [\n   *       { listen: \"80/http\" },\n   *       { listen: \"443/https\", forward: \"80/http\" }\n   *     ]\n   *   }\n   * }\n   * ```\n   */\n  public?: Input<{\n    /**\n     * Set a custom domain for your public endpoint.\n     *\n     * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n     * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n     * DNS records.\n     *\n     * :::tip\n     * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n     * providers.\n     * :::\n     *\n     * @example\n     *\n     * By default this assumes the domain is hosted on Route 53.\n     *\n     * ```js\n     * {\n     *   domain: \"example.com\"\n     * }\n     * ```\n     *\n     * For domains hosted on Cloudflare.\n     *\n     * ```js\n     * {\n     *   domain: {\n     *     name: \"example.com\",\n     *     dns: sst.cloudflare.dns()\n     *   }\n     * }\n     * ```\n     */\n    domain?: Input<\n      | string\n      | {\n          /**\n           * The custom domain you want to use.\n           *\n           * @example\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\"\n           *   }\n           * }\n           * ```\n           *\n           * Can also include subdomains based on the current stage.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: `${$app.stage}.example.com`\n           *   }\n           * }\n           * ```\n           */\n          name: Input<string>;\n          /**\n           * Alias domains that should be used.\n           *\n           * @example\n           * ```js {4}\n           * {\n           *   domain: {\n           *     name: \"app1.example.com\",\n           *     aliases: [\"app2.example.com\"]\n           *   }\n           * }\n           * ```\n           */\n          aliases?: Input<string[]>;\n          /**\n           * The ARN of an ACM (AWS Certificate Manager) certificate that proves ownership of the\n           * domain. By default, a certificate is created and validated automatically.\n           *\n           * :::tip\n           * You need to pass in a `cert` for domains that are not hosted on supported `dns` providers.\n           * :::\n           *\n           * To manually set up a domain on an unsupported provider, you'll need to:\n           *\n           * 1. [Validate that you own the domain](https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html) by creating an ACM certificate. You can either validate it by setting a DNS record or by verifying an email sent to the domain owner.\n           * 2. Once validated, set the certificate ARN as the `cert` and set `dns` to `false`.\n           * 3. Add the DNS records in your provider to point to the load balancer endpoint.\n           *\n           * @example\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\",\n           *     dns: false,\n           *     cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n           *   }\n           * }\n           * ```\n           */\n          cert?: Input<string>;\n          /**\n           * The DNS provider to use for the domain. Defaults to the AWS.\n           *\n           * Takes an adapter that can create the DNS records on the provider. This can automate\n           * validating the domain and setting up the DNS routing.\n           *\n           * Supports Route 53, Cloudflare, and Vercel adapters. For other providers, you'll need\n           * to set `dns` to `false` and pass in a certificate validating ownership via `cert`.\n           *\n           * @default `sst.aws.dns`\n           *\n           * @example\n           *\n           * Specify the hosted zone ID for the Route 53 domain.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\",\n           *     dns: sst.aws.dns({\n           *       zone: \"Z2FDTNDATAQYW2\"\n           *     })\n           *   }\n           * }\n           * ```\n           *\n           * Use a domain hosted on Cloudflare, needs the Cloudflare provider.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\",\n           *     dns: sst.cloudflare.dns()\n           *   }\n           * }\n           * ```\n           *\n           * Use a domain hosted on Vercel, needs the Vercel provider.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\",\n           *     dns: sst.vercel.dns()\n           *   }\n           * }\n           * ```\n           */\n          dns?: Input<false | (Dns & {})>;\n        }\n    >;\n    /** @deprecated Use `rules` instead. */\n    ports?: Input<Prettify<ServiceRules>[]>;\n    /**\n     * Configure the mapping for the ports the public endpoint listens to and forwards to\n     * the service.\n     * This supports two types of protocols:\n     *\n     * 1. Application Layer Protocols: `http` and `https`. This'll create an [Application Load Balancer](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html).\n     * 2. Network Layer Protocols: `tcp`, `udp`, `tcp_udp`, and `tls`. This'll create a [Network Load Balancer](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html).\n     *\n     * :::note\n     * If you are listening  on `https` or `tls`, you need to specify a custom `public.domain`.\n     * :::\n     *\n     * You can **not** configure both application and network layer protocols for the same\n     * service.\n     *\n     * @example\n     * Here we are listening on port `80` and forwarding it to the service on port `8080`.\n     * ```js\n     * {\n     *   public: {\n     *     rules: [\n     *       { listen: \"80/http\", forward: \"8080/http\" }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * The `forward` port and protocol defaults to the `listen` port and protocol. So in this\n     * case both are `80/http`.\n     *\n     * ```js\n     * {\n     *   public: {\n     *     rules: [\n     *       { listen: \"80/http\" }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * If multiple containers are configured via the `containers` argument, you need to\n     * specify which container the traffic should be forwarded to.\n     *\n     * ```js\n     * {\n     *   public: {\n     *     rules: [\n     *       { listen: \"80/http\", container: \"app\" },\n     *       { listen: \"8000/http\", container: \"admin\" },\n     *     ]\n     *   }\n     * }\n     * ```\n     */\n    rules?: Input<Prettify<ServiceRules>[]>;\n  }>;\n  /**\n   * Configure a load balancer to route traffic to the containers.\n   *\n   * While you can expose a service through API Gateway, it's better to use a load balancer\n   * for most traditional web applications. It is more expensive to start but at higher\n   * levels of traffic it ends up being more cost effective.\n   *\n   * Also, if you need to listen on network layer protocols like `tcp` or `udp`, you have to\n   * expose it through a load balancer.\n   *\n   * By default, the endpoint is an auto-generated load balancer URL. You can also add a\n   * custom domain for the endpoint.\n   *\n   * @default Load balancer is not created\n   * @example\n   *\n   * ```js\n   * {\n   *   loadBalancer: {\n   *     domain: \"example.com\",\n   *     rules: [\n   *       { listen: \"80/http\", redirect: \"443/https\" },\n   *       { listen: \"443/https\", forward: \"80/http\" }\n   *     ]\n   *   }\n   * }\n   * ```\n   */\n  loadBalancer?: Input<{\n    /**\n     * Configure if the load balancer should be public or private.\n     *\n     * When set to `false`, the load balancer endpoint will only be accessible within the\n     * VPC.\n     *\n     * @default `true`\n     */\n    public?: Input<boolean>;\n    /**\n     * Set a custom domain for your load balancer endpoint.\n     *\n     * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n     * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n     * DNS records.\n     *\n     * :::tip\n     * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n     * providers.\n     * :::\n     *\n     * @example\n     *\n     * By default this assumes the domain is hosted on Route 53.\n     *\n     * ```js\n     * {\n     *   domain: \"example.com\"\n     * }\n     * ```\n     *\n     * For domains hosted on Cloudflare.\n     *\n     * ```js\n     * {\n     *   domain: {\n     *     name: \"example.com\",\n     *     dns: sst.cloudflare.dns()\n     *   }\n     * }\n     * ```\n     */\n    domain?: Input<\n      | string\n      | {\n          /**\n           * The custom domain you want to use.\n           *\n           * @example\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\"\n           *   }\n           * }\n           * ```\n           *\n           * Can also include subdomains based on the current stage.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: `${$app.stage}.example.com`\n           *   }\n           * }\n           * ```\n           *\n           * Wildcard domains are supported.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"*.example.com\"\n           *   }\n           * }\n           * ```\n           */\n          name: Input<string>;\n          /**\n           * Alias domains that should be used.\n           *\n           * @example\n           * ```js {4}\n           * {\n           *   domain: {\n           *     name: \"app1.example.com\",\n           *     aliases: [\"app2.example.com\"]\n           *   }\n           * }\n           * ```\n           */\n          aliases?: Input<string[]>;\n          /**\n           * The ARN of an ACM (AWS Certificate Manager) certificate that proves ownership of the\n           * domain. By default, a certificate is created and validated automatically.\n           *\n           * :::tip\n           * You need to pass in a `cert` for domains that are not hosted on supported `dns` providers.\n           * :::\n           *\n           * To manually set up a domain on an unsupported provider, you'll need to:\n           *\n           * 1. [Validate that you own the domain](https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html) by creating an ACM certificate. You can either validate it by setting a DNS record or by verifying an email sent to the domain owner.\n           * 2. Once validated, set the certificate ARN as the `cert` and set `dns` to `false`.\n           * 3. Add the DNS records in your provider to point to the load balancer endpoint.\n           *\n           * @example\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\",\n           *     dns: false,\n           *     cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n           *   }\n           * }\n           * ```\n           */\n          cert?: Input<string>;\n          /**\n           * The DNS provider to use for the domain. Defaults to the AWS.\n           *\n           * Takes an adapter that can create the DNS records on the provider. This can automate\n           * validating the domain and setting up the DNS routing.\n           *\n           * Supports Route 53, Cloudflare, and Vercel adapters. For other providers, you'll need\n           * to set `dns` to `false` and pass in a certificate validating ownership via `cert`.\n           *\n           * @default `sst.aws.dns`\n           *\n           * @example\n           *\n           * Specify the hosted zone ID for the Route 53 domain.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\",\n           *     dns: sst.aws.dns({\n           *       zone: \"Z2FDTNDATAQYW2\"\n           *     })\n           *   }\n           * }\n           * ```\n           *\n           * Use a domain hosted on Cloudflare, needs the Cloudflare provider.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\",\n           *     dns: sst.cloudflare.dns()\n           *   }\n           * }\n           * ```\n           *\n           * Use a domain hosted on Vercel, needs the Vercel provider.\n           *\n           * ```js\n           * {\n           *   domain: {\n           *     name: \"example.com\",\n           *     dns: sst.vercel.dns()\n           *   }\n           * }\n           * ```\n           */\n          dns?: Input<false | (Dns & {})>;\n        }\n    >;\n    /** @deprecated Use `rules` instead. */\n    ports?: Input<Prettify<ServiceRules>[]>;\n    /**\n     * Configure the mapping for the ports the load balancer listens to, forwards, or redirects to\n     * the service.\n     * This supports two types of protocols:\n     *\n     * 1. Application Layer Protocols: `http` and `https`. This'll create an [Application Load Balancer](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html).\n     * 2. Network Layer Protocols: `tcp`, `udp`, `tcp_udp`, and `tls`. This'll create a [Network Load Balancer](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html).\n     *\n     * :::note\n     * If you want to listen on `https` or `tls`, you need to specify a custom\n     * `loadBalancer.domain`.\n     * :::\n     *\n     * You **can not configure** both application and network layer protocols for the same\n     * service.\n     *\n     * @example\n     * Here we are listening on port `80` and forwarding it to the service on port `8080`.\n     * ```js\n     * {\n     *   rules: [\n     *     { listen: \"80/http\", forward: \"8080/http\" }\n     *   ]\n     * }\n     * ```\n     *\n     * The `forward` port and protocol defaults to the `listen` port and protocol. So in this\n     * case both are `80/http`.\n     *\n     * ```js\n     * {\n     *   rules: [\n     *     { listen: \"80/http\" }\n     *   ]\n     * }\n     * ```\n     *\n     * If multiple containers are configured via the `containers` argument, you need to\n     * specify which container the traffic should be forwarded to.\n     *\n     * ```js\n     * {\n     *   rules: [\n     *     { listen: \"80/http\", container: \"app\" },\n     *     { listen: \"8000/http\", container: \"admin\" }\n     *   ]\n     * }\n     * ```\n     *\n     * You can also route the same port to multiple containers via path-based routing.\n     *\n     * ```js\n     * {\n     *   rules: [\n     *     {\n     *       listen: \"80/http\",\n     *       container: \"app\",\n     *       conditions: { path: \"/api/*\" }\n     *     },\n     *     {\n     *       listen: \"80/http\",\n     *       container: \"admin\",\n     *       conditions: { path: \"/admin/*\" }\n     *     }\n     *   ]\n     * }\n     * ```\n     *\n     * Additionally, you can redirect traffic from one port to another. This is\n     * commonly used to redirect http to https.\n     *\n     * ```js\n     * {\n     *   rules: [\n     *     { listen: \"80/http\", redirect: \"443/https\" },\n     *     { listen: \"443/https\", forward: \"80/http\" }\n     *   ]\n     * }\n     * ```\n     */\n    rules?: Input<Prettify<ServiceRules>[]>;\n    /**\n     * Configure the health check that the load balancer runs on your containers.\n     *\n     * :::tip\n     * This health check is different from the [`health`](#health) check.\n     * :::\n     *\n     * This health check is run by the load balancer. While, `health` is run by ECS. This\n     * cannot be disabled if you are using a load balancer. While the other is off by default.\n     *\n     * Since this cannot be disabled, here are some tips on how to debug an unhealthy\n     * health check.\n     *\n     * <details>\n     * <summary>How to debug a load balancer health check</summary>\n     *\n     * If you notice a `Unhealthy: Health checks failed` error, it's because the health\n     * check has failed. When it fails, the load balancer will terminate the containers,\n     * causing any requests to fail.\n     *\n     * Here's how to debug it:\n     *\n     * 1. Verify the health check path.\n     *\n     *    By default, the load balancer checks the `/` path. Ensure it's accessible in your\n     *    containers. If your application runs on a different path, then update the path in\n     *    the health check config accordingly.\n     *\n     * 2. Confirm the containers are operational.\n     *\n     *    Navigate to **ECS console** > select the **cluster** > go to the **Tasks tab** >\n     *    choose **Any desired status** under the **Filter desired status** dropdown > select\n     *    a task and check for errors under the **Logs tab**. If it has error that means that\n     *    the container failed to start.\n     *\n     * 3. If the container was terminated by the load balancer while still starting up, try\n     *    increasing the health check interval and timeout.\n     * </details>\n     *\n     * For `http` and `https` the default is:\n     *\n     * ```js\n     * {\n     *   path: \"/\",\n     *   healthyThreshold: 5,\n     *   successCodes: \"200\",\n     *   timeout: \"5 seconds\",\n     *   unhealthyThreshold: 2,\n     *   interval: \"30 seconds\"\n     * }\n     * ```\n     *\n     * For `tcp` and `udp` the default is:\n     *\n     * ```js\n     * {\n     *   healthyThreshold: 5,\n     *   timeout: \"6 seconds\",\n     *   unhealthyThreshold: 2,\n     *   interval: \"30 seconds\"\n     * }\n     * ```\n     *\n     * @example\n     *\n     * To configure the health check, we use the _port/protocol_ format. Here we are\n     * configuring a health check that pings the `/health` path on port `8080`\n     * every 10 seconds.\n     *\n     * ```js\n     * {\n     *   rules: [\n     *     { listen: \"80/http\", forward: \"8080/http\" }\n     *   ],\n     *   health: {\n     *     \"8080/http\": {\n     *       path: \"/health\",\n     *       interval: \"10 seconds\"\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     */\n    health?: Input<\n      Record<\n        Port,\n        Input<{\n          /**\n           * The URL path to ping on the service for health checks. Only applicable to\n           * `http` and `https` protocols.\n           * @default `\"/\"`\n           */\n          path?: Input<string>;\n          /**\n           * The time period between each health check request. Must be between `5 seconds`\n           * and `300 seconds`.\n           * @default `\"30 seconds\"`\n           */\n          interval?: Input<DurationMinutes>;\n          /**\n           * The timeout for each health check request. If no response is received within this\n           * time, it is considered failed. Must be between `2 seconds` and `120 seconds`.\n           * @default `\"5 seconds\"`\n           */\n          timeout?: Input<DurationMinutes>;\n          /**\n           * The number of consecutive successful health check requests required to consider the\n           * target healthy. Must be between 2 and 10.\n           * @default `5`\n           */\n          healthyThreshold?: Input<number>;\n          /**\n           * The number of consecutive failed health check requests required to consider the\n           * target unhealthy. Must be between 2 and 10.\n           * @default `2`\n           */\n          unhealthyThreshold?: Input<number>;\n          /**\n           * One or more HTTP response codes the health check treats as successful. Only\n           * applicable to `http` and `https` protocols.\n           *\n           * @default `\"200\"`\n           * @example\n           * ```js\n           * {\n           *   successCodes: \"200-299\"\n           * }\n           * ```\n           */\n          successCodes?: Input<string>;\n        }>\n      >\n    >;\n  }>;\n  /**\n   * Configure the CloudMap service registry for the service.\n   *\n   * This creates an `srv` record in the CloudMap service. This is needed if you want to connect\n   * an `ApiGatewayV2` VPC link to the service.\n   *\n   * API Gateway will forward requests to the given port on the service.\n   *\n   * @example\n   * ```js\n   * {\n   *   serviceRegistry: {\n   *     port: 80\n   *   }\n   * }\n   * ```\n   */\n  serviceRegistry?: Input<{\n    /**\n     * The port in the service to forward requests to.\n     */\n    port: number;\n  }>;\n  /**\n   * Configure the service to automatically scale up or down based on the CPU or memory\n   * utilization of a container. By default, scaling is disabled and the service will run\n   * in a single container.\n   *\n   * @default `{ min: 1, max: 1 }`\n   *\n   * @example\n   * ```js\n   * {\n   *   scaling: {\n   *     min: 4,\n   *     max: 16,\n   *     cpuUtilization: 50,\n   *     memoryUtilization: 50\n   *   }\n   * }\n   * ```\n   */\n  scaling?: Input<{\n    /**\n     * The minimum number of containers to scale down to.\n     * @default `1`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     min: 4\n     *   }\n     * }\n     * ```\n     */\n    min?: Input<number>;\n    /**\n     * The maximum number of containers to scale up to.\n     * @default `1`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     max: 16\n     *   }\n     * }\n     * ```\n     */\n    max?: Input<number>;\n    /**\n     * The target CPU utilization percentage to scale up or down. It'll scale up\n     * when the CPU utilization is above the target and scale down when it's below the target.\n     * @default `70`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     cpuUtilization: 50\n     *   }\n     * }\n     * ```\n     */\n    cpuUtilization?: Input<false | number>;\n    /**\n     * The target memory utilization percentage to scale up or down. It'll scale up\n     * when the memory utilization is above the target and scale down when it's below the target.\n     * @default `70`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     memoryUtilization: 50\n     *   }\n     * }\n     * ```\n     */\n    memoryUtilization?: Input<false | number>;\n    /**\n     * The target request count to scale up or down. It'll scale up when the request count is\n     * above the target and scale down when it's below the target.\n     * @default `false`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     requestCount: 1500\n     *   }\n     * }\n     * ```\n     */\n    requestCount?: Input<false | number>;\n  }>;\n  /**\n   * Configure the capacity provider; regular Fargate or Fargate Spot, for this service.\n   *\n   * :::tip\n   * Fargate Spot is a good option for dev or PR environments.\n   * :::\n   *\n   * Fargate Spot allows you to run containers on spare AWS capacity at around 50% discount\n   * compared to regular Fargate. [Learn more about Fargate\n   * pricing](https://aws.amazon.com/fargate/pricing/).\n   *\n   * :::note\n   * AWS might shut down Fargate Spot instances to reclaim capacity.\n   * :::\n   *\n   * There are a couple of caveats:\n   *\n   * 1. AWS may reclaim this capacity and **turn off your service** after a two-minute warning.\n   *    This is rare, but it can happen.\n   * 2. If there's no spare capacity, you'll **get an error**.\n   *\n   * This makes Fargate Spot a good option for dev or PR environments. You can set this using.\n   *\n   * ```js\n   * {\n   *   capacity: \"spot\"\n   * }\n   * ```\n   *\n   * You can also configure the % of regular vs spot capacity you want through the `weight` prop.\n   * And optionally set the `base` or first X number of tasks that'll be started using a given\n   * capacity.\n   *\n   * For example, the `base: 1` says that the first task uses regular Fargate, and from that\n   * point on there will be an even split between the capacity providers.\n   *\n   * ```js\n   * {\n   *   capacity: {\n   *     fargate: { weight: 1, base: 1 },\n   *     spot: { weight: 1 }\n   *   }\n   * }\n   * ```\n   *\n   * The `base` works in tandem with the `scaling` prop. So setting `base` to X doesn't mean\n   * it'll start those tasks right away. It means that as your service scales up, according to\n   * the `scaling` prop, it'll ensure that the first X tasks will be with the given capacity.\n   *\n   * :::caution\n   * Changing `capacity` requires taking down and recreating the ECS service.\n   * :::\n   *\n   * And this is why you can only set the `base` for only one capacity provider. So you\n   * are not allowed to do the following.\n   *\n   * ```js\n   * {\n   *   capacity: {\n   *     fargate: { weight: 1, base: 1 },\n   *     // This will give you an error\n   *     spot: { weight: 1, base: 1 }\n   *   }\n   * }\n   * ```\n   *\n   * When you change the `capacity`, the ECS service is terminated and recreated. This will\n   * cause some temporary downtime.\n   *\n   * @default Regular Fargate\n   *\n   * @example\n   *\n   * Here are some examples settings.\n   *\n   * - Use only Fargate Spot.\n   *\n   *   ```js\n   *   {\n   *     capacity: \"spot\"\n   *   }\n   *   ```\n   * - Use 50% regular Fargate and 50% Fargate Spot.\n   *\n   *   ```js\n   *   {\n   *     capacity: {\n   *       fargate: { weight: 1 },\n   *       spot: { weight: 1 }\n   *     }\n   *   }\n   *   ```\n   * - Use 50% regular Fargate and 50% Fargate Spot. And ensure that the first 2 tasks use\n   *   regular Fargate.\n   *\n   *   ```js\n   *   {\n   *     capacity: {\n   *       fargate: { weight: 1, base: 2 },\n   *       spot: { weight: 1 }\n   *     }\n   *   }\n   *   ```\n   */\n  capacity?: Input<\n    | \"spot\"\n    | {\n        /**\n         * Configure how the regular Fargate capacity is allocated.\n         */\n        fargate?: Input<{\n          /**\n           * Start the first `base` number of tasks with the given capacity.\n           *\n           * :::caution\n           * You can only specify `base` for one capacity provider.\n           * :::\n           */\n          base?: Input<number>;\n          /**\n           * Ensure the given ratio of tasks are started for this capacity.\n           */\n          weight: Input<number>;\n        }>;\n        /**\n         * Configure how the Fargate spot capacity is allocated.\n         */\n        spot?: Input<{\n          /**\n           * Start the first `base` number of tasks with the given capacity.\n           *\n           * :::caution\n           * You can only specify `base` for one capacity provider.\n           * :::\n           */\n          base?: Input<number>;\n          /**\n           * Ensure the given ratio of tasks are started for this capacity.\n           */\n          weight: Input<number>;\n        }>;\n      }\n  >;\n  /**\n   * Configure the health check that ECS runs on your containers.\n   *\n   * :::tip\n   * This health check is different from the [`loadBalancer.health`](#loadbalancer-health) check.\n   * :::\n   *\n   * This health check is run by ECS. While, `loadBalancer.health` is run by the load balancer,\n   * if you are using one. This is off by default. While the load balancer one\n   * cannot be disabled.\n   *\n   * This config maps to the `HEALTHCHECK` parameter of the `docker run` command. Learn\n   * more about [container health checks](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html).\n   *\n   * @default Health check is disabled\n   * @example\n   * ```js\n   * {\n   *   health: {\n   *     command: [\"CMD-SHELL\", \"curl -f http://localhost:3000/ || exit 1\"],\n   *     startPeriod: \"60 seconds\",\n   *     timeout: \"5 seconds\",\n   *     interval: \"30 seconds\",\n   *     retries: 3\n   *   }\n   * }\n   * ```\n   */\n  health?: Input<{\n    /**\n     * A string array representing the command that the container runs to determine if it is\n     * healthy.\n     *\n     * It must start with `CMD` to run the command arguments directly. Or `CMD-SHELL` to run\n     * the command with the container's default shell.\n     *\n     * @example\n     * ```js\n     * {\n     *   command: [\"CMD-SHELL\", \"curl -f http://localhost:3000/ || exit 1\"]\n     * }\n     * ```\n     */\n    command: Input<string[]>;\n    /**\n     * The grace period to provide containers time to bootstrap before failed health checks\n     * count towards the maximum number of retries. Must be between `0 seconds` and\n     * `300 seconds`.\n     * @default `\"0 seconds\"`\n     */\n    startPeriod?: Input<DurationMinutes>;\n    /**\n     * The maximum time to allow one command to run. Must be between `2 seconds` and\n     * `60 seconds`.\n     * @default `\"5 seconds\"`\n     */\n    timeout?: Input<DurationMinutes>;\n    /**\n     * The time between running the command for the health check. Must be between `5 seconds`\n     * and `300 seconds`.\n     * @default `\"30 seconds\"`\n     */\n    interval?: Input<DurationMinutes>;\n    /**\n     * The number of consecutive failures required to consider the check to have failed. Must\n     * be between `1` and `10`.\n     * @default `3`\n     */\n    retries?: Input<number>;\n  }>;\n  /**\n   * The containers to run in the service.\n   *\n   * :::tip\n   * You can optionally run multiple containers in a service.\n   * :::\n   *\n   * By default this starts a single container. To add multiple containers in the service, pass\n   * in an array of containers args.\n   *\n   * ```ts\n   * {\n   *   containers: [\n   *     {\n   *       name: \"app\",\n   *       image: \"nginxdemos/hello:plain-text\"\n   *     },\n   *     {\n   *       name: \"admin\",\n   *       image: {\n   *         context: \"./admin\",\n   *         dockerfile: \"Dockerfile\"\n   *       }\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * If you specify `containers`, you cannot list the above args at the top-level. For example,\n   * you **cannot** pass in `image` at the top level.\n   *\n   * ```diff lang=\"ts\"\n   * {\n   * -  image: \"nginxdemos/hello:plain-text\",\n   *   containers: [\n   *     {\n   *       name: \"app\",\n   *       image: \"nginxdemos/hello:plain-text\"\n   *     },\n   *     {\n   *       name: \"admin\",\n   *       image: \"nginxdemos/hello:plain-text\"\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * You will need to pass in `image` as a part of the `containers`.\n   */\n  containers?: Input<Prettify<ServiceContainerArgs>>[];\n  /**\n   * Configure if `sst deploy` should wait for the service to be stable.\n   *\n   * :::tip\n   * For non-prod environments it might make sense to pass in `false`.\n   * :::\n   *\n   * Waiting for this process to finish ensures that new content will be available after\n   * the deploy finishes. However, this process can sometimes take more than 5 mins.\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   wait: true\n   * }\n   * ```\n   */\n  wait?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: Prettify<\n    FargateBaseArgs[\"transform\"] & {\n      /**\n       * Transform the ECS Service resource.\n       */\n      service?: Transform<ecs.ServiceArgs>;\n      /**\n       * Transform the AWS Load Balancer resource.\n       */\n      loadBalancer?: Transform<lb.LoadBalancerArgs>;\n      /**\n       * Transform the AWS Security Group resource for the Load Balancer.\n       */\n      loadBalancerSecurityGroup?: Transform<ec2.SecurityGroupArgs>;\n      /**\n       * Transform the AWS Load Balancer listener resource.\n       */\n      listener?: Transform<lb.ListenerArgs>;\n      /**\n       * Transform the AWS Load Balancer target group resource.\n       */\n      target?: Transform<lb.TargetGroupArgs>;\n      /**\n       * Transform the AWS Application Auto Scaling target resource.\n       */\n      autoScalingTarget?: Transform<appautoscaling.TargetArgs>;\n    }\n  >;\n}\n\n/**\n * The `Service` component lets you create containers that are always running, like web or\n * application servers. It uses [Amazon ECS](https://aws.amazon.com/ecs/) on [AWS Fargate](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html).\n *\n * @example\n *\n * #### Create a Service\n *\n * Services are run inside an ECS Cluster. If you haven't already, create one.\n *\n * ```ts title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n * ```\n *\n * Add the service to it.\n *\n * ```ts title=\"sst.config.ts\"\n * const service = new sst.aws.Service(\"MyService\", { cluster });\n * ```\n *\n * #### Configure the container image\n *\n * By default, the service will look for a Dockerfile in the root directory. Optionally\n * configure the image context and dockerfile.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Service(\"MyService\", {\n *   cluster,\n *   image: {\n *     context: \"./app\",\n *     dockerfile: \"Dockerfile\"\n *   }\n * });\n * ```\n *\n * To add multiple containers in the service, pass in an array of containers args.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Service(\"MyService\", {\n *   cluster,\n *   containers: [\n *     {\n *       name: \"app\",\n *       image: \"nginxdemos/hello:plain-text\"\n *     },\n *     {\n *       name: \"admin\",\n *       image: {\n *         context: \"./admin\",\n *         dockerfile: \"Dockerfile\"\n *       }\n *     }\n *   ]\n * });\n * ```\n *\n * This is useful for running sidecar containers.\n *\n * #### Enable auto-scaling\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Service(\"MyService\", {\n *   cluster,\n *   scaling: {\n *     min: 4,\n *     max: 16,\n *     cpuUtilization: 50,\n *     memoryUtilization: 50\n *   }\n * });\n * ```\n *\n * #### Expose through API Gateway\n *\n * You can give your service a public URL by exposing it through API Gateway HTTP API. You can\n * also optionally give it a custom domain.\n *\n * ```ts title=\"sst.config.ts\"\n * const service = new sst.aws.Service(\"MyService\", {\n *   cluster,\n *   serviceRegistry: {\n *     port: 80\n *   }\n * });\n *\n * const api = new sst.aws.ApiGatewayV2(\"MyApi\", {\n *   vpc,\n *   domain: \"example.com\"\n * });\n * api.routePrivate(\"$default\", service.nodes.cloudmapService.arn);\n * ```\n *\n * #### Add a load balancer\n *\n * You can also expose your service by adding a load balancer to it and optionally\n * adding a custom domain.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Service(\"MyService\", {\n *   cluster,\n *   loadBalancer: {\n *     domain: \"example.com\",\n *     rules: [\n *       { listen: \"80/http\" },\n *       { listen: \"443/https\", forward: \"80/http\" }\n *     ]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your service. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {5} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.Service(\"MyService\", {\n *   cluster,\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources in your service.\n *\n * ```ts title=\"app.ts\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n *\n * #### Service discovery\n *\n * This component automatically creates a Cloud Map service host name for the\n * service. So anything in the same VPC can access it using the service's host name.\n *\n * For example, if you link the service to a Lambda function that's in the same VPC.\n *\n * ```ts title=\"sst.config.ts\" {2,4}\n * new sst.aws.Function(\"MyFunction\", {\n *   vpc,\n *   url: true,\n *   link: [service],\n *   handler: \"lambda.handler\"\n * });\n * ```\n *\n * You can access the service by its host name using the [SDK](/docs/reference/sdk/).\n *\n * ```ts title=\"lambda.ts\"\n * import { Resource } from \"sst\";\n *\n * await fetch(`http://${Resource.MyService.service}`);\n * ```\n *\n * [Check out an example](/docs/examples/#aws-cluster-service-discovery).\n *\n * ---\n *\n * ### Cost\n *\n * By default, this uses a _Linux/X86_ _Fargate_ container with 0.25 vCPUs at $0.04048 per\n * vCPU per hour and 0.5 GB of memory at $0.004445 per GB per hour. It includes 20GB of\n * _Ephemeral Storage_ for free with additional storage at $0.000111 per GB per hour. Each\n * container also gets a public IPv4 address at $0.005 per hour.\n *\n * It works out to $0.04048 x 0.25 x 24 x 30 + $0.004445 x 0.5 x 24 x 30 + $0.005\n * x 24 x 30 or **$12 per month**.\n *\n * If you are using all Fargate Spot instances with `capacity: \"spot\"`, it's $0.01218784 x 0.25\n * x 24 x 30 + $0.00133831 x 0.5 x 24 x 30 + $0.005 x 24 x 30 or **$6 per month**\n *\n * Adjust this for the `cpu`, `memory` and `storage` you are using. And\n * check the prices for _Linux/ARM_ if you are using `arm64` as your `architecture`.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [Fargate pricing](https://aws.amazon.com/fargate/pricing/) and the\n * [Public IPv4 Address pricing](https://aws.amazon.com/vpc/pricing/) for more details.\n *\n * #### Scaling\n *\n * By default, `scaling` is disabled. If enabled, adjust the above for the number of containers.\n *\n * #### API Gateway\n *\n * If you expose your service through API Gateway, you'll need to add the cost of\n * [API Gateway HTTP API](https://aws.amazon.com/api-gateway/pricing/#HTTP_APIs) as well.\n * For services that don't get a lot of traffic, this ends up being a lot cheaper since API\n * Gateway is pay per request.\n *\n * Learn more about using\n * [Cluster with API Gateway](/docs/examples/#aws-cluster-with-api-gateway).\n *\n * #### Application Load Balancer\n *\n * If you add `loadBalancer` _HTTP_ or _HTTPS_ `rules`, an ALB is created at $0.0225 per hour,\n * $0.008 per LCU-hour, and $0.005 per hour if HTTPS with a custom domain is used. Where LCU\n * is a measure of how much traffic is processed.\n *\n * That works out to $0.0225 x 24 x 30 or **$16 per month**. Add $0.005 x 24 x 30 or **$4 per\n * month** for HTTPS. Also add the LCU-hour used.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [Application Load Balancer pricing](https://aws.amazon.com/elasticloadbalancing/pricing/)\n * for more details.\n *\n * #### Network Load Balancer\n *\n * If you add `loadBalancer` _TCP_, _UDP_, or _TLS_ `rules`, an NLB is created at $0.0225 per hour and\n * $0.006 per NLCU-hour. Where NCLU is a measure of how much traffic is processed.\n *\n * That works out to $0.0225 x 24 x 30 or **$16 per month**. Also add the NLCU-hour used.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [Network Load Balancer pricing](https://aws.amazon.com/elasticloadbalancing/pricing/)\n * for more details.\n */\nexport class Service extends Component implements Link.Linkable {\n  private readonly _name: string;\n  private readonly _service?: Output<ecs.Service>;\n  private readonly cloudmapNamespace?: Output<string | undefined>;\n  private readonly cloudmapService?: Output<\n    servicediscovery.Service | undefined\n  >;\n  private readonly executionRole?: iam.Role;\n  private readonly taskRole: iam.Role;\n  private readonly taskDefinition?: Output<ecs.TaskDefinition>;\n  private readonly loadBalancer?: lb.LoadBalancer;\n  private readonly autoScalingTarget?: appautoscaling.Target;\n  private readonly domain?: Output<string | undefined>;\n  private readonly _url?: Output<string>;\n  private readonly devUrl?: Output<string>;\n  private readonly dev: boolean;\n\n  constructor(\n    name: string,\n    args: ServiceArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    this._name = name;\n\n    const self = this;\n    const clusterArn = args.cluster.nodes.cluster.arn;\n    const clusterName = args.cluster.nodes.cluster.name;\n    const region = getRegionOutput({}, opts).name;\n    const dev = normalizeDev();\n    const wait = output(args.wait ?? false);\n    const architecture = normalizeArchitecture(args);\n    const cpu = normalizeCpu(args);\n    const memory = normalizeMemory(cpu, args);\n    const storage = normalizeStorage(args);\n    const containers = normalizeContainers(\"service\", args, name, architecture);\n    const lbArgs = normalizeLoadBalancer();\n    const scaling = normalizeScaling();\n    const capacity = normalizeCapacity();\n    const vpc = normalizeVpc();\n\n    const taskRole = createTaskRole(name, args, opts, self, !!dev);\n\n    this.dev = !!dev;\n    this.cloudmapNamespace = vpc.cloudmapNamespaceName;\n    this.taskRole = taskRole;\n\n    if (dev) {\n      this.devUrl = !lbArgs ? undefined : dev.url;\n      registerReceiver();\n      return;\n    }\n\n    const executionRole = createExecutionRole(name, args, opts, self);\n    const taskDefinition = createTaskDefinition(\n      name,\n      args,\n      opts,\n      self,\n      containers,\n      architecture,\n      cpu,\n      memory,\n      storage,\n      taskRole,\n      executionRole,\n    );\n    const certificateArn = createSsl();\n    const loadBalancer = createLoadBalancer();\n    const targetGroups = createTargets();\n    createListeners();\n    const cloudmapService = createCloudmapService();\n    const service = createService();\n    const autoScalingTarget = createAutoScaling();\n    createDnsRecords();\n\n    this._service = service;\n    this.cloudmapService = cloudmapService;\n    this.executionRole = executionRole;\n    this.taskDefinition = taskDefinition;\n    this.loadBalancer = loadBalancer;\n    this.autoScalingTarget = autoScalingTarget;\n    this.domain = lbArgs?.domain\n      ? lbArgs.domain.apply((domain) => domain?.name)\n      : output(undefined);\n    this._url = !self.loadBalancer\n      ? undefined\n      : all([self.domain, self.loadBalancer?.dnsName]).apply(\n          ([domain, loadBalancer]) =>\n            domain ? `https://${domain}/` : `http://${loadBalancer}`,\n        );\n\n    this.registerOutputs({ _hint: this._url });\n    registerReceiver();\n\n    function normalizeDev() {\n      if (!$dev) return undefined;\n      if (args.dev === false) return undefined;\n\n      return {\n        url: output(args.dev?.url ?? URL_UNAVAILABLE),\n      };\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc component\n      if (args.cluster.vpc instanceof Vpc) {\n        const vpc = args.cluster.vpc;\n        return {\n          isSstVpc: true,\n          id: vpc.id,\n          loadBalancerSubnets: lbArgs?.pub.apply((v) =>\n            v ? vpc.publicSubnets : vpc.privateSubnets,\n          ),\n          containerSubnets: vpc.publicSubnets,\n          securityGroups: vpc.securityGroups,\n          cloudmapNamespaceId: vpc.nodes.cloudmapNamespace.id,\n          cloudmapNamespaceName: vpc.nodes.cloudmapNamespace.name,\n        };\n      }\n\n      // \"vpc\" is object\n      return output(args.cluster.vpc).apply((vpc) => ({\n        isSstVpc: false,\n        ...vpc,\n      }));\n    }\n\n    function normalizeScaling() {\n      return all([lbArgs?.type, args.scaling]).apply(([type, v]) => {\n        if (type !== \"application\" && v?.requestCount)\n          throw new VisibleError(\n            `Request count scaling is only supported for http/https protocols.`,\n          );\n\n        return {\n          min: v?.min ?? 1,\n          max: v?.max ?? 1,\n          cpuUtilization: v?.cpuUtilization ?? 70,\n          memoryUtilization: v?.memoryUtilization ?? 70,\n          requestCount: v?.requestCount ?? false,\n        };\n      });\n    }\n\n    function normalizeCapacity() {\n      if (!args.capacity) return;\n\n      return output(args.capacity).apply((v) => {\n        if (v === \"spot\")\n          return { spot: { weight: 1 }, fargate: { weight: 0 } };\n        return v;\n      });\n    }\n\n    function normalizeLoadBalancer() {\n      const loadBalancer = ((args.loadBalancer ??\n        args.public) as typeof args.loadBalancer)!;\n      if (!loadBalancer) return;\n\n      // normalize rules\n      const rules = all([loadBalancer, containers]).apply(\n        ([lb, containers]) => {\n          // validate rules\n          const lbRules = lb.rules ?? lb.ports;\n          if (!lbRules || lbRules.length === 0)\n            throw new VisibleError(\n              `You must provide the ports to expose via \"loadBalancer.rules\".`,\n            );\n\n          // validate container defined when multiple containers exists\n          if (containers.length > 1) {\n            lbRules.forEach((v) => {\n              if (!v.container)\n                throw new VisibleError(\n                  `You must provide a container name in \"loadBalancer.rules\" when there is more than one container.`,\n                );\n            });\n          }\n\n          // parse protocols and ports\n          const rules = lbRules.map((v) => {\n            const listenParts = v.listen.split(\"/\");\n            const listenPort = parseInt(listenParts[0]);\n            const listenProtocol = listenParts[1];\n            const listenConditions =\n              v.conditions || v.path\n                ? {\n                    path: v.conditions?.path ?? v.path,\n                    query: v.conditions?.query,\n                    header: v.conditions?.header,\n                  }\n                : undefined;\n            if (protocolType(listenProtocol) === \"network\" && listenConditions)\n              throw new VisibleError(\n                `Invalid rule conditions for listen protocol \"${v.listen}\". Only \"http\" protocols support conditions.`,\n              );\n\n            const redirectParts = v.redirect?.split(\"/\");\n            const redirectPort = redirectParts && parseInt(redirectParts[0]);\n            const redirectProtocol = redirectParts && redirectParts[1];\n            if (redirectPort && redirectProtocol) {\n              if (\n                protocolType(listenProtocol) !== protocolType(redirectProtocol)\n              )\n                throw new VisibleError(\n                  `The listen protocol \"${v.listen}\" must match the redirect protocol \"${v.redirect}\".`,\n                );\n              return {\n                type: \"redirect\" as const,\n                listenPort,\n                listenProtocol,\n                listenConditions,\n                redirectPort,\n                redirectProtocol,\n              };\n            }\n\n            const forwardParts = v.forward ? v.forward.split(\"/\") : listenParts;\n            const forwardPort = forwardParts && parseInt(forwardParts[0]);\n            const forwardProtocol = forwardParts && forwardParts[1];\n            if (protocolType(listenProtocol) !== protocolType(forwardProtocol))\n              throw new VisibleError(\n                `The listen protocol \"${v.listen}\" must match the forward protocol \"${v.forward}\".`,\n              );\n            return {\n              type: \"forward\" as const,\n              listenPort,\n              listenProtocol,\n              listenConditions,\n              forwardPort,\n              forwardProtocol,\n              container: v.container ?? containers[0].name,\n            };\n          });\n\n          // validate protocols are consistent\n          const appProtocols = rules.filter(\n            (rule) => protocolType(rule.listenProtocol) === \"application\",\n          );\n          if (appProtocols.length > 0 && appProtocols.length < rules.length)\n            throw new VisibleError(\n              `Protocols must be either all http/https, or all tcp/udp/tcp_udp/tls.`,\n            );\n\n          // validate certificate exists for https/tls protocol\n          rules.forEach((rule) => {\n            if ([\"https\", \"tls\"].includes(rule.listenProtocol) && !lb.domain) {\n              throw new VisibleError(\n                `You must provide a custom domain for ${rule.listenProtocol.toUpperCase()} protocol.`,\n              );\n            }\n          });\n\n          return rules;\n        },\n      );\n\n      // normalize domain\n      const domain = output(loadBalancer).apply((lb) => {\n        if (!lb.domain) return undefined;\n\n        // normalize domain\n        const domain =\n          typeof lb.domain === \"string\" ? { name: lb.domain } : lb.domain;\n        return {\n          name: domain.name,\n          aliases: domain.aliases ?? [],\n          dns: domain.dns === false ? undefined : domain.dns ?? awsDns(),\n          cert: domain.cert,\n        };\n      });\n\n      // normalize type\n      const type = output(rules).apply((rules) =>\n        rules[0].listenProtocol.startsWith(\"http\") ? \"application\" : \"network\",\n      );\n\n      // normalize public/private\n      const pub = output(loadBalancer).apply((lb) => lb?.public ?? true);\n\n      // normalize health check\n      const health = all([type, rules, loadBalancer]).apply(\n        ([type, rules, lb]) =>\n          Object.fromEntries(\n            Object.entries(lb?.health ?? {}).map(([k, v]) => {\n              if (\n                !rules.find(\n                  (r) => `${r.forwardPort}/${r.forwardProtocol}` === k,\n                )\n              )\n                throw new VisibleError(\n                  `Cannot configure health check for \"${k}\". Make sure it is defined in \"loadBalancer.ports\".`,\n                );\n              return [\n                k,\n                {\n                  path: v.path ?? \"/\",\n                  interval: v.interval ? toSeconds(v.interval) : 30,\n                  timeout: v.timeout\n                    ? toSeconds(v.timeout)\n                    : type === \"application\"\n                      ? 5\n                      : 6,\n                  healthyThreshold: v.healthyThreshold ?? 5,\n                  unhealthyThreshold: v.unhealthyThreshold ?? 2,\n                  matcher: v.successCodes ?? \"200\",\n                },\n              ];\n            }),\n          ),\n      );\n\n      return { type, rules, domain, pub, health };\n    }\n\n    function createLoadBalancer() {\n      if (!lbArgs) return;\n\n      const securityGroup = new ec2.SecurityGroup(\n        ...transform(\n          args?.transform?.loadBalancerSecurityGroup,\n          `${name}LoadBalancerSecurityGroup`,\n          {\n            description: \"Managed by SST\",\n            vpcId: vpc.id,\n            egress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                cidrBlocks: [\"0.0.0.0/0\"],\n              },\n            ],\n            ingress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                cidrBlocks: [\"0.0.0.0/0\"],\n              },\n            ],\n          },\n          { parent: self },\n        ),\n      );\n\n      return new lb.LoadBalancer(\n        ...transform(\n          args.transform?.loadBalancer,\n          `${name}LoadBalancer`,\n          {\n            internal: lbArgs.pub.apply((v) => !v),\n            loadBalancerType: lbArgs.type,\n            subnets: vpc.loadBalancerSubnets,\n            securityGroups: [securityGroup.id],\n            enableCrossZoneLoadBalancing: true,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createTargets() {\n      if (!loadBalancer || !lbArgs) return;\n\n      return all([lbArgs.rules, lbArgs.health]).apply(([rules, health]) => {\n        const targets: Record<string, lb.TargetGroup> = {};\n\n        rules.forEach((r) => {\n          if (r.type !== \"forward\") return;\n\n          const container = r.container;\n          const forwardProtocol = r.forwardProtocol.toUpperCase();\n          const forwardPort = r.forwardPort;\n          const targetId = `${container}${forwardProtocol}${forwardPort}`;\n          const target =\n            targets[targetId] ??\n            new lb.TargetGroup(\n              ...transform(\n                args.transform?.target,\n                `${name}Target${targetId}`,\n                {\n                  // TargetGroup names allow for 32 chars, but an 8 letter suffix\n                  // ie. \"-1234567\" is automatically added.\n                  // - If we don't specify \"name\" or \"namePrefix\", we need to ensure\n                  //   the component name is less than 24 chars. Hard to guarantee.\n                  // - If we specify \"name\", we need to ensure the $app-$stage-$name\n                  //   if less than 32 chars. Hard to guarantee.\n                  // - Hence we will use \"namePrefix\".\n                  namePrefix: forwardProtocol,\n                  port: forwardPort,\n                  protocol: forwardProtocol,\n                  targetType: \"ip\",\n                  vpcId: vpc.id,\n                  healthCheck: health[`${r.forwardPort}/${r.forwardProtocol}`],\n                },\n                { parent: self },\n              ),\n            );\n          targets[targetId] = target;\n        });\n        return targets;\n      });\n    }\n\n    function createListeners() {\n      if (!lbArgs || !loadBalancer || !targetGroups) return;\n\n      return all([lbArgs.rules, targetGroups, certificateArn]).apply(\n        ([rules, targets, cert]) => {\n          // Group listeners by protocol and port\n          // Because listeners with the same protocol and port but different path\n          // are just rules of the same listener.\n          const listenersById: Record<string, typeof rules> = {};\n          rules.forEach((r) => {\n            const listenProtocol = r.listenProtocol.toUpperCase();\n            const listenPort = r.listenPort;\n            const listenerId = `${listenProtocol}${listenPort}`;\n            listenersById[listenerId] = listenersById[listenerId] ?? [];\n            listenersById[listenerId].push(r);\n          });\n\n          // Create listeners\n          return Object.entries(listenersById).map(([listenerId, rules]) => {\n            const listenProtocol = rules[0].listenProtocol.toUpperCase();\n            const listenPort = rules[0].listenPort;\n            const defaultRule = rules.find((r) => !r.listenConditions);\n            const customRules = rules.filter((r) => r.listenConditions);\n            const buildActions = (r?: (typeof rules)[number]) => [\n              ...(!r\n                ? [\n                    {\n                      type: \"fixed-response\",\n                      fixedResponse: {\n                        statusCode: \"403\",\n                        contentType: \"text/plain\",\n                        messageBody: \"Forbidden\",\n                      },\n                    },\n                  ]\n                : []),\n              ...(r?.type === \"forward\"\n                ? [\n                    {\n                      type: \"forward\",\n                      targetGroupArn:\n                        targets[\n                          `${r.container}${r.forwardProtocol.toUpperCase()}${\n                            r.forwardPort\n                          }`\n                        ].arn,\n                    },\n                  ]\n                : []),\n              ...(r?.type === \"redirect\"\n                ? [\n                    {\n                      type: \"redirect\",\n                      redirect: {\n                        port: r.redirectPort.toString(),\n                        protocol: r.redirectProtocol.toUpperCase(),\n                        statusCode: \"HTTP_301\",\n                      },\n                    },\n                  ]\n                : []),\n            ];\n            const listener = new lb.Listener(\n              ...transform(\n                args.transform?.listener,\n                `${name}Listener${listenerId}`,\n                {\n                  loadBalancerArn: loadBalancer.arn,\n                  port: listenPort,\n                  protocol: listenProtocol,\n                  certificateArn: [\"HTTPS\", \"TLS\"].includes(listenProtocol)\n                    ? cert\n                    : undefined,\n                  defaultActions: buildActions(defaultRule),\n                },\n                { parent: self },\n              ),\n            );\n\n            customRules.forEach(\n              (r) =>\n                new lb.ListenerRule(\n                  `${name}Listener${listenerId}Rule${hashStringToPrettyString(\n                    JSON.stringify(r.listenConditions),\n                    4,\n                  )}`,\n                  {\n                    listenerArn: listener.arn,\n                    actions: buildActions(r),\n                    conditions: [\n                      {\n                        pathPattern: r.listenConditions!.path\n                          ? { values: [r.listenConditions!.path!] }\n                          : undefined,\n                        queryStrings: r.listenConditions!.query,\n                        httpHeader: r.listenConditions!.header\n                          ? {\n                              httpHeaderName: r.listenConditions!.header.name,\n                              values: r.listenConditions!.header.values,\n                            }\n                          : undefined,\n                      },\n                    ],\n                  },\n                  { parent: self },\n                ),\n            );\n\n            return listener;\n          });\n        },\n      );\n    }\n\n    function createSsl() {\n      if (!lbArgs) return output(undefined);\n\n      return lbArgs.domain.apply((domain) => {\n        if (!domain) return output(undefined);\n        if (domain.cert) return output(domain.cert);\n\n        return new DnsValidatedCertificate(\n          `${name}Ssl`,\n          {\n            domainName: domain.name,\n            alternativeNames: domain.aliases,\n            dns: domain.dns!,\n          },\n          { parent: self },\n        ).arn;\n      });\n    }\n\n    function createCloudmapService() {\n      return output(vpc.cloudmapNamespaceId).apply((cloudmapNamespaceId) => {\n        if (!cloudmapNamespaceId) return;\n\n        return new servicediscovery.Service(\n          `${name}CloudmapService`,\n          {\n            name: `${name}.${$app.stage}.${$app.name}`,\n            namespaceId: output(vpc.cloudmapNamespaceId).apply((id) => id!),\n            forceDestroy: true,\n            dnsConfig: {\n              namespaceId: output(vpc.cloudmapNamespaceId).apply((id) => id!),\n              dnsRecords: [\n                ...(args.serviceRegistry ? [{ ttl: 60, type: \"SRV\" }] : []),\n                { ttl: 60, type: \"A\" },\n              ],\n            },\n          },\n          { parent: self },\n        );\n      });\n    }\n\n    function createService() {\n      return cloudmapService.apply(\n        (cloudmapService) =>\n          new ecs.Service(\n            ...transform(\n              args.transform?.service,\n              `${name}Service`,\n              {\n                name,\n                cluster: clusterArn,\n                taskDefinition: taskDefinition.arn,\n                desiredCount: scaling.min,\n                ...(capacity\n                  ? {\n                      // setting `forceNewDeployment` ensures that the service is not recreated\n                      // when the capacity provider config changes.\n                      forceNewDeployment: true,\n                      capacityProviderStrategies: capacity.apply((v) => [\n                        ...(v.fargate\n                          ? [\n                              {\n                                capacityProvider: \"FARGATE\",\n                                base: v.fargate?.base,\n                                weight: v.fargate?.weight,\n                              },\n                            ]\n                          : []),\n                        ...(v.spot\n                          ? [\n                              {\n                                capacityProvider: \"FARGATE_SPOT\",\n                                base: v.spot?.base,\n                                weight: v.spot?.weight,\n                              },\n                            ]\n                          : []),\n                      ]),\n                    }\n                  : // @deprecated do not use `launchType`, set `capacityProviderStrategies`\n                    // to `[{ capacityProvider: \"FARGATE\", weight: 1 }]` instead\n                    {\n                      launchType: \"FARGATE\",\n                    }),\n                networkConfiguration: {\n                  // If the vpc is an SST vpc, services are automatically deployed to the public\n                  // subnets. So we need to assign a public IP for the service to be accessible.\n                  assignPublicIp: vpc.isSstVpc,\n                  subnets: vpc.containerSubnets,\n                  securityGroups: vpc.securityGroups,\n                },\n                deploymentCircuitBreaker: {\n                  enable: true,\n                  rollback: true,\n                },\n                loadBalancers:\n                  lbArgs &&\n                  all([lbArgs.rules, targetGroups!]).apply(([rules, targets]) =>\n                    Object.values(targets).map((target) => ({\n                      targetGroupArn: target.arn,\n                      containerName: target.port.apply(\n                        (port) =>\n                          rules.find((r) => r.forwardPort === port)!.container!,\n                      ),\n                      containerPort: target.port.apply((port) => port!),\n                    })),\n                  ),\n                enableExecuteCommand: true,\n                serviceRegistries: cloudmapService && {\n                  registryArn: cloudmapService.arn,\n                  port: args.serviceRegistry\n                    ? output(args.serviceRegistry).port\n                    : undefined,\n                },\n                waitForSteadyState: wait,\n              },\n              { parent: self },\n            ),\n          ),\n      );\n    }\n\n    function createAutoScaling() {\n      const target = new appautoscaling.Target(\n        ...transform(\n          args.transform?.autoScalingTarget,\n          `${name}AutoScalingTarget`,\n          {\n            serviceNamespace: \"ecs\",\n            scalableDimension: \"ecs:service:DesiredCount\",\n            resourceId: interpolate`service/${clusterName}/${service.name}`,\n            maxCapacity: scaling.max,\n            minCapacity: scaling.min,\n          },\n          { parent: self },\n        ),\n      );\n\n      output(scaling.cpuUtilization).apply((cpuUtilization) => {\n        if (cpuUtilization === false) return;\n        new appautoscaling.Policy(\n          `${name}AutoScalingCpuPolicy`,\n          {\n            serviceNamespace: target.serviceNamespace,\n            scalableDimension: target.scalableDimension,\n            resourceId: target.resourceId,\n            policyType: \"TargetTrackingScaling\",\n            targetTrackingScalingPolicyConfiguration: {\n              predefinedMetricSpecification: {\n                predefinedMetricType: \"ECSServiceAverageCPUUtilization\",\n              },\n              targetValue: cpuUtilization,\n            },\n          },\n          { parent: self },\n        );\n      });\n\n      output(scaling.memoryUtilization).apply((memoryUtilization) => {\n        if (memoryUtilization === false) return;\n        new appautoscaling.Policy(\n          `${name}AutoScalingMemoryPolicy`,\n          {\n            serviceNamespace: target.serviceNamespace,\n            scalableDimension: target.scalableDimension,\n            resourceId: target.resourceId,\n            policyType: \"TargetTrackingScaling\",\n            targetTrackingScalingPolicyConfiguration: {\n              predefinedMetricSpecification: {\n                predefinedMetricType: \"ECSServiceAverageMemoryUtilization\",\n              },\n              targetValue: memoryUtilization,\n            },\n          },\n          { parent: self },\n        );\n      });\n\n      all([scaling.requestCount, targetGroups]).apply(\n        ([requestCount, targetGroups]) => {\n          if (requestCount === false) return;\n          if (!targetGroups) return;\n\n          const targetGroup = Object.values(targetGroups)[0];\n\n          new appautoscaling.Policy(\n            `${name}AutoScalingRequestCountPolicy`,\n            {\n              serviceNamespace: target.serviceNamespace,\n              scalableDimension: target.scalableDimension,\n              resourceId: target.resourceId,\n              policyType: \"TargetTrackingScaling\",\n              targetTrackingScalingPolicyConfiguration: {\n                predefinedMetricSpecification: {\n                  predefinedMetricType: \"ALBRequestCountPerTarget\",\n                  resourceLabel: all([\n                    loadBalancer?.arn,\n                    targetGroup.arn,\n                  ]).apply(([loadBalancerArn, targetGroupArn]) => {\n                    // arn:...:loadbalancer/app/frank-MyServiceLoadBalan/005af2ad12da1e52\n                    // => app/frank-MyServiceLoadBalan/005af2ad12da1e52\n                    const lbPart = loadBalancerArn\n                      ?.split(\":\")\n                      .pop()\n                      ?.split(\"/\")\n                      .slice(1)\n                      .join(\"/\");\n                    // arn:...:targetgroup/HTTP20250103004618450100000001/e0811b8cf3a60762\n                    // => targetgroup/HTTP20250103004618450100000001\n                    const tgPart = targetGroupArn?.split(\":\").pop();\n                    return `${lbPart}/${tgPart}`;\n                  }),\n                },\n                targetValue: requestCount,\n              },\n            },\n            { parent: self },\n          );\n        },\n      );\n\n      return target;\n    }\n\n    function createDnsRecords() {\n      if (!lbArgs) return;\n\n      lbArgs.domain.apply((domain) => {\n        if (!domain?.dns) return;\n\n        for (const recordName of [domain.name, ...domain.aliases]) {\n          const namePrefix =\n            recordName === domain.name ? name : `${name}${recordName}`;\n          domain.dns.createAlias(\n            namePrefix,\n            {\n              name: recordName,\n              aliasName: loadBalancer!.dnsName,\n              aliasZone: loadBalancer!.zoneId,\n            },\n            { parent: self },\n          );\n        }\n      });\n    }\n\n    function registerReceiver() {\n      all([containers]).apply(([val]) => {\n        for (const container of val) {\n          const title = val.length == 1 ? name : `${name}${container.name}`;\n          new DevCommand(`${title}Dev`, {\n            link: args.link,\n            dev: {\n              title,\n              autostart: true,\n              directory: (() => {\n                if (!container.image) return \"\";\n                if (typeof container.image === \"string\") return \"\";\n                if (container.image.context) return container.image.context;\n                return \"\";\n              })(),\n              ...container.dev,\n            },\n            environment: {\n              ...container.environment,\n              AWS_REGION: region,\n            },\n            aws: {\n              role: taskRole.arn,\n            },\n          });\n        }\n      });\n    }\n  }\n\n  /**\n   * The URL of the service.\n   *\n   * If `public.domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated load balancer URL.\n   */\n  public get url() {\n    const errorMessage =\n      \"Cannot access the URL because no public ports are exposed.\";\n    if (this.dev) {\n      if (!this.devUrl) throw new VisibleError(errorMessage);\n      return this.devUrl;\n    }\n\n    if (!this._url) throw new VisibleError(errorMessage);\n    return this._url;\n  }\n\n  /**\n   * The name of the Cloud Map service. This is useful for service discovery.\n   */\n  public get service() {\n    return all([this.cloudmapNamespace, this.cloudmapService]).apply(\n      ([namespace, service]) => {\n        if (!namespace)\n          throw new VisibleError(\n            `Cannot access the AWS Cloud Map service name for the \"${this._name}\" Service. Cloud Map is not configured for the cluster.`,\n          );\n\n        return this.dev\n          ? interpolate`dev.${namespace}`\n          : interpolate`${service!.name}.${namespace}`;\n      },\n    );\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Amazon ECS Service.\n       */\n      get service() {\n        if (self.dev)\n          throw new VisibleError(\"Cannot access `nodes.service` in dev mode.\");\n        return self._service!;\n      },\n      /**\n       * The Amazon ECS Execution Role.\n       */\n      executionRole: this.executionRole,\n      /**\n       * The Amazon ECS Task Role.\n       */\n      taskRole: this.taskRole,\n      /**\n       * The Amazon ECS Task Definition.\n       */\n      get taskDefinition() {\n        if (self.dev)\n          throw new VisibleError(\n            \"Cannot access `nodes.taskDefinition` in dev mode.\",\n          );\n        return self.taskDefinition!;\n      },\n      /**\n       * The Amazon Elastic Load Balancer.\n       */\n      get loadBalancer() {\n        if (self.dev)\n          throw new VisibleError(\n            \"Cannot access `nodes.loadBalancer` in dev mode.\",\n          );\n        if (!self.loadBalancer)\n          throw new VisibleError(\n            \"Cannot access `nodes.loadBalancer` when no public ports are exposed.\",\n          );\n        return self.loadBalancer;\n      },\n      /**\n       * The Amazon Application Auto Scaling target.\n       */\n      get autoScalingTarget() {\n        if (self.dev)\n          throw new VisibleError(\n            \"Cannot access `nodes.autoScalingTarget` in dev mode.\",\n          );\n        return self.autoScalingTarget!;\n      },\n      /**\n       * The Amazon Cloud Map service.\n       */\n      get cloudmapService() {\n        console.log(\"NODES GETTER\");\n        if (self.dev)\n          throw new VisibleError(\n            \"Cannot access `nodes.cloudmapService` in dev mode.\",\n          );\n\n        return output(self.cloudmapService).apply((service) => {\n          if (!service)\n            throw new VisibleError(\n              `Cannot access \"nodes.cloudmapService\" for the \"${self._name}\" Service. Cloud Map is not configured for the cluster.`,\n            );\n          return service;\n        });\n      },\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.dev ? this.devUrl : this._url,\n        service: output(this.cloudmapNamespace).apply((namespace) =>\n          namespace ? this.service : undefined,\n        ),\n      },\n    };\n  }\n}\n\nfunction protocolType(protocol: string) {\n  return [\"http\", \"https\"].includes(protocol)\n    ? (\"application\" as const)\n    : (\"network\" as const);\n}\n\nconst __pulumiType = \"sst:aws:Service\";\n// @ts-expect-error\nService.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, interpolate, secret } from \"@pulumi/pulumi\";\nimport { all, output } from \"@pulumi/pulumi\";\nimport { Input } from \"../input\";\nimport { Efs } from \"./efs\";\nimport { FunctionArgs } from \"./function\";\nimport { RETENTION } from \"./logging\";\nimport { toGBs, toMBs } from \"../size\";\nimport { VisibleError } from \"../error\";\nimport { ServiceArgs } from \"./service\";\nimport { ImageArgs, Platform } from \"@pulumi/docker-build\";\nimport { Component, Transform, transform } from \"../component\";\nimport {\n  cloudwatch,\n  ecr,\n  ecs,\n  getCallerIdentityOutput,\n  getPartitionOutput,\n  getRegionOutput,\n  iam,\n} from \"@pulumi/aws\";\nimport { Link } from \"../link\";\nimport { Permission } from \"./permission\";\nimport { bootstrap } from \"./helpers/bootstrap\";\nimport { imageBuilder } from \"./helpers/container-builder\";\nimport { toNumber } from \"../cpu\";\nimport { toSeconds } from \"../duration\";\nimport { Cluster } from \"./cluster\";\nimport { physicalName } from \"../naming\";\n\nexport const supportedCpus = {\n  \"0.25 vCPU\": 256,\n  \"0.5 vCPU\": 512,\n  \"1 vCPU\": 1024,\n  \"2 vCPU\": 2048,\n  \"4 vCPU\": 4096,\n  \"8 vCPU\": 8192,\n  \"16 vCPU\": 16384,\n};\n\nexport const supportedMemories = {\n  \"0.25 vCPU\": {\n    \"0.5 GB\": 512,\n    \"1 GB\": 1024,\n    \"2 GB\": 2048,\n  },\n  \"0.5 vCPU\": {\n    \"1 GB\": 1024,\n    \"2 GB\": 2048,\n    \"3 GB\": 3072,\n    \"4 GB\": 4096,\n  },\n  \"1 vCPU\": {\n    \"2 GB\": 2048,\n    \"3 GB\": 3072,\n    \"4 GB\": 4096,\n    \"5 GB\": 5120,\n    \"6 GB\": 6144,\n    \"7 GB\": 7168,\n    \"8 GB\": 8192,\n  },\n  \"2 vCPU\": {\n    \"4 GB\": 4096,\n    \"5 GB\": 5120,\n    \"6 GB\": 6144,\n    \"7 GB\": 7168,\n    \"8 GB\": 8192,\n    \"9 GB\": 9216,\n    \"10 GB\": 10240,\n    \"11 GB\": 11264,\n    \"12 GB\": 12288,\n    \"13 GB\": 13312,\n    \"14 GB\": 14336,\n    \"15 GB\": 15360,\n    \"16 GB\": 16384,\n  },\n  \"4 vCPU\": {\n    \"8 GB\": 8192,\n    \"9 GB\": 9216,\n    \"10 GB\": 10240,\n    \"11 GB\": 11264,\n    \"12 GB\": 12288,\n    \"13 GB\": 13312,\n    \"14 GB\": 14336,\n    \"15 GB\": 15360,\n    \"16 GB\": 16384,\n    \"17 GB\": 17408,\n    \"18 GB\": 18432,\n    \"19 GB\": 19456,\n    \"20 GB\": 20480,\n    \"21 GB\": 21504,\n    \"22 GB\": 22528,\n    \"23 GB\": 23552,\n    \"24 GB\": 24576,\n    \"25 GB\": 25600,\n    \"26 GB\": 26624,\n    \"27 GB\": 27648,\n    \"28 GB\": 28672,\n    \"29 GB\": 29696,\n    \"30 GB\": 30720,\n  },\n  \"8 vCPU\": {\n    \"16 GB\": 16384,\n    \"20 GB\": 20480,\n    \"24 GB\": 24576,\n    \"28 GB\": 28672,\n    \"32 GB\": 32768,\n    \"36 GB\": 36864,\n    \"40 GB\": 40960,\n    \"44 GB\": 45056,\n    \"48 GB\": 49152,\n    \"52 GB\": 53248,\n    \"56 GB\": 57344,\n    \"60 GB\": 61440,\n  },\n  \"16 vCPU\": {\n    \"32 GB\": 32768,\n    \"40 GB\": 40960,\n    \"48 GB\": 49152,\n    \"56 GB\": 57344,\n    \"64 GB\": 65536,\n    \"72 GB\": 73728,\n    \"80 GB\": 81920,\n    \"88 GB\": 90112,\n    \"96 GB\": 98304,\n    \"104 GB\": 106496,\n    \"112 GB\": 114688,\n    \"120 GB\": 122880,\n  },\n};\n\nexport interface FargateContainerArgs {\n  /**\n   * The name of the container.\n   *\n   * This is used as the `--name` option in the Docker run command.\n   */\n  name: Input<string>;\n  /**\n   * The amount of CPU allocated to the container.\n   *\n   * By default, a container can use up to all the CPU allocated to all the containers. If set,\n   * this container is capped at this allocation even if more idle CPU is available.\n   *\n   * The sum of all the containers' CPU must be less than or equal to the total available CPU.\n   *\n   * @example\n   * ```js\n   * {\n   *   cpu: \"0.25 vCPU\"\n   * }\n   * ```\n   */\n  cpu?: `${number} vCPU`;\n  /**\n   * The amount of memory allocated to the container.\n   *\n   * By default, a container can use up to all the memory allocated to all the containers. If\n   * set, the container is capped at this allocation. If exceeded, the container will be killed\n   * even if there is idle memory available.\n   *\n   * The sum of all the containers' memory must be less than or equal to the total available\n   * memory.\n   *\n   * @example\n   * ```js\n   * {\n   *   memory: \"0.5 GB\"\n   * }\n   * ```\n   */\n  memory?: `${number} GB`;\n  /**\n   * Configure the Docker image for the container. Same as the top-level [`image`](#image).\n   */\n  image?: Input<\n    | string\n    | {\n        /**\n         * The path to the Docker build context. Same as the top-level\n         * [`image.context`](#image-context).\n         */\n        context?: Input<string>;\n        /**\n         * The path to the Dockerfile. Same as the top-level\n         * [`image.dockerfile`](#image-dockerfile).\n         */\n        dockerfile?: Input<string>;\n        /**\n         * Key-value pairs of build args. Same as the top-level [`image.args`](#image-args).\n         */\n        args?: Input<Record<string, Input<string>>>;\n        /**\n         * The stage to build up to. Same as the top-level [`image.target`](#image-target).\n         */\n        target?: Input<string>;\n      }\n  >;\n  /**\n   * The command to override the default command in the container. Same as the top-level\n   * [`command`](#command).\n   */\n  command?: Input<string[]>;\n  /**\n   * The entrypoint to override the default entrypoint in the container. Same as the top-level\n   * [`entrypoint`](#entrypoint).\n   */\n  entrypoint?: Input<string[]>;\n  /**\n   * Key-value pairs of values that are set as container environment variables. Same as the\n   * top-level [`environment`](#environment).\n   */\n  environment?: FunctionArgs[\"environment\"];\n  /**\n   * A list of Amazon S3 file paths of environment files to load environment variables\n   * from. Same as the top-level [`environmentFiles`](#environmentFiles).\n   */\n  environmentFiles?: Input<Input<string>[]>;\n  /**\n   * Configure the logs in CloudWatch. Same as the top-level [`logging`](#logging).\n   */\n  logging?: Input<{\n    /**\n     * The duration the logs are kept in CloudWatch. Same as the top-level [`logging.retention`](#logging-retention).\n     */\n    retention?: Input<keyof typeof RETENTION>;\n    /**\n     * The name of the CloudWatch log group. Same as the top-level [`logging.name`](#logging-name).\n     */\n    name?: Input<string>;\n  }>;\n  /**\n   * Key-value pairs of AWS Systems Manager Parameter Store parameter ARNs or AWS Secrets\n   * Manager secret ARNs. The values will be loaded into the container as environment\n   * variables. Same as the top-level [`ssm`](#ssm).\n   */\n  ssm?: FargateBaseArgs[\"ssm\"];\n  /**\n   * Mount Amazon EFS file systems into the container. Same as the top-level\n   * [`efs`](#efs).\n   */\n  volumes?: FargateBaseArgs[\"volumes\"];\n}\n\nexport interface FargateBaseArgs {\n  /**\n   * The ECS Cluster to use. Create a new `Cluster` in your app, if you haven't already.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const vpc = new sst.aws.Vpc(\"MyVpc\");\n   * const myCluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   cluster: myCluster\n   * }\n   * ```\n   */\n  cluster: Cluster;\n  /**\n   * The CPU architecture of the container.\n   * @default `\"x86_64\"`\n   * @example\n   * ```js\n   * {\n   *   architecture: \"arm64\"\n   * }\n   * ```\n   */\n  architecture?: Input<\"x86_64\" | \"arm64\">;\n  /**\n   * The amount of CPU allocated to the container. If there are multiple containers, this is\n   * the total amount of CPU shared across all the containers.\n   *\n   * :::note\n   * [View the valid combinations](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-tasks-services.html#fargate-tasks-size) of CPU and memory.\n   * :::\n   *\n   * @default `\"0.25 vCPU\"`\n   * @example\n   * ```js\n   * {\n   *   cpu: \"1 vCPU\"\n   * }\n   * ```\n   */\n  cpu?: keyof typeof supportedCpus;\n  /**\n   * The amount of memory allocated to the container. If there are multiple containers, this is\n   * the total amount of memory shared across all the containers.\n   *\n   * :::note\n   * [View the valid combinations](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-tasks-services.html#fargate-tasks-size) of CPU and memory.\n   * :::\n   *\n   * @default `\"0.5 GB\"`\n   *\n   * @example\n   * ```js\n   * {\n   *   memory: \"2 GB\"\n   * }\n   * ```\n   */\n  memory?: `${number} GB`;\n  /**\n   * The amount of ephemeral storage (in GB) allocated to the container.\n   *\n   * @default `\"20 GB\"`\n   *\n   * @example\n   * ```js\n   * {\n   *   storage: \"100 GB\"\n   * }\n   * ```\n   */\n  storage?: `${number} GB`;\n  /**\n   * [Link resources](/docs/linking/) to your containers. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your app using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of components to link to the containers.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: FunctionArgs[\"link\"];\n  /**\n   * Permissions and the resources that you need to access. These permissions are\n   * used to create the [task role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html).\n   *\n   * :::tip\n   * If you `link` the service to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow the container to read and write to an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Allow the container to perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Granting the container permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: FunctionArgs[\"permissions\"];\n  /**\n   * Configure the Docker build command for building the image or specify a pre-built image.\n   *\n   * @default Build a Docker image from the Dockerfile in the root directory.\n   * @example\n   *\n   * Building a Docker image.\n   *\n   * Prior to building the image, SST will automatically add the `.sst` directory\n   * to the `.dockerignore` if not already present.\n   *\n   * ```js\n   * {\n   *   image: {\n   *     context: \"./app\",\n   *     dockerfile: \"Dockerfile\",\n   *     args: {\n   *       MY_VAR: \"value\"\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * Alternatively, you can pass in a pre-built image.\n   *\n   * ```js\n   * {\n   *   image: \"nginxdemos/hello:plain-text\"\n   * }\n   * ```\n   */\n  image?: Input<\n    | string\n    | {\n        /**\n         * The path to the [Docker build context](https://docs.docker.com/build/building/context/#local-context). The path is relative to your project's `sst.config.ts`.\n         * @default `\".\"`\n         * @example\n         *\n         * To change where the Docker build context is located.\n         *\n         * ```js\n         * {\n         *   context: \"./app\"\n         * }\n         * ```\n         */\n        context?: Input<string>;\n        /**\n         * The path to the [Dockerfile](https://docs.docker.com/reference/cli/docker/image/build/#file).\n         * The path is relative to the build `context`.\n         * @default `\"Dockerfile\"`\n         * @example\n         * To use a different Dockerfile.\n         * ```js\n         * {\n         *   dockerfile: \"Dockerfile.prod\"\n         * }\n         * ```\n         */\n        dockerfile?: Input<string>;\n        /**\n         * Key-value pairs of [build args](https://docs.docker.com/build/guide/build-args/) to pass to the Docker build command.\n         * @example\n         * ```js\n         * {\n         *   args: {\n         *     MY_VAR: \"value\"\n         *   }\n         * }\n         * ```\n         */\n        args?: Input<Record<string, Input<string>>>;\n        /**\n         * Tags to apply to the Docker image.\n         * @example\n         * ```js\n         * {\n         *   tags: [\"v1.0.0\", \"commit-613c1b2\"]\n         * }\n         * ```\n         */\n        tags?: Input<Input<string>[]>;\n        /**\n         * The stage to build up to in a [multi-stage Dockerfile](https://docs.docker.com/build/building/multi-stage/#stop-at-a-specific-build-stage).\n         * @example\n         * ```js\n         * {\n         *   target: \"stage1\"\n         * }\n         * ```\n         */\n        target?: Input<string>;\n      }\n  >;\n  /**\n   * The command to override the default command in the container.\n   * @example\n   * ```js\n   * {\n   *   command: [\"npm\", \"run\", \"start\"]\n   * }\n   * ```\n   */\n  command?: Input<Input<string>[]>;\n  /**\n   * The entrypoint that overrides the default entrypoint in the container.\n   * @example\n   * ```js\n   * {\n   *   entrypoint: [\"/usr/bin/my-entrypoint\"]\n   * }\n   * ```\n   */\n  entrypoint?: Input<string[]>;\n  /**\n   * Key-value pairs of values that are set as [container environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html).\n   * The keys need to:\n   *\n   * 1. Start with a letter.\n   * 2. Be at least 2 characters long.\n   * 3. Contain only letters, numbers, or underscores.\n   *\n   * @example\n   *\n   * ```js\n   * {\n   *   environment: {\n   *     DEBUG: \"true\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: FunctionArgs[\"environment\"];\n  /**\n   * A list of Amazon S3 object ARNs pointing to [environment files](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/use-environment-file.html)\n   * used to load environment variables into the container.\n   *\n   * Each file must be a plain text file in `.env` format.\n   *\n   * @example\n   * Create an S3 bucket and upload an environment file.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const bucket = new sst.aws.Bucket(\"EnvBucket\");\n   * const file = new aws.s3.BucketObjectv2(\"EnvFile\", {\n   *   bucket: bucket.name,\n   *   key: \"test.env\",\n   *   content: [\"FOO=hello\", \"BAR=world\"].join(\"\\n\"),\n   * });\n   * ```\n   *\n   * And pass in the ARN of the environment file.\n   *\n   * ```js title=\"sst.config.ts\"\n   * {\n   *   environmentFiles: [file.arn]\n   * }\n   * ```\n   */\n  environmentFiles?: Input<Input<string>[]>;\n  /**\n   * Key-value pairs of AWS Systems Manager Parameter Store parameter ARNs or AWS Secrets\n   * Manager secret ARNs. The values will be loaded into the container as environment\n   * variables.\n   * @example\n   * ```js\n   * {\n   *   ssm: {\n   *     DATABASE_PASSWORD: \"arn:aws:secretsmanager:us-east-1:123456789012:secret:my-secret-123abc\"\n   *   }\n   * }\n   * ```\n   */\n  ssm?: Input<Record<string, Input<string>>>;\n  /**\n   * Configure the logs in CloudWatch.\n   * @default `{ retention: \"1 month\" }`\n   * @example\n   * ```js\n   * {\n   *   logging: {\n   *     retention: \"forever\"\n   *   }\n   * }\n   * ```\n   */\n  logging?: Input<{\n    /**\n     * The duration the logs are kept in CloudWatch.\n     * @default `\"1 month\"`\n     */\n    retention?: Input<keyof typeof RETENTION>;\n    /**\n     * The name of the CloudWatch log group. If omitted, the log group name is generated\n     * based on the cluster name, service name, and container name.\n     * @default `\"/sst/cluster/${CLUSTER_NAME}/${SERVICE_NAME}/${CONTAINER_NAME}\"`\n     */\n    name?: Input<string>;\n  }>;\n  /**\n   * Mount Amazon EFS file systems into the container.\n   *\n   * @example\n   * Create an EFS file system.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const vpc = new sst.aws.Vpc(\"MyVpc\");\n   * const fileSystem = new sst.aws.Efs(\"MyFileSystem\", { vpc });\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   volumes: [\n   *     {\n   *       efs: fileSystem,\n   *       path: \"/mnt/efs\"\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * Or pass in a the EFS file system ID.\n   *\n   * ```js\n   * {\n   *   volumes: [\n   *     {\n   *       efs: {\n   *         fileSystem: \"fs-12345678\",\n   *         accessPoint: \"fsap-12345678\"\n   *       },\n   *       path: \"/mnt/efs\"\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  volumes?: Input<{\n    /**\n     * The Amazon EFS file system to mount.\n     */\n    efs: Input<\n      | Efs\n      | {\n          /**\n           * The ID of the EFS file system.\n           */\n          fileSystem: Input<string>;\n          /**\n           * The ID of the EFS access point.\n           */\n          accessPoint: Input<string>;\n        }\n    >;\n    /**\n     * The path to mount the volume.\n     */\n    path: Input<string>;\n  }>[];\n  /**\n   * Assigns the given IAM role name to the containers. This allows you to pass in a previously\n   * created role.\n   *\n   * :::caution\n   * When you pass in a role, it will not update it if you add `permissions` or `link` resources.\n   * :::\n   *\n   * By default, a new IAM role is created. It'll update this role if you add `permissions` or\n   * `link` resources.\n   *\n   * However, if you pass in a role, you'll need to update it manually if you add `permissions`\n   * or `link` resources.\n   *\n   * @default Creates a new role\n   * @example\n   * ```js\n   * {\n   *   taskRole: \"my-task-role\"\n   * }\n   * ```\n   */\n  taskRole?: Input<string>;\n  /**\n   * Assigns the given IAM role name to AWS ECS to launch and manage the containers. This\n   * allows you to pass in a previously created role.\n   *\n   * By default, a new IAM role is created.\n   *\n   * @default Creates a new role\n   * @example\n   * ```js\n   * {\n   *   executionRole: \"my-execution-role\"\n   * }\n   * ```\n   */\n  executionRole?: Input<string>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Docker Image resource.\n     */\n    image?: Transform<ImageArgs>;\n    /**\n     * Transform the ECS Execution IAM Role resource.\n     */\n    executionRole?: Transform<iam.RoleArgs>;\n    /**\n     * Transform the ECS Task IAM Role resource.\n     */\n    taskRole?: Transform<iam.RoleArgs>;\n    /**\n     * Transform the ECS Task Definition resource.\n     */\n    taskDefinition?: Transform<ecs.TaskDefinitionArgs>;\n    /**\n     * Transform the CloudWatch log group resource.\n     */\n    logGroup?: Transform<cloudwatch.LogGroupArgs>;\n  };\n}\n\nexport function normalizeArchitecture(args: FargateBaseArgs) {\n  return output(args.architecture ?? \"x86_64\").apply((v) => v);\n}\n\nexport function normalizeCpu(args: FargateBaseArgs) {\n  return output(args.cpu ?? \"0.25 vCPU\").apply((v) => {\n    if (!supportedCpus[v]) {\n      throw new Error(\n        `Unsupported CPU: ${v}. The supported values for CPU are ${Object.keys(\n          supportedCpus,\n        ).join(\", \")}`,\n      );\n    }\n    return v;\n  });\n}\n\nexport function normalizeMemory(\n  cpu: ReturnType<typeof normalizeCpu>,\n  args: FargateBaseArgs,\n) {\n  return all([cpu, args.memory ?? \"0.5 GB\"]).apply(([cpu, v]) => {\n    if (!(v in supportedMemories[cpu])) {\n      throw new Error(\n        `Unsupported memory: ${v}. The supported values for memory for a ${cpu} CPU are ${Object.keys(\n          supportedMemories[cpu],\n        ).join(\", \")}`,\n      );\n    }\n    return v;\n  });\n}\n\nexport function normalizeStorage(args: FargateBaseArgs) {\n  return output(args.storage ?? \"20 GB\").apply((v) => {\n    const storage = toGBs(v);\n    if (storage < 20 || storage > 200)\n      throw new Error(\n        `Unsupported storage: ${v}. The supported value for storage is between \"20 GB\" and \"200 GB\"`,\n      );\n    return v;\n  });\n}\n\nexport function normalizeContainers(\n  type: \"service\" | \"task\",\n  args: ServiceArgs,\n  name: string,\n  architecture: ReturnType<typeof normalizeArchitecture>,\n) {\n  if (\n    args.containers &&\n    (args.image ||\n      args.logging ||\n      args.environment ||\n      args.environmentFiles ||\n      args.volumes ||\n      args.health ||\n      args.ssm)\n  ) {\n    throw new VisibleError(\n      type === \"service\"\n        ? `You cannot provide both \"containers\" and \"image\", \"logging\", \"environment\", \"environmentFiles\", \"volumes\", \"health\" or \"ssm\".`\n        : `You cannot provide both \"containers\" and \"image\", \"logging\", \"environment\", \"environmentFiles\", \"volumes\" or \"ssm\".`,\n    );\n  }\n\n  // Standardize containers\n  const containers = args.containers ?? [\n    {\n      name: name,\n      cpu: undefined,\n      memory: undefined,\n      image: args.image,\n      logging: args.logging,\n      environment: args.environment,\n      environmentFiles: args.environmentFiles,\n      ssm: args.ssm,\n      volumes: args.volumes,\n      command: args.command,\n      entrypoint: args.entrypoint,\n      health: type === \"service\" ? args.health : undefined,\n      dev: type === \"service\" ? args.dev : undefined,\n    },\n  ];\n\n  // Normalize container props\n  return output(containers).apply((containers) =>\n    containers.map((v) => {\n      return {\n        ...v,\n        volumes: normalizeVolumes(),\n        image: normalizeImage(),\n        logging: normalizeLogging(),\n      };\n\n      function normalizeVolumes() {\n        return output(v.volumes).apply(\n          (volumes) =>\n            volumes?.map((volume) => ({\n              path: volume.path,\n              efs:\n                volume.efs instanceof Efs\n                  ? {\n                      fileSystem: volume.efs.id,\n                      accessPoint: volume.efs.accessPoint,\n                    }\n                  : volume.efs,\n            })),\n        );\n      }\n\n      function normalizeImage() {\n        return all([v.image, architecture]).apply(([image, architecture]) => {\n          if (typeof image === \"string\") return image;\n\n          return {\n            ...image,\n            context: image?.context ?? \".\",\n            platform:\n              architecture === \"arm64\"\n                ? Platform.Linux_arm64\n                : Platform.Linux_amd64,\n          };\n        });\n      }\n\n      function normalizeLogging() {\n        return all([v.logging, args.cluster.nodes.cluster.name]).apply(\n          ([logging, clusterName]) => ({\n            ...logging,\n            retention: logging?.retention ?? \"1 month\",\n            name:\n              logging?.name ??\n              // In the case of shared Cluster\u00A0across stage, log group name can thrash\n              // if Task name is the same. Need to suffix the task name with random hash.\n              `/sst/cluster/${clusterName}/${physicalName(64, name)}/${v.name}`,\n          }),\n        );\n      }\n    }),\n  );\n}\n\nexport function createTaskRole(\n  name: string,\n  args: FargateBaseArgs,\n  opts: ComponentResourceOptions,\n  parent: Component,\n  dev: boolean,\n  additionalPermissions?: FunctionArgs[\"permissions\"],\n) {\n  if (args.taskRole)\n    return iam.Role.get(`${name}TaskRole`, args.taskRole, {}, { parent });\n\n  const policy = all([\n    args.permissions ?? [],\n    Link.getInclude<Permission>(\"aws.permission\", args.link),\n    additionalPermissions ?? [],\n  ]).apply(([argsPermissions, linkPermissions, additionalPermissions]) =>\n    iam.getPolicyDocumentOutput({\n      statements: [\n        ...argsPermissions,\n        ...linkPermissions,\n        ...additionalPermissions,\n        {\n          actions: [\n            \"ssmmessages:CreateControlChannel\",\n            \"ssmmessages:CreateDataChannel\",\n            \"ssmmessages:OpenControlChannel\",\n            \"ssmmessages:OpenDataChannel\",\n          ],\n          resources: [\"*\"],\n        },\n      ].map((item) => ({\n        effect: (() => {\n          const effect = item.effect ?? \"allow\";\n          return effect.charAt(0).toUpperCase() + effect.slice(1);\n        })(),\n        actions: item.actions,\n        resources: item.resources,\n      })),\n    }),\n  );\n\n  return new iam.Role(\n    ...transform(\n      args.transform?.taskRole,\n      `${name}TaskRole`,\n      {\n        assumeRolePolicy: iam.assumeRolePolicyForPrincipal({\n          Service: \"ecs-tasks.amazonaws.com\",\n          ...(dev ? { AWS: getCallerIdentityOutput({}, opts).accountId } : {}),\n        }),\n        inlinePolicies: policy.apply(({ statements }) =>\n          statements ? [{ name: \"inline\", policy: policy.json }] : [],\n        ),\n      },\n      { parent },\n    ),\n  );\n}\n\nexport function createExecutionRole(\n  name: string,\n  args: FargateBaseArgs,\n  opts: ComponentResourceOptions,\n  parent: Component,\n) {\n  if (args.executionRole)\n    return iam.Role.get(\n      `${name}ExecutionRole`,\n      args.executionRole,\n      {},\n      { parent },\n    );\n\n  return new iam.Role(\n    ...transform(\n      args.transform?.executionRole,\n      `${name}ExecutionRole`,\n      {\n        assumeRolePolicy: iam.assumeRolePolicyForPrincipal({\n          Service: \"ecs-tasks.amazonaws.com\",\n        }),\n        managedPolicyArns: [\n          interpolate`arn:${\n            getPartitionOutput({}, opts).partition\n          }:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy`,\n        ],\n        inlinePolicies: [\n          {\n            name: \"inline\",\n            policy: iam.getPolicyDocumentOutput({\n              statements: [\n                {\n                  sid: \"ReadSsmAndSecrets\",\n                  actions: [\n                    \"ssm:GetParameters\",\n                    \"ssm:GetParameter\",\n                    \"ssm:GetParameterHistory\",\n                    \"secretsmanager:GetSecretValue\",\n                  ],\n                  resources: [\"*\"],\n                },\n                ...(args.environmentFiles\n                  ? [\n                      {\n                        sid: \"ReadEnvironmentFiles\",\n                        actions: [\"s3:GetObject\"],\n                        resources: args.environmentFiles,\n                      },\n                    ]\n                  : []),\n              ],\n            }).json,\n          },\n        ],\n      },\n      { parent },\n    ),\n  );\n}\n\nexport function createTaskDefinition(\n  name: string,\n  args: ServiceArgs,\n  opts: ComponentResourceOptions,\n  parent: Component,\n  containers: ReturnType<typeof normalizeContainers>,\n  architecture: ReturnType<typeof normalizeArchitecture>,\n  cpu: ReturnType<typeof normalizeCpu>,\n  memory: ReturnType<typeof normalizeMemory>,\n  storage: ReturnType<typeof normalizeStorage>,\n  taskRole: ReturnType<typeof createTaskRole>,\n  executionRole: ReturnType<typeof createExecutionRole>,\n) {\n  const clusterName = args.cluster.nodes.cluster.name;\n  const region = getRegionOutput({}, opts).name;\n  const bootstrapData = region.apply((region) => bootstrap.forRegion(region));\n  const linkEnvs = Link.propertiesToEnv(Link.getProperties(args.link));\n  const containerDefinitions = output(containers).apply((containers) =>\n    containers.map((container) => ({\n      name: container.name,\n      image: (() => {\n        if (typeof container.image === \"string\") return output(container.image);\n\n        const containerImage = container.image;\n        const contextPath = path.join($cli.paths.root, container.image.context);\n        const dockerfile = container.image.dockerfile ?? \"Dockerfile\";\n        const dockerfilePath = path.join(contextPath, dockerfile);\n        const dockerIgnorePath = fs.existsSync(\n          path.join(contextPath, `${dockerfile}.dockerignore`),\n        )\n          ? path.join(contextPath, `${dockerfile}.dockerignore`)\n          : path.join(contextPath, \".dockerignore\");\n\n        // add .sst to .dockerignore if not exist\n        const lines = fs.existsSync(dockerIgnorePath)\n          ? fs.readFileSync(dockerIgnorePath).toString().split(\"\\n\")\n          : [];\n        if (!lines.find((line) => line === \".sst\")) {\n          fs.writeFileSync(\n            dockerIgnorePath,\n            [...lines, \"\", \"# sst\", \".sst\"].join(\"\\n\"),\n          );\n        }\n\n        // Build image\n        const image = imageBuilder(\n          ...transform(\n            args.transform?.image,\n            `${name}Image${container.name}`,\n            {\n              context: { location: contextPath },\n              dockerfile: { location: dockerfilePath },\n              buildArgs: containerImage.args,\n              secrets: linkEnvs,\n              target: container.image.target,\n              platforms: [container.image.platform],\n              tags: [container.name, ...(container.image.tags ?? [])].map(\n                (tag) => interpolate`${bootstrapData.assetEcrUrl}:${tag}`,\n              ),\n              registries: [\n                ecr\n                  .getAuthorizationTokenOutput(\n                    {\n                      registryId: bootstrapData.assetEcrRegistryId,\n                    },\n                    { parent },\n                  )\n                  .apply((authToken) => ({\n                    address: authToken.proxyEndpoint,\n                    password: secret(authToken.password),\n                    username: authToken.userName,\n                  })),\n              ],\n              cacheFrom: [\n                {\n                  registry: {\n                    ref: interpolate`${bootstrapData.assetEcrUrl}:${container.name}-cache`,\n                  },\n                },\n              ],\n              cacheTo: [\n                {\n                  registry: {\n                    ref: interpolate`${bootstrapData.assetEcrUrl}:${container.name}-cache`,\n                    imageManifest: true,\n                    ociMediaTypes: true,\n                    mode: \"max\",\n                  },\n                },\n              ],\n              push: true,\n            },\n            { parent },\n          ),\n        );\n\n        return interpolate`${bootstrapData.assetEcrUrl}@${image.digest}`;\n      })(),\n      cpu: container.cpu ? toNumber(container.cpu) : undefined,\n      memory: container.memory ? toMBs(container.memory) : undefined,\n      command: container.command,\n      entrypoint: container.entrypoint,\n      healthCheck: container.health && {\n        command: container.health.command,\n        startPeriod: toSeconds(container.health.startPeriod ?? \"0 seconds\"),\n        timeout: toSeconds(container.health.timeout ?? \"5 seconds\"),\n        interval: toSeconds(container.health.interval ?? \"30 seconds\"),\n        retries: container.health.retries ?? 3,\n      },\n      pseudoTerminal: true,\n      portMappings: [{ containerPortRange: \"1-65535\" }],\n      logConfiguration: {\n        logDriver: \"awslogs\",\n        options: {\n          \"awslogs-group\": (() => {\n            return new cloudwatch.LogGroup(\n              ...transform(\n                args.transform?.logGroup,\n                `${name}LogGroup${container.name}`,\n                {\n                  name: container.logging.name,\n                  retentionInDays: RETENTION[container.logging.retention],\n                },\n                { parent, ignoreChanges: [\"name\"] },\n              ),\n            );\n          })().name,\n          \"awslogs-region\": region,\n          \"awslogs-stream-prefix\": \"/service\",\n        },\n      },\n      environment: linkEnvs.apply((linkEnvs) =>\n        Object.entries({\n          ...container.environment,\n          ...linkEnvs,\n        }).map(([name, value]) => ({ name, value })),\n      ),\n      environmentFiles: container.environmentFiles?.map((file) => ({\n        type: \"s3\",\n        value: file,\n      })),\n      linuxParameters: {\n        initProcessEnabled: true,\n      },\n      mountPoints: container.volumes?.map((volume) => ({\n        sourceVolume: volume.efs.accessPoint,\n        containerPath: volume.path,\n      })),\n      secrets: Object.entries(container.ssm ?? {}).map(([name, valueFrom]) => ({\n        name,\n        valueFrom,\n      })),\n    })),\n  );\n\n  return storage.apply(\n    (storage) =>\n      new ecs.TaskDefinition(\n        ...transform(\n          args.transform?.taskDefinition,\n          `${name}Task`,\n          {\n            family: interpolate`${clusterName}-${name}`,\n            trackLatest: true,\n            cpu: cpu.apply((v) => toNumber(v).toString()),\n            memory: memory.apply((v) => toMBs(v).toString()),\n            networkMode: \"awsvpc\",\n            ephemeralStorage: (() => {\n              const sizeInGib = toGBs(storage);\n              return sizeInGib === 20 ? undefined : { sizeInGib };\n            })(),\n            requiresCompatibilities: [\"FARGATE\"],\n            runtimePlatform: {\n              cpuArchitecture: architecture.apply((v) => v.toUpperCase()),\n              operatingSystemFamily: \"LINUX\",\n            },\n            executionRoleArn: executionRole.arn,\n            taskRoleArn: taskRole.arn,\n            volumes: output(containers).apply((containers) => {\n              const uniqueAccessPoints: Set<string> = new Set();\n              return containers.flatMap((container) =>\n                (container.volumes ?? []).flatMap((volume) => {\n                  if (uniqueAccessPoints.has(volume.efs.accessPoint)) return [];\n                  uniqueAccessPoints.add(volume.efs.accessPoint);\n                  return {\n                    name: volume.efs.accessPoint,\n                    efsVolumeConfiguration: {\n                      fileSystemId: volume.efs.fileSystem,\n                      transitEncryption: \"ENABLED\",\n                      authorizationConfig: {\n                        accessPointId: volume.efs.accessPoint,\n                      },\n                    },\n                  };\n                }),\n              );\n            }),\n            containerDefinitions: $jsonStringify(containerDefinitions),\n          },\n          { parent },\n        ),\n      ),\n  );\n}\n", "import { all, ComponentResourceOptions } from \"@pulumi/pulumi\";\nimport { Semaphore } from \"../../../util/semaphore\";\nimport { Image, ImageArgs } from \"@pulumi/docker-build\";\n\nconst limiter = new Semaphore(\n  parseInt(process.env.SST_BUILD_CONCURRENCY_CONTAINER || \"1\"),\n);\n\nexport function imageBuilder(\n  name: string,\n  args: ImageArgs,\n  opts?: ComponentResourceOptions,\n) {\n  // Wait for the all args values to be resolved before acquiring the semaphore\n  return all([args]).apply(async ([args]) => {\n    await limiter.acquire(name);\n    const image = new Image(\n      name,\n      {\n        ...(process.env.BUILDX_BUILDER\n          ? { builder: { name: process.env.BUILDX_BUILDER } }\n          : {}),\n        ...args,\n      },\n      opts,\n    );\n    return image.urn.apply(() => {\n      limiter.release();\n      return image;\n    });\n  });\n}\n", "export type Cpu = `${number} ${\"vCPU\"}`;\n\nexport function toNumber(cpu: Cpu) {\n  const [count, unit] = cpu.split(\" \");\n  const countNum = parseFloat(count);\n  if (unit === \"vCPU\") {\n    return countNum * 1024;\n  }\n  throw new Error(`Invalid CPU ${cpu}`);\n}\n", "import fs from \"fs\";\nimport path from \"path\";\nimport {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  all,\n  interpolate,\n  output,\n  secret,\n} from \"@pulumi/pulumi\";\nimport { Image, Platform } from \"@pulumi/docker-build\";\nimport { Component, transform } from \"../component.js\";\nimport { toGBs, toMBs } from \"../size.js\";\nimport { toNumber } from \"../cpu.js\";\nimport { dns as awsDns } from \"./dns.js\";\nimport { VisibleError } from \"../error.js\";\nimport { DnsValidatedCertificate } from \"./dns-validated-certificate.js\";\nimport { Link } from \"../link.js\";\nimport { bootstrap } from \"./helpers/bootstrap.js\";\nimport {\n  ClusterArgs,\n  ClusterServiceArgs,\n  supportedCpus,\n  supportedMemories,\n} from \"./cluster-v1.js\";\nimport { RETENTION } from \"./logging.js\";\nimport { URL_UNAVAILABLE } from \"./linkable.js\";\nimport {\n  appautoscaling,\n  cloudwatch,\n  ec2,\n  ecr,\n  ecs,\n  getCallerIdentityOutput,\n  getRegionOutput,\n  iam,\n  lb,\n} from \"@pulumi/aws\";\nimport { Permission } from \"./permission.js\";\nimport { Vpc } from \"./vpc.js\";\n\nexport interface ServiceArgs extends ClusterServiceArgs {\n  /**\n   * The cluster to use for the service.\n   */\n  cluster: Input<{\n    /**\n     * The name of the cluster.\n     */\n    name: Input<string>;\n    /**\n     * The ARN of the cluster.\n     */\n    arn: Input<string>;\n  }>;\n  /**\n   * The VPC to use for the cluster.\n   */\n  vpc: ClusterArgs[\"vpc\"];\n}\n\n/**\n * The `Service` component is internally used by the `Cluster` component to deploy services to\n * [Amazon ECS](https://aws.amazon.com/ecs/). It uses [AWS Fargate](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html).\n *\n * :::note\n * This component is not meant to be created directly.\n * :::\n *\n * This component is returned by the `addService` method of the `Cluster` component.\n */\nexport class Service extends Component implements Link.Linkable {\n  private readonly service?: ecs.Service;\n  private readonly taskRole: iam.Role;\n  private readonly taskDefinition?: ecs.TaskDefinition;\n  private readonly loadBalancer?: lb.LoadBalancer;\n  private readonly domain?: Output<string | undefined>;\n  private readonly _url?: Output<string>;\n  private readonly devUrl?: Output<string>;\n\n  constructor(\n    name: string,\n    args: ServiceArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n\n    const cluster = output(args.cluster);\n    const vpc = normalizeVpc();\n    const region = normalizeRegion();\n    const architecture = normalizeArchitecture();\n    const imageArgs = normalizeImage();\n    const cpu = normalizeCpu();\n    const memory = normalizeMemory();\n    const storage = normalizeStorage();\n    const scaling = normalizeScaling();\n    const logging = normalizeLogging();\n    const pub = normalizePublic();\n\n    const linkData = buildLinkData();\n    const linkPermissions = buildLinkPermissions();\n\n    const taskRole = createTaskRole();\n    this.taskRole = taskRole;\n\n    if ($dev) {\n      this.devUrl = !pub ? undefined : output(args.dev?.url ?? URL_UNAVAILABLE);\n      registerReceiver();\n      return;\n    }\n\n    const bootstrapData = region.apply((region) => bootstrap.forRegion(region));\n    const executionRole = createExecutionRole();\n    const image = createImage();\n    const logGroup = createLogGroup();\n    const taskDefinition = createTaskDefinition();\n    const certificateArn = createSsl();\n    const { loadBalancer, targets } = createLoadBalancer();\n    const service = createService();\n    createAutoScaling();\n    createDnsRecords();\n\n    this.service = service;\n    this.taskDefinition = taskDefinition;\n    this.loadBalancer = loadBalancer;\n    this.domain = pub?.domain\n      ? pub.domain.apply((domain) => domain?.name)\n      : output(undefined);\n    this._url = !self.loadBalancer\n      ? undefined\n      : all([self.domain, self.loadBalancer?.dnsName]).apply(\n        ([domain, loadBalancer]) =>\n          domain ? `https://${domain}/` : `http://${loadBalancer}`,\n      );\n\n    registerHint();\n    registerReceiver();\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        const result = {\n          id: args.vpc.id,\n          publicSubnets: args.vpc.publicSubnets,\n          privateSubnets: args.vpc.privateSubnets,\n          securityGroups: args.vpc.securityGroups,\n        };\n        return args.vpc.nodes.natGateways.apply((natGateways) => {\n          if (natGateways.length === 0)\n            throw new VisibleError(\n              `The VPC configured for the service does not have NAT enabled. Enable NAT by configuring \"nat\" on the \"sst.aws.Vpc\" component.`,\n            );\n          return result;\n        });\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc);\n    }\n\n    function normalizeRegion() {\n      return getRegionOutput(undefined, { parent: self }).name;\n    }\n\n    function normalizeArchitecture() {\n      return output(args.architecture ?? \"x86_64\").apply((v) => v);\n    }\n\n    function normalizeImage() {\n      return all([args.image ?? {}, architecture]).apply(\n        ([image, architecture]) => ({\n          ...image,\n          context: image.context ?? \".\",\n          platform:\n            architecture === \"arm64\"\n              ? Platform.Linux_arm64\n              : Platform.Linux_amd64,\n        }),\n      );\n    }\n\n    function normalizeCpu() {\n      return output(args.cpu ?? \"0.25 vCPU\").apply((v) => {\n        if (!supportedCpus[v]) {\n          throw new Error(\n            `Unsupported CPU: ${v}. The supported values for CPU are ${Object.keys(\n              supportedCpus,\n            ).join(\", \")}`,\n          );\n        }\n        return v;\n      });\n    }\n\n    function normalizeMemory() {\n      return all([cpu, args.memory ?? \"0.5 GB\"]).apply(([cpu, v]) => {\n        if (!(v in supportedMemories[cpu])) {\n          throw new Error(\n            `Unsupported memory: ${v}. The supported values for memory for a ${cpu} CPU are ${Object.keys(\n              supportedMemories[cpu],\n            ).join(\", \")}`,\n          );\n        }\n        return v;\n      });\n    }\n\n    function normalizeStorage() {\n      return output(args.storage ?? \"21 GB\").apply((v) => {\n        const storage = toGBs(v);\n        if (storage < 21 || storage > 200)\n          throw new Error(\n            `Unsupported storage: ${v}. The supported value for storage is between \"21 GB\" and \"200 GB\"`,\n          );\n        return v;\n      });\n    }\n\n    function normalizeScaling() {\n      return output(args.scaling).apply((v) => ({\n        min: v?.min ?? 1,\n        max: v?.max ?? 1,\n        cpuUtilization: v?.cpuUtilization ?? 70,\n        memoryUtilization: v?.memoryUtilization ?? 70,\n      }));\n    }\n\n    function normalizeLogging() {\n      return output(args.logging).apply((logging) => ({\n        ...logging,\n        retention: logging?.retention ?? \"1 month\",\n      }));\n    }\n\n    function normalizePublic() {\n      if (!args.public) return;\n\n      const ports = output(args.public).apply((pub) => {\n        // validate ports\n        if (!pub.ports || pub.ports.length === 0)\n          throw new VisibleError(\n            `You must provide the ports to expose via \"public.ports\".`,\n          );\n\n        // parse protocols and ports\n        const ports = pub.ports.map((v) => {\n          const listenParts = v.listen.split(\"/\");\n          const forwardParts = v.forward ? v.forward.split(\"/\") : listenParts;\n          return {\n            listenPort: parseInt(listenParts[0]),\n            listenProtocol: listenParts[1],\n            forwardPort: parseInt(forwardParts[0]),\n            forwardProtocol: forwardParts[1],\n          };\n        });\n\n        // validate protocols are consistent\n        const appProtocols = ports.filter(\n          (port) =>\n            [\"http\", \"https\"].includes(port.listenProtocol) &&\n            [\"http\", \"https\"].includes(port.forwardProtocol),\n        );\n        if (appProtocols.length > 0 && appProtocols.length < ports.length)\n          throw new VisibleError(\n            `Protocols must be either all http/https, or all tcp/udp/tcp_udp/tls.`,\n          );\n\n        // validate certificate exists for https/tls protocol\n        ports.forEach((port) => {\n          if ([\"https\", \"tls\"].includes(port.listenProtocol) && !pub.domain) {\n            throw new VisibleError(\n              `You must provide a custom domain for ${port.listenProtocol.toUpperCase()} protocol.`,\n            );\n          }\n        });\n\n        return ports;\n      });\n\n      const domain = output(args.public).apply((pub) => {\n        if (!pub.domain) return undefined;\n\n        // normalize domain\n        const domain =\n          typeof pub.domain === \"string\" ? { name: pub.domain } : pub.domain;\n        return {\n          name: domain.name,\n          dns: domain.dns === false ? undefined : domain.dns ?? awsDns(),\n          cert: domain.cert,\n        };\n      });\n\n      return { ports, domain };\n    }\n\n    function buildLinkData() {\n      return output(args.link || []).apply((links) => Link.build(links));\n    }\n\n    function buildLinkPermissions() {\n      return Link.getInclude<Permission>(\"aws.permission\", args.link);\n    }\n\n    function createImage() {\n      // Edit .dockerignore file\n      const imageArgsNew = imageArgs.apply((imageArgs) => {\n        const context = path.join($cli.paths.root, imageArgs.context);\n        const dockerfile = imageArgs.dockerfile ?? \"Dockerfile\";\n\n        // get .dockerignore file\n        const file = (() => {\n          let filePath = path.join(context, `${dockerfile}.dockerignore`);\n          if (fs.existsSync(filePath)) return filePath;\n          filePath = path.join(context, \".dockerignore\");\n          if (fs.existsSync(filePath)) return filePath;\n        })();\n\n        // add .sst to .dockerignore if not exist\n        const content = file ? fs.readFileSync(file).toString() : \"\";\n        const lines = content.split(\"\\n\");\n        if (!lines.find((line) => line === \".sst\")) {\n          fs.writeFileSync(\n            file ?? path.join(context, \".dockerignore\"),\n            [...lines, \"\", \"# sst\", \".sst\"].join(\"\\n\"),\n          );\n        }\n        return imageArgs;\n      });\n\n      // Build image\n      return new Image(\n        ...transform(\n          args.transform?.image,\n          `${name}Image`,\n          {\n            context: {\n              location: imageArgsNew.apply((v) =>\n                path.join($cli.paths.root, v.context),\n              ),\n            },\n            dockerfile: {\n              location: imageArgsNew.apply((v) =>\n                v.dockerfile\n                  ? path.join($cli.paths.root, v.dockerfile)\n                  : path.join($cli.paths.root, v.context, \"Dockerfile\"),\n              ),\n            },\n            buildArgs: imageArgsNew.apply((v) => v.args ?? {}),\n            platforms: [imageArgs.platform],\n            tags: [interpolate`${bootstrapData.assetEcrUrl}:${name}`],\n            registries: [\n              ecr\n                .getAuthorizationTokenOutput({\n                  registryId: bootstrapData.assetEcrRegistryId,\n                })\n                .apply((authToken) => ({\n                  address: authToken.proxyEndpoint,\n                  password: secret(authToken.password),\n                  username: authToken.userName,\n                })),\n            ],\n            push: true,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createLoadBalancer() {\n      if (!pub) return {};\n\n      const securityGroup = new ec2.SecurityGroup(\n        ...transform(\n          args?.transform?.loadBalancerSecurityGroup,\n          `${name}LoadBalancerSecurityGroup`,\n          {\n            vpcId: vpc.id,\n            egress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                cidrBlocks: [\"0.0.0.0/0\"],\n              },\n            ],\n            ingress: [\n              {\n                fromPort: 0,\n                toPort: 0,\n                protocol: \"-1\",\n                cidrBlocks: [\"0.0.0.0/0\"],\n              },\n            ],\n          },\n          { parent: self },\n        ),\n      );\n\n      const loadBalancer = new lb.LoadBalancer(\n        ...transform(\n          args.transform?.loadBalancer,\n          `${name}LoadBalancer`,\n          {\n            internal: false,\n            loadBalancerType: pub.ports.apply((ports) =>\n              ports[0].listenProtocol.startsWith(\"http\")\n                ? \"application\"\n                : \"network\",\n            ),\n            subnets: vpc.publicSubnets,\n            securityGroups: [securityGroup.id],\n            enableCrossZoneLoadBalancing: true,\n          },\n          { parent: self },\n        ),\n      );\n\n      const ret = all([pub.ports, certificateArn]).apply(([ports, cert]) => {\n        const listeners: Record<string, lb.Listener> = {};\n        const targets: Record<string, lb.TargetGroup> = {};\n\n        ports.forEach((port) => {\n          const forwardProtocol = port.forwardProtocol.toUpperCase();\n          const forwardPort = port.forwardPort;\n          const targetId = `${forwardProtocol}${forwardPort}`;\n          const target =\n            targets[targetId] ??\n            new lb.TargetGroup(\n              ...transform(\n                args.transform?.target,\n                `${name}Target${targetId}`,\n                {\n                  // TargetGroup names allow for 32 chars, but an 8 letter suffix\n                  // ie. \"-1234567\" is automatically added.\n                  // - If we don't specify \"name\" or \"namePrefix\", we need to ensure\n                  //   the component name is less than 24 chars. Hard to guarantee.\n                  // - If we specify \"name\", we need to ensure the $app-$stage-$name\n                  //   if less than 32 chars. Hard to guarantee.\n                  // - Hence we will use \"namePrefix\".\n                  namePrefix: forwardProtocol,\n                  port: forwardPort,\n                  protocol: forwardProtocol,\n                  targetType: \"ip\",\n                  vpcId: vpc.id,\n                },\n                { parent: self },\n              ),\n            );\n          targets[targetId] = target;\n\n          const listenProtocol = port.listenProtocol.toUpperCase();\n          const listenPort = port.listenPort;\n          const listenerId = `${listenProtocol}${listenPort}`;\n          const listener =\n            listeners[listenerId] ??\n            new lb.Listener(\n              ...transform(\n                args.transform?.listener,\n                `${name}Listener${listenerId}`,\n                {\n                  loadBalancerArn: loadBalancer.arn,\n                  port: listenPort,\n                  protocol: listenProtocol,\n                  certificateArn: [\"HTTPS\", \"TLS\"].includes(listenProtocol)\n                    ? cert\n                    : undefined,\n                  defaultActions: [\n                    {\n                      type: \"forward\",\n                      targetGroupArn: target.arn,\n                    },\n                  ],\n                },\n                { parent: self },\n              ),\n            );\n          listeners[listenerId] = listener;\n        });\n\n        return { listeners, targets };\n      });\n\n      return { loadBalancer, targets: ret.targets };\n    }\n\n    function createSsl() {\n      if (!pub) return output(undefined);\n\n      return pub.domain.apply((domain) => {\n        if (!domain) return output(undefined);\n        if (domain.cert) return output(domain.cert);\n\n        return new DnsValidatedCertificate(\n          `${name}Ssl`,\n          {\n            domainName: domain.name,\n            dns: domain.dns!,\n          },\n          { parent: self },\n        ).arn;\n      });\n    }\n\n    function createLogGroup() {\n      return new cloudwatch.LogGroup(\n        ...transform(\n          args.transform?.logGroup,\n          `${name}LogGroup`,\n          {\n            name: interpolate`/sst/cluster/${cluster.name}/${name}`,\n            retentionInDays: logging.apply(\n              (logging) => RETENTION[logging.retention],\n            ),\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createTaskRole() {\n      const policy = all([args.permissions || [], linkPermissions]).apply(\n        ([argsPermissions, linkPermissions]) =>\n          iam.getPolicyDocumentOutput({\n            statements: [...argsPermissions, ...linkPermissions].map(\n              (item) => ({\n                effect: (() => {\n                  const effect = item.effect ?? \"allow\";\n                  return effect.charAt(0).toUpperCase() + effect.slice(1);\n                })(),\n                actions: item.actions,\n                resources: item.resources,\n              }),\n            ),\n          }),\n      );\n\n      return new iam.Role(\n        ...transform(\n          args.transform?.taskRole,\n          `${name}TaskRole`,\n          {\n            assumeRolePolicy: !$dev\n              ? iam.assumeRolePolicyForPrincipal({\n                Service: \"ecs-tasks.amazonaws.com\",\n              })\n              : iam.assumeRolePolicyForPrincipal({\n                AWS: interpolate`arn:aws:iam::${getCallerIdentityOutput().accountId\n                  }:root`,\n              }),\n            inlinePolicies: policy.apply(({ statements }) =>\n              statements ? [{ name: \"inline\", policy: policy.json }] : [],\n            ),\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createExecutionRole() {\n      return new iam.Role(\n        `${name}ExecutionRole`,\n        {\n          assumeRolePolicy: iam.assumeRolePolicyForPrincipal({\n            Service: \"ecs-tasks.amazonaws.com\",\n          }),\n          managedPolicyArns: [\n            \"arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy\",\n          ],\n        },\n        { parent: self },\n      );\n    }\n\n    function createTaskDefinition() {\n      return new ecs.TaskDefinition(\n        ...transform(\n          args.transform?.taskDefinition,\n          `${name}Task`,\n          {\n            family: interpolate`${cluster.name}-${name}`,\n            trackLatest: true,\n            cpu: cpu.apply((v) => toNumber(v).toString()),\n            memory: memory.apply((v) => toMBs(v).toString()),\n            networkMode: \"awsvpc\",\n            ephemeralStorage: {\n              sizeInGib: storage.apply((v) => toGBs(v)),\n            },\n            requiresCompatibilities: [\"FARGATE\"],\n            runtimePlatform: {\n              cpuArchitecture: architecture.apply((v) => v.toUpperCase()),\n              operatingSystemFamily: \"LINUX\",\n            },\n            executionRoleArn: executionRole.arn,\n            taskRoleArn: taskRole.arn,\n            containerDefinitions: $jsonStringify([\n              {\n                name,\n                image: interpolate`${bootstrapData.assetEcrUrl}@${image.digest}`,\n                pseudoTerminal: true,\n                portMappings: pub?.ports.apply((ports) =>\n                  ports\n                    .map((port) => port.forwardPort)\n                    // ensure unique ports\n                    .filter(\n                      (value, index, self) => self.indexOf(value) === index,\n                    )\n                    .map((value) => ({ containerPort: value })),\n                ),\n                logConfiguration: {\n                  logDriver: \"awslogs\",\n                  options: {\n                    \"awslogs-group\": logGroup.name,\n                    \"awslogs-region\": region,\n                    \"awslogs-stream-prefix\": \"/service\",\n                  },\n                },\n                environment: all([args.environment ?? [], linkData]).apply(\n                  ([env, linkData]) => [\n                    ...Object.entries(env).map(([name, value]) => ({\n                      name,\n                      value,\n                    })),\n                    ...linkData.map((d) => ({\n                      name: `SST_RESOURCE_${d.name}`,\n                      value: JSON.stringify(d.properties),\n                    })),\n                    {\n                      name: \"SST_RESOURCE_App\",\n                      value: JSON.stringify({\n                        name: $app.name,\n                        stage: $app.stage,\n                      }),\n                    },\n                  ],\n                ),\n              },\n            ]),\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createService() {\n      return new ecs.Service(\n        ...transform(\n          args.transform?.service,\n          `${name}Service`,\n          {\n            name,\n            cluster: cluster.arn,\n            taskDefinition: taskDefinition.arn,\n            desiredCount: scaling.min,\n            launchType: \"FARGATE\",\n            networkConfiguration: {\n              assignPublicIp: false,\n              subnets: vpc.privateSubnets,\n              securityGroups: vpc.securityGroups,\n            },\n            deploymentCircuitBreaker: {\n              enable: true,\n              rollback: true,\n            },\n            loadBalancers:\n              targets &&\n              targets.apply((targets) =>\n                Object.values(targets).map((target) => ({\n                  targetGroupArn: target.arn,\n                  containerName: name,\n                  containerPort: target.port.apply((port) => port!),\n                })),\n              ),\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createAutoScaling() {\n      const target = new appautoscaling.Target(\n        `${name}AutoScalingTarget`,\n        {\n          serviceNamespace: \"ecs\",\n          scalableDimension: \"ecs:service:DesiredCount\",\n          resourceId: interpolate`service/${cluster.name}/${service.name}`,\n          maxCapacity: scaling.max,\n          minCapacity: scaling.min,\n        },\n        { parent: self },\n      );\n\n      new appautoscaling.Policy(\n        `${name}AutoScalingCpuPolicy`,\n        {\n          serviceNamespace: target.serviceNamespace,\n          scalableDimension: target.scalableDimension,\n          resourceId: target.resourceId,\n          policyType: \"TargetTrackingScaling\",\n          targetTrackingScalingPolicyConfiguration: {\n            predefinedMetricSpecification: {\n              predefinedMetricType: \"ECSServiceAverageCPUUtilization\",\n            },\n            targetValue: scaling.cpuUtilization,\n          },\n        },\n        { parent: self },\n      );\n\n      new appautoscaling.Policy(\n        `${name}AutoScalingMemoryPolicy`,\n        {\n          serviceNamespace: target.serviceNamespace,\n          scalableDimension: target.scalableDimension,\n          resourceId: target.resourceId,\n          policyType: \"TargetTrackingScaling\",\n          targetTrackingScalingPolicyConfiguration: {\n            predefinedMetricSpecification: {\n              predefinedMetricType: \"ECSServiceAverageMemoryUtilization\",\n            },\n            targetValue: scaling.memoryUtilization,\n          },\n        },\n        { parent: self },\n      );\n    }\n\n    function createDnsRecords() {\n      if (!pub) return;\n\n      pub.domain.apply((domain) => {\n        if (!domain?.dns) return;\n\n        domain.dns.createAlias(\n          name,\n          {\n            name: domain.name,\n            aliasName: loadBalancer!.dnsName,\n            aliasZone: loadBalancer!.zoneId,\n          },\n          { parent: self },\n        );\n      });\n    }\n\n    function registerHint() {\n      self.registerOutputs({ _hint: self._url });\n    }\n\n    function registerReceiver() {\n      self.registerOutputs({\n        _dev: imageArgs.apply((imageArgs) => ({\n          links: linkData.apply((input) => input.map((item) => item.name)),\n          environment: {\n            ...args.environment,\n            AWS_REGION: region,\n          },\n          aws: {\n            role: taskRole.arn,\n          },\n          autostart: output(args.dev?.autostart).apply((val) => val ?? true),\n          directory: output(args.dev?.directory).apply(\n            (dir) =>\n              dir ||\n              path.join(\n                imageArgs.dockerfile\n                  ? path.dirname(imageArgs.dockerfile)\n                  : imageArgs.context,\n              ),\n          ),\n          command: args.dev?.command,\n        })),\n      });\n    }\n  }\n\n  /**\n   * The URL of the service.\n   *\n   * If `public.domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated load balancer URL.\n   */\n  public get url() {\n    const errorMessage =\n      \"Cannot access the URL because no public ports are exposed.\";\n    if ($dev) {\n      if (!this.devUrl) throw new VisibleError(errorMessage);\n      return this.devUrl;\n    }\n\n    if (!this._url) throw new VisibleError(errorMessage);\n    return this._url;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Amazon ECS Service.\n       */\n      get service() {\n        if ($dev)\n          throw new VisibleError(\"Cannot access `nodes.service` in dev mode.\");\n        return self.service!;\n      },\n      /**\n       * The Amazon ECS Task Role.\n       */\n      get taskRole() {\n        return self.taskRole;\n      },\n      /**\n       * The Amazon ECS Task Definition.\n       */\n      get taskDefinition() {\n        if ($dev)\n          throw new VisibleError(\n            \"Cannot access `nodes.taskDefinition` in dev mode.\",\n          );\n        return self.taskDefinition!;\n      },\n      /**\n       * The Amazon Elastic Load Balancer.\n       */\n      get loadBalancer() {\n        if ($dev)\n          throw new VisibleError(\n            \"Cannot access `nodes.loadBalancer` in dev mode.\",\n          );\n        if (!self.loadBalancer)\n          throw new VisibleError(\n            \"Cannot access `nodes.loadBalancer` when no public ports are exposed.\",\n          );\n        return self.loadBalancer;\n      },\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: { url: $dev ? this.devUrl : this._url },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Service\";\n// @ts-expect-error\nService.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component.js\";\nimport { Input } from \"../input.js\";\nimport { Dns } from \"../dns.js\";\nimport { FunctionArgs } from \"./function.js\";\nimport { Service as ServiceV1 } from \"./service-v1.js\";\nimport { RETENTION } from \"./logging.js\";\nimport { cloudwatch, ec2, ecs, iam, lb } from \"@pulumi/aws\";\nimport { ImageArgs } from \"@pulumi/docker-build\";\n\nexport const supportedCpus = {\n  \"0.25 vCPU\": 256,\n  \"0.5 vCPU\": 512,\n  \"1 vCPU\": 1024,\n  \"2 vCPU\": 2048,\n  \"4 vCPU\": 4096,\n  \"8 vCPU\": 8192,\n  \"16 vCPU\": 16384,\n};\n\nexport const supportedMemories = {\n  \"0.25 vCPU\": {\n    \"0.5 GB\": 512,\n    \"1 GB\": 1024,\n    \"2 GB\": 2048,\n  },\n  \"0.5 vCPU\": {\n    \"1 GB\": 1024,\n    \"2 GB\": 2048,\n    \"3 GB\": 3072,\n    \"4 GB\": 4096,\n  },\n  \"1 vCPU\": {\n    \"2 GB\": 2048,\n    \"3 GB\": 3072,\n    \"4 GB\": 4096,\n    \"5 GB\": 5120,\n    \"6 GB\": 6144,\n    \"7 GB\": 7168,\n    \"8 GB\": 8192,\n  },\n  \"2 vCPU\": {\n    \"4 GB\": 4096,\n    \"5 GB\": 5120,\n    \"6 GB\": 6144,\n    \"7 GB\": 7168,\n    \"8 GB\": 8192,\n    \"9 GB\": 9216,\n    \"10 GB\": 10240,\n    \"11 GB\": 11264,\n    \"12 GB\": 12288,\n    \"13 GB\": 13312,\n    \"14 GB\": 14336,\n    \"15 GB\": 15360,\n    \"16 GB\": 16384,\n  },\n  \"4 vCPU\": {\n    \"8 GB\": 8192,\n    \"9 GB\": 9216,\n    \"10 GB\": 10240,\n    \"11 GB\": 11264,\n    \"12 GB\": 12288,\n    \"13 GB\": 13312,\n    \"14 GB\": 14336,\n    \"15 GB\": 15360,\n    \"16 GB\": 16384,\n    \"17 GB\": 17408,\n    \"18 GB\": 18432,\n    \"19 GB\": 19456,\n    \"20 GB\": 20480,\n    \"21 GB\": 21504,\n    \"22 GB\": 22528,\n    \"23 GB\": 23552,\n    \"24 GB\": 24576,\n    \"25 GB\": 25600,\n    \"26 GB\": 26624,\n    \"27 GB\": 27648,\n    \"28 GB\": 28672,\n    \"29 GB\": 29696,\n    \"30 GB\": 30720,\n  },\n  \"8 vCPU\": {\n    \"16 GB\": 16384,\n    \"20 GB\": 20480,\n    \"24 GB\": 24576,\n    \"28 GB\": 28672,\n    \"32 GB\": 32768,\n    \"36 GB\": 36864,\n    \"40 GB\": 40960,\n    \"44 GB\": 45056,\n    \"48 GB\": 49152,\n    \"52 GB\": 53248,\n    \"56 GB\": 57344,\n    \"60 GB\": 61440,\n  },\n  \"16 vCPU\": {\n    \"32 GB\": 32768,\n    \"40 GB\": 40960,\n    \"48 GB\": 49152,\n    \"56 GB\": 57344,\n    \"64 GB\": 65536,\n    \"72 GB\": 73728,\n    \"80 GB\": 81920,\n    \"88 GB\": 90112,\n    \"96 GB\": 98304,\n    \"104 GB\": 106496,\n    \"112 GB\": 114688,\n    \"120 GB\": 122880,\n  },\n};\n\ntype Port = `${number}/${\"http\" | \"https\" | \"tcp\" | \"udp\" | \"tcp_udp\" | \"tls\"}`;\n\nexport interface ClusterArgs {\n  /**\n   * The VPC to use for the cluster.\n   *\n   * @example\n   * ```js\n   * {\n   *   vpc: {\n   *     id: \"vpc-0d19d2b8ca2b268a1\",\n   *     publicSubnets: [\"subnet-0b6a2b73896dc8c4c\", \"subnet-021389ebee680c2f0\"],\n   *     privateSubnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"],\n   *     securityGroups: [\"sg-0399348378a4c256c\"],\n   *   }\n   * }\n   * ```\n   *\n   * Or create a `Vpc` component.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   */\n  vpc: Input<{\n    /**\n     * The ID of the VPC.\n     */\n    id: Input<string>;\n    /**\n     * A list of public subnet IDs in the VPC. If a service has public ports configured,\n     * its load balancer will be placed in the public subnets.\n     */\n    publicSubnets: Input<Input<string>[]>;\n    /**\n     * A list of private subnet IDs in the VPC. The service will be placed in the private\n     * subnets.\n     */\n    privateSubnets: Input<Input<string>[]>;\n    /**\n     * A list of VPC security group IDs for the service.\n     */\n    securityGroups: Input<Input<string>[]>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the ECS Cluster resource.\n     */\n    cluster?: Transform<ecs.ClusterArgs>;\n  };\n}\n\nexport interface ClusterServiceArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your service is run locally; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your service, this starts it locally. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   */\n  dev?: {\n    /**\n     * The `url` when this is running in dev mode.\n     *\n     * Since this component is not deployed in `sst dev`, there is no real URL. But if you are\n     * using this component's `url` or linking to this component's `url`, it can be useful to\n     * have a placeholder URL. It avoids having to handle it being `undefined`.\n     * @default `\"http://url-unavailable-in-dev.mode\"`\n     */\n    url?: Input<string>;\n    /**\n     * The command that `sst dev` runs to start this in dev mode. This is the command you run\n     * when you want to run your service locally.\n     */\n    command?: Input<string>;\n    /**\n     * Configure if you want to automatically start this when `sst dev` starts. You can still\n     * start it manually later.\n     * @default `true`\n     */\n    autostart?: Input<boolean>;\n    /**\n     * Change the directory from where the `command` is run.\n     * @default Uses the `image.dockerfile` path\n     */\n    directory?: Input<string>;\n  };\n  /**\n   * Configure the docker build command for building the image.\n   *\n   * Prior to building the image, SST will automatically add the `.sst` directory\n   * to the `.dockerignore` if not already present.\n   *\n   * @default `{}`\n   * @example\n   * ```js\n   * {\n   *   image: {\n   *     context: \"./app\",\n   *     dockerfile: \"Dockerfile\",\n   *     args: {\n   *       MY_VAR: \"value\"\n   *     }\n   *   }\n   * }\n   * ```\n   */\n  image?: Input<{\n    /**\n     * The path to the [Docker build context](https://docs.docker.com/build/building/context/#local-context). The path is relative to your project's `sst.config.ts`.\n     * @default `\".\"`\n     * @example\n     *\n     * To change where the docker build context is located.\n     *\n     * ```js\n     * {\n     *   context: \"./app\"\n     * }\n     * ```\n     */\n    context?: Input<string>;\n    /**\n     * The path to the [Dockerfile](https://docs.docker.com/reference/cli/docker/image/build/#file).\n     * The path is relative to the build `context`.\n     * @default `\"Dockerfile\"`\n     * @example\n     * To use a different Dockerfile.\n     * ```js\n     * {\n     *   dockerfile: \"Dockerfile.prod\"\n     * }\n     * ```\n     */\n    dockerfile?: Input<string>;\n    /**\n     * Key-value pairs of [build args](https://docs.docker.com/build/guide/build-args/) to pass to the docker build command.\n     * @example\n     * ```js\n     * {\n     *   args: {\n     *     MY_VAR: \"value\"\n     *   }\n     * }\n     * ```\n     */\n    args?: Input<Record<string, Input<string>>>;\n  }>;\n  /**\n   * Configure a public endpoint for the service. When configured, a load balancer\n   * will be created to route traffic to the containers. By default, the endpoint is an\n   * auto-generated load balancer URL.\n   *\n   * You can also add a custom domain for the public endpoint.\n   *\n   * @example\n   *\n   * ```js\n   * {\n   *   public: {\n   *     domain: \"example.com\",\n   *     ports: [\n   *       { listen: \"80/http\" },\n   *       { listen: \"443/https\", forward: \"80/http\" }\n   *     ]\n   *   }\n   * }\n   * ```\n   */\n  public?: Input<{\n    /**\n     * Set a custom domain for your public endpoint.\n     *\n     * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n     * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n     * DNS records.\n     *\n     * :::tip\n     * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n     * providers.\n     * :::\n     *\n     * @example\n     *\n     * By default this assumes the domain is hosted on Route 53.\n     *\n     * ```js\n     * {\n     *   domain: \"example.com\"\n     * }\n     * ```\n     *\n     * For domains hosted on Cloudflare.\n     *\n     * ```js\n     * {\n     *   domain: {\n     *     name: \"example.com\",\n     *     dns: sst.cloudflare.dns()\n     *   }\n     * }\n     * ```\n     */\n    domain?: Input<\n      | string\n      | {\n        /**\n         * The custom domain you want to use.\n         *\n         * @example\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\"\n         *   }\n         * }\n         * ```\n         *\n         * Can also include subdomains based on the current stage.\n         *\n         * ```js\n         * {\n         *   domain: {\n         *     name: `${$app.stage}.example.com`\n         *   }\n         * }\n         * ```\n         */\n        name: Input<string>;\n        /**\n         * The ARN of an ACM (AWS Certificate Manager) certificate that proves ownership of the\n         * domain. By default, a certificate is created and validated automatically.\n         *\n         * :::tip\n         * You need to pass in a `cert` for domains that are not hosted on supported `dns` providers.\n         * :::\n         *\n         * To manually set up a domain on an unsupported provider, you'll need to:\n         *\n         * 1. [Validate that you own the domain](https://docs.aws.amazon.com/acm/latest/userguide/domain-ownership-validation.html) by creating an ACM certificate. You can either validate it by setting a DNS record or by verifying an email sent to the domain owner.\n         * 2. Once validated, set the certificate ARN as the `cert` and set `dns` to `false`.\n         * 3. Add the DNS records in your provider to point to the load balancer endpoint.\n         *\n         * @example\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\",\n         *     dns: false,\n         *     cert: \"arn:aws:acm:us-east-1:112233445566:certificate/3a958790-8878-4cdc-a396-06d95064cf63\"\n         *   }\n         * }\n         * ```\n         */\n        cert?: Input<string>;\n        /**\n         * The DNS provider to use for the domain. Defaults to the AWS.\n         *\n         * Takes an adapter that can create the DNS records on the provider. This can automate\n         * validating the domain and setting up the DNS routing.\n         *\n         * Supports Route 53, Cloudflare, and Vercel adapters. For other providers, you'll need\n         * to set `dns` to `false` and pass in a certificate validating ownership via `cert`.\n         *\n         * @default `sst.aws.dns`\n         *\n         * @example\n         *\n         * Specify the hosted zone ID for the Route 53 domain.\n         *\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\",\n         *     dns: sst.aws.dns({\n         *       zone: \"Z2FDTNDATAQYW2\"\n         *     })\n         *   }\n         * }\n         * ```\n         *\n         * Use a domain hosted on Cloudflare, needs the Cloudflare provider.\n         *\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\",\n         *     dns: sst.cloudflare.dns()\n         *   }\n         * }\n         * ```\n         *\n         * Use a domain hosted on Vercel, needs the Vercel provider.\n         *\n         * ```js\n         * {\n         *   domain: {\n         *     name: \"example.com\",\n         *     dns: sst.vercel.dns()\n         *   }\n         * }\n         * ```\n         */\n        dns?: Input<false | (Dns & {})>;\n      }\n    >;\n    /**\n     * Configure the mapping for the ports the public endpoint listens to and forwards to\n     * the service.\n     * This supports two types of protocols:\n     *\n     * 1. Application Layer Protocols: `http` and `https`. This'll create an [Application Load Balancer](https://docs.aws.amazon.com/elasticloadbalancing/latest/application/introduction.html).\n     * 2. Network Layer Protocols: `tcp`, `udp`, `tcp_udp`, and `tls`. This'll create a [Network Load Balancer](https://docs.aws.amazon.com/elasticloadbalancing/latest/network/introduction.html).\n     *\n     * :::note\n     * If you are listening  on `https` or `tls`, you need to specify a custom `public.domain`.\n     * :::\n     *\n     * You can **not** configure both application and network layer protocols for the same\n     * service.\n     *\n     * @example\n     * Here we are listening on port `80` and forwarding it to the service on port `8080`.\n     * ```js\n     * {\n     *   public: {\n     *     ports: [\n     *       { listen: \"80/http\", forward: \"8080/http\" }\n     *     ]\n     *   }\n     * }\n     * ```\n     *\n     * The `forward` port and protocol defaults to the `listen` port and protocol. So in this\n     * case both are `80/http`.\n     *\n     * ```js\n     * {\n     *   public: {\n     *     ports: [\n     *       { listen: \"80/http\" }\n     *     ]\n     *   }\n     * }\n     * ```\n     */\n    ports: Input<\n      {\n        /**\n         * The port and protocol the service listens on. Uses the format `{port}/{protocol}`.\n         */\n        listen: Input<Port>;\n        /**\n         * The port and protocol of the container the service forwards the traffic to. Uses the\n         * format `{port}/{protocol}`.\n         * @default The same port and protocol as `listen`.\n         */\n        forward?: Input<Port>;\n      }[]\n    >;\n  }>;\n  /**\n   * The CPU architecture of the container in this service.\n   * @default `\"x86_64\"`\n   * @example\n   * ```js\n   * {\n   *   architecture: \"arm64\"\n   * }\n   * ```\n   */\n  architecture?: Input<\"x86_64\" | \"arm64\">;\n  /**\n   * The amount of CPU allocated to the container in this service.\n   *\n   * :::note\n   * [View the valid combinations](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-tasks-services.html#fargate-tasks-size) of CPU and memory.\n   * :::\n   *\n   * @default `\"0.25 vCPU\"`\n   * @example\n   * ```js\n   * {\n   *   cpu: \"1 vCPU\"\n   * }\n   *```\n   */\n  cpu?: keyof typeof supportedCpus;\n  /**\n   * The amount of memory allocated to the container in this service.\n   *\n   * :::note\n   * [View the valid combinations](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/fargate-tasks-services.html#fargate-tasks-size) of CPU and memory.\n   * :::\n   *\n   * @default `\"0.5 GB\"`\n   *\n   * @example\n   * ```js\n   * {\n   *   memory: \"2 GB\"\n   * }\n   *```\n   */\n  memory?: `${number} GB`;\n  /**\n   * The amount of ephemeral storage (in GB) allocated to a container in this service.\n   *\n   * @default `\"21 GB\"`\n   *\n   * @example\n   * ```js\n   * {\n   *   storage: \"100 GB\"\n   * }\n   * ```\n   */\n  storage?: `${number} GB`;\n  /**\n   * [Link resources](/docs/linking/) to your service. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your app using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of components to link to the service.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: FunctionArgs[\"link\"];\n  /**\n   * Permissions and the resources that the service needs to access. These permissions are\n   * used to create the service's [task role](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-iam-roles.html).\n   *\n   * :::tip\n   * If you `link` the service to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow the service to read and write to an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Allow the service to perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Granting the service permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: FunctionArgs[\"permissions\"];\n  /**\n   * Key-value pairs of values that are set as [container environment variables](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/taskdef-envfiles.html).\n   * The keys need to:\n   * - Start with a letter\n   * - Be at least 2 characters long\n   * - Contain only letters, numbers, or underscores\n   *\n   * @example\n   *\n   * ```js\n   * {\n   *   environment: {\n   *     DEBUG: \"true\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: FunctionArgs[\"environment\"];\n  /**\n   * Configure the service's logs in CloudWatch.\n   * @default `{ retention: \"1 month\" }`\n   * @example\n   * ```js\n   * {\n   *   logging: {\n   *     retention: \"forever\"\n   *   }\n   * }\n   * ```\n   */\n  logging?: Input<{\n    /**\n     * The duration the logs are kept in CloudWatch.\n     * @default `\"1 month\"`\n     */\n    retention?: Input<keyof typeof RETENTION>;\n  }>;\n  /**\n   * Configure the service to automatically scale up or down based on the CPU or memory\n   * utilization of a container. By default, scaling is disabled and the service will run\n   * in a single container.\n   *\n   * @default `{ min: 1, max: 1 }`\n   *\n   * @example\n   * ```js\n   * {\n   *   scaling: {\n   *     min: 4,\n   *     max: 16,\n   *     cpuUtilization: 50,\n   *     memoryUtilization: 50\n   *   }\n   * }\n   * ```\n   */\n  scaling?: Input<{\n    /**\n     * The minimum number of containers to scale down to.\n     * @default `1`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     min: 4\n     *   }\n     * }\n     *```\n     */\n    min?: Input<number>;\n    /**\n     * The maximum number of containers to scale up to.\n     * @default `1`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     max: 16\n     *   }\n     * }\n     *```\n     */\n    max?: Input<number>;\n    /**\n     * The target CPU utilization percentage to scale up or down. It'll scale up\n     * when the CPU utilization is above the target and scale down when it's below the target.\n     * @default `70`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     cpuUtilization: 50\n     *   }\n     * }\n     *```\n     */\n    cpuUtilization?: Input<number>;\n    /**\n     * The target memory utilization percentage to scale up or down. It'll scale up\n     * when the memory utilization is above the target and scale down when it's below the target.\n     * @default `70`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     memoryUtilization: 50\n     *   }\n     * }\n     *```\n     */\n    memoryUtilization?: Input<number>;\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Docker Image resource.\n     */\n    image?: Transform<ImageArgs>;\n    /**\n     * Transform the ECS Service resource.\n     */\n    service?: Transform<ecs.ServiceArgs>;\n    /**\n     * Transform the ECS Task IAM Role resource.\n     */\n    taskRole?: Transform<iam.RoleArgs>;\n    /**\n     * Transform the ECS Task Definition resource.\n     */\n    taskDefinition?: Transform<ecs.TaskDefinitionArgs>;\n    /**\n     * Transform the AWS Load Balancer resource.\n     */\n    loadBalancer?: Transform<lb.LoadBalancerArgs>;\n    /**\n     * Transform the AWS Security Group resource for the Load Balancer.\n     */\n    loadBalancerSecurityGroup?: Transform<ec2.SecurityGroupArgs>;\n    /**\n     * Transform the AWS Load Balancer listener resource.\n     */\n    listener?: Transform<lb.ListenerArgs>;\n    /**\n     * Transform the AWS Load Balancer target group resource.\n     */\n    target?: Transform<lb.TargetGroupArgs>;\n    /**\n     * Transform the CloudWatch log group resource.\n     */\n    logGroup?: Transform<cloudwatch.LogGroupArgs>;\n  };\n}\n\n/**\n * The `Cluster` component lets you create a cluster of containers and add services to them.\n * It uses [Amazon ECS](https://aws.amazon.com/ecs/) on [AWS Fargate](https://aws.amazon.com/fargate/).\n *\n * For existing usage, rename `sst.aws.Cluster` to `sst.aws.Cluster.v1`. For new Clusters, use\n * the latest [`Cluster`](/docs/component/aws/cluster) component instead.\n *\n * :::caution\n * This component has been deprecated .\n * :::\n *\n * @example\n *\n * #### Create a Cluster\n *\n * ```ts title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const cluster = new sst.aws.Cluster.v1(\"MyCluster\", { vpc });\n * ```\n *\n * #### Add a service\n *\n * ```ts title=\"sst.config.ts\"\n * cluster.addService(\"MyService\");\n * ```\n *\n * #### Add a public custom domain\n *\n * ```ts title=\"sst.config.ts\"\n * cluster.addService(\"MyService\", {\n *   public: {\n *     domain: \"example.com\",\n *     ports: [\n *       { listen: \"80/http\" },\n *       { listen: \"443/https\", forward: \"80/http\" },\n *     ]\n *   }\n * });\n * ```\n *\n * #### Enable auto-scaling\n *\n * ```ts title=\"sst.config.ts\"\n * cluster.addService(\"MyService\", {\n *   scaling: {\n *     min: 4,\n *     max: 16,\n *     cpuUtilization: 50,\n *     memoryUtilization: 50,\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your service. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * cluster.addService(\"MyService\", {\n *   link: [bucket],\n * });\n * ```\n *\n * If your service is written in Node.js, you can use the [SDK](/docs/reference/sdk/)\n * to access the linked resources.\n *\n * ```ts title=\"app.ts\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class Cluster extends Component {\n  private args: ClusterArgs;\n  private cluster: ecs.Cluster;\n\n  constructor(\n    name: string,\n    args: ClusterArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const cluster = createCluster();\n\n    this.args = args;\n    this.cluster = cluster;\n\n    function createCluster() {\n      return new ecs.Cluster(\n        ...transform(args.transform?.cluster, `${name}Cluster`, {}, { parent }),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon ECS Cluster.\n       */\n      cluster: this.cluster,\n    };\n  }\n\n  /**\n   * Add a service to the cluster.\n   *\n   * @param name Name of the service.\n   * @param args Configure the service.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * cluster.addService(\"MyService\");\n   * ```\n   *\n   * Set a custom domain for the service.\n   *\n   * ```js {2} title=\"sst.config.ts\"\n   * cluster.addService(\"MyService\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * #### Enable auto-scaling\n   *\n   * ```ts title=\"sst.config.ts\"\n   * cluster.addService(\"MyService\", {\n   *   scaling: {\n   *     min: 4,\n   *     max: 16,\n   *     cpuUtilization: 50,\n   *     memoryUtilization: 50,\n   *   }\n   * });\n   * ```\n   */\n  public addService(name: string, args?: ClusterServiceArgs) {\n    // Do not prefix the service to allow `Resource.MyService` to work.\n    return new ServiceV1(name, {\n      cluster: {\n        name: this.cluster.name,\n        arn: this.cluster.arn,\n      },\n      vpc: this.args.vpc,\n      ...args,\n    });\n  }\n}\n\nconst __pulumiType = \"sst:aws:Cluster\";\n// @ts-expect-error\nCluster.__pulumiType = __pulumiType;\n", "import { all, ComponentResourceOptions, Output, output } from \"@pulumi/pulumi\";\nimport { Component, Prettify } from \"../component.js\";\nimport { Link } from \"../link.js\";\nimport { Cluster } from \"./cluster.js\";\nimport { ecs, iam } from \"@pulumi/aws\";\nimport { permission } from \"./permission.js\";\nimport { Vpc } from \"./vpc.js\";\nimport { Function } from \"./function.js\";\nimport {\n  FargateBaseArgs,\n  FargateContainerArgs,\n  createExecutionRole,\n  createTaskDefinition,\n  createTaskRole,\n  normalizeArchitecture,\n  normalizeContainers,\n  normalizeCpu,\n  normalizeMemory,\n  normalizeStorage,\n} from \"./fargate.js\";\nimport { Input } from \"../input.js\";\n\nexport interface TaskArgs extends FargateBaseArgs {\n  /**\n   * The containers to run in the task.\n   *\n   * :::tip\n   * You can optionally run multiple containers in a task.\n   * :::\n   *\n   * By default this starts a single container. To add multiple containers in the task, pass\n   * in an array of containers args.\n   *\n   * ```ts\n   * {\n   *   containers: [\n   *     {\n   *       name: \"app\",\n   *       image: \"nginxdemos/hello:plain-text\"\n   *     },\n   *     {\n   *       name: \"admin\",\n   *       image: {\n   *         context: \"./admin\",\n   *         dockerfile: \"Dockerfile\"\n   *       }\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * If you specify `containers`, you cannot list the above args at the top-level. For example,\n   * you **cannot** pass in `image` at the top level.\n   *\n   * ```diff lang=\"ts\"\n   * {\n   * -  image: \"nginxdemos/hello:plain-text\",\n   *   containers: [\n   *     {\n   *       name: \"app\",\n   *       image: \"nginxdemos/hello:plain-text\"\n   *     },\n   *     {\n   *       name: \"admin\",\n   *       image: \"nginxdemos/hello:plain-text\"\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * You will need to pass in `image` as a part of the `containers`.\n   */\n  containers?: Input<Prettify<FargateContainerArgs>>[];\n  /**\n   * Assign a public IP address to the task.\n   *\n   * Defaults:\n   * - If an SST VPC component is passed to the `vpc` property, tasks run in public subnets\n   * by default and `publicIp` defaults to `true`.\n   * - If a non-SST VPC is used, tasks run in the specified subnets and `publicIp` defaults\n   * to `false`.\n   *\n   * @example\n   * ```ts\n   * {\n   *   publicIp: true\n   * }\n   * ```\n   */\n  publicIp?: Input<boolean>;\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` a _stub_ version of your task is deployed.\n   * :::\n   *\n   * By default, your task in not deployed in `sst dev`. Instead, you can set the `dev.command`\n   * and it'll run locally in a **Tasks** tab in the `sst dev` multiplexer.\n   *\n   * Here's what happens when you run `sst dev`:\n   *\n   * 1. A _stub_ version of your task is deployed. This is a minimal image that starts up\n   *    faster.\n   * 2. When your task is started through the SDK, the stub version is provisioned. This can\n   *    take roughly **10 - 20 seconds**.\n   * 3. The stub version proxies the payload to your local machine using the same events\n   *    system used by [Live](/docs/live/).\n   * 4. The `dev.command` is called to run your task locally. Once complete, the stub version\n   *    of your task is stopped as well.\n   *\n   * The advantage with this approach is that you can test your task locally even it's invoked\n   * remotely, or through a cron job.\n   *\n   * :::note\n   * You are charged for the time it takes to run the stub version of your task.\n   * :::\n   *\n   * Since the stub version runs while your task is running, you are charged for the time it\n   * takes to run. This is roughly **$0.02 per hour**.\n   *\n   * To disable this and deploy your task in `sst dev`, pass in `false`. Read more about\n   * [Live](/docs/live/) and [`sst dev`](/docs/reference/cli/#dev).\n   */\n  dev?:\n    | false\n    | {\n        /**\n         * The command that `sst dev` runs in dev mode.\n         */\n        command?: Input<string>;\n        /**\n         * Change the directory from where the `command` is run.\n         * @default Uses the `image.dockerfile` path\n         */\n        directory?: Input<string>;\n      };\n}\n\n/**\n * The `Task` component lets you create containers that are used for long running asynchronous\n * work, like data processing. It uses [Amazon ECS](https://aws.amazon.com/ecs/) on\n * [AWS Fargate](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/AWS_Fargate.html).\n *\n * @example\n *\n * #### Create a Task\n *\n * Tasks are run inside an ECS Cluster. If you haven't already, create one.\n *\n * ```ts title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const cluster = new sst.aws.Cluster(\"MyCluster\", { vpc });\n * ```\n *\n * Add the task to it.\n *\n * ```ts title=\"sst.config.ts\"\n * const task = new sst.aws.Task(\"MyTask\", { cluster });\n * ```\n *\n * #### Configure the container image\n *\n * By default, the task will look for a Dockerfile in the root directory. Optionally,\n * configure the image context and dockerfile.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Task(\"MyTask\", {\n *   cluster,\n *   image: {\n *     context: \"./app\",\n *     dockerfile: \"Dockerfile\"\n *   }\n * });\n * ```\n *\n * To add multiple containers in the task, pass in an array of containers args.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Task(\"MyTask\", {\n *   cluster,\n *   containers: [\n *     {\n *       name: \"app\",\n *       image: \"nginxdemos/hello:plain-text\"\n *     },\n *     {\n *       name: \"admin\",\n *       image: {\n *         context: \"./admin\",\n *         dockerfile: \"Dockerfile\"\n *       }\n *     }\n *   ]\n * });\n * ```\n *\n * This is useful for running sidecar containers.\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your task. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {5} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.Task(\"MyTask\", {\n *   cluster,\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources in your task.\n *\n * ```ts title=\"app.ts\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n *\n * #### Task SDK\n *\n * With the [Task JS SDK](/docs/component/aws/task#sdk), you can run your tasks, stop your\n * tasks, and get the status of your tasks.\n *\n * For example, you can link the task to a function in your app.\n *\n * ```ts title=\"sst.config.ts\" {3}\n * new sst.aws.Function(\"MyFunction\", {\n *   handler: \"src/lambda.handler\",\n *   link: [task]\n * });\n * ```\n *\n * Then from your function run the task.\n *\n * ```ts title=\"src/lambda.ts\"\n * import { Resource } from \"sst\";\n * import { task } from \"sst/aws/task\";\n *\n * const runRet = await task.run(Resource.MyTask);\n * const taskArn = runRet.arn;\n * ```\n *\n * If you are not using Node.js, you can use the AWS SDK instead. Here's\n * [how to run a task](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html).\n *\n * ---\n *\n * ### Cost\n *\n * By default, this uses a _Linux/X86_ _Fargate_ container with 0.25 vCPUs at $0.04048 per\n * vCPU per hour and 0.5 GB of memory at $0.004445 per GB per hour. It includes 20GB of\n * _Ephemeral Storage_ for free with additional storage at $0.000111 per GB per hour. Each\n * container also gets a public IPv4 address at $0.005 per hour.\n *\n * It works out to $0.04048 x 0.25 + $0.004445 x 0.5 + $0.005. Or **$0.02 per hour**\n * your task runs for.\n *\n * Adjust this for the `cpu`, `memory` and `storage` you are using. And\n * check the prices for _Linux/ARM_ if you are using `arm64` as your `architecture`.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [Fargate pricing](https://aws.amazon.com/fargate/pricing/) and the\n * [Public IPv4 Address pricing](https://aws.amazon.com/vpc/pricing/) for more details.\n */\nexport class Task extends Component implements Link.Linkable {\n  private readonly _cluster: Cluster;\n  private readonly vpc: {\n    isSstVpc: boolean;\n    containerSubnets: Output<Output<string>[]>;\n    securityGroups: Output<Output<string>[]>;\n  };\n  private readonly executionRole: iam.Role;\n  private readonly taskRole: iam.Role;\n  private readonly _taskDefinition: Output<ecs.TaskDefinition>;\n  private readonly _publicIp: Output<boolean>;\n  private readonly containerNames: Output<Output<string>[]>;\n  private readonly dev: boolean;\n\n  constructor(\n    name: string,\n    args: TaskArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const dev = normalizeDev();\n    const architecture = normalizeArchitecture(args);\n    const cpu = normalizeCpu(args);\n    const memory = normalizeMemory(cpu, args);\n    const storage = normalizeStorage(args);\n    const containers = normalizeContainers(\"task\", args, name, architecture);\n    const vpc = normalizeVpc();\n    const publicIp = normalizePublicIp();\n\n    const taskRole = createTaskRole(\n      name,\n      args,\n      opts,\n      self,\n      dev,\n      dev\n        ? [\n            {\n              actions: [\"appsync:*\"],\n              resources: [\"*\"],\n            },\n          ]\n        : [],\n    );\n    this.dev = dev;\n    this.taskRole = taskRole;\n\n    const executionRole = createExecutionRole(name, args, opts, self);\n    const taskDefinition = createTaskDefinition(\n      name,\n      args,\n      opts,\n      self,\n      dev\n        ? containers.apply(async (v) => {\n            const appsync = await Function.appsync();\n            return [\n              {\n                ...v[0],\n                image: output(\"ghcr.io/sst/sst/bridge-task:20241224005724\"),\n                environment: {\n                  ...v[0].environment,\n                  SST_TASK_ID: name,\n                  SST_REGION: process.env.SST_AWS_REGION!,\n                  SST_APPSYNC_HTTP: appsync.http,\n                  SST_APPSYNC_REALTIME: appsync.realtime,\n                  SST_APP: $app.name,\n                  SST_STAGE: $app.stage,\n                },\n              },\n            ];\n          })\n        : containers,\n      architecture,\n      cpu,\n      memory,\n      storage,\n      taskRole,\n      executionRole,\n    );\n\n    this._cluster = args.cluster;\n    this.vpc = vpc;\n    this.executionRole = executionRole;\n    this._taskDefinition = taskDefinition;\n    this._publicIp = publicIp;\n    this.containerNames = containers.apply((v) => v.map((v) => output(v.name)));\n    this.registerOutputs({\n      _task: all([args.dev, containers]).apply(([v, containers]) => ({\n        directory: (() => {\n          if (!containers[0].image) return \"\";\n          if (typeof containers[0].image === \"string\") return \"\";\n          if (containers[0].image.context) return containers[0].image.context;\n          return \"\";\n        })(),\n        ...v,\n      })),\n    });\n\n    function normalizeDev() {\n      if (!$dev) return false;\n      if (args.dev === false) return false;\n      return true;\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc component\n      if (args.cluster.vpc instanceof Vpc) {\n        const vpc = args.cluster.vpc;\n        return {\n          isSstVpc: true,\n          containerSubnets: vpc.publicSubnets,\n          securityGroups: vpc.securityGroups,\n        };\n      }\n\n      // \"vpc\" is object\n      return {\n        isSstVpc: false,\n        containerSubnets: output(args.cluster.vpc).apply((v) =>\n          v.containerSubnets.map((v) => output(v)),\n        ),\n        securityGroups: output(args.cluster.vpc).apply((v) =>\n          v.securityGroups.map((v) => output(v)),\n        ),\n      };\n    }\n\n    function normalizePublicIp() {\n      return all([args.publicIp, vpc.isSstVpc]).apply(\n        ([publicIp, isSstVpc]) => publicIp ?? isSstVpc,\n      );\n    }\n  }\n\n  /**\n   * The ARN of the ECS Task Definition.\n   */\n  public get taskDefinition() {\n    return this._taskDefinition.arn;\n  }\n\n  /**\n   * The names of the containers in the task.\n   * @internal\n   */\n  public get containers() {\n    return this.containerNames;\n  }\n\n  /**\n   * The ARN of the cluster this task is deployed to.\n   * @internal\n   */\n  public get cluster() {\n    return this._cluster.nodes.cluster.arn;\n  }\n\n  /**\n   * The security groups for the task.\n   * @internal\n   */\n  public get securityGroups() {\n    return this.vpc.securityGroups;\n  }\n\n  /**\n   * The subnets for the task.\n   * @internal\n   */\n  public get subnets() {\n    return this.vpc.containerSubnets;\n  }\n\n  /**\n   * Whether to assign a public IP address to the task.\n   * @internal\n   */\n  public get assignPublicIp() {\n    return this._publicIp;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon ECS Execution Role.\n       */\n      executionRole: this.executionRole,\n      /**\n       * The Amazon ECS Task Role.\n       */\n      taskRole: this.taskRole,\n      /**\n       * The Amazon ECS Task Definition.\n       */\n      taskDefinition: this._taskDefinition,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        cluster: this.cluster,\n        containers: this.containers,\n        taskDefinition: this.taskDefinition,\n        subnets: this.subnets,\n        securityGroups: this.securityGroups,\n        assignPublicIp: this.assignPublicIp,\n      },\n      include: [\n        permission({\n          actions: [\"ecs:*\"],\n          resources: [\n            this._taskDefinition.arn,\n            // permissions to describe and stop the task\n            this.cluster.apply(\n              (v) => v.split(\":cluster/\").join(\":task/\") + \"/*\",\n            ),\n          ],\n        }),\n        permission({\n          actions: [\"iam:PassRole\"],\n          resources: [this.executionRole.arn, this.taskRole.arn],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Task\";\n// @ts-expect-error\nTask.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, interpolate, output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { FunctionArgs } from \"./function.js\";\nimport { Input } from \"../input\";\nimport { Link } from \"../link\";\nimport { cognito, getRegionOutput, iam } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\nimport { parseRoleArn } from \"./helpers/arn\";\n\nexport interface CognitoIdentityPoolArgs {\n  /**\n   * Configure Cognito User Pools as identity providers to your identity pool.\n   * @example\n   * ```ts\n   * {\n   *   userPools: [\n   *     {\n   *       userPool: \"us-east-1_QY6Ly46JH\",\n   *       client: \"6va5jg3cgtrd170sgokikjm5m6\"\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  userPools?: Input<\n    Input<{\n      /**\n       * The Cognito user pool ID.\n       */\n      userPool: Input<string>;\n      /**\n       * The Cognito User Pool client ID.\n       */\n      client: Input<string>;\n    }>[]\n  >;\n  /**\n   * The permissions to attach to the authenticated and unauthenticated roles.\n   * This allows the authenticated and unauthenticated users to access other AWS resources.\n   *\n   * @example\n   * ```js\n   * {\n   *   permissions: {\n   *     authenticated: [\n   *       {\n   *         actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *         resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *       }\n   *     ],\n   *     unauthenticated: [\n   *       {\n   *         actions: [\"s3:GetObject\"],\n   *         resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *       }\n   *     ]\n   *   }\n   * }\n   * ```\n   */\n  permissions?: Input<{\n    /**\n     * Attaches the given list of permissions to the authenticated users.\n     */\n    authenticated?: FunctionArgs[\"permissions\"];\n    /**\n     * Attaches the given list of permissions to the unauthenticated users.\n     */\n    unauthenticated?: FunctionArgs[\"permissions\"];\n  }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Cognito identity pool resource.\n     */\n    identityPool?: Transform<cognito.IdentityPoolArgs>;\n    /**\n     * Transform the authenticated IAM role resource.\n     */\n    authenticatedRole?: Transform<iam.RoleArgs>;\n    /**\n     * Transform the unauthenticated IAM role resource.\n     */\n    unauthenticatedRole?: Transform<iam.RoleArgs>;\n  };\n}\n\ninterface CognitoUserPoolRef {\n  ref: boolean;\n  identityPool: cognito.IdentityPool;\n  authRole: iam.Role;\n  unauthRole: iam.Role;\n}\n\n/**\n * The `CognitoIdentityPool` component lets you add a [Amazon Cognito identity pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html) to your app.\n *\n * #### Create the identity pool\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.CognitoIdentityPool(\"MyIdentityPool\", {\n *   userPools: [\n *     {\n *       userPool: \"us-east-1_QY6Ly46JH\",\n *       client: \"6va5jg3cgtrd170sgokikjm5m6\"\n *     }\n *   ]\n * });\n * ```\n *\n * #### Configure permissions for authenticated users\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.CognitoIdentityPool(\"MyIdentityPool\", {\n *   userPools: [\n *     {\n *       userPool: \"us-east-1_QY6Ly46JH\",\n *       client: \"6va5jg3cgtrd170sgokikjm5m6\"\n *     }\n *   ],\n *   permissions: {\n *     authenticated: [\n *       {\n *         actions: [\"s3:GetObject\", \"s3:PutObject\"],\n *         resources: [\"arn:aws:s3:::my-bucket/*\"]\n *       }\n *     ]\n *   }\n * });\n * ```\n */\nexport class CognitoIdentityPool extends Component implements Link.Linkable {\n  private identityPool: cognito.IdentityPool;\n  private authRole: iam.Role;\n  private unauthRole: iam.Role;\n\n  constructor(\n    name: string,\n    args: CognitoIdentityPoolArgs = {},\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    if (args && \"ref\" in args) {\n      const ref = args as unknown as CognitoUserPoolRef;\n      this.identityPool = ref.identityPool;\n      this.authRole = ref.authRole;\n      this.unauthRole = ref.unauthRole;\n      return;\n    }\n\n    const parent = this;\n\n    const region = getRegion();\n    const identityPool = createIdentityPool();\n    const authRole = createAuthRole();\n    const unauthRole = createUnauthRole();\n    createRoleAttachment();\n\n    this.identityPool = identityPool;\n    this.authRole = authRole;\n    this.unauthRole = unauthRole;\n\n    function getRegion() {\n      return getRegionOutput(undefined, { parent }).name;\n    }\n\n    function createIdentityPool() {\n      return new cognito.IdentityPool(\n        ...transform(\n          args.transform?.identityPool,\n          `${name}IdentityPool`,\n          {\n            identityPoolName: \"\",\n            allowUnauthenticatedIdentities: true,\n            cognitoIdentityProviders:\n              args.userPools &&\n              output(args.userPools).apply((userPools) =>\n                userPools.map((v) => ({\n                  clientId: v.client,\n                  providerName: interpolate`cognito-idp.${region}.amazonaws.com/${v.userPool}`,\n                })),\n              ),\n            supportedLoginProviders: {},\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createAuthRole() {\n      const policy = output(args.permissions).apply((permissions) =>\n        iam.getPolicyDocumentOutput({\n          statements: [\n            {\n              effect: \"Allow\",\n              actions: [\n                \"mobileanalytics:PutEvents\",\n                \"cognito-sync:*\",\n                \"cognito-identity:*\",\n              ],\n              resources: [\"*\"],\n            },\n            ...(permissions?.authenticated || []),\n          ],\n        }),\n      );\n\n      return new iam.Role(\n        ...transform(\n          args.transform?.authenticatedRole,\n          `${name}AuthRole`,\n          {\n            assumeRolePolicy: iam.getPolicyDocumentOutput({\n              statements: [\n                {\n                  effect: \"Allow\",\n                  principals: [\n                    {\n                      type: \"Federated\",\n                      identifiers: [\"cognito-identity.amazonaws.com\"],\n                    },\n                  ],\n                  actions: [\"sts:AssumeRoleWithWebIdentity\"],\n                  conditions: [\n                    {\n                      test: \"StringEquals\",\n                      variable: \"cognito-identity.amazonaws.com:aud\",\n                      values: [identityPool.id],\n                    },\n                    {\n                      test: \"ForAnyValue:StringLike\",\n                      variable: \"cognito-identity.amazonaws.com:amr\",\n                      values: [\"authenticated\"],\n                    },\n                  ],\n                },\n              ],\n            }).json,\n            inlinePolicies: [{ name: \"inline\", policy: policy.json }],\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createUnauthRole() {\n      const policy = output(args.permissions).apply((permissions) =>\n        iam.getPolicyDocumentOutput({\n          statements: [\n            {\n              effect: \"Allow\",\n              actions: [\"mobileanalytics:PutEvents\", \"cognito-sync:*\"],\n              resources: [\"*\"],\n            },\n            ...(permissions?.unauthenticated || []),\n          ],\n        }),\n      );\n\n      return new iam.Role(\n        ...transform(\n          args.transform?.unauthenticatedRole,\n          `${name}UnauthRole`,\n          {\n            assumeRolePolicy: iam.getPolicyDocumentOutput({\n              statements: [\n                {\n                  effect: \"Allow\",\n                  principals: [\n                    {\n                      type: \"Federated\",\n                      identifiers: [\"cognito-identity.amazonaws.com\"],\n                    },\n                  ],\n                  actions: [\"sts:AssumeRoleWithWebIdentity\"],\n                  conditions: [\n                    {\n                      test: \"StringEquals\",\n                      variable: \"cognito-identity.amazonaws.com:aud\",\n                      values: [identityPool.id],\n                    },\n                    {\n                      test: \"ForAnyValue:StringLike\",\n                      variable: \"cognito-identity.amazonaws.com:amr\",\n                      values: [\"unauthenticated\"],\n                    },\n                  ],\n                },\n              ],\n            }).json,\n            inlinePolicies: [{ name: \"inline\", policy: policy.json }],\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createRoleAttachment() {\n      return new cognito.IdentityPoolRoleAttachment(\n        `${name}RoleAttachment`,\n        {\n          identityPoolId: identityPool.id,\n          roles: {\n            authenticated: authRole.arn,\n            unauthenticated: unauthRole.arn,\n          },\n        },\n        { parent },\n      );\n    }\n  }\n\n  /**\n   * The Cognito identity pool ID.\n   */\n  public get id() {\n    return this.identityPool.id;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon Cognito identity pool.\n       */\n      identityPool: this.identityPool,\n      /**\n       * The authenticated IAM role.\n       */\n      authenticatedRole: this.authRole,\n      /**\n       * The unauthenticated IAM role.\n       */\n      unauthenticatedRole: this.unauthRole,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        id: this.id,\n      },\n      include: [\n        permission({\n          actions: [\"cognito-identity:*\"],\n          resources: [this.identityPool.arn],\n        }),\n      ],\n    };\n  }\n\n  /**\n   * Reference an existing Identity Pool with the given ID. This is useful when you\n   * create a Identity Pool in one stage and want to share it in another. It avoids having to\n   * create a new Identity Pool in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share Identity Pools across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param identityPoolID The ID of the existing Identity Pool.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a Identity Pool in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new pool, you want to share the same pool from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const identityPool = $app.stage === \"frank\"\n   *   ? sst.aws.CognitoIdentityPool.get(\"MyIdentityPool\", \"us-east-1:02facf30-e2f3-49ec-9e79-c55187415cf8\")\n   *   : new sst.aws.CognitoIdentityPool(\"MyIdentityPool\");\n   * ```\n   *\n   * Here `us-east-1:02facf30-e2f3-49ec-9e79-c55187415cf8` is the ID of the Identity Pool created in the `dev` stage.\n   * You can find this by outputting the Identity Pool ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   identityPool: identityPool.id\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    identityPoolID: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    const identityPool = cognito.IdentityPool.get(\n      `${name}IdentityPool`,\n      identityPoolID,\n      undefined,\n      opts,\n    );\n    const attachment = cognito.IdentityPoolRoleAttachment.get(\n      `${name}RoleAttachment`,\n      identityPoolID,\n      undefined,\n      opts,\n    );\n    const authRole = iam.Role.get(\n      `${name}AuthRole`,\n      attachment.roles.authenticated.apply((arn) => parseRoleArn(arn).roleName),\n      undefined,\n      opts,\n    );\n    const unauthRole = iam.Role.get(\n      `${name}UnauthRole`,\n      attachment.roles.unauthenticated.apply(\n        (arn) => parseRoleArn(arn).roleName,\n      ),\n      undefined,\n      opts,\n    );\n    return new CognitoIdentityPool(name, {\n      ref: true,\n      identityPool,\n      authRole,\n      unauthRole,\n    } as unknown as CognitoIdentityPoolArgs);\n  }\n}\n\nconst __pulumiType = \"sst:aws:CognitoIdentityPool\";\n// @ts-expect-error\nCognitoIdentityPool.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Output, all, output } from \"@pulumi/pulumi\";\nimport { Component, Prettify, Transform, transform } from \"../component\";\nimport { Input } from \"../input\";\nimport { Link } from \"../link\";\nimport { CognitoIdentityProvider } from \"./cognito-identity-provider\";\nimport { CognitoUserPoolClient } from \"./cognito-user-pool-client\";\nimport { Function, FunctionArgs, FunctionArn } from \"./function.js\";\nimport { VisibleError } from \"../error\";\nimport { cognito, lambda } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\nimport { functionBuilder } from \"./helpers/function-builder\";\n\ninterface Triggers {\n  /**\n   * The ARN of the AWS KMS key used for encryption.\n   *\n   * When `customEmailSender` or `customSmsSender` are configured, Cognito encrypts the\n   * verification code and temporary passwords before sending them to your Lambda functions.\n   */\n  kmsKey?: Input<string>;\n  /**\n   * Triggered after the user successfully responds to the previous challenge, and a new\n   * challenge needs to be created.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  createAuthChallenge?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered during events like user sign-up, password recovery, email/phone number\n   * verification, and when an admin creates a user. Use this trigger to customize the\n   * email provider.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  customEmailSender?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered during events like user sign-up, password recovery, email/phone number\n   * verification, and when an admin creates a user. Use this trigger to customize the\n   * message that is sent to your users.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  customMessage?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered when an SMS message needs to be sent, such as for MFA or verification codes.\n   * Use this trigger to customize the SMS provider.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  customSmsSender?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered after each challenge response to determine the next action. Evaluates whether the\n   * user has completed the authentication process or if additional challenges are needed.\n   * ARN of the lambda function to name a custom challenge.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  defineAuthChallenge?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered after a successful authentication event. Use this to perform custom actions,\n   * such as logging or modifying user attributes, after the user is authenticated.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  postAuthentication?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered after a user is successfully confirmed; sign-up or email/phone number\n   * verification. Use this to perform additional actions, like sending a welcome email or\n   * initializing user data, after user confirmation.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  postConfirmation?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered before the authentication process begins. Use this to implement custom\n   * validation or checks (like checking if the user is banned) before continuing\n   * authentication.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  preAuthentication?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered before the user sign-up process completes. Use this to perform custom\n   * validation, auto-confirm users, or auto-verify attributes based on custom logic.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  preSignUp?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered before tokens are generated in the authentication process. Use this to\n   * customize or add claims to the tokens that will be generated and returned to the user.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  preTokenGeneration?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * The version of the preTokenGeneration trigger to use. Higher versions have access to\n   * more information that support new features.\n   * @default `\"v1\"`\n   */\n  preTokenGenerationVersion?: \"v1\" | \"v2\";\n  /**\n   * Triggered when a user attempts to sign in but does not exist in the current user pool.\n   * Use this to import and validate users from an existing user directory into the\n   * Cognito User Pool during sign-in.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  userMigration?: Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * Triggered after the user responds to a custom authentication challenge. Use this to\n   * verify the user's response to the challenge and determine whether to continue\n   * authenticating the user.\n   *\n   * Takes the handler path, the function args, or a function ARN.\n   */\n  verifyAuthChallengeResponse?: Input<string | FunctionArgs | FunctionArn>;\n}\n\nexport interface CognitoUserPoolArgs {\n  /**\n   * Configure the different ways a user can sign in besides using their username.\n   *\n   * :::note\n   * You cannot change the aliases property once the User Pool has been created.\n   * Learn more about [aliases](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases).\n   * :::\n   *\n   * @default User can only sign in with their username.\n   * @example\n   *\n   * ```ts\n   * {\n   *   aliases: [\"email\"]\n   * }\n   * ```\n   */\n  aliases?: Input<Input<\"email\" | \"phone\" | \"preferred_username\">[]>;\n  /**\n   * Allow users to be able to sign up and sign in with an email addresses or phone number\n   * as their username.\n   *\n   * :::note\n   * You cannot change the usernames property once the User Pool has been created.\n   * Learn more about [aliases](https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases).\n   * :::\n   *\n   * @default User can only sign in with their username.\n   * @example\n   *\n   * ```ts\n   * {\n   *   usernames: [\"email\"]\n   * }\n   * ```\n   */\n  usernames?: Input<Input<\"email\" | \"phone\">[]>;\n  /**\n   * Enable advanced security features.\n   *\n   * Learn more about [advanced security](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html).\n   *\n   * @default Advanced security is disabled.\n   * @example\n   *\n   * ```ts\n   * {\n   *   advancedSecurity: \"enforced\"\n   * }\n   * ```\n   */\n  advancedSecurity?: Input<\"audit\" | \"enforced\">;\n  /**\n   * Configure the multi-factor authentication (MFA) settings for the User Pool.\n   *\n   * If you enable MFA using `on` or `optional`, you need to configure either `sms` or\n   * `softwareToken` as well.\n   *\n   * @default MFA is disabled.\n   * @example\n   *\n   * ```ts\n   * {\n   *   mfa: \"on\"\n   * }\n   * ```\n   */\n  mfa?: Input<\"on\" | \"optional\">;\n  /**\n   * Configure the SMS settings for the User Pool.\n   *\n   * @default No SMS settings.\n   * @example\n   *\n   * ```ts\n   * {\n   *   sms: {\n   *     externalId: \"1234567890\",\n   *     snsCallerArn: \"arn:aws:iam::1234567890:role/CognitoSnsCaller\",\n   *     snsRegion: \"us-east-1\",\n   *   }\n   * }\n   * ```\n   */\n  sms?: Input<{\n    /**\n     * The external ID used in IAM role trust relationships.\n     *\n     * Learn more about [external IDs](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_common-scenarios_third-party.html).\n     */\n    externalId: Input<string>;\n    /**\n     * The ARN of the IAM role that Amazon Cognito can assume to access the Amazon SNS\n     *\n     */\n    snsCallerArn: Input<string>;\n    /**\n     * The AWS Region that Amazon Cognito uses to send SMS messages.\n     */\n    snsRegion?: Input<string>;\n  }>;\n  /**\n   * The message template for SMS messages sent to users who are being authenticated.\n   *\n   * The template must include the `{####}` placeholder, which will be replaced with the\n   * verification code.\n   *\n   * @default The default message template.\n   * @example\n   *\n   * ```ts\n   * {\n   *   smsAuthenticationMessage: \"Your authentication code is {####}\"\n   * }\n   * ```\n   */\n  smsAuthenticationMessage?: Input<string>;\n  /**\n   * Configure the verification message sent to users who are being authenticated.\n   */\n  verify?: Input<{\n    /**\n     * Subject line for Email messages sent to users who are being authenticated.\n     *\n     * @default `\"Verify your new account\"`\n     * @example\n     *\n     * ```ts\n     * {\n     *   verify: {\n     *     emailSubject: \"Verify your new Awesome account\"\n     *   }\n     * }\n     * ```\n     */\n    emailSubject?: Input<string>;\n    /**\n     * The template for email messages sent to users who are being authenticated.\n     *\n     * The template must include the `{####}` placeholder, which will be replaced with the\n     * verification code.\n     *\n     * @default `\"The verification code to your new account is {####}\"`\n     * @example\n     *\n     * ```ts\n     * {\n     *   verify: {\n     *     emailMessage: \"The verification code to your new Awesome account is {####}\"\n     *   }\n     * }\n     * ```\n     */\n    emailMessage?: Input<string>;\n    /**\n     * The template for SMS messages sent to users who are being authenticated.\n     *\n     * The template must include the `{####}` placeholder, which will be replaced with the\n     * verification code.\n     *\n     * @default `\"The verification code to your new account is {####}\"`\n     * @example\n     *\n     * ```ts\n     * {\n     *   verify: {\n     *     smsMessage: \"The verification code to your new Awesome account is {####}\"\n     *   }\n     * }\n     * ```\n     */\n    smsMessage?: Input<string>;\n  }>;\n  /**\n   * Enable software token MFA for the User Pool.\n   *\n   * @default `false`\n   * @example\n   *\n   * ```ts\n   * {\n   *   softwareToken: true\n   * }\n   * ```\n   */\n  softwareToken?: Input<boolean>;\n  /**\n   * Configure triggers for this User Pool\n   * @default No triggers\n   * @example\n   *\n   * ```js\n   * {\n   *   triggers: {\n   *     preAuthentication: \"src/preAuthentication.handler\",\n   *     postAuthentication: \"src/postAuthentication.handler\"\n   *   }\n   * }\n   * ```\n   */\n  triggers?: Input<Prettify<Triggers>>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Cognito User Pool resource.\n     */\n    userPool?: Transform<cognito.UserPoolArgs>;\n  };\n}\n\nexport interface CognitoIdentityProviderArgs {\n  /**\n   * The type of identity provider.\n   */\n  type: Input<\"oidc\" | \"saml\" | \"google\" | \"facebook\" | \"apple\" | \"amazon\">;\n  /**\n   * Configure the identity provider details, including the scopes, URLs, and identifiers.\n   *\n   * ```ts\n   * {\n   *   authorize_scopes: \"email profile\",\n   *   client_id: \"your-client-id\",\n   *   client_secret: \"your-client-secret\"\n   * }\n   * ```\n   */\n  details: Input<Record<string, Input<string>>>;\n  /**\n   * Define a mapping between identity provider attributes and user pool attributes.\n   *\n   * ```ts\n   * {\n   *   email: \"email\",\n   *   username: \"sub\"\n   * }\n   * ```\n   */\n  attributes?: Input<Record<string, Input<string>>>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Cognito identity provider resource.\n     */\n    identityProvider?: Transform<cognito.IdentityProviderArgs>;\n  };\n}\n\nexport interface CognitoUserPoolClientArgs {\n  /**\n   * A list of identity providers that are supported for this client.\n   * @default `[\"COGNITO\"]`\n   * @example\n   *\n   * :::tip\n   * Reference federated identity providers using their `providerName` property.\n   * :::\n   *\n   * If you are using a federated identity provider.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const provider = userPool.addIdentityProvider(\"MyProvider\", {\n   *   type: \"oidc\",\n   *   details: {\n   *     authorize_scopes: \"email profile\",\n   *     client_id: \"your-client-id\",\n   *     client_secret: \"your-client-secret\"\n   *   },\n   * });\n   * ```\n   *\n   * Make sure to pass in `provider.providerName` instead of hardcoding it to `\"MyProvider\"`.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * userPool.addClient(\"Web\", {\n   *   providers: [provider.providerName]\n   * });\n   * ```\n   *\n   * This ensures the client is created after the provider.\n   */\n  providers?: Input<Input<string>[]>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Cognito User Pool client resource.\n     */\n    client?: Transform<cognito.UserPoolClientArgs>;\n  };\n}\n\ninterface CognitoUserPoolRef {\n  ref: boolean;\n  userPool: cognito.UserPool;\n}\n\n/**\n * The `CognitoUserPool` component lets you add a [Amazon Cognito User Pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html) to your app.\n *\n * #### Create the user pool\n *\n * ```ts title=\"sst.config.ts\"\n * const userPool = new sst.aws.CognitoUserPool(\"MyUserPool\");\n * ```\n *\n * #### Login using email\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.CognitoUserPool(\"MyUserPool\", {\n *   usernames: [\"email\"]\n * });\n * ```\n *\n * #### Configure triggers\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.CognitoUserPool(\"MyUserPool\", {\n *   triggers: {\n *     preAuthentication: \"src/preAuthentication.handler\",\n *     postAuthentication: \"src/postAuthentication.handler\",\n *   },\n * });\n * ```\n *\n * #### Add Google identity provider\n *\n * ```ts title=\"sst.config.ts\"\n * const GoogleClientId = new sst.Secret(\"GOOGLE_CLIENT_ID\");\n * const GoogleClientSecret = new sst.Secret(\"GOOGLE_CLIENT_SECRET\");\n *\n * userPool.addIdentityProvider({\n *   type: \"google\",\n *   details: {\n *     authorize_scopes: \"email profile\",\n *     client_id: GoogleClientId.value,\n *     client_secret: GoogleClientSecret.value,\n *   },\n *   attributes: {\n *     email: \"email\",\n *     name: \"name\",\n *     username: \"sub\",\n *   },\n * });\n * ```\n *\n * #### Add a client\n *\n * ```ts title=\"sst.config.ts\"\n * userPool.addClient(\"Web\");\n * ```\n */\nexport class CognitoUserPool extends Component implements Link.Linkable {\n  private constructorOpts: ComponentResourceOptions;\n  private userPool: Output<cognito.UserPool>;\n\n  constructor(\n    name: string,\n    args: CognitoUserPoolArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    if (args && \"ref\" in args) {\n      const ref = args as unknown as CognitoUserPoolRef;\n      this.constructorOpts = opts;\n      this.userPool = output(ref.userPool);\n      return;\n    }\n\n    const parent = this;\n\n    normalizeAliasesAndUsernames();\n    const triggers = normalizeTriggers();\n    const verify = normalizeVerify();\n    const userPool = createUserPool();\n\n    this.constructorOpts = opts;\n    this.userPool = userPool;\n\n    function normalizeAliasesAndUsernames() {\n      all([args.aliases, args.usernames]).apply(([aliases, usernames]) => {\n        if (aliases && usernames)\n          throw new VisibleError(\n            \"You cannot set both aliases and usernames. Learn more about customizing sign-in attributes at https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-attributes.html#user-pool-settings-aliases\",\n          );\n      });\n    }\n\n    function normalizeTriggers() {\n      if (!args.triggers) return;\n\n      return output(args.triggers).apply((triggers) => {\n        if (\n          (triggers.customEmailSender || triggers.customSmsSender) &&\n          !triggers.kmsKey\n        )\n          throw new VisibleError(\n            \"You must provide a KMS key via `kmsKey` when configuring `customEmailSender` or `customSmsSender`.\",\n          );\n\n        return {\n          ...triggers,\n          preTokenGenerationVersion:\n            triggers.preTokenGenerationVersion === \"v2\" ? \"V2_0\" : \"V1_0\",\n        };\n      });\n    }\n\n    function normalizeVerify() {\n      if (!args.verify) return;\n\n      return output(args.verify).apply((verify) => {\n        return {\n          defaultEmailOption: \"CONFIRM_WITH_CODE\",\n          emailMessage:\n            verify.emailMessage ??\n            \"The verification code to your new account is {####}\",\n          emailSubject: verify.emailSubject ?? \"Verify your new account\",\n          smsMessage:\n            verify.smsMessage ??\n            \"The verification code to your new account is {####}\",\n        };\n      });\n    }\n\n    function createUserPool() {\n      return output(args.softwareToken).apply(\n        (softwareToken) =>\n          new cognito.UserPool(\n            ...transform(\n              args.transform?.userPool,\n              `${name}UserPool`,\n              {\n                aliasAttributes:\n                  args.aliases &&\n                  output(args.aliases).apply((aliases) => [\n                    ...(aliases.includes(\"email\") ? [\"email\"] : []),\n                    ...(aliases.includes(\"phone\") ? [\"phone_number\"] : []),\n                    ...(aliases.includes(\"preferred_username\")\n                      ? [\"preferred_username\"]\n                      : []),\n                  ]),\n                usernameAttributes:\n                  args.usernames &&\n                  output(args.usernames).apply((usernames) => [\n                    ...(usernames.includes(\"email\") ? [\"email\"] : []),\n                    ...(usernames.includes(\"phone\") ? [\"phone_number\"] : []),\n                  ]),\n                accountRecoverySetting: {\n                  recoveryMechanisms: [\n                    {\n                      name: \"verified_phone_number\",\n                      priority: 1,\n                    },\n                    {\n                      name: \"verified_email\",\n                      priority: 2,\n                    },\n                  ],\n                },\n                adminCreateUserConfig: {\n                  allowAdminCreateUserOnly: false,\n                },\n                usernameConfiguration: {\n                  caseSensitive: false,\n                },\n                autoVerifiedAttributes: all([\n                  args.aliases || [],\n                  args.usernames || [],\n                ]).apply(([aliases, usernames]) => {\n                  const attributes = [...aliases, ...usernames];\n                  return [\n                    ...(attributes.includes(\"email\") ? [\"email\"] : []),\n                    ...(attributes.includes(\"phone\") ? [\"phone_number\"] : []),\n                  ];\n                }),\n                emailConfiguration: {\n                  emailSendingAccount: \"COGNITO_DEFAULT\",\n                },\n                verificationMessageTemplate: verify,\n                userPoolAddOns: {\n                  advancedSecurityMode: output(args.advancedSecurity).apply(\n                    (v) => (v ?? \"off\").toUpperCase(),\n                  ),\n                },\n                mfaConfiguration: output(args.mfa).apply((v) =>\n                  (v ?? \"off\").toUpperCase(),\n                ),\n                smsAuthenticationMessage: args.smsAuthenticationMessage,\n                smsConfiguration: args.sms,\n                softwareTokenMfaConfiguration: softwareToken\n                  ? { enabled: true }\n                  : undefined,\n                lambdaConfig:\n                  triggers &&\n                  triggers.apply((triggers) => {\n                    return {\n                      kmsKeyId: triggers.kmsKey,\n                      createAuthChallenge: createTrigger(\"createAuthChallenge\"),\n                      customEmailSender:\n                        triggers.customEmailSender === undefined\n                          ? undefined\n                          : {\n                              lambdaArn: createTrigger(\"customEmailSender\")!,\n                              lambdaVersion: \"V1_0\",\n                            },\n                      customMessage: createTrigger(\"customMessage\"),\n                      customSmsSender:\n                        triggers.customSmsSender === undefined\n                          ? undefined\n                          : {\n                              lambdaArn: createTrigger(\"customSmsSender\")!,\n                              lambdaVersion: \"V1_0\",\n                            },\n                      defineAuthChallenge: createTrigger(\"defineAuthChallenge\"),\n                      postAuthentication: createTrigger(\"postAuthentication\"),\n                      postConfirmation: createTrigger(\"postConfirmation\"),\n                      preAuthentication: createTrigger(\"preAuthentication\"),\n                      preSignUp: createTrigger(\"preSignUp\"),\n                      preTokenGenerationConfig:\n                        triggers.preTokenGeneration === undefined\n                          ? undefined\n                          : {\n                              lambdaArn: createTrigger(\"preTokenGeneration\")!,\n                              lambdaVersion: triggers.preTokenGenerationVersion,\n                            },\n                      userMigration: createTrigger(\"userMigration\"),\n                      verifyAuthChallengeResponse: createTrigger(\n                        \"verifyAuthChallengeResponse\",\n                      ),\n                    };\n\n                    function createTrigger(key: keyof Triggers) {\n                      if (!triggers[key]) return;\n\n                      const fn = functionBuilder(\n                        `${name}Trigger${key}`,\n                        triggers[key]!,\n                        {\n                          description: `Subscribed to ${key} from ${name}`,\n                        },\n                        undefined,\n                        { parent },\n                      );\n\n                      new lambda.Permission(\n                        `${name}Permission${key}`,\n                        {\n                          action: \"lambda:InvokeFunction\",\n                          function: fn.arn,\n                          principal: \"cognito-idp.amazonaws.com\",\n                          sourceArn: userPool.arn,\n                        },\n                        { parent },\n                      );\n                      return fn.arn;\n                    }\n                  }),\n              },\n              { parent },\n            ),\n          ),\n      );\n    }\n  }\n\n  /**\n   * The Cognito User Pool ID.\n   */\n  public get id() {\n    return this.userPool.id;\n  }\n\n  /**\n   * The Cognito User Pool ARN.\n   */\n  public get arn() {\n    return this.userPool.arn;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon Cognito User Pool.\n       */\n      userPool: this.userPool,\n    };\n  }\n\n  /**\n   * Add a client to the User Pool.\n   *\n   * @param name Name of the client.\n   * @param args Configure the client.\n   * @param opts? Resource options.\n   *\n   * @example\n   *\n   * ```ts\n   * userPool.addClient(\"Web\");\n   * ```\n   */\n  public addClient(name: string, args?: CognitoUserPoolClientArgs) {\n    // Note: Referencing an existing client will be implemented in the future:\n    // sst.aws.UserPool.getClient(\"pool\", { userPooldID, clientID });\n\n    return new CognitoUserPoolClient(\n      name,\n      {\n        userPool: this.id,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /**\n   * Add a federated identity provider to the User Pool.\n   *\n   * @param name Name of the identity provider.\n   * @param args Configure the identity provider.\n   *\n   * @example\n   *\n   * For example, add a GitHub (OIDC) identity provider.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const GithubClientId = new sst.Secret(\"GITHUB_CLIENT_ID\");\n   * const GithubClientSecret = new sst.Secret(\"GITHUB_CLIENT_SECRET\");\n   *\n   * userPool.addIdentityProvider(\"GitHub\", {\n   *   type: \"oidc\",\n   *   details: {\n   *      authorize_scopes: \"read:user user:email\",\n   *      client_id: GithubClientId.value,\n   *      client_secret: GithubClientSecret.value,\n   *      oidc_issuer: \"https://github.com/\",\n   *   },\n   *   attributes: {\n   *     email: \"email\",\n   *     username: \"sub\",\n   *   },\n   * });\n   * ```\n   *\n   * Or add a Google identity provider.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const GoogleClientId = new sst.Secret(\"GOOGLE_CLIENT_ID\");\n   * const GoogleClientSecret = new sst.Secret(\"GOOGLE_CLIENT_SECRET\");\n   *\n   * userPool.addIdentityProvider(\"Google\", {\n   *   type: \"google\",\n   *   details: {\n   *     authorize_scopes: \"email profile\",\n   *     client_id: GoogleClientId.value,\n   *     client_secret: GoogleClientSecret.value,\n   *   },\n   *   attributes: {\n   *     email: \"email\",\n   *     name: \"name\",\n   *     username: \"sub\",\n   *   },\n   * });\n   * ```\n   */\n  public addIdentityProvider(name: string, args: CognitoIdentityProviderArgs) {\n    return new CognitoIdentityProvider(\n      name,\n      {\n        userPool: this.id,\n        ...args,\n      },\n      { provider: this.constructorOpts.provider },\n    );\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        id: this.id,\n      },\n      include: [\n        permission({\n          actions: [\"cognito-idp:*\"],\n          resources: [this.userPool.arn],\n        }),\n      ],\n    };\n  }\n\n  /**\n   * Reference an existing User Pool with the given ID. This is useful when you\n   * create a User Pool in one stage and want to share it in another. It avoids having to\n   * create a new User Pool in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share User Pools across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param userPoolID The ID of the existing User Pool.\n   *\n   * @example\n   * Imagine you create a User Pool in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new pool, you want to share the same pool from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const userPool = $app.stage === \"frank\"\n   *   ? sst.aws.CognitoUserPool.get(\"MyUserPool\", \"us-east-1_gcF5PjhQK\")\n   *   : new sst.aws.CognitoUserPool(\"MyUserPool\");\n   * ```\n   *\n   * Here `us-east-1_gcF5PjhQK` is the ID of the User Pool created in the `dev` stage.\n   * You can find this by outputting the User Pool ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   userPool: userPool.id\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    userPoolID: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    const userPool = cognito.UserPool.get(\n      `${name}UserPool`,\n      userPoolID,\n      undefined,\n      opts,\n    );\n    return new CognitoUserPool(name, {\n      ref: true,\n      userPool,\n    } as unknown as CognitoUserPoolArgs);\n  }\n}\n\nconst __pulumiType = \"sst:aws:CognitoUserPool\";\n// @ts-expect-error\nCognitoUserPool.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Input } from \"../input\";\nimport { Link } from \"../link\";\nimport { cognito } from \"@pulumi/aws\";\nimport { CognitoIdentityProviderArgs } from \"./cognito-user-pool\";\nimport { OpenIdConnectProvider } from \"@pulumi/aws/iam\";\nimport { VisibleError } from \"../error\";\n\nexport interface Args extends CognitoIdentityProviderArgs {\n  /**\n   * The Cognito user pool ID.\n   */\n  userPool: Input<string>;\n}\n\n/**\n * The `CognitoIdentityProvider` component is internally used by the `CognitoUserPool`\n * component to add identity providers to your [Amazon Cognito user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addIdentityProvider` method of the `CognitoUserPool` component.\n */\nexport class CognitoIdentityProvider extends Component {\n  private identityProvider: cognito.IdentityProvider;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const providerType = normalizeProviderType();\n    const identityProvider = createIdentityProvider();\n\n    this.identityProvider = identityProvider;\n\n    function normalizeProviderType() {\n      const type = output(args.type).apply(\n        (type) =>\n          ({\n            saml: \"SAML\",\n            oidc: \"OIDC\",\n            facebook: \"Facebook\",\n            google: \"Google\",\n            amazon: \"LoginWithAmazon\",\n            apple: \"SignInWithApple\",\n          })[type],\n      );\n      if (!type) throw new VisibleError(`Invalid provider type: ${args.type}`);\n      return type;\n    }\n\n    function createIdentityProvider() {\n      return new cognito.IdentityProvider(\n        ...transform(\n          args.transform?.identityProvider,\n          `${name}IdentityProvider`,\n          {\n            userPoolId: args.userPool,\n            providerName: name,\n            providerType,\n            providerDetails: args.details,\n            attributeMapping: args.attributes,\n          },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The Cognito identity provider name.\n   */\n  public get providerName() {\n    return this.identityProvider.providerName;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Cognito identity provider.\n       */\n      identityProvider: this.identityProvider,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:CognitoIdentityProvider\";\n// @ts-expect-error\nCognitoIdentityProvider.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Input } from \"../input\";\nimport { CognitoUserPoolClientArgs } from \"./cognito-user-pool.js\";\nimport { Link } from \"../link\";\nimport { cognito } from \"@pulumi/aws\";\n\nexport interface Args extends CognitoUserPoolClientArgs {\n  /**\n   * The Cognito user pool ID.\n   */\n  userPool: Input<string>;\n}\n\n/**\n * The `CognitoUserPoolClient` component is internally used by the `CognitoUserPool`\n * component to add clients to your [Amazon Cognito user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `addClient` method of the `CognitoUserPool` component.\n */\nexport class CognitoUserPoolClient extends Component implements Link.Linkable {\n  private client: cognito.UserPoolClient;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const providers = normalizeProviders();\n    const client = createClient();\n\n    this.client = client;\n\n    function normalizeProviders() {\n      if (!args.providers) return [\"COGNITO\"];\n      return output(args.providers);\n    }\n\n    function createClient() {\n      return new cognito.UserPoolClient(\n        ...transform(\n          args.transform?.client,\n          `${name}Client`,\n          {\n            name,\n            userPoolId: args.userPool,\n            allowedOauthFlows: [\"implicit\", \"code\"],\n            allowedOauthFlowsUserPoolClient: true,\n            allowedOauthScopes: [\n              \"profile\",\n              \"phone\",\n              \"email\",\n              \"openid\",\n              \"aws.cognito.signin.user.admin\",\n            ],\n            callbackUrls: [\"https://example.com\"],\n            supportedIdentityProviders: providers,\n          },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The Cognito User Pool client ID.\n   */\n  public get id() {\n    return this.client.id;\n  }\n\n  /**\n   * The Cognito User Pool client secret.\n   */\n  public get secret() {\n    return this.client.clientSecret;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Cognito User Pool client.\n       */\n      client: this.client,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        id: this.id,\n        secret: this.secret,\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:CognitoUserPoolClient\";\n// @ts-expect-error\nCognitoUserPoolClient.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Output,\n  all,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, outputId, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { FunctionArgs, FunctionArn } from \"./function\";\nimport { hashStringToPrettyString, logicalName } from \"../naming\";\nimport { parseDynamoStreamArn } from \"./helpers/arn\";\nimport { DynamoLambdaSubscriber } from \"./dynamo-lambda-subscriber\";\nimport { dynamodb, lambda } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\nimport { isFunctionSubscriber } from \"./helpers/subscriber\";\n\nexport interface DynamoArgs {\n  /**\n   * An object defining the fields of the table that'll be used to create indexes. The key is the name of the field and the value is the type.\n   *\n   * :::note\n   * You don't need to define all your fields here, just the ones you want to use for indexes.\n   * :::\n   *\n   * While you can have fields field types other than `string`, `number`, and `binary`; you can only use these types for your indexes.\n   *\n   * :::caution\n   * Field types cannot be changed after table creation. Any changes to field types will be ignored.\n   * :::\n   *\n   * @example\n   * ```js\n   * {\n   *   fields: {\n   *     userId: \"string\",\n   *     noteId: \"string\"\n   *   }\n   * }\n   * ```\n   */\n  fields: Input<Record<string, \"string\" | \"number\" | \"binary\">>;\n  /**\n   * Define the table's primary index. You can only have one primary index.\n   *\n   * @example\n   * ```js\n   * {\n   *   primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" }\n   * }\n   * ```\n   */\n  primaryIndex: Input<{\n    /**\n     * The hash key field of the index. This field needs to be defined in the `fields`.\n     */\n    hashKey: Input<string>;\n    /**\n     * The range key field of the index. This field needs to be defined in the `fields`.\n     */\n    rangeKey?: Input<string>;\n  }>;\n  /**\n   * Configure the table's global secondary indexes.\n   *\n   * You can have up to 20 global secondary indexes per table. And each global secondary index should have a unique name.\n   *\n   * @example\n   *\n   * ```js\n   * {\n   *   globalIndexes: {\n   *     CreatedAtIndex: { hashKey: \"userId\", rangeKey: \"createdAt\" }\n   *   }\n   * }\n   * ```\n   */\n  globalIndexes?: Input<\n    Record<\n      string,\n      Input<{\n        /**\n         * The hash key field of the index. This field needs to be defined in the `fields`.\n         */\n        hashKey: Input<string>;\n        /**\n         * The range key field of the index. This field needs to be defined in the `fields`.\n         */\n        rangeKey?: Input<string>;\n        /**\n         * The fields to project into the index.\n         * @default `\"all\"`\n         * @example\n         * Project only the key fields: `userId` and `createdAt`.\n         * ```js\n         * {\n         *   hashKey: \"userId\",\n         *   rangeKey: \"createdAt\",\n         *   projection: \"keys-only\"\n         * }\n         * ```\n         *\n         * Project the `noteId` field in addition to the key fields.\n         * ```js\n         * {\n         *   hashKey: \"userId\",\n         *   rangeKey: \"createdAt\",\n         *   projection: [\"noteId\"]\n         * }\n         * ```\n         */\n        projection?: Input<\"all\" | \"keys-only\" | Input<string>[]>;\n      }>\n    >\n  >;\n  /**\n   * Configure the table's local secondary indexes.\n   *\n   * Unlike global indexes, local indexes use the same `hashKey` as the `primaryIndex` of the table.\n   *\n   * You can have up to 5 local secondary indexes per table. And each local secondary index should have a unique name.\n   *\n   * @example\n   * ```js\n   * {\n   *   localIndexes: {\n   *     CreatedAtIndex: { rangeKey: \"createdAt\" }\n   *   }\n   * }\n   * ```\n   */\n  localIndexes?: Input<\n    Record<\n      string,\n      Input<{\n        /**\n         * The range key field of the index. This field needs to be defined in the `fields`.\n         */\n        rangeKey: Input<string>;\n        /**\n         * The fields to project into the index.\n         * @default `\"all\"`\n         * @example\n         * Project only the key field: `createdAt`.\n         * ```js\n         * {\n         *   rangeKey: \"createdAt\",\n         *   projection: \"keys-only\"\n         * }\n         * ```\n         *\n         * Project the `noteId` field in addition to the key field.\n         * ```js\n         * {\n         *   rangeKey: \"createdAt\",\n         *   projection: [\"noteId\"]\n         * }\n         * ```\n         */\n        projection?: Input<\"all\" | \"keys-only\" | Input<string>[]>;\n      }>\n    >\n  >;\n  /**\n   * Enable [DynamoDB Streams](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html) for the table.\n   *\n   * :::note\n   * Streams are not enabled by default since there's a cost attached to storing them.\n   * :::\n   *\n   * When an item in the table is modified, the stream captures the information and sends it to your subscriber function.\n   *\n   * :::tip\n   * The `new-and-old-images` stream type is a good default option since it has both the new and old items.\n   * :::\n   *\n   * You can configure what will be written to the stream:\n   *\n   * - `new-image`: The entire item after it was modified.\n   * - `old-image`: The entire item before it was modified.\n   * - `new-and-old-images`:\tBoth the new and the old items. A good default to use since it contains all the data.\n   * - `keys-only`: Only the keys of the fields of the modified items. If you are worried about the costs, you can use this since it stores the least amount of data.\n   * @default Disabled\n   * @example\n   * ```js\n   * {\n   *   stream: \"new-and-old-images\"\n   * }\n   * ```\n   */\n  stream?: Input<\n    \"keys-only\" | \"new-image\" | \"old-image\" | \"new-and-old-images\"\n  >;\n  /**\n   * The field in the table to store the _Time to Live_ or TTL timestamp in. This field should\n   * be of type `number`. When the TTL timestamp is reached, the item will be deleted.\n   *\n   * Read more about [Time to Live](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html).\n   *\n   * @example\n   * Here the TTL field in our table is called `expireAt`.\n   * ```js\n   * {\n   *   ttl: \"expireAt\"\n   * }\n   * ```\n   */\n  ttl?: Input<string>;\n  /**\n   * Enable deletion protection for the table. When enabled, the table cannot be deleted.\n   *\n   * @example\n   * ```js\n   * {\n   *   deletionProtection: true,\n   * }\n   * ```\n   */\n  deletionProtection?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the DynamoDB Table resource.\n     */\n    table?: Transform<dynamodb.TableArgs>;\n  };\n}\n\nexport interface DynamoSubscriberArgs {\n  /**\n   * Filter the records processed by the `subscriber` function.\n   *\n   * :::tip\n   * You can pass in up to 5 different filters.\n   * :::\n   *\n   * You can pass in up to 5 different filter policies. These will logically ORed together. Meaning that if any single policy matches, the record will be processed.\n   *\n   * :::tip\n   * Learn more about the [filter rule syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).\n   * :::\n   *\n   * @example\n   * For example, if your DynamoDB table's stream contains the follow record.\n   * ```js\n   * {\n   *   eventID: \"1\",\n   *   eventVersion: \"1.0\",\n   *   dynamodb: {\n   *     ApproximateCreationDateTime: \"1678831218.0\",\n   *     Keys: {\n   *       CustomerName: {\n   *           \"S\": \"AnyCompany Industries\"\n   *       },\n   *       NewImage: {\n   *         AccountManager: {\n   *           S: \"Pat Candella\"\n   *         },\n   *         PaymentTerms: {\n   *           S: \"60 days\"\n   *         },\n   *         CustomerName: {\n   *           S: \"AnyCompany Industries\"\n   *         }\n   *       },\n   *       SequenceNumber: \"111\",\n   *       SizeBytes: 26,\n   *       StreamViewType: \"NEW_IMAGE\"\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * To process only those records where the `CustomerName` is `AnyCompany Industries`.\n\n   * ```js\n   * {\n   *   filters: [\n   *     {\n   *       dynamodb: {\n   *         Keys: {\n   *           CustomerName: {\n   *             S: [\"AnyCompany Industries\"]\n   *           }\n   *         }\n   *       }\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  filters?: Input<Input<Record<string, any>>[]>;\n  /**\n   * [Transform](/docs/components#transform) how this subscription creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Lambda Event Source Mapping resource.\n     */\n    eventSourceMapping?: Transform<lambda.EventSourceMappingArgs>;\n  };\n}\n\ninterface DynamoRef {\n  ref: boolean;\n  table: dynamodb.Table;\n}\n\n/**\n * The `Dynamo` component lets you add an [Amazon DynamoDB](https://aws.amazon.com/dynamodb/) table to your app.\n *\n * @example\n *\n * #### Minimal example\n *\n * ```ts title=\"sst.config.ts\"\n * const table = new sst.aws.Dynamo(\"MyTable\", {\n *   fields: {\n *     userId: \"string\",\n *     noteId: \"string\"\n *   },\n *   primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" }\n * });\n * ```\n *\n * #### Add a global index\n *\n * Optionally add a global index to the table.\n *\n * ```ts {8-10} title=\"sst.config.ts\"\n * new sst.aws.Dynamo(\"MyTable\", {\n *   fields: {\n *     userId: \"string\",\n *     noteId: \"string\",\n *     createdAt: \"number\",\n *   },\n *   primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n *   globalIndexes: {\n *     CreatedAtIndex: { hashKey: \"userId\", rangeKey: \"createdAt\" }\n *   }\n * });\n * ```\n *\n * #### Add a local index\n *\n * Optionally add a local index to the table.\n *\n * ```ts {8-10} title=\"sst.config.ts\"\n * new sst.aws.Dynamo(\"MyTable\", {\n *   fields: {\n *     userId: \"string\",\n *     noteId: \"string\",\n *     createdAt: \"number\",\n *   },\n *   primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n *   localIndexes: {\n *     CreatedAtIndex: { rangeKey: \"createdAt\" }\n *   }\n * });\n * ```\n *\n * #### Subscribe to a DynamoDB Stream\n *\n * To subscribe to a [DynamoDB Stream](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Streams.html), start by enabling it.\n *\n * ```ts {7} title=\"sst.config.ts\"\n * const table = new sst.aws.Dynamo(\"MyTable\", {\n *   fields: {\n *     userId: \"string\",\n *     noteId: \"string\"\n *   },\n *   primaryIndex: { hashKey: \"userId\", rangeKey: \"noteId\" },\n *   stream: \"new-and-old-images\"\n * });\n * ```\n *\n * Then, subscribing to it.\n *\n * ```ts title=\"sst.config.ts\"\n * table.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n * ```\n *\n * #### Link the table to a resource\n *\n * You can link the table to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [table]\n * });\n * ```\n *\n * Once linked, you can query the table through your app.\n *\n * ```ts title=\"app/page.tsx\" {1,8}\n * import { Resource } from \"sst\";\n * import { DynamoDBClient, QueryCommand, ScanCommand } from \"@aws-sdk/client-dynamodb\";\n *\n * const client = new DynamoDBClient();\n *\n * await client.send(new QueryCommand({\n *   TableName: Resource.MyTable.name,\n *   KeyConditionExpression: \"userId = :userId\",\n *   ExpressionAttributeValues: {\n *     \":userId\": \"my-user-id\"\n *   }\n * }));\n * ```\n */\nexport class Dynamo extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private table: Output<dynamodb.Table>;\n  private isStreamEnabled: boolean = false;\n\n  constructor(\n    name: string,\n    args: DynamoArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    this.constructorName = name;\n    this.constructorOpts = opts;\n\n    if (args && \"ref\" in args) {\n      const ref = args as unknown as DynamoRef;\n      this.table = output(ref.table);\n      return;\n    }\n\n    const parent = this;\n\n    const table = createTable();\n\n    this.table = table;\n    this.isStreamEnabled = Boolean(args.stream);\n\n    function createTable() {\n      return all([\n        args.fields,\n        args.primaryIndex,\n        args.globalIndexes,\n        args.localIndexes,\n        args.stream,\n        args.deletionProtection,\n      ]).apply(\n        ([\n          fields,\n          primaryIndex,\n          globalIndexes,\n          localIndexes,\n          stream,\n          deletionProtection,\n        ]) =>\n          new dynamodb.Table(\n            ...transform(\n              args.transform?.table,\n              `${name}Table`,\n              {\n                attributes: Object.entries(fields).map(([name, type]) => ({\n                  name,\n                  type: type === \"string\" ? \"S\" : type === \"number\" ? \"N\" : \"B\",\n                })),\n                billingMode: \"PAY_PER_REQUEST\",\n                hashKey: primaryIndex.hashKey,\n                rangeKey: primaryIndex.rangeKey,\n                streamEnabled: Boolean(stream),\n                streamViewType: stream\n                  ? stream.toUpperCase().replaceAll(\"-\", \"_\")\n                  : undefined,\n                pointInTimeRecovery: {\n                  enabled: true,\n                },\n                ttl:\n                  args.ttl === undefined\n                    ? undefined\n                    : {\n                        attributeName: args.ttl,\n                        enabled: true,\n                      },\n                globalSecondaryIndexes: Object.entries(globalIndexes ?? {}).map(\n                  ([name, index]) => ({\n                    name,\n                    hashKey: index.hashKey,\n                    rangeKey: index.rangeKey,\n                    ...(index.projection === \"keys-only\"\n                      ? { projectionType: \"KEYS_ONLY\" }\n                      : Array.isArray(index.projection)\n                        ? {\n                            projectionType: \"INCLUDE\",\n                            nonKeyAttributes: index.projection,\n                          }\n                        : { projectionType: \"ALL\" }),\n                  }),\n                ),\n                localSecondaryIndexes: Object.entries(localIndexes ?? {}).map(\n                  ([name, index]) => ({\n                    name,\n                    rangeKey: index.rangeKey,\n                    ...(index.projection === \"keys-only\"\n                      ? { projectionType: \"KEYS_ONLY\" }\n                      : Array.isArray(index.projection)\n                        ? {\n                            projectionType: \"INCLUDE\",\n                            nonKeyAttributes: index.projection,\n                          }\n                        : { projectionType: \"ALL\" }),\n                  }),\n                ),\n                deletionProtectionEnabled: deletionProtection,\n              },\n              { parent },\n            ),\n          ),\n      );\n    }\n  }\n\n  /**\n   * The ARN of the DynamoDB Table.\n   */\n  public get arn() {\n    return this.table.arn;\n  }\n\n  /**\n   * The name of the DynamoDB Table.\n   */\n  public get name() {\n    return this.table.name;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon DynamoDB Table.\n       */\n      table: this.table,\n    };\n  }\n\n  /**\n   * Subscribe to the DynamoDB Stream of this table.\n   *\n   * :::note\n   * You'll first need to enable the `stream` before subscribing to it.\n   * :::\n   *\n   * @param name The name of the subscriber.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * ```js title=\"sst.config.ts\"\n   * table.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * table.subscribe(\"MySubscriber\", \"src/subscriber.handler\", {\n   *   filters: [\n   *     {\n   *       dynamodb: {\n   *         Keys: {\n   *           CustomerName: {\n   *             S: [\"AnyCompany Industries\"]\n   *           }\n   *         }\n   *       }\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * table.subscribe(\"MySubscriber\", {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * table.subscribe(\"MySubscriber\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public subscribe(\n    name: string,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: DynamoSubscriberArgs,\n  ): Output<DynamoLambdaSubscriber>;\n  /**\n   * @deprecated The subscribe function now requires a `name` parameter as the first argument.\n   * To migrate, remove the current subscriber, deploy the changes, and then add the subscriber\n   * back with the new `name` argument.\n   */\n  public subscribe(\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: DynamoSubscriberArgs,\n  ): Output<DynamoLambdaSubscriber>;\n\n  public subscribe(nameOrSubscriber: any, subscriberOrArgs?: any, args?: any) {\n    const sourceName = this.constructorName;\n\n    // Validate stream is enabled\n    if (!this.isStreamEnabled)\n      throw new Error(\n        `Cannot subscribe to \"${sourceName}\" because stream is not enabled.`,\n      );\n\n    return isFunctionSubscriber(subscriberOrArgs).apply((v) =>\n      v\n        ? Dynamo._subscribe(\n            nameOrSubscriber, // name\n            this.constructorName,\n            this.nodes.table.streamArn,\n            subscriberOrArgs, // subscriber\n            args,\n            { provider: this.constructorOpts.provider },\n          )\n        : Dynamo._subscribeV1(\n            this.constructorName,\n            this.nodes.table.streamArn,\n            nameOrSubscriber, // subscriber\n            subscriberOrArgs, // args\n            { provider: this.constructorOpts.provider },\n          ),\n    );\n  }\n\n  /**\n   * Subscribe to the DynamoDB stream of a table that was not created in your app.\n   *\n   * @param name The name of the subscriber.\n   * @param streamArn The ARN of the DynamoDB Stream to subscribe to.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have a DynamoDB stream ARN of an existing table.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const streamArn = \"arn:aws:dynamodb:us-east-1:123456789012:table/MyTable/stream/2024-02-25T23:17:55.264\";\n   * ```\n   *\n   * You can subscribe to it by passing in the ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Dynamo.subscribe(\"MySubscriber\", streamArn, \"src/subscriber.handler\");\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Dynamo.subscribe(\"MySubscriber\", streamArn, \"src/subscriber.handler\", {\n   *   filters: [\n   *     {\n   *       dynamodb: {\n   *         Keys: {\n   *           CustomerName: {\n   *             S: [\"AnyCompany Industries\"]\n   *           }\n   *         }\n   *       }\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.Dynamo.subscribe(\"MySubscriber\", streamArn, {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   */\n  public static subscribe(\n    name: string,\n    streamArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: DynamoSubscriberArgs,\n  ): Output<DynamoLambdaSubscriber>;\n  /**\n   * @deprecated The subscribe function now requires a `name` parameter as the first argument.\n   * To migrate, remove the current subscriber, deploy the changes, and then add the subscriber\n   * back with the new `name` argument.\n   */\n  public static subscribe(\n    streamArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: DynamoSubscriberArgs,\n  ): Output<DynamoLambdaSubscriber>;\n\n  public static subscribe(\n    nameOrStreamArn: any,\n    streamArnOrSubscriber: any,\n    subscriberOrArgs?: any,\n    args?: any,\n  ) {\n    return isFunctionSubscriber(subscriberOrArgs).apply((v) =>\n      v\n        ? output(streamArnOrSubscriber).apply((streamArn) =>\n            this._subscribe(\n              nameOrStreamArn, // name\n              logicalName(parseDynamoStreamArn(streamArn).tableName),\n              streamArn,\n              subscriberOrArgs, // subscriber\n              args,\n            ),\n          )\n        : output(nameOrStreamArn).apply((streamArn) =>\n            this._subscribeV1(\n              logicalName(parseDynamoStreamArn(streamArn).tableName),\n              streamArn,\n              streamArnOrSubscriber, // subscriber\n              subscriberOrArgs, // args\n            ),\n          ),\n    );\n  }\n\n  private static _subscribe(\n    subscriberName: string,\n    name: string,\n    streamArn: string | Output<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: DynamoSubscriberArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    return output(args).apply(\n      (args) =>\n        new DynamoLambdaSubscriber(\n          `${name}Subscriber${subscriberName}`,\n          {\n            dynamo: { streamArn },\n            subscriber,\n            ...args,\n          },\n          opts,\n        ),\n    );\n  }\n\n  private static _subscribeV1(\n    name: string,\n    streamArn: string | Output<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: DynamoSubscriberArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    return all([name, subscriber, args]).apply(([name, subscriber, args]) => {\n      const suffix = logicalName(\n        hashStringToPrettyString(\n          [\n            typeof streamArn === \"string\" ? streamArn : outputId,\n            JSON.stringify(args.filters ?? {}),\n            typeof subscriber === \"string\" ? subscriber : subscriber.handler,\n          ].join(\"\"),\n          6,\n        ),\n      );\n\n      return new DynamoLambdaSubscriber(\n        `${name}Subscriber${suffix}`,\n        {\n          dynamo: { streamArn },\n          subscriber,\n          disableParent: true,\n          ...args,\n        },\n        opts,\n      );\n    });\n  }\n\n  /**\n   * Reference an existing DynamoDB Table with the given table name. This is useful when you\n   * create a table in one stage and want to share it in another stage. It avoid having to\n   * create a new table in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share a table across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param tableName The name of the DynamoDB Table.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a table in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new table, you want to share the table from `dev`.\n   *\n   * ```ts title=sst.config.ts\"\n   * const table = $app.stage === \"frank\"\n   *  ? sst.aws.Dynamo.get(\"MyTable\", \"app-dev-mytable\")\n   *  : new sst.aws.Dynamo(\"MyTable\");\n   * ```\n   *\n   * Here `app-dev-mytable` is the name of the DynamoDB Table created in the `dev` stage.\n   * You can find this by outputting the table name in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   table: table.name\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    tableName: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Dynamo(name, {\n      ref: true,\n      table: dynamodb.Table.get(`${name}Table`, tableName, undefined, opts),\n    } satisfies DynamoRef as unknown as DynamoArgs);\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        name: this.name,\n      },\n      include: [\n        permission({\n          actions: [\"dynamodb:*\"],\n          resources: [this.arn, interpolate`${this.arn}/*`],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Dynamo\";\n// @ts-expect-error\nDynamo.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Input, output } from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { FunctionArgs } from \"./function\";\nimport { DynamoSubscriberArgs } from \"./dynamo\";\nimport { lambda } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\nimport { parseFunctionArn } from \"./helpers/arn\";\n\nexport interface Args extends DynamoSubscriberArgs {\n  /**\n   * The DynamoDB table to use.\n   */\n  dynamo: Input<{\n    /**\n     * The ARN of the stream.\n     */\n    streamArn: Input<string>;\n  }>;\n  /**\n   * The subscriber function.\n   */\n  subscriber: Input<string | FunctionArgs>;\n  /**\n   * In early versions of SST, parent were forgotten to be set for resources in components.\n   * This flag is used to disable the automatic setting of the parent to prevent breaking\n   * changes.\n   * @internal\n   */\n  disableParent?: boolean;\n}\n\n/**\n * The `DynamoLambdaSubscriber` component is internally used by the `Dynamo` component to\n * add stream subscriptions to [Amazon DynamoDB](https://aws.amazon.com/dynamodb/).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribe` method of the `Dynamo` component.\n */\nexport class DynamoLambdaSubscriber extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly eventSourceMapping: lambda.EventSourceMapping;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const dynamo = output(args.dynamo);\n    const fn = createFunction();\n    const eventSourceMapping = createEventSourceMapping();\n\n    this.fn = fn;\n    this.eventSourceMapping = eventSourceMapping;\n\n    function createFunction() {\n      return functionBuilder(\n        `${name}Function`,\n        args.subscriber,\n        {\n          description: `Subscribed to ${name}`,\n          permissions: [\n            {\n              actions: [\n                \"dynamodb:DescribeStream\",\n                \"dynamodb:GetRecords\",\n                \"dynamodb:GetShardIterator\",\n                \"dynamodb:ListStreams\",\n              ],\n              resources: [dynamo.streamArn],\n            },\n          ],\n        },\n        undefined,\n        { parent: self },\n      );\n    }\n\n    function createEventSourceMapping() {\n      return new lambda.EventSourceMapping(\n        ...transform(\n          args.transform?.eventSourceMapping,\n          `${name}EventSourceMapping`,\n          {\n            eventSourceArn: dynamo.streamArn,\n            functionName: fn.arn.apply(\n              (arn) => parseFunctionArn(arn).functionName,\n            ),\n            filterCriteria: args.filters\n              ? output(args.filters).apply((filters) => ({\n                  filters: filters.map((filter) => ({\n                    pattern: JSON.stringify(filter),\n                  })),\n                }))\n              : undefined,\n            startingPosition: \"LATEST\",\n          },\n          { parent: args.disableParent ? undefined : self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function that'll be notified.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda event source mapping.\n       */\n      eventSourceMapping: this.eventSourceMapping,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:DynamoLambdaSubscriber\";\n// @ts-expect-error\nDynamoLambdaSubscriber.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Output,\n  all,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Prettify, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport { Input } from \"../input\";\nimport { Dns } from \"../dns\";\nimport { dns as awsDns } from \"./dns.js\";\nimport { ses, sesv2 } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\n\ninterface Events {\n  /**\n   * The name of the event.\n   */\n  name: Input<string>;\n  /**\n   * The types of events to send.\n   */\n  types: Input<\n    Input<\n      | \"send\"\n      | \"reject\"\n      | \"bounce\"\n      | \"complaint\"\n      | \"delivery\"\n      | \"delivery-delay\"\n      | \"rendering-failure\"\n      | \"subscription\"\n      | \"open\"\n      | \"click\"\n    >[]\n  >;\n  /**\n   * The ARN of the SNS topic to send events to.\n   */\n  topic?: Input<string>;\n  /**\n   * The ARN of the EventBridge bus to send events to.\n   */\n  bus?: Input<string>;\n}\n\nexport interface EmailArgs {\n  /**\n   * The email address or domain name that you want to send emails from.\n   *\n   * :::note\n   * You'll need to verify the email address or domain you are using.\n   * :::\n   *\n   * @example\n   *\n   * Using an email address as the sender. You'll need to verify the email address.\n   * When you deploy your app, you will receive an email from AWS SES with a link to verify the\n   * email address.\n   *\n   * ```ts\n   * {\n   *   sender: \"john.smith@gmail.com\"\n   * }\n   * ```\n   *\n   * Using a domain name as the sender. You'll need to verify that you own the domain.\n   * Once you verified, you can send emails from any email addresses in the domain.\n   *\n   * :::tip\n   * SST can automatically verify the domain for the `dns` adapter that's specified.\n   * :::\n   *\n   * To verify the domain, you need to add the verification records to your domain's DNS.\n   * This can be done automatically for the supported `dns` adapters.\n   *\n   * ```ts\n   * {\n   *   sender: \"example.com\"\n   * }\n   * ```\n   *\n   * If the domain is hosted on Cloudflare.\n   *\n   * ```ts\n   * {\n   *   sender: \"example.com\",\n   *   dns: sst.cloudflare.dns()\n   * }\n   * ```\n   */\n  sender: Input<string>;\n  /**\n   * The DNS adapter you want to use for managing DNS records. Only specify this if you\n   * are using a domain name as the `sender`.\n   *\n   * :::note\n   * If `dns` is set to `false`, you have to add the DNS records manually to verify\n   * the domain.\n   * :::\n   *\n   * @default `sst.aws.dns`\n   *\n   * @example\n   *\n   * Specify the hosted zone ID for the domain.\n   *\n   * ```js\n   * {\n   *   dns: sst.aws.dns({\n   *     zone: \"Z2FDTNDATAQYW2\"\n   *   })\n   * }\n   * ```\n   *\n   * Domain is hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   dns: sst.cloudflare.dns()\n   * }\n   * ```\n   */\n  dns?: Input<false | (Dns & {})>;\n  /**\n   * The DMARC policy for the domain. This'll create a DNS record with the given DMARC policy.\n   * Only specify this if you are using a domain name as the `sender`.\n   *\n   * @default `\"v=DMARC1; p=none;\"`\n   *\n   * @example\n   * ```js\n   * {\n   *   dmarc: \"v=DMARC1; p=quarantine; adkim=s; aspf=s;\"\n   * }\n   * ```\n   */\n  dmarc?: Input<string>;\n  /**\n   * Configure event notifications for this Email component.\n   *\n   * @default No event notifications\n   * @example\n   *\n   * ```js\n   * {\n   *   events: {\n   *     name: \"OnBounce\",\n   *     types: [\"bounce\"],\n   *     topic: \"arn:aws:sns:us-east-1:123456789012:MyTopic\"\n   *   }\n   * }\n   * ```\n   */\n  events?: Input<Prettify<Events>[]>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the SES identity resource.\n     */\n    identity?: Transform<sesv2.EmailIdentityArgs>;\n    /**\n     * Transform the SES configuration set resource.\n     */\n    configurationSet?: Transform<sesv2.ConfigurationSetArgs>;\n  };\n}\n\ninterface EmailRef {\n  ref: boolean;\n  sender: Input<string>;\n}\n\n/**\n * The `Email` component lets you send emails in your app.\n * It uses [Amazon Simple Email Service](https://aws.amazon.com/ses/).\n *\n * You can configure it to send emails from a specific email address or from any email addresses\n * in a domain.\n *\n * :::tip\n * New AWS SES accounts are in _sandbox mode_ and need to [request production access](https://docs.aws.amazon.com/ses/latest/dg/request-production-access.html).\n * :::\n *\n * By default, new AWS SES accounts are in the _sandbox mode_ and can only send\n * email to verified email addresses and domains. It also limits your account to a sending\n * quota. To remove these restrictions, you need to [request production access](https://docs.aws.amazon.com/ses/latest/dg/request-production-access.html).\n *\n * #### Sending from an email address\n *\n * For using an email address as the sender, you need to verify the email address.\n *\n * ```ts title=\"sst.config.ts\"\n * const email = new sst.aws.Email(\"MyEmail\", {\n *   sender: \"spongebob@example.com\",\n * });\n * ```\n *\n * #### Sending from a domain\n *\n * When you use a domain as the sender, you'll need to verify that you own the domain.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Email(\"MyEmail\", {\n *   sender: \"example.com\"\n * });\n * ```\n *\n * #### Configuring DMARC\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Email(\"MyEmail\", {\n *   sender: \"example.com\",\n *   dmarc: \"v=DMARC1; p=quarantine; adkim=s; aspf=s;\"\n * });\n * ```\n *\n * #### Link to a resource\n *\n * You can link it to a function or your Next.js app to send emails.\n *\n * ```ts {3} title=\"sst.config.ts\"\n * new sst.aws.Function(\"MyApi\", {\n *   handler: \"sender.handler\",\n *   link: [email]\n * });\n * ```\n *\n * Now in your function you can use the AWS SES SDK to send emails.\n *\n * ```ts title=\"sender.ts\" {1, 8}\n * import { Resource } from \"sst\";\n * import { SESv2Client, SendEmailCommand } from \"@aws-sdk/client-sesv2\";\n *\n * const client = new SESv2Client();\n *\n * await client.send(\n *   new SendEmailCommand({\n *     FromEmailAddress: Resource.MyEmail.sender,\n *     Destination: {\n *       ToAddresses: [\"patrick@example.com\"]\n *     },\n *     Content: {\n *       Simple: {\n *         Subject: { Data: \"Hello World!\" },\n *         Body: { Text: { Data: \"Sent from my SST app.\" } }\n *       }\n *     }\n *   })\n * );\n * ```\n */\nexport class Email extends Component implements Link.Linkable {\n  private _sender: Output<string>;\n  private identity: sesv2.EmailIdentity;\n  private configurationSet: sesv2.ConfigurationSet;\n\n  constructor(name: string, args: EmailArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n    const self = this;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this._sender = ref.identity.emailIdentity;\n      this.identity = ref.identity;\n      this.configurationSet = ref.configurationSet;\n      return;\n    }\n\n    const isDomain = checkIsDomain();\n    const dns = normalizeDns();\n    const dmarc = normalizeDmarc();\n    const configurationSet = createConfigurationSet();\n    const identity = createIdentity();\n    createEvents();\n    isDomain.apply((isDomain) => {\n      if (!isDomain) return;\n      createDkimRecords();\n      createDmarcRecord();\n      waitForVerification();\n    });\n\n    this._sender = output(args.sender);\n    this.identity = identity;\n    this.configurationSet = configurationSet;\n\n    function reference() {\n      const ref = args as EmailRef;\n      const identity = sesv2.EmailIdentity.get(\n        `${name}Identity`,\n        ref.sender,\n        undefined,\n        { parent: self },\n      );\n      const configurationSet = sesv2.ConfigurationSet.get(\n        `${name}Config`,\n        identity.configurationSetName.apply((v) => v!),\n        undefined,\n        { parent: self },\n      );\n\n      return {\n        identity,\n        configurationSet,\n      };\n    }\n\n    function checkIsDomain() {\n      return output(args.sender).apply((sender) => !sender.includes(\"@\"));\n    }\n\n    function normalizeDns() {\n      all([args.dns, isDomain]).apply(([dns, isDomain]) => {\n        if (!isDomain && dns)\n          throw new Error(\n            `The \"dns\" property is only valid when \"sender\" is a domain.`,\n          );\n      });\n\n      return args.dns ?? awsDns();\n    }\n\n    function normalizeDmarc() {\n      all([args.dmarc, isDomain]).apply(([dmarc, isDomain]) => {\n        if (!isDomain && dmarc)\n          throw new Error(\n            `The \"dmarc\" property is only valid when \"sender\" is a domain.`,\n          );\n      });\n\n      return args.dmarc ?? `v=DMARC1; p=none;`;\n    }\n\n    function createConfigurationSet() {\n      return new sesv2.ConfigurationSet(\n        ...transform(\n          args.transform?.configurationSet,\n          `${name}Config`,\n          { configurationSetName: \"\" },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createIdentity() {\n      return new sesv2.EmailIdentity(\n        ...transform(\n          args.transform?.identity,\n          `${name}Identity`,\n          {\n            emailIdentity: args.sender,\n            configurationSetName: configurationSet.configurationSetName,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createEvents() {\n      output(args.events ?? []).apply((events) =>\n        events.forEach((event) => {\n          new sesv2.ConfigurationSetEventDestination(\n            `${name}Event${event.name}`,\n            {\n              configurationSetName: configurationSet.configurationSetName,\n              eventDestinationName: event.name,\n              eventDestination: {\n                matchingEventTypes: event.types.map((t) =>\n                  t.toUpperCase().replaceAll(\"-\", \"_\"),\n                ),\n                ...(event.bus\n                  ? { eventBridgeDestination: { eventBusArn: event.bus } }\n                  : {}),\n                ...(event.topic\n                  ? { snsDestination: { topicArn: event.topic } }\n                  : {}),\n                enabled: true,\n              },\n            },\n            { parent: self },\n          );\n        }),\n      );\n    }\n\n    function createDkimRecords() {\n      all([dns, identity?.dkimSigningAttributes.tokens]).apply(\n        ([dns, tokens]) => {\n          if (!dns) return;\n\n          tokens?.map((token) =>\n            dns.createRecord(\n              name,\n              {\n                type: \"CNAME\",\n                name: interpolate`${token}._domainkey.${args.sender}`,\n                value: `${token}.dkim.amazonses.com`,\n              },\n              { parent: self },\n            ),\n          );\n        },\n      );\n    }\n\n    function createDmarcRecord() {\n      output(dns).apply((dns) => {\n        if (!dns) return;\n\n        dns.createRecord(\n          name,\n          {\n            type: \"TXT\",\n            name: interpolate`_dmarc.${args.sender}`,\n            value: dmarc,\n          },\n          { parent: self },\n        );\n      });\n    }\n\n    function waitForVerification() {\n      new ses.DomainIdentityVerification(\n        `${name}Verification`,\n        {\n          domain: args.sender,\n        },\n        { parent: self, dependsOn: identity },\n      );\n    }\n  }\n\n  /**\n   * The sender email address or domain name.\n   */\n  public get sender() {\n    return this._sender;\n  }\n\n  /**\n   * The name of the configuration set.\n   */\n  public get configSet() {\n    return this.configurationSet.configurationSetName;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon SES identity.\n       */\n      identity: this.identity,\n      /**\n       * The Amazon SES configuration set.\n       */\n      configurationSet: this.configurationSet,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        sender: this._sender,\n        configSet: this.configSet,\n      },\n      include: [\n        permission({\n          actions: [\"ses:*\"],\n          resources: [this.identity.arn, this.configurationSet.arn],\n        }),\n        // When the SES account is in sandbox mode, it seems you have to include verified\n        // receipients inside `resources`. Needs further investigation.\n        permission({\n          actions: [\n            \"ses:SendEmail\",\n            \"ses:SendRawEmail\",\n            \"ses:SendTemplatedEmail\",\n          ],\n          resources: [\"*\"],\n        }),\n      ],\n    };\n  }\n\n  /**\n   * Reference an existing Email component with the given Amazon SES identity. This is useful\n   * when you create an SES identity in one stage and want to share it in another stage. It\n   * avoids having to create a new Email component in the other stage.\n   *\n   * @param name The name of the component.\n   * @param sender The email address or domain name of the existing SES identity.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create an Email component in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new component, you want to share the one from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const email = $app.stage === \"frank\"\n   *   ? sst.aws.Email.get(\"MyEmail\", \"spongebob@example.com\")\n   *   : new sst.aws.Email(\"MyEmail\", {\n   *       sender: \"spongebob@example.com\",\n   *     });\n   * ```\n   */\n  public static get(\n    name: string,\n    sender: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Email(\n      name,\n      {\n        ref: true,\n        sender,\n      } as EmailArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Email\";\n// @ts-expect-error\nEmail.__pulumiType = __pulumiType;\n", "import * as aws from \"@pulumi/aws\";\n\nimport { ComponentResourceOptions, Output, all, output } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component.js\";\nimport { Input } from \"../input.js\";\nimport { Link } from \"../link.js\";\nimport { hashStringToPrettyString, logicalName } from \"../naming.js\";\nimport { FunctionArgs, FunctionArn } from \"./function.js\";\nimport { KinesisStreamLambdaSubscriber } from \"./kinesis-stream-lambda-subscriber.js\";\nimport { parseKinesisStreamArn } from \"./helpers/arn.js\";\nimport { permission } from \"./permission.js\";\nimport { isFunctionSubscriber } from \"./helpers/subscriber.js\";\n\nexport interface KinesisStreamArgs {\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Kinesis stream resource.\n     */\n    stream?: Transform<aws.kinesis.StreamArgs>;\n  };\n}\n\nexport interface KinesisStreamLambdaSubscriberArgs {\n  /**\n   * Filter the events that'll be processed by the `subscribers` functions.\n   *\n   * :::tip\n   * You can pass in up to 5 different filters.\n   * :::\n   *\n   * You can pass in up to 5 different filter policies. These will logically ORed together. Meaning that if any single policy matches, the record will be processed. Learn more about the [filter rule syntax](https://docs.aws.amazon.com/lambda/latest/dg/invocation-eventfiltering.html#filtering-syntax).\n   *\n   * @example\n   * For example, if your Kinesis stream contains events in this JSON format.\n   * ```js\n   * {\n   *   record: 12345,\n   *   order: {\n   *     type: \"buy\",\n   *     stock: \"ANYCO\",\n   *     quantity: 1000\n   *   }\n   * }\n   * ```\n   *\n   * To process only those events where the `type` is `buy`.\n   * ```js\n   * {\n   *   filters: [\n   *     {\n   *       data: {\n   *         order: {\n   *           type: [\"buy\"],\n   *         },\n   *       },\n   *     },\n   *   ],\n   * }\n   * ```\n   *\n   */\n  filters?: Input<Input<Record<string, any>>[]>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Lambda Event Source Mapping resource.\n     */\n    eventSourceMapping?: Transform<aws.lambda.EventSourceMappingArgs>;\n  };\n}\n\n/**\n * The `KinesisStream` component lets you add an [Amazon Kinesis Data Streams](https://docs.aws.amazon.com/streams/latest/dev/introduction.html) to your app.\n *\n * @example\n *\n * #### Minimal example\n *\n * ```ts title=\"sst.config.ts\"\n * const stream = new sst.aws.KinesisStream(\"MyStream\");\n * ```\n *\n * #### Subscribe to a stream\n *\n * ```ts title=\"sst.config.ts\"\n * stream.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n * ```\n *\n * #### Link the stream to a resource\n *\n * You can link the stream to other resources, like a function or your Next.js app.\n *\n * ```ts {2} title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [stream]\n * });\n * ```\n *\n * Once linked, you can write to the stream from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,7}\n * import { Resource } from \"sst\";\n * import { KinesisClient, PutRecordCommand } from \"@aws-sdk/client-kinesis\";\n *\n * const client = new KinesisClient();\n *\n * await client.send(new PutRecordCommand({\n *   StreamName: Resource.MyStream.name,\n *   Data: JSON.stringify({ foo: \"bar\" }),\n *   PartitionKey: \"myKey\",\n * }));\n * ```\n */\nexport class KinesisStream extends Component implements Link.Linkable {\n  private constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private stream: aws.kinesis.Stream;\n\n  constructor(\n    name: string,\n    args: KinesisStreamArgs = {},\n    opts: $util.ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n    const stream = createStream();\n    this.stream = stream;\n    this.constructorName = name;\n    this.constructorOpts = opts;\n\n    function createStream() {\n      return new aws.kinesis.Stream(\n        ...transform(\n          args?.transform?.stream,\n          `${name}Stream`,\n          {\n            streamModeDetails: {\n              streamMode: \"ON_DEMAND\",\n            },\n          },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  /**\n   * Subscribe to the Kinesis stream.\n   *\n   * @param name The name of the subscriber.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * ```js title=\"sst.config.ts\"\n   * stream.subscribe(\"MySubscriber\", \"src/subscriber.handler\");\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * stream.subscribe(\"MySubscriber\", \"src/subscriber.handler\", {\n   *   filters: [\n   *     {\n   *       data: {\n   *         order: {\n   *           type: [\"buy\"],\n   *         },\n   *       },\n   *     },\n   *   ],\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * stream.subscribe(\"MySubscriber\", {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * stream.subscribe(\"MySubscriber\", \"arn:aws:lambda:us-east-1:123456789012:function:my-function\");\n   * ```\n   */\n  public subscribe(\n    name: string,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: KinesisStreamLambdaSubscriberArgs,\n  ): Output<KinesisStreamLambdaSubscriber>;\n  /**\n   * @deprecated The subscribe function now requires a `name` parameter as the first argument.\n   * To migrate, remove the current subscriber, deploy the changes, and then add the subscriber\n   * back with the new `name` argument.\n   */\n  public subscribe(\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: KinesisStreamLambdaSubscriberArgs,\n  ): Output<KinesisStreamLambdaSubscriber>;\n  public subscribe(nameOrSubscriber: any, subscriberOrArgs?: any, args?: any) {\n    return isFunctionSubscriber(subscriberOrArgs).apply((v) =>\n      v\n        ? KinesisStream._subscribe(\n            nameOrSubscriber, // name\n            this.constructorName,\n            this.nodes.stream.arn,\n            subscriberOrArgs, // subscriber\n            args,\n            { provider: this.constructorOpts.provider },\n          )\n        : KinesisStream._subscribeV1(\n            this.constructorName,\n            this.nodes.stream.arn,\n            nameOrSubscriber, // subscriber\n            subscriberOrArgs, // args\n            { provider: this.constructorOpts.provider },\n          ),\n    );\n  }\n\n  /**\n   * Subscribe to the Kinesis stream that was not created in your app.\n   *\n   * @param name The name of the subscriber.\n   * @param streamArn The ARN of the Kinesis Stream to subscribe to.\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * For example, let's say you have the ARN of an existing Kinesis stream.\n   *\n   * ```js title=\"sst.config.ts\"\n   * const streamArn = \"arn:aws:kinesis:us-east-1:123456789012:stream/MyStream\";\n   * ```\n   *\n   * You can subscribe to it by passing in the ARN.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, \"src/subscriber.handler\");\n   * ```\n   *\n   * Add a filter to the subscription.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, \"src/subscriber.handler\", {\n   *   filters: [\n   *     {\n   *       data: {\n   *         order: {\n   *           type: [\"buy\"],\n   *         },\n   *       },\n   *     },\n   *   ],\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * sst.aws.KinesisStream.subscribe(\"MySubscriber\", streamArn, {\n   *   handler: \"src/subscriber.handler\",\n   *   timeout: \"60 seconds\"\n   * });\n   * ```\n   */\n  public static subscribe(\n    name: string,\n    streamArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: KinesisStreamLambdaSubscriberArgs,\n  ): Output<KinesisStreamLambdaSubscriber>;\n  /**\n   * @deprecated The subscribe function now requires a `name` parameter as the first argument.\n   * To migrate, remove the current subscriber, deploy the changes, and then add the subscriber\n   * back with the new `name` argument.\n   */\n  public static subscribe(\n    streamArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args?: KinesisStreamLambdaSubscriberArgs,\n  ): Output<KinesisStreamLambdaSubscriber>;\n  public static subscribe(\n    nameOrStreamArn: any,\n    streamArnOrSubscriber: any,\n    subscriberOrArgs?: any,\n    args?: any,\n  ) {\n    return isFunctionSubscriber(subscriberOrArgs).apply((v) =>\n      v\n        ? output(streamArnOrSubscriber).apply((streamArn) =>\n            this._subscribe(\n              nameOrStreamArn, // name\n              logicalName(parseKinesisStreamArn(streamArn).streamName),\n              streamArn,\n              subscriberOrArgs, // subscriber\n              args,\n            ),\n          )\n        : output(nameOrStreamArn).apply((streamArn) =>\n            this._subscribeV1(\n              logicalName(parseKinesisStreamArn(streamArn).streamName),\n              streamArn,\n              streamArnOrSubscriber, // subscriber\n              subscriberOrArgs, // args\n            ),\n          ),\n    );\n  }\n\n  private static _subscribe(\n    subscriberName: string,\n    name: string,\n    streamArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: KinesisStreamLambdaSubscriberArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    return output(args).apply(\n      (args) =>\n        new KinesisStreamLambdaSubscriber(\n          `${name}Subscriber${subscriberName}`,\n          {\n            stream: { arn: streamArn },\n            subscriber,\n            ...args,\n          },\n          opts,\n        ),\n    );\n  }\n\n  private static _subscribeV1(\n    name: string,\n    streamArn: Input<string>,\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: KinesisStreamLambdaSubscriberArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    return all([streamArn, subscriber, args]).apply(\n      ([streamArn, subscriber, args]) => {\n        const suffix = logicalName(\n          hashStringToPrettyString(\n            [\n              streamArn,\n              JSON.stringify(args.filters ?? {}),\n              typeof subscriber === \"string\" ? subscriber : subscriber.handler,\n            ].join(\"\"),\n            6,\n          ),\n        );\n        return new KinesisStreamLambdaSubscriber(\n          `${name}Subscriber${suffix}`,\n          {\n            stream: { arn: streamArn },\n            subscriber,\n            ...args,\n          },\n          opts,\n        );\n      },\n    );\n  }\n\n  public get name() {\n    return this.stream.name;\n  }\n\n  public get arn() {\n    return this.stream.arn;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon Kinesis Data Stream.\n       */\n      stream: this.stream,\n    };\n  }\n\n  /** @internal */\n  getSSTLink() {\n    return {\n      properties: {\n        name: this.stream.name,\n      },\n      include: [\n        permission({\n          actions: [\"kinesis:*\"],\n          resources: [this.nodes.stream.arn],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:KinesisStream\";\n// @ts-expect-error\nKinesisStream.__pulumiType = __pulumiType;\n", "import { lambda } from \"@pulumi/aws\";\nimport { output } from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { Input } from \"../input.js\";\nimport { FunctionArgs } from \"./function.js\";\nimport { KinesisStreamLambdaSubscriberArgs } from \"./kinesis-stream.js\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\nimport { parseFunctionArn } from \"./helpers/arn\";\n\nexport interface Args extends KinesisStreamLambdaSubscriberArgs {\n  /**\n   * The Kinesis stream to use.\n   */\n  stream: Input<{\n    /**\n     * The ARN of the stream.\n     */\n    arn: Input<string>;\n  }>;\n  /**\n   * The subscriber function.\n   */\n  subscriber: Input<string | FunctionArgs>;\n}\n\n/**\n * The `KinesisStreamLambdaSubscriber` component is internally used by the `KinesisStream` component to\n * add a consumer to [Amazon Kinesis Data Streams](https://docs.aws.amazon.com/streams/latest/dev/introduction.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribe` method of the `KinesisStream` component.\n */\nexport class KinesisStreamLambdaSubscriber extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly eventSourceMapping: lambda.EventSourceMapping;\n  constructor(name: string, args: Args, opts?: $util.ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const stream = output(args.stream);\n    const fn = createFunction();\n    const eventSourceMapping = createEventSourceMapping();\n\n    this.fn = fn;\n    this.eventSourceMapping = eventSourceMapping;\n\n    function createFunction() {\n      return output(args.subscriber).apply((subscriber) => {\n        return functionBuilder(\n          `${name}Function`,\n          subscriber,\n          {\n            description: `Subscribed to ${name}`,\n            permissions: [\n              {\n                actions: [\n                  \"kinesis:DescribeStream\",\n                  \"kinesis:DescribeStreamSummary\",\n                  \"kinesis:GetRecords\",\n                  \"kinesis:GetShardIterator\",\n                  \"kinesis:ListShards\",\n                  \"kinesis:ListStreams\",\n                  \"kinesis:SubscribeToShard\",\n                ],\n                resources: [stream.arn],\n              },\n            ],\n          },\n          undefined,\n          { parent: self },\n        );\n      });\n    }\n\n    function createEventSourceMapping() {\n      return new lambda.EventSourceMapping(\n        ...transform(\n          args.transform?.eventSourceMapping,\n          `${name}EventSourceMapping`,\n          {\n            eventSourceArn: stream.arn,\n            functionName: fn.arn.apply(\n              (arn) => parseFunctionArn(arn).functionName,\n            ),\n            startingPosition: \"LATEST\",\n            filterCriteria: args.filters && {\n              filters: output(args.filters).apply((filters) =>\n                filters.map((filter) => ({\n                  pattern: JSON.stringify(filter),\n                })),\n              ),\n            },\n          },\n          { parent: self },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function that'll be notified.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda event source mapping.\n       */\n      eventSourceMapping: self.eventSourceMapping,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:KinesisStreamLambdaSubscriber\";\n// @ts-expect-error\nKinesisStreamLambdaSubscriber.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output, all, output } from \"@pulumi/pulumi\";\nimport { Size } from \"../size.js\";\nimport { Function } from \"./function.js\";\nimport { VisibleError } from \"../error.js\";\nimport type { Input } from \"../input.js\";\nimport { Queue } from \"./queue.js\";\nimport { dynamodb, getRegionOutput, lambda } from \"@pulumi/aws\";\nimport { isALteB } from \"../../util/compare-semver.js\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\nimport { Bucket } from \"./bucket.js\";\n\nconst DEFAULT_OPEN_NEXT_VERSION = \"3.6.6\";\n\ntype BaseFunction = {\n  handler: string;\n  bundle: string;\n};\n\ntype OpenNextFunctionOrigin = {\n  type: \"function\";\n  streaming?: boolean;\n  wrapper: string;\n  converter: string;\n} & BaseFunction;\n\ntype OpenNextServerFunctionOrigin = OpenNextFunctionOrigin & {\n  queue: string;\n  incrementalCache: string;\n  tagCache: string;\n};\n\ntype OpenNextImageOptimizationOrigin = OpenNextFunctionOrigin & {\n  imageLoader: string;\n};\n\ntype OpenNextS3Origin = {\n  type: \"s3\";\n  originPath: string;\n  copy: {\n    from: string;\n    to: string;\n    cached: boolean;\n    versionedSubDir?: string;\n  }[];\n};\n\ninterface OpenNextOutput {\n  edgeFunctions: {\n    [key: string]: BaseFunction;\n  } & {\n    middleware?: BaseFunction & { pathResolver: string };\n  };\n  origins: {\n    s3: OpenNextS3Origin;\n    default: OpenNextServerFunctionOrigin;\n    imageOptimizer: OpenNextImageOptimizationOrigin;\n  } & {\n    [key: string]: OpenNextServerFunctionOrigin | OpenNextS3Origin;\n  };\n  behaviors: {\n    pattern: string;\n    origin?: string;\n    edgeFunction?: string;\n  }[];\n  additionalProps?: {\n    disableIncrementalCache?: boolean;\n    disableTagCache?: boolean;\n    initializationFunction?: BaseFunction;\n    warmer?: BaseFunction;\n    revalidationFunction?: BaseFunction;\n  };\n}\n\nexport interface NextjsArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your Next.js app is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your Next.js app, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your Next.js app needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your Next.js app is located. This path is relative to your `sst.config.ts`.\n   *\n   * By default this assumes your Next.js app is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your Next.js app is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your Next.js app. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your Next.js app has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Turn off invalidations.\n   * ```js\n   * {\n   *   invalidation: false\n   * }\n   * ```\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * The command used internally to build your Next.js app. It uses OpenNext with the `openNextVersion`.\n   *\n   * @default `\"npx --yes open-next@OPEN_NEXT_VERSION build\"`\n   *\n   * @example\n   *\n   * If you want to use a custom `build` script from your `package.json`. This is useful if you have a custom build process or want to use a different version of OpenNext.\n   * OpenNext by default uses the `build` script for building next-js app in your `package.json`. You can customize the build command in OpenNext configuration.\n   * ```js\n   * {\n   *   buildCommand: \"npm run build:open-next\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * Set [environment variables](https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables) in your Next.js app. These are made available:\n   *\n   * 1. In `next build`, they are loaded into `process.env`.\n   * 2. Locally while running through `sst dev`.\n   *\n   * :::tip\n   * You can also `link` resources to your Next.js app and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * Recall that in Next.js, you need to prefix your environment variables with `NEXT_PUBLIC_` to access these in the browser. [Read more here](https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#bundling-environment-variables-for-the-browser).\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     // Accessible in the browser\n   *     NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Serve your Next.js app through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your Next.js app **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * You also need to set the [`basePath`](https://nextjs.org/docs/app/api-reference/config/next-config-js/basePath)\n   * in your `next.config.js`.\n   *\n   * :::caution\n   * If routing to a path, you need to set that as the base path in your Next.js\n   * app as well.\n   * :::\n   *\n   * ```js title=\"next.config.js\" {2}\n   * export default defineConfig({\n   *   basePath: \"/docs\"\n   * });\n   * ```\n   *\n   * To serve your Next.js app **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your Next.js app **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set this as the `basePath` in your `next.config.js`, like\n   * above.\n   */\n  router?: SsrSiteArgs[\"router\"];\n  /**\n   * Set a custom domain for your Next.js app.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Configure how the Next.js app assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   * Read more about these options below.\n   * @default `Object`\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the [OpenNext](https://opennext.js.org) version used to build the Next.js app.\n   *\n   * :::note\n   * This does not automatically update to the latest OpenNext version. It remains pinned to the version of SST you have.\n   * :::\n   *\n   * By default, this is pinned to the version of OpenNext that was released with the SST version you are using. You can [find this in the source](https://github.com/sst/sst/blob/dev/platform/src/components/aws/nextjs.ts#L30) under `DEFAULT_OPEN_NEXT_VERSION`.\n   * OpenNext changed its package name from `open-next` to `@opennextjs/aws` in version `3.1.4`. SST will choose the correct one based on the version you provide.\n   *\n   * @default The latest version of OpenNext pinned to the version of SST you are using.\n   * @example\n   * ```js\n   * {\n   *   openNextVersion: \"3.4.1\"\n   * }\n   * ```\n   */\n  openNextVersion?: Input<string>;\n  /**\n   * Configure the Lambda function used for image optimization.\n   * @default `{memory: \"1024 MB\"}`\n   */\n  imageOptimization?: {\n    /**\n     * The amount of memory allocated to the image optimization function.\n     * Takes values between 128 MB and 10240 MB in 1 MB increments.\n     *\n     * @default `\"1536 MB\"`\n     * @example\n     * ```js\n     * {\n     *   imageOptimization: {\n     *     memory: \"512 MB\"\n     *   }\n     * }\n     * ```\n     */\n    memory?: Size;\n    /**\n     * If set to true, a previously computed image will return _304 Not Modified_.\n     * This means that image needs to be **immutable**.\n     *\n     * The etag will be computed based on the image href, format and width and the next\n     * BUILD_ID.\n     *\n     * @default `false`\n     * @example\n     * ```js\n     * {\n     *   imageOptimization: {\n     *     staticEtag: true,\n     *   }\n     * }\n     * ```\n     */\n    staticEtag?: boolean;\n  };\n  /**\n   * Configure the Next.js app to use an existing CloudFront cache policy.\n   *\n   * :::note\n   * CloudFront has a limit of 20 cache policies per account, though you can request a limit\n   * increase.\n   * :::\n   *\n   * By default, a new cache policy is created for it. This allows you to reuse an existing\n   * policy instead of creating a new one.\n   *\n   * @default A new cache policy is created\n   *\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `Nextjs` component lets you deploy [Next.js](https://nextjs.org) apps on AWS. It uses\n * [OpenNext](https://open-next.js.org) to build your Next.js app, and transforms the build\n * output to a format that can be deployed to AWS.\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy the Next.js app that's in the project root.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys a Next.js app in the `my-next-app/` directory.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   path: \"my-next-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your Next.js app.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your Next.js app. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your Next.js app.\n *\n * ```ts title=\"app/page.tsx\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class Nextjs extends SsrSite {\n  private revalidationQueue?: Output<Queue | undefined>;\n  private revalidationTable?: Output<dynamodb.Table | undefined>;\n  private revalidationFunction?: Output<Function | undefined>;\n\n  constructor(\n    name: string,\n    args: NextjsArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand(args: NextjsArgs) {\n    return all([args?.buildCommand, args?.openNextVersion]).apply(\n      ([buildCommand, openNextVersion]) => {\n        if (buildCommand) return buildCommand;\n        const version = openNextVersion ?? DEFAULT_OPEN_NEXT_VERSION;\n        const packageName = isALteB(version, \"3.1.3\")\n          ? \"open-next\"\n          : \"@opennextjs/aws\";\n        return `npx --yes ${packageName}@${version} build`;\n      },\n    );\n  }\n\n  protected buildPlan(\n    outputPath: Output<string>,\n    name: string,\n    args: NextjsArgs,\n    { bucket }: { bucket: Bucket },\n  ): Output<Plan> {\n    const parent = this;\n\n    const ret = all([outputPath, args?.imageOptimization]).apply(\n      ([outputPath, imageOptimization]) => {\n        const { openNextOutput, buildId, prerenderManifest, base } =\n          loadBuildOutput();\n\n        if (Object.entries(openNextOutput.edgeFunctions).length) {\n          throw new VisibleError(\n            `Lambda@Edge runtime is deprecated. Update your OpenNext configuration to use the standard Lambda runtime and deploy to multiple regions using the \"regions\" option in your Nextjs component.`,\n          );\n        }\n\n        const { revalidationQueue, revalidationFunction } =\n          createRevalidationQueue();\n        const revalidationTable = createRevalidationTable();\n        createRevalidationTableSeeder();\n\n        const serverOrigin = openNextOutput.origins[\"default\"];\n        const imageOptimizerOrigin = openNextOutput.origins[\"imageOptimizer\"];\n        const s3Origin = openNextOutput.origins[\"s3\"];\n        const plan = all([\n          revalidationTable?.arn,\n          revalidationTable?.name,\n          bucket.arn,\n          bucket.name,\n          getRegionOutput(undefined, { parent: bucket }).name,\n          revalidationQueue?.arn,\n          revalidationQueue?.url,\n          getRegionOutput(undefined, { parent: revalidationQueue }).name,\n        ]).apply(\n          ([\n            tableArn,\n            tableName,\n            bucketArn,\n            bucketName,\n            bucketRegion,\n            queueArn,\n            queueUrl,\n            queueRegion,\n          ]) => ({\n            base,\n            server: {\n              description: `${name} server`,\n              bundle: path.join(outputPath, serverOrigin.bundle),\n              handler: serverOrigin.handler,\n              streaming: serverOrigin.streaming,\n              runtime: \"nodejs20.x\" as const,\n              environment: {\n                CACHE_BUCKET_NAME: bucketName,\n                CACHE_BUCKET_KEY_PREFIX: \"_cache\",\n                CACHE_BUCKET_REGION: bucketRegion,\n                ...(queueUrl && {\n                  REVALIDATION_QUEUE_URL: queueUrl,\n                  REVALIDATION_QUEUE_REGION: queueRegion,\n                }),\n                ...(tableName && {\n                  CACHE_DYNAMO_TABLE: tableName,\n                }),\n              },\n              permissions: [\n                // access to the cache data\n                {\n                  actions: [\"s3:GetObject\", \"s3:PutObject\", \"s3:DeleteObject\"],\n                  resources: [`${bucketArn}/*`],\n                },\n                {\n                  actions: [\"s3:ListBucket\"],\n                  resources: [bucketArn],\n                },\n                ...(queueArn\n                  ? [\n                      {\n                        actions: [\n                          \"sqs:SendMessage\",\n                          \"sqs:GetQueueAttributes\",\n                          \"sqs:GetQueueUrl\",\n                        ],\n                        resources: [queueArn],\n                      },\n                    ]\n                  : []),\n                ...(tableArn\n                  ? [\n                      {\n                        actions: [\n                          \"dynamodb:BatchGetItem\",\n                          \"dynamodb:GetRecords\",\n                          \"dynamodb:GetShardIterator\",\n                          \"dynamodb:Query\",\n                          \"dynamodb:GetItem\",\n                          \"dynamodb:Scan\",\n                          \"dynamodb:ConditionCheckItem\",\n                          \"dynamodb:BatchWriteItem\",\n                          \"dynamodb:PutItem\",\n                          \"dynamodb:UpdateItem\",\n                          \"dynamodb:DeleteItem\",\n                          \"dynamodb:DescribeTable\",\n                        ],\n                        resources: [tableArn, `${tableArn}/*`],\n                      },\n                    ]\n                  : []),\n              ],\n              injections: [\n                [\n                  `outer:if (process.env.SST_KEY_FILE) {`,\n                  `  const { readFileSync } = await import(\"fs\")`,\n                  `  const { createDecipheriv } = await import(\"crypto\")`,\n                  `  const key = Buffer.from(process.env.SST_KEY, \"base64\");`,\n                  `  const encryptedData = readFileSync(process.env.SST_KEY_FILE);`,\n                  `  const nonce = Buffer.alloc(12, 0);`,\n                  `  const decipher = createDecipheriv(\"aes-256-gcm\", key, nonce);`,\n                  `  const authTag = encryptedData.slice(-16);`,\n                  `  const actualCiphertext = encryptedData.slice(0, -16);`,\n                  `  decipher.setAuthTag(authTag);`,\n                  `  let decrypted = decipher.update(actualCiphertext);`,\n                  `  decrypted = Buffer.concat([decrypted, decipher.final()]);`,\n                  `  const decryptedData = JSON.parse(decrypted.toString());`,\n                  `  globalThis.SST_KEY_FILE_DATA = decryptedData;`,\n                  `}`,\n                ].join(\"\\n\"),\n              ],\n            },\n            imageOptimizer: {\n              prefix: \"/_next/image\",\n              function: {\n                description: `${name} image optimizer`,\n                handler: imageOptimizerOrigin.handler,\n                bundle: path.join(outputPath, imageOptimizerOrigin.bundle),\n                runtime: \"nodejs20.x\" as const,\n                architecture: \"arm64\" as const,\n                environment: {\n                  BUCKET_NAME: bucketName,\n                  BUCKET_KEY_PREFIX: \"_assets\",\n                  ...(imageOptimization?.staticEtag\n                    ? { OPENNEXT_STATIC_ETAG: \"true\" }\n                    : {}),\n                },\n                memory: imageOptimization?.memory ?? \"1536 MB\",\n              },\n            },\n            assets: [\n              {\n                from: \".open-next/assets\",\n                to: \"_assets\",\n                cached: true,\n                versionedSubDir: \"_next\",\n                deepRoute: \"_next\",\n              },\n            ],\n            isrCache: {\n              from: \".open-next/cache\",\n              to: \"_cache\",\n            },\n            buildId,\n          }),\n        );\n\n        return {\n          plan,\n          revalidationQueue,\n          revalidationTable,\n          revalidationFunction,\n        };\n\n        function loadBuildOutput() {\n          const openNextOutputPath = path.join(\n            outputPath,\n            \".open-next\",\n            \"open-next.output.json\",\n          );\n          if (!fs.existsSync(openNextOutputPath)) {\n            throw new VisibleError(\n              `Could not load OpenNext output file at \"${openNextOutputPath}\". Make sure your Next.js app was built correctly with OpenNext.`,\n            );\n          }\n          const content = fs.readFileSync(openNextOutputPath).toString();\n          const json = JSON.parse(content) as OpenNextOutput;\n          // Currently open-next.output.json's initializationFunction value\n          // is wrong, it is set to \".open-next/initialization-function\"\n          if (json.additionalProps?.initializationFunction) {\n            json.additionalProps.initializationFunction = {\n              handler: \"index.handler\",\n              bundle: \".open-next/dynamodb-provider\",\n            };\n          }\n          return {\n            openNextOutput: json,\n            base: loadBasePath(),\n            buildId: loadBuildId(),\n            prerenderManifest: loadPrerenderManifest(),\n          };\n        }\n\n        function loadBuildId() {\n          try {\n            return fs\n              .readFileSync(path.join(outputPath, \".next/BUILD_ID\"))\n              .toString();\n          } catch (e) {\n            console.error(e);\n            throw new VisibleError(\n              `Build ID not found in \".next/BUILD_ID\" for site \"${name}\". Ensure your Next.js app was built successfully.`,\n            );\n          }\n        }\n\n        function loadBasePath() {\n          try {\n            const content = fs.readFileSync(\n              path.join(outputPath, \".next\", \"routes-manifest.json\"),\n              \"utf-8\",\n            );\n            const json = JSON.parse(content) as {\n              basePath: string;\n            };\n            return json.basePath === \"\" ? undefined : json.basePath;\n          } catch (e) {\n            console.error(e);\n            throw new VisibleError(\n              `Base path configuration not found in \".next/routes-manifest.json\" for site \"${name}\". Check your Next.js configuration.`,\n            );\n          }\n        }\n\n        function loadPrerenderManifest() {\n          try {\n            const content = fs\n              .readFileSync(\n                path.join(outputPath, \".next/prerender-manifest.json\"),\n              )\n              .toString();\n            return JSON.parse(content) as {\n              version: number;\n              routes: Record<string, unknown>;\n            };\n          } catch (e) {\n            console.debug(\"Failed to load prerender-manifest.json\", e);\n          }\n        }\n\n        function createRevalidationQueue() {\n          if (openNextOutput.additionalProps?.disableIncrementalCache)\n            return {};\n\n          const revalidationFunction =\n            openNextOutput.additionalProps?.revalidationFunction;\n          if (!revalidationFunction) return {};\n\n          const queue = new Queue(\n            `${name}RevalidationEvents`,\n            {\n              fifo: true,\n              transform: {\n                queue: (args) => {\n                  args.receiveWaitTimeSeconds = 20;\n                },\n              },\n            },\n            { parent },\n          );\n          const subscriber = queue.subscribe(\n            {\n              description: `${name} ISR revalidator`,\n              handler: revalidationFunction.handler,\n              bundle: path.join(outputPath, revalidationFunction.bundle),\n              runtime: \"nodejs20.x\",\n              timeout: \"30 seconds\",\n              permissions: [\n                {\n                  actions: [\n                    \"sqs:ChangeMessageVisibility\",\n                    \"sqs:DeleteMessage\",\n                    \"sqs:GetQueueAttributes\",\n                    \"sqs:GetQueueUrl\",\n                    \"sqs:ReceiveMessage\",\n                  ],\n                  resources: [queue.arn],\n                },\n              ],\n              dev: false,\n              _skipMetadata: true,\n            },\n            {\n              transform: {\n                eventSourceMapping: (args) => {\n                  args.batchSize = 5;\n                },\n              },\n            },\n            { parent },\n          );\n          return {\n            revalidationQueue: queue,\n            revalidationFunction: subscriber.nodes.function,\n          };\n        }\n\n        function createRevalidationTable() {\n          if (openNextOutput.additionalProps?.disableTagCache) return;\n\n          return new dynamodb.Table(\n            `${name}RevalidationTable`,\n            {\n              attributes: [\n                { name: \"tag\", type: \"S\" },\n                { name: \"path\", type: \"S\" },\n                { name: \"revalidatedAt\", type: \"N\" },\n              ],\n              hashKey: \"tag\",\n              rangeKey: \"path\",\n              pointInTimeRecovery: {\n                enabled: true,\n              },\n              billingMode: \"PAY_PER_REQUEST\",\n              globalSecondaryIndexes: [\n                {\n                  name: \"revalidate\",\n                  hashKey: \"path\",\n                  rangeKey: \"revalidatedAt\",\n                  projectionType: \"ALL\",\n                },\n              ],\n            },\n            { parent, retainOnDelete: false },\n          );\n        }\n\n        function createRevalidationTableSeeder() {\n          if (openNextOutput.additionalProps?.disableTagCache) return;\n          if (!openNextOutput.additionalProps?.initializationFunction) return;\n\n          // Provision 128MB of memory for every 4,000 prerendered routes,\n          // 1GB per 40,000, up to 10GB. This tends to use ~70% of the memory\n          // provisioned when testing.\n          const prerenderedRouteCount = Object.keys(\n            prerenderManifest?.routes ?? {},\n          ).length;\n          const seedFn = new Function(\n            `${name}RevalidationSeeder`,\n            {\n              description: `${name} ISR revalidation data seeder`,\n              handler:\n                openNextOutput.additionalProps.initializationFunction.handler,\n              bundle: path.join(\n                outputPath,\n                openNextOutput.additionalProps.initializationFunction.bundle,\n              ),\n              runtime: \"nodejs20.x\",\n              timeout: \"900 seconds\",\n              memory: `${Math.min(\n                10240,\n                Math.max(128, Math.ceil(prerenderedRouteCount / 4000) * 128),\n              )} MB`,\n              permissions: [\n                {\n                  actions: [\n                    \"dynamodb:BatchWriteItem\",\n                    \"dynamodb:PutItem\",\n                    \"dynamodb:DescribeTable\",\n                  ],\n                  resources: [revalidationTable!.arn],\n                },\n              ],\n              environment: {\n                CACHE_DYNAMO_TABLE: revalidationTable!.name,\n              },\n              dev: false,\n              _skipMetadata: true,\n              _skipHint: true,\n            },\n            { parent },\n          );\n          new lambda.Invocation(\n            `${name}RevalidationSeed`,\n            {\n              functionName: seedFn.nodes.function.name,\n              triggers: {\n                version: Date.now().toString(),\n              },\n              input: JSON.stringify({\n                RequestType: \"Create\",\n              }),\n            },\n            { parent },\n          );\n        }\n      },\n    );\n\n    this.revalidationQueue = ret.revalidationQueue;\n    this.revalidationTable = ret.revalidationTable;\n    this.revalidationFunction = output(ret.revalidationFunction);\n\n    return ret.plan;\n  }\n\n  /**\n   * The URL of the Next.js app.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      ...super.nodes,\n      /**\n       * The Amazon SQS queue that triggers the ISR revalidator.\n       */\n      revalidationQueue: this.revalidationQueue,\n      /**\n       * The Amazon DynamoDB table that stores the ISR revalidation data.\n       */\n      revalidationTable: this.revalidationTable,\n      /**\n       * The Lambda function that processes the ISR revalidation.\n       */\n      revalidationFunction: this.revalidationFunction,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Nextjs\";\n// @ts-expect-error\nNextjs.__pulumiType = __pulumiType;\n", "import { all, ComponentResourceOptions, Output } from \"@pulumi/pulumi\";\nimport { RandomPassword } from \"@pulumi/random\";\nimport { Component } from \"../component\";\nimport { FunctionArgs, Function } from \".\";\nimport { functionBuilder } from \"./helpers/function-builder\";\nimport { Input } from \"../input\";\n\nexport interface OpenControlArgs {\n  /**\n   * The function that's running your OpenControl server.\n   *\n   * @example\n   * ```js\n   * {\n   *   server: \"src/server.handler\"\n   * }\n   * ```\n   *\n   * You can also pass in the full `FunctionArgs`.\n   *\n   * ```js\n   * {\n   *   server: {\n   *     handler: \"src/server.handler\",\n   *     link: [table]\n   *   }\n   * }\n   * ```\n   *\n   * Since the `server` function is a Hono app, you want to export it with the Lambda adapter.\n   *\n   * ```ts title=\"src/server.ts\"\n   * import { handle } from \"hono/aws-lambda\";\n   * import { create } from \"opencontrol\";\n   *\n   * const app = create({\n   *   // ...\n   * });\n   *\n   * export const handler = handle(app);\n   * ```\n   *\n   * Learn more in the [OpenControl docs](https://opencontrol.ai) on how to\n   * configure the `server` function.\n   */\n  server: Input<string | FunctionArgs>;\n}\n\n/**\n * The `OpenControl` component lets you deploy your\n * [OpenControl](https://opencontrol.ai) server to\n * [AWS Lambda](https://aws.amazon.com/lambda/).\n *\n * :::note\n * OpenControl is currently in beta.\n * :::\n *\n * @example\n *\n * #### Create an OpenControl server\n *\n * ```ts title=\"sst.config.ts\"\n * const server = new sst.aws.OpenControl(\"MyServer\", {\n *   server: \"src/server.handler\"\n * });\n * ```\n *\n * #### Link your AI API keys \n *\n * ```ts title=\"sst.config.ts\" {6}\n * const anthropicKey = new sst.Secret(\"AnthropicKey\");\n *\n * const server = new sst.aws.OpenControl(\"MyServer\", {\n *   server: {\n *     handler: \"src/server.handler\",\n *     link: [anthropicKey]\n *   }\n * });\n * ```\n *\n * #### Link your resources\n *\n * If your tools are need access to specific resources, you can link them to the\n * OpenControl server.\n *\n * ```ts title=\"sst.config.ts\" {6}\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.OpenControl(\"MyServer\", {\n *   server: {\n *     handler: \"src/server.handler\",\n *     link: [bucket]\n *   }\n * });\n * ```\n *\n * #### Give AWS permissions\n *\n * If you are using the AWS tool within OpenControl, you will need to give\n * your OpenControl server permissions to access your AWS account.\n *\n * ```ts title=\"sst.config.ts\" {4-6}\n * new sst.aws.OpenControl(\"OpenControl\", {\n *   server: {\n *     handler: \"src/server.handler\",\n *     policies: $dev\n *       ? [\"arn:aws:iam::aws:policy/AdministratorAccess\"]\n *       : [\"arn:aws:iam::aws:policy/ReadOnlyAccess\"]\n *   }\n * });\n * ```\n *\n * Here we are giving it admin access in dev but read-only access in prod.\n *\n * #### Define your server\n *\n * Your `server` function might look like this.\n *\n * ```ts title=\"src/server.ts\"\n * import { Resource } from \"sst\";\n * import { create } from \"opencontrol\";\n * import { tool } from \"opencontrol/tool\";\n * import { handle } from \"hono/aws-lambda\";\n * import { createAnthropic } from \"@ai-sdk/anthropic\";\n *\n * const myTool = tool({\n *   name: \"my_tool\",\n *   description: \"Get the most popular greeting\",\n *   async run() {\n *     return \"Hello, world!\";\n *   }\n * });\n *\n * const app = create({\n *   model: createAnthropic({\n *     apiKey: Resource.AnthropicKey.value,\n *   })(\"claude-3-7-sonnet-20250219\"),\n *   tools: [myTool],\n * });\n *\n * export const handler = handle(app);\n * ```\n *\n * Learn more in the [OpenControl docs](https://opencontrol.ai) on how to configure\n * the `server` function.\n */\nexport class OpenControl extends Component {\n  private readonly _server: Output<Function>;\n  private readonly _key: Output<string>;\n\n  constructor(\n    name: string,\n    args: OpenControlArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n    const self = this;\n\n    const key = createKey();\n    const server = createServer();\n\n    this._server = server;\n    this._key = key;\n    registerOutputs();\n\n    function registerOutputs() {\n      self.registerOutputs({\n        _hint: self.url,\n      });\n    }\n\n    function createKey() {\n      return new RandomPassword(\n        `${name}Key`,\n        {\n          length: 16,\n          special: false,\n        },\n        { parent: self },\n      ).result;\n    }\n\n    function createServer() {\n      return functionBuilder(\n        `${name}Server`,\n        args.server,\n        {\n          link: [],\n          environment: {\n            OPENCONTROL_KEY: key,\n          },\n          url: true,\n          _skipHint: true,\n        },\n        (args) => {\n          args.url = {\n            cors: false,\n          };\n        },\n        { parent: self },\n      ).apply((v) => v.getFunction());\n    }\n  }\n\n  /**\n   * The URL of the OpenControl server.\n   */\n  public get url() {\n    return this._server.url;\n  }\n\n  /**\n   * The password for the OpenControl server.\n   */\n  public get password() {\n    return this._key;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Function component for the server.\n       */\n      server: this._server,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:OpenControl\";\n// @ts-expect-error\nOpenControl.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  interpolate,\n  jsonStringify,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { $print, Component, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport { Input } from \"../input.js\";\nimport { iam, opensearch, secretsmanager } from \"@pulumi/aws\";\nimport { RandomPassword } from \"@pulumi/random\";\nimport { VisibleError } from \"../error\";\nimport { SizeGbTb, toGBs } from \"../size\";\nimport { DevCommand } from \"../experimental/dev-command.js\";\n\nexport interface OpenSearchArgs {\n  /**\n   * The OpenSearch engine version. Check out the [available versions](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/what-is.html#choosing-version).\n   * @default `\"OpenSearch_2.17\"`\n   * @example\n   * ```js\n   * {\n   *   version: \"OpenSearch_2.5\"\n   * }\n   * ```\n   */\n  version?: Input<string>;\n  /**\n   * The username of the master user.\n   *\n   * :::caution\n   * Changing the username will cause the domain to be destroyed and recreated.\n   * :::\n   *\n   * @default `\"admin\"`\n   * @example\n   * ```js\n   * {\n   *   username: \"admin\"\n   * }\n   * ```\n   */\n  username?: Input<string>;\n  /**\n   * The password of the master user.\n   * @default A random password is generated.\n   * @example\n   * ```js\n   * {\n   *   password: \"^Passw0rd^\"\n   * }\n   * ```\n   *\n   * Use [Secrets](/docs/component/secret) to manage the password.\n   * ```js\n   * {\n   *   password: new sst.Secret(\"MyDomainPassword\").value\n   * }\n   * ```\n   */\n  password?: Input<string>;\n  /**\n   * The type of instance to use for the domain. Check out the [supported instance types](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/supported-instance-types.html).\n   *\n   * @default `\"t3.small\"`\n   * @example\n   * ```js\n   * {\n   *   instance: \"m6g.large\"\n   * }\n   * ```\n   */\n  instance?: Input<string>;\n  /**\n   * The storage limit for the domain.\n   *\n   * @default `\"10 GB\"`\n   * @example\n   * ```js\n   * {\n   *   storage: \"100 GB\"\n   * }\n   * ```\n   */\n  storage?: Input<SizeGbTb>;\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * By default, your OpenSearch domain is deployed in `sst dev`. But if you want to\n   * instead connect to a locally running OpenSearch, you can configure the `dev` prop.\n   *\n   * :::note\n   * By default, this creates a new OpenSearch domain even in `sst dev`.\n   * :::\n   *\n   * This will skip deploying an OpenSearch domain and link to the locally running\n   * OpenSearch process instead.\n   *\n   * @example\n   *\n   * Setting the `dev` prop also means that any linked resources will connect to the right\n   * instance both in `sst dev` and `sst deploy`.\n   *\n   * ```ts\n   * {\n   *   dev: {\n   *     username: \"admin\",\n   *     password: \"Passw0rd!\",\n   *     url: \"http://localhost:9200\"\n   *   }\n   * }\n   * ```\n   */\n  dev?: {\n    /**\n     * The URL of the local OpenSearch to connect to when running in dev.\n     * @default `\"http://localhost:9200\"`\n     */\n    url?: Input<string>;\n    /**\n     * The username of the local OpenSearch to connect to when running in dev.\n     * @default Inherit from the top-level [`username`](#username).\n     */\n    username?: Input<string>;\n    /**\n     * The password of the local OpenSearch to connect to when running in dev.\n     * @default Inherit from the top-level [`password`](#password).\n     */\n    password?: Input<string>;\n  };\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the OpenSearch domain.\n     */\n    domain?: Transform<opensearch.DomainArgs>;\n    /**\n     * Transform the OpenSearch domain policy.\n     */\n    policy?: Transform<iam.PolicyDocument>;\n  };\n}\n\ninterface OpenSearchRef {\n  ref: boolean;\n  id: Input<string>;\n}\n\n/**\n * The `OpenSearch` component lets you add a deployed instance of OpenSearch, or an\n * OpenSearch _domain_ to your app using [Amazon OpenSearch Service](https://docs.aws.amazon.com/opensearch-service/latest/developerguide/what-is.html).\n *\n * @example\n *\n * #### Create the instance\n *\n * ```js title=\"sst.config.ts\"\n * const search = new sst.aws.OpenSearch(\"MySearch\");\n * ```\n *\n * #### Link to a resource\n *\n * You can link your instance to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [search]\n * });\n * ```\n *\n * Once linked, you can connect to it from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,5-9}\n * import { Resource } from \"sst\";\n * import { Client } from \"@opensearch-project/opensearch\";\n *\n * const client = new Client({\n *   node: Resource.MySearch.url,\n *   auth: {\n *     username: Resource.MySearch.username,\n *     password: Resource.MySearch.password\n *   }\n * });\n *\n * // Add a document\n * await client.index({\n *   index: \"my-index\",\n *   body: { message: \"Hello world!\" }\n * });\n *\n * // Search for documents\n * const result = await client.search({\n *   index: \"my-index\",\n *   body: { query: { match: { message: \"world\" } } }\n * });\n * ```\n *\n * #### Running locally\n *\n * By default, your OpenSearch domain is deployed in `sst dev`. But let's say you are\n * running OpenSearch locally.\n *\n * ```bash\n * docker run \\\n *   --rm \\\n *   -p 9200:9200 \\\n *   -v $(pwd)/.sst/storage/opensearch:/usr/share/opensearch/data \\\n *   -e discovery.type=single-node \\\n *   -e plugins.security.disabled=true \\\n *   -e OPENSEARCH_INITIAL_ADMIN_PASSWORD=^Passw0rd^ \\\n *   opensearchproject/opensearch:2.17.0\n * ```\n *\n * You can connect to it in `sst dev` by configuring the `dev` prop.\n *\n * ```ts title=\"sst.config.ts\" {3-5}\n * const opensearch = new sst.aws.OpenSearch(\"MyOpenSearch\", {\n *   dev: {\n *     url: \"http://localhost:9200\",\n *     username: \"admin\",\n *     password: \"^Passw0rd^\"\n *   }\n * });\n * ```\n *\n * This will skip deploying an OpenSearch domain and link to the locally running\n * OpenSearch process instead.\n *\n * ---\n *\n * ### Cost\n *\n * By default this component uses a _Single-AZ Deployment_, _On-Demand Instances_ of a\n * `t3.small.search` at $0.036 per hour. And 10GB of _General Purpose gp3 Storage_\n * at $0.122 per GB per month.\n *\n * That works out to $0.036 x 24 x 30 + $0.122 x 10 or **$27 per month**. Adjust this for\n * the `instance` type and the `storage` you are using.\n *\n * The above are rough estimates for _us-east-1_, check out the [OpenSearch Service pricing](https://aws.amazon.com/opensearch-service/pricing/)\n * for more details.\n */\nexport class OpenSearch extends Component implements Link.Linkable {\n  private domain?: opensearch.Domain;\n  private _username?: Output<string>;\n  private _password?: Output<string>;\n  private dev?: {\n    enabled: boolean;\n    url: Output<string>;\n    username: Output<string>;\n    password: Output<string>;\n  };\n\n  constructor(\n    name: string,\n    args: OpenSearchArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const self = this;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.domain = ref.domain;\n      this._username = ref.username;\n      this._password = ref.password;\n      return;\n    }\n\n    const engineVersion = output(args.version).apply(\n      (v) => v ?? \"OpenSearch_2.17\",\n    );\n    const instanceType = output(args.instance).apply((v) => v ?? \"t3.small\");\n    const username = output(args.username).apply((v) => v ?? \"admin\");\n    const storage = normalizeStorage();\n\n    const dev = registerDev();\n    if (dev?.enabled) {\n      this.dev = dev;\n      return;\n    }\n\n    const password = createPassword();\n    const secret = createSecret();\n    const domain = createDomain();\n    const policy = createPolicy();\n\n    this.domain = domain;\n    this._username = username;\n    this._password = password;\n    this.registerOutputs({\n      _hint: this.url,\n    });\n\n    function reference() {\n      const ref = args as unknown as OpenSearchRef;\n      // Note: passing in `parent` causes Pulumi to lookup the current component's\n      //       generated ID for the Domain. Not the one passed int. Need to look into\n      //       this.\n      //const domain = opensearch.Domain.get(`${name}Domain`, ref.id, undefined, {\n      //  parent: self,\n      //});\n      const domain = opensearch.Domain.get(`${name}Domain`, ref.id);\n\n      const input = domain.tags.apply((tags) => {\n        if (!tags?.[\"sst:ref:username\"])\n          throw new VisibleError(\n            `Failed to get username for OpenSearch ${name}.`,\n          );\n        if (!tags?.[\"sst:ref:password\"])\n          throw new VisibleError(\n            `Failed to get password for OpenSearch ${name}.`,\n          );\n\n        return {\n          username: tags[\"sst:ref:username\"],\n          password: tags[\"sst:ref:password\"],\n        };\n      });\n\n      const secret = secretsmanager.getSecretVersionOutput(\n        { secretId: input.password },\n        { parent: self },\n      );\n      const password = $jsonParse(secret.secretString).apply(\n        (v) => v.password as string,\n      );\n\n      return { domain, username: input.username, password };\n    }\n\n    function normalizeStorage() {\n      return output(args.storage ?? \"10 GB\").apply((v) => {\n        const size = toGBs(v);\n        if (size < 10) {\n          throw new VisibleError(\n            `Storage must be at least 10 GB for the ${name} OpenSearch domain.`,\n          );\n        }\n        return size;\n      });\n    }\n\n    function registerDev() {\n      if (!args.dev) return undefined;\n\n      if (\n        $dev &&\n        args.dev.password === undefined &&\n        args.password === undefined\n      ) {\n        throw new VisibleError(\n          `You must provide the password to connect to your locally running OpenSearch domain either by setting the \"dev.password\" or by setting the top-level \"password\" property.`,\n        );\n      }\n\n      const dev = {\n        enabled: $dev,\n        url: output(args.dev.url ?? \"http://localhost:9200\"),\n        username: args.dev.username ? output(args.dev.username) : username,\n        password: output(args.dev.password ?? args.password ?? \"\"),\n      };\n\n      new DevCommand(`${name}Dev`, {\n        dev: {\n          title: name,\n          autostart: true,\n          command: `sst print-and-not-quit`,\n        },\n        environment: {\n          SST_DEV_COMMAND_MESSAGE: interpolate`Make sure your local OpenSearch server is using:\n\n  username: \"${dev.username}\"\n  password: \"${dev.password}\"\n\nListening on \"${dev.url}\"...`,\n        },\n      });\n\n      return dev;\n    }\n\n    function createPassword() {\n      return args.password\n        ? output(args.password)\n        : new RandomPassword(\n          `${name}Password`,\n          {\n            length: 32,\n            minLower: 1,\n            minUpper: 1,\n            minNumeric: 1,\n            minSpecial: 1,\n          },\n          { parent: self },\n        ).result;\n    }\n\n    function createSecret() {\n      const secret = new secretsmanager.Secret(\n        `${name}Secret`,\n        {\n          recoveryWindowInDays: 0,\n        },\n        { parent: self },\n      );\n\n      new secretsmanager.SecretVersion(\n        `${name}SecretVersion`,\n        {\n          secretId: secret.id,\n          secretString: jsonStringify({\n            username,\n            password,\n          }),\n        },\n        { parent: self },\n      );\n\n      return secret;\n    }\n\n    function createDomain() {\n      return new opensearch.Domain(\n        ...transform(\n          args.transform?.domain,\n          `${name}Domain`,\n          {\n            engineVersion,\n            clusterConfig: {\n              instanceType: interpolate`${instanceType}.search`,\n              instanceCount: 1,\n              dedicatedMasterEnabled: false,\n              zoneAwarenessEnabled: false,\n            },\n            ebsOptions: {\n              ebsEnabled: true,\n              volumeSize: storage,\n              volumeType: \"gp3\",\n            },\n            advancedSecurityOptions: {\n              enabled: true,\n              internalUserDatabaseEnabled: true,\n              masterUserOptions: {\n                masterUserName: username,\n                masterUserPassword: password,\n              },\n            },\n            nodeToNodeEncryption: {\n              enabled: true,\n            },\n            encryptAtRest: {\n              enabled: true,\n            },\n            domainEndpointOptions: {\n              enforceHttps: true,\n              tlsSecurityPolicy: \"Policy-Min-TLS-1-2-2019-07\",\n            },\n            tags: {\n              \"sst:ref:password\": secret.id,\n              \"sst:ref:username\": username,\n            },\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createPolicy() {\n      return new opensearch.DomainPolicy(\n        `${name}DomainPolicy`,\n        {\n          domainName: domain.domainName,\n          accessPolicies: iam.getPolicyDocumentOutput({\n            statements: [\n              {\n                principals: [{ type: \"*\", identifiers: [\"*\"] }],\n                actions: [\"*\"],\n                resources: [\"*\"],\n              },\n            ],\n          }).json,\n        },\n        { parent: self },\n      );\n    }\n  }\n\n  /**\n   * The ID of the OpenSearch component.\n   */\n  public get id() {\n    if (this.dev?.enabled) return output(\"placeholder\");\n    return this.domain!.id;\n  }\n\n  /** The username of the master user. */\n  public get username() {\n    if (this.dev?.enabled) return this.dev.username;\n    return this._username!;\n  }\n\n  /** The password of the master user. */\n  public get password() {\n    if (this.dev?.enabled) return this.dev.password;\n    return this._password!;\n  }\n\n  /**\n   * The endpoint of the domain.\n   */\n  public get url() {\n    if (this.dev?.enabled) return this.dev.url;\n    return interpolate`https://${this.domain!.endpoint}`;\n  }\n\n  public get nodes() {\n    return {\n      domain: this.domain,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        username: this.username,\n        password: this.password,\n        url: this.url,\n      },\n    };\n  }\n\n  /**\n   * Reference an existing OpenSearch domain with the given name. This is useful when you\n   * create a domain in one stage and want to share it in another. It avoids\n   * having to create a new domain in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share OpenSearch domains across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param id The ID of the existing OpenSearch component.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a domain in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new domain, you want to share the same domain from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const search = $app.stage === \"frank\"\n   *   ? sst.aws.OpenSearch.get(\"MyOpenSearch\", \"arn:aws:es:us-east-1:123456789012:domain/app-dev-myopensearch-efsmkrbt\")\n   *   : new sst.aws.OpenSearch(\"MyOpenSearch\");\n   * ```\n   *\n   * Here `arn:aws:es:us-east-1:123456789012:domain/app-dev-myopensearch-efsmkrbt` is the\n   * ID of the OpenSearch component created in the `dev` stage.\n   * You can find this by outputting the ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   id: search.id\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    id: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new OpenSearch(\n      name,\n      {\n        ref: true,\n        id,\n      } as unknown as OpenSearchArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:OpenSearch\";\n// @ts-expect-error\nOpenSearch.__pulumiType = __pulumiType;\n", "import {\n  all,\n  ComponentResourceOptions,\n  interpolate,\n  jsonStringify,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport { Input } from \"../input.js\";\nimport { iam, rds, secretsmanager } from \"@pulumi/aws\";\nimport { RandomPassword } from \"@pulumi/random\";\nimport { Vpc } from \"./vpc\";\nimport { Vpc as VpcV1 } from \"./vpc-v1\";\nimport { VisibleError } from \"../error\";\nimport { Postgres as PostgresV1 } from \"./postgres-v1\";\nimport { SizeGbTb, toGBs } from \"../size\";\nimport { DevCommand } from \"../experimental/dev-command.js\";\nimport { RdsRoleLookup } from \"./providers/rds-role-lookup\";\nexport type { PostgresArgs as PostgresV1Args } from \"./postgres-v1\";\n\nexport interface PostgresArgs {\n  /**\n   * The Postgres engine version. Check out the [available versions in your region](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/PostgreSQL.Concepts.General.DBVersions.html).\n   * @default `\"16.4\"`\n   * @example\n   * ```js\n   * {\n   *   version: \"17.2\"\n   * }\n   * ```\n   */\n  version?: Input<string>;\n  /**\n   * The username of the master user.\n   *\n   * :::caution\n   * Changing the username will cause the database to be destroyed and recreated.\n   * :::\n   *\n   * @default `\"postgres\"`\n   * @example\n   * ```js\n   * {\n   *   username: \"admin\"\n   * }\n   * ```\n   */\n  username?: Input<string>;\n  /**\n   * The password of the master user.\n   * @default A random password is generated.\n   * @example\n   * ```js\n   * {\n   *   password: \"Passw0rd!\"\n   * }\n   * ```\n   *\n   * You can use a `Secret` to manage the password.\n   *\n   * ```js\n   * {\n   *   password: new sst.Secret(\"MyDBPassword\").value\n   * }\n   * ```\n   */\n  password?: Input<string>;\n  /**\n   * Name of a database that is automatically created.\n   *\n   * The name must begin with a letter and contain only lowercase letters, numbers, or\n   * underscores. By default, it takes the name of the app, and replaces the hyphens with\n   * underscores.\n   *\n   * @default Based on the name of the current app\n   * @example\n   * ```js\n   * {\n   *   database: \"acme\"\n   * }\n   * ```\n   */\n  database?: Input<string>;\n  /**\n   * The type of instance to use for the database. Check out the [supported instance types](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.Types.html).\n   *\n   * @default `\"t4g.micro\"`\n   * @example\n   * ```js\n   * {\n   *   instance: \"m7g.xlarge\"\n   * }\n   * ```\n   *\n   * By default, these changes are not applied immediately by RDS. Instead, they are\n   * applied in the next maintenance window. Check out the [full list](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ModifyInstance.Settings.html)\n   * of props that are not applied immediately.\n   */\n  instance?: Input<string>;\n  /**\n   * The maximum storage limit for the database.\n   *\n   * RDS will autoscale your storage to match your usage up to the given limit.\n   * You are not billed for the maximum storage limit, You are only billed for the storage you use.\n   *\n   * :::note\n   * You are only billed for the storage you use, not the maximum limit.\n   * :::\n   *\n   * By default, [gp3 storage volumes](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#Concepts.Storage.GeneralSSD)\n   * are used without additional provisioned IOPS. This provides good baseline\n   * performance for most use cases.\n   *\n   * The minimum storage size is 20 GB. And the maximum storage size is 64 TB.\n   *\n   * @default `\"20 GB\"`\n   * @example\n   * ```js\n   * {\n   *   storage: \"100 GB\"\n   * }\n   * ```\n   */\n  storage?: Input<SizeGbTb>;\n  /**\n   * Enable [RDS Proxy](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-proxy.html) for the database.\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   proxy: true\n   * }\n   * ```\n   */\n  proxy?: Input<\n    | boolean\n    | {\n      /**\n       * Additional credentials the proxy can use to connect to the database. You don't\n       * need to specify the master user credentials as they are always added by default.\n       *\n       * :::note\n       * This component will not create the Postgres users listed here. You need to\n       * create them manually in the database.\n       * :::\n       *\n       * @example\n       * ```js\n       * {\n       *   credentials: [\n       *     {\n       *       username: \"metabase\",\n       *       password: \"Passw0rd!\"\n       *     }\n       *   ]\n       * }\n       * ```\n       *\n       * You can use a `Secret` to manage the password.\n       *\n       * ```js\n       * {\n       *   credentials: [\n       *     {\n       *       username: \"metabase\",\n       *       password: new sst.Secret(\"MyDBPassword\").value\n       *     }\n       *   ]\n       * }\n       * ```\n       */\n      credentials?: Input<\n        Input<{\n          /**\n           * The username of the user.\n           */\n          username: Input<string>;\n          /**\n           * The password of the user.\n           */\n          password: Input<string>;\n        }>[]\n      >;\n    }\n  >;\n  /**\n   * Enable [Multi-AZ](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html)\n   * deployment for the database.\n   *\n   * This creates a standby replica for the database in another availability zone (AZ). The\n   * standby database provides automatic failover in case the primary database fails. However,\n   * when the primary database is healthy, the standby database is not used for serving read\n   * traffic.\n   *\n   * :::caution\n   * Using Multi-AZ will approximately double the cost of the database since it will be\n   * deployed in two AZs.\n   * :::\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   multiAz: true\n   * }\n   * ```\n   */\n  multiAz?: Input<boolean>;\n  /**\n   * @internal\n   */\n  replicas?: Input<number>;\n  /**\n   * The VPC subnets to use for the database.\n   *\n   * @example\n   * ```js\n   * {\n   *   vpc: {\n   *     subnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"]\n   *   }\n   * }\n   * ```\n   *\n   * Or create a `Vpc` component.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * And pass it in. The database will be placed in the private subnets.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   */\n  vpc:\n  | Vpc\n  | Input<{\n    /**\n     * A list of subnet IDs in the VPC.\n     */\n    subnets: Input<Input<string>[]>;\n  }>;\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * By default, your Postgres database is deployed in `sst dev`. But if you want to instead\n   * connect to a locally running Postgres database, you can configure the `dev` prop.\n   *\n   * :::note\n   * This will not create an RDS database in `sst dev`.\n   * :::\n   *\n   * This will skip deploying an RDS database and link to the locally running Postgres database\n   * instead.\n   *\n   * @example\n   *\n   * Setting the `dev` prop also means that any linked resources will connect to the right\n   * database both in `sst dev` and `sst deploy`.\n   *\n   * ```ts\n   * {\n   *   dev: {\n   *     username: \"postgres\",\n   *     password: \"password\",\n   *     database: \"postgres\",\n   *     host: \"localhost\",\n   *     port: 5432\n   *   }\n   * }\n   * ```\n   */\n  dev?: {\n    /**\n     * The host of the local Postgres to connect to when running in dev.\n     * @default `\"localhost\"`\n     */\n    host?: Input<string>;\n    /**\n     * The port of the local Postgres to connect to when running in dev.\n     * @default `5432`\n     */\n    port?: Input<number>;\n    /**\n     * The database of the local Postgres to connect to when running in dev.\n     * @default Inherit from the top-level [`database`](#database).\n     */\n    database?: Input<string>;\n    /**\n     * The username of the local Postgres to connect to when running in dev.\n     * @default Inherit from the top-level [`username`](#username).\n     */\n    username?: Input<string>;\n    /**\n     * The password of the local Postgres to connect to when running in dev.\n     * @default Inherit from the top-level [`password`](#password).\n     */\n    password?: Input<string>;\n  };\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the RDS subnet group.\n     */\n    subnetGroup?: Transform<rds.SubnetGroupArgs>;\n    /**\n     * Transform the RDS parameter group.\n     */\n    parameterGroup?: Transform<rds.ParameterGroupArgs>;\n    /**\n     * Transform the database instance in the RDS Cluster.\n     */\n    instance?: Transform<rds.InstanceArgs>;\n    /**\n     * Transform the RDS Proxy.\n     */\n    proxy?: Transform<rds.ProxyArgs>;\n  };\n}\n\nexport interface PostgresGetArgs {\n  /**\n   * The ID of the database.\n   */\n  id: Input<string>;\n  /**\n   * The ID of the proxy.\n   */\n  proxyId?: Input<string>;\n}\n\ninterface PostgresRef {\n  ref: boolean;\n  id: Input<string>;\n  proxyId?: Input<string>;\n}\n\n/**\n * The `Postgres` component lets you add a Postgres database to your app using\n * [Amazon RDS Postgres](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html).\n *\n * @example\n *\n * #### Create the database\n *\n * ```js title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const database = new sst.aws.Postgres(\"MyDatabase\", { vpc });\n * ```\n *\n * #### Link to a resource\n *\n * You can link your database to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [database],\n *   vpc\n * });\n * ```\n *\n * Once linked, you can connect to it from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,5-9}\n * import { Resource } from \"sst\";\n * import { Pool } from \"pg\";\n *\n * const client = new Pool({\n *   user: Resource.MyDatabase.username,\n *   password: Resource.MyDatabase.password,\n *   database: Resource.MyDatabase.database,\n *   host: Resource.MyDatabase.host,\n *   port: Resource.MyDatabase.port,\n * });\n * await client.connect();\n * ```\n *\n * #### Running locally\n *\n * By default, your RDS Postgres database is deployed in `sst dev`. But let's say you are running\n * Postgres locally.\n *\n * ```bash\n * docker run \\\n *   --rm \\\n *   -p 5432:5432 \\\n *   -v $(pwd)/.sst/storage/postgres:/var/lib/postgresql/data \\\n *   -e POSTGRES_USER=postgres \\\n *   -e POSTGRES_PASSWORD=password \\\n *   -e POSTGRES_DB=local \\\n *   postgres:16.4\n * ```\n *\n * You can connect to it in `sst dev` by configuring the `dev` prop.\n *\n * ```ts title=\"sst.config.ts\" {3-8}\n * const postgres = new sst.aws.Postgres(\"MyPostgres\", {\n *   vpc,\n *   dev: {\n *     username: \"postgres\",\n *     password: \"password\",\n *     database: \"local\",\n *     port: 5432\n *   }\n * });\n * ```\n *\n * This will skip deploying an RDS database and link to the locally running Postgres database\n * instead. [Check out the full example](/docs/examples/#aws-postgres-local).\n *\n * ---\n *\n * ### Cost\n *\n * By default this component uses a _Single-AZ Deployment_, _On-Demand DB Instances_ of a\n * `db.t4g.micro` at $0.016 per hour. And 20GB of _General Purpose gp3 Storage_\n * at $0.115 per GB per month.\n *\n * That works out to $0.016 x 24 x 30 + $0.115 x 20 or **$14 per month**. Adjust this for the\n * `instance` type and the `storage` you are using.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [RDS for PostgreSQL pricing](https://aws.amazon.com/rds/postgresql/pricing/#On-Demand_DB_Instances_costs) for more details.\n *\n * #### RDS Proxy\n *\n * If you enable the `proxy`, it uses _Provisioned instances_ with 2 vCPUs at $0.015 per hour.\n *\n * That works out to an **additional** $0.015 x 2 x 24 x 30 or **$22 per month**.\n *\n * This is a rough estimate for _us-east-1_, check out the\n * [RDS Proxy pricing](https://aws.amazon.com/rds/proxy/pricing/) for more details.\n */\nexport class Postgres extends Component implements Link.Linkable {\n  private instance?: rds.Instance;\n  private _password?: Output<string>;\n  private proxy?: Output<rds.Proxy | undefined>;\n  private dev?: {\n    enabled: boolean;\n    host: Output<string>;\n    port: Output<number>;\n    username: Output<string>;\n    password: Output<string>;\n    database: Output<string>;\n  };\n  public static v1 = PostgresV1;\n\n  constructor(\n    name: string,\n    args: PostgresArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n    const _version = 2;\n    const self = this;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.instance = ref.instance;\n      this._password = ref.password;\n      this.proxy = output(ref.proxy);\n      return;\n    }\n\n    registerVersion();\n    const multiAz = output(args.multiAz).apply((v) => v ?? false);\n    const engineVersion = output(args.version).apply((v) => v ?? \"16.4\");\n    const instanceType = output(args.instance).apply((v) => v ?? \"t4g.micro\");\n    const username = output(args.username).apply((v) => v ?? \"postgres\");\n    const storage = normalizeStorage();\n    const dbName = output(args.database).apply(\n      (v) => v ?? $app.name.replaceAll(\"-\", \"_\"),\n    );\n    const vpc = normalizeVpc();\n\n    const dev = registerDev();\n    if (dev?.enabled) {\n      this.dev = dev;\n      return;\n    }\n\n    const password = createPassword();\n    const secret = createSecret();\n    const subnetGroup = createSubnetGroup();\n    const parameterGroup = createParameterGroup();\n    const instance = createInstance();\n    createReplicas();\n    const proxy = createProxy();\n\n    this.instance = instance;\n    this._password = password;\n    this.proxy = proxy;\n\n    function reference() {\n      const ref = args as unknown as PostgresRef;\n      const instance = rds.Instance.get(`${name}Instance`, ref.id, undefined, {\n        parent: self,\n      });\n\n      const input = instance.tags.apply((tags) => {\n        registerVersion(\n          tags?.[\"sst:component-version\"]\n            ? parseInt(tags[\"sst:component-version\"])\n            : undefined,\n        );\n\n        return {\n          proxyId: output(ref.proxyId),\n          passwordTag: tags?.[\"sst:lookup:password\"],\n        };\n      });\n\n      const proxy = input.proxyId.apply((proxyId) =>\n        proxyId\n          ? rds.Proxy.get(`${name}Proxy`, proxyId, undefined, {\n            parent: self,\n          })\n          : undefined,\n      );\n\n      const password = input.passwordTag.apply((passwordTag) => {\n        if (!passwordTag)\n          throw new VisibleError(\n            `Failed to get password for Postgres ${name}.`,\n          );\n\n        const secret = secretsmanager.getSecretVersionOutput(\n          { secretId: passwordTag },\n          { parent: self },\n        );\n        return $jsonParse(secret.secretString).apply(\n          (v) => v.password as string,\n        );\n      });\n\n      return { instance, proxy, password };\n    }\n\n    function registerVersion(overrideVersion?: number) {\n      self.registerVersion({\n        new: _version,\n        old: overrideVersion ?? $cli.state.version[name],\n        message: [\n          `This component has been renamed. Please change:\\n`,\n          `\"sst.aws.Postgres\" to \"sst.aws.Postgres.v${$cli.state.version[name]}\"\\n`,\n          `Learn more https://sst.dev/docs/components/#versioning`,\n        ].join(\"\\n\"),\n      });\n    }\n\n    function normalizeStorage() {\n      return output(args.storage ?? \"20 GB\").apply((v) => {\n        const size = toGBs(v);\n        if (size < 20) {\n          throw new VisibleError(\n            `Storage must be at least 20 GB for the ${name} Postgres database.`,\n          );\n        }\n        if (size > 65536) {\n          throw new VisibleError(\n            `Storage cannot be greater than 65536 GB (64 TB) for the ${name} Postgres database.`,\n          );\n        }\n        return size;\n      });\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc.v1 component\n      if (args.vpc instanceof VpcV1) {\n        throw new VisibleError(\n          `You are using the \"Vpc.v1\" component. Please migrate to the latest \"Vpc\" component.`,\n        );\n      }\n\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        return {\n          subnets: args.vpc.privateSubnets,\n        };\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc);\n    }\n\n    function registerDev() {\n      if (!args.dev) return undefined;\n\n      if (\n        $dev &&\n        args.dev.password === undefined &&\n        args.password === undefined\n      ) {\n        throw new VisibleError(\n          `You must provide the password to connect to your locally running Postgres database either by setting the \"dev.password\" or by setting the top-level \"password\" property.`,\n        );\n      }\n\n      const dev = {\n        enabled: $dev,\n        host: output(args.dev.host ?? \"localhost\"),\n        port: output(args.dev.port ?? 5432),\n        username: args.dev.username ? output(args.dev.username) : username,\n        password: output(args.dev.password ?? args.password ?? \"\"),\n        database: args.dev.database ? output(args.dev.database) : dbName,\n      };\n\n      new DevCommand(`${name}Dev`, {\n        dev: {\n          title: name,\n          autostart: true,\n          command: `sst print-and-not-quit`,\n        },\n        environment: {\n          SST_DEV_COMMAND_MESSAGE: interpolate`Make sure your local PostgreSQL server is using:\n\n  username: \"${dev.username}\"\n  password: \"${dev.password}\"\n  database: \"${dev.database}\"\n\nListening on \"${dev.host}:${dev.port}\"...`,\n        },\n      });\n\n      return dev;\n    }\n\n    function createPassword() {\n      return args.password\n        ? output(args.password)\n        : new RandomPassword(\n          `${name}Password`,\n          {\n            length: 32,\n            special: false,\n          },\n          { parent: self },\n        ).result;\n    }\n\n    function createSubnetGroup() {\n      return new rds.SubnetGroup(\n        ...transform(\n          args.transform?.subnetGroup,\n          `${name}SubnetGroup`,\n          {\n            subnetIds: vpc.subnets,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createParameterGroup() {\n      return new rds.ParameterGroup(\n        ...transform(\n          args.transform?.parameterGroup,\n          `${name}ParameterGroup`,\n          {\n            family: engineVersion.apply((v) => `postgres${v.split(\".\")[0]}`),\n            parameters: [\n              {\n                name: \"rds.force_ssl\",\n                value: \"0\",\n              },\n              {\n                name: \"rds.logical_replication\",\n                value: \"1\",\n                applyMethod: \"pending-reboot\",\n              },\n            ],\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createSecret() {\n      const secret = new secretsmanager.Secret(\n        `${name}ProxySecret`,\n        {\n          recoveryWindowInDays: 0,\n        },\n        { parent: self },\n      );\n\n      new secretsmanager.SecretVersion(\n        `${name}ProxySecretVersion`,\n        {\n          secretId: secret.id,\n          secretString: jsonStringify({\n            username,\n            password,\n          }),\n        },\n        { parent: self },\n      );\n\n      return secret;\n    }\n\n    function createInstance() {\n      return new rds.Instance(\n        ...transform(\n          args.transform?.instance,\n          `${name}Instance`,\n          {\n            dbName,\n            dbSubnetGroupName: subnetGroup.name,\n            engine: \"postgres\",\n            engineVersion,\n            instanceClass: interpolate`db.${instanceType}`,\n            username,\n            password,\n            parameterGroupName: parameterGroup.name,\n            skipFinalSnapshot: true,\n            storageEncrypted: true,\n            storageType: \"gp3\",\n            allocatedStorage: 20,\n            maxAllocatedStorage: storage,\n            multiAz,\n            backupRetentionPeriod: 7,\n            performanceInsightsEnabled: true,\n            tags: {\n              \"sst:component-version\": _version.toString(),\n              \"sst:lookup:password\": secret.id,\n            },\n          },\n          { parent: self, deleteBeforeReplace: true },\n        ),\n      );\n    }\n\n    function createReplicas() {\n      return output(args.replicas ?? 0).apply((replicas) =>\n        Array.from({ length: replicas }).map(\n          (_, i) =>\n            new rds.Instance(\n              `${name}Replica${i}`,\n              {\n                replicateSourceDb: instance.identifier,\n                dbName: interpolate`${instance.dbName}_replica${i}`,\n                dbSubnetGroupName: instance.dbSubnetGroupName,\n                availabilityZone: instance.availabilityZone,\n                engine: instance.engine,\n                engineVersion: instance.engineVersion,\n                instanceClass: instance.instanceClass,\n                username: instance.username,\n                password: instance.password.apply((v) => v!),\n                parameterGroupName: instance.parameterGroupName,\n                skipFinalSnapshot: true,\n                storageEncrypted: instance.storageEncrypted.apply((v) => v!),\n                storageType: instance.storageType,\n                allocatedStorage: instance.allocatedStorage,\n                maxAllocatedStorage: instance.maxAllocatedStorage.apply(\n                  (v) => v!,\n                ),\n              },\n              { parent: self },\n            ),\n        ),\n      );\n    }\n\n    function createProxy() {\n      return output(args.proxy).apply((proxy) => {\n        if (!proxy) return;\n\n        const credentials = proxy === true ? [] : proxy.credentials ?? [];\n\n        // Create secrets\n        const secrets = credentials.map((credential) => {\n          const secret = new secretsmanager.Secret(\n            `${name}ProxySecret${credential.username}`,\n            {\n              recoveryWindowInDays: 0,\n            },\n            { parent: self },\n          );\n\n          new secretsmanager.SecretVersion(\n            `${name}ProxySecretVersion${credential.username}`,\n            {\n              secretId: secret.id,\n              secretString: jsonStringify({\n                username: credential.username,\n                password: credential.password,\n              }),\n            },\n            { parent: self },\n          );\n          return secret;\n        });\n\n        const role = new iam.Role(\n          `${name}ProxyRole`,\n          {\n            assumeRolePolicy: iam.assumeRolePolicyForPrincipal({\n              Service: \"rds.amazonaws.com\",\n            }),\n            inlinePolicies: [\n              {\n                name: \"inline\",\n                policy: iam.getPolicyDocumentOutput({\n                  statements: [\n                    {\n                      actions: [\"secretsmanager:GetSecretValue\"],\n                      resources: [secret.arn, ...secrets.map((s) => s.arn)],\n                    },\n                  ],\n                }).json,\n              },\n            ],\n          },\n          { parent: self },\n        );\n\n        const lookup = new RdsRoleLookup(\n          `${name}ProxyRoleLookup`,\n          { name: \"AWSServiceRoleForRDS\" },\n          { parent: self },\n        );\n\n        const rdsProxy = new rds.Proxy(\n          ...transform(\n            args.transform?.proxy,\n            `${name}Proxy`,\n            {\n              engineFamily: \"POSTGRESQL\",\n              auths: [\n                {\n                  authScheme: \"SECRETS\",\n                  iamAuth: \"DISABLED\",\n                  secretArn: secret.arn,\n                },\n                ...secrets.map((s) => ({\n                  authScheme: \"SECRETS\",\n                  iamAuth: \"DISABLED\",\n                  secretArn: s.arn,\n                })),\n              ],\n              roleArn: role.arn,\n              vpcSubnetIds: vpc.subnets,\n            },\n            { parent: self, dependsOn: [lookup] },\n          ),\n        );\n\n        const targetGroup = new rds.ProxyDefaultTargetGroup(\n          `${name}ProxyTargetGroup`,\n          {\n            dbProxyName: rdsProxy.name,\n          },\n          { parent: self },\n        );\n\n        new rds.ProxyTarget(\n          `${name}ProxyTarget`,\n          {\n            dbProxyName: rdsProxy.name,\n            targetGroupName: targetGroup.name,\n            dbInstanceIdentifier: instance.identifier,\n          },\n          { parent: self },\n        );\n\n        return rdsProxy;\n      });\n    }\n  }\n\n  /**\n   * The identifier of the Postgres instance.\n   */\n  public get id() {\n    if (this.dev?.enabled) return output(\"placeholder\");\n    return this.instance!.identifier;\n  }\n\n  /**\n   * The name of the Postgres proxy.\n   */\n  public get proxyId() {\n    if (this.dev?.enabled) return output(\"placeholder\");\n\n    return this.proxy!.apply((v) => {\n      if (!v) {\n        throw new VisibleError(\n          `Proxy is not enabled. Enable it with \"proxy: true\".`,\n        );\n      }\n      return v.id;\n    });\n  }\n\n  /** The username of the master user. */\n  public get username() {\n    if (this.dev?.enabled) return this.dev.username;\n    return this.instance!.username;\n  }\n\n  /** The password of the master user. */\n  public get password() {\n    if (this.dev?.enabled) return this.dev.password;\n    return this._password!;\n  }\n\n  /**\n   * The name of the database.\n   */\n  public get database() {\n    if (this.dev?.enabled) return this.dev.database;\n    return this.instance!.dbName;\n  }\n\n  /**\n   * The port of the database.\n   */\n  public get port() {\n    if (this.dev?.enabled) return this.dev.port;\n    return this.instance!.port;\n  }\n\n  /**\n   * The host of the database.\n   */\n  public get host() {\n    if (this.dev?.enabled) return this.dev.host;\n\n    return all([this.instance!.endpoint, this.proxy!]).apply(\n      ([endpoint, proxy]) => proxy?.endpoint ?? output(endpoint.split(\":\")[0]),\n    );\n  }\n\n  public get nodes() {\n    return {\n      instance: this.instance,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        database: this.database,\n        username: this.username,\n        password: this.password,\n        port: this.port,\n        host: this.host,\n      },\n    };\n  }\n\n  /**\n   * Reference an existing Postgres database with the given name. This is useful when you\n   * create a Postgres database in one stage and want to share it in another. It avoids\n   * having to create a new Postgres database in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share Postgres databases across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param args The arguments to get the Postgres database.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a database in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new database, you want to share the same database from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const database = $app.stage === \"frank\"\n   *   ? sst.aws.Postgres.get(\"MyDatabase\", {\n   *       id: \"app-dev-mydatabase\",\n   *       proxyId: \"app-dev-mydatabase-proxy\"\n   *     })\n   *   : new sst.aws.Postgres(\"MyDatabase\", {\n   *       proxy: true\n   *     });\n   * ```\n   *\n   * Here `app-dev-mydatabase` is the ID of the database, and `app-dev-mydatabase-proxy`\n   * is the ID of the proxy created in the `dev` stage. You can find these by outputting\n   * the database ID and proxy ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   id: database.id,\n   *   proxyId: database.proxyId\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    args: PostgresGetArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Postgres(\n      name,\n      {\n        ref: true,\n        id: args.id,\n        proxyId: args.proxyId,\n      } as unknown as PostgresArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Postgres\";\n// @ts-expect-error\nPostgres.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  jsonParse,\n  output,\n  Output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component.js\";\nimport { Link } from \"../link.js\";\nimport { Input } from \"../input.js\";\nimport { rds, secretsmanager } from \"@pulumi/aws\";\nimport { permission } from \"./permission.js\";\n\ntype ACU = `${number} ACU`;\n\nfunction parseACU(acu: ACU) {\n  const result = parseFloat(acu.split(\" \")[0]);\n  return result;\n}\n\nexport interface PostgresArgs {\n  /**\n   * The Postgres engine version. Check out the [available versions in your region](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.ServerlessV2.html#Concepts.Aurora_Fea_Regions_DB-eng.Feature.ServerlessV2.apg).\n   * @default `\"15.5\"`\n   * @example\n   * ```js\n   * {\n   *   version: \"13.9\"\n   * }\n   * ```\n   */\n  version?: Input<string>;\n  /**\n   * Name of a database that is automatically created inside the cluster.\n   *\n   * The name must begin with a letter and contain only lowercase letters, numbers, or underscores. By default, it takes the name of the app, and replaces the hyphens with underscores.\n   *\n   * @default Based on the name of the current app\n   * @example\n   * ```js\n   * {\n   *   databaseName: \"acme\"\n   * }\n   * ```\n   */\n  databaseName?: Input<string>;\n  /**\n   * The Aurora Serverless v2 scaling config. By default, the cluster has one DB instance that\n   * is used for both writes and reads. The instance can scale from the minimum number of ACUs\n   * to the maximum number of ACUs.\n   *\n   * :::caution\n   * Aurora Serverless v2 does not scale down to 0. The minimum cost of a Postgres cluster\n   * per month is roughly `0.5 * $0.12 per ACU hour * 24 hrs * 30 days = $43.20`.\n   * :::\n   *\n   * An ACU or Aurora Capacity Unit is a combination of CPU and RAM. The cost of an Aurora Serverless v2 cluster is based on the ACU hours\n   * used. Additionally, you are billed for I/O and storage used by the cluster.\n   * [Read more here](https://aws.amazon.com/rds/aurora/pricing/).\n   *\n   * Each ACU is roughly equivalent to 2 GB of memory. So pick the minimum and maximum\n   * based on the baseline and peak memory usage of your app.\n   *\n   * @default `{min: \"0.5 ACU\", max: \"4 ACU\"}`\n   */\n  scaling?: Input<{\n    /**\n     * The minimum number of ACUs, ranges from 0.5 to 128, in increments of 0.5.\n     *\n     * For your production workloads, setting a minimum of 0.5 ACUs might not be a great idea due\n     * to the following reasons, you can also [read more here](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.setting-capacity.html#aurora-serverless-v2.setting-capacity.incompatible_parameters).\n     * - It takes longer to scale from a low number of ACUs to a much higher number.\n     * - Query performance depends on the buffer cache. So if frequently accessed data cannot\n     *   fit into the buffer cache, you might see uneven performance.\n     * - The max connections for a 0.5 ACU Postgres instance is capped at 2000.\n     *\n     * @default `0.5 ACU`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     min: \"2 ACU\"\n     *   }\n     * }\n     * ```\n     */\n    min?: Input<ACU>;\n    /**\n     * The maximum number of ACUs, ranges from 1 to 128, in increments of 0.5.\n     *\n     * @default `4 ACU`\n     * @example\n     * ```js\n     * {\n     *   scaling: {\n     *     max: \"128 ACU\"\n     *   }\n     * }\n     * ```\n     */\n    max?: Input<ACU>;\n  }>;\n  /**\n   * The VPC to use for the database cluster.\n   *\n   * Each AWS account has a default VPC. If `default` is specified, the default VPC is used.\n   *\n   * :::note\n   * The default VPC does not have private subnets and is not recommended for production use.\n   * :::\n   *\n   * @example\n   * ```js\n   * {\n   *   vpc: {\n   *     privateSubnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"],\n   *     securityGroups: [\"sg-0399348378a4c256c\"],\n   *   }\n   * }\n   * ```\n   *\n   * Or create a `Vpc` component.\n   *\n   * ```js\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   */\n  vpc:\n    | \"default\"\n    | Input<{\n        /**\n         * A list of private subnet IDs in the VPC. The database will be placed in the private\n         * subnets.\n         */\n        privateSubnets: Input<Input<string>[]>;\n        /**\n         * A list of VPC security group IDs.\n         */\n        securityGroups: Input<Input<string>[]>;\n      }>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the RDS subnet group.\n     */\n    subnetGroup?: Transform<rds.SubnetGroupArgs>;\n    /**\n     * Transform the RDS Cluster.\n     */\n    cluster?: Transform<rds.ClusterArgs>;\n    /**\n     * Transform the database instance in the RDS Cluster.\n     */\n    instance?: Transform<rds.ClusterInstanceArgs>;\n  };\n}\n\ninterface PostgresRef {\n  ref: boolean;\n  cluster: rds.Cluster;\n  instance: rds.ClusterInstance;\n}\n\n/**\n * The `Postgres` component lets you add a Postgres database to your app using\n * [Amazon Aurora Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html).\n *\n * For existing usage, rename `sst.aws.Postgres` to `sst.aws.Postgres.v1`. For new Postgres, use\n * the latest [`Postgres`](/docs/component/aws/postgres) component instead.\n *\n * :::caution\n * This component has been deprecated.\n * :::\n *\n * What changed:\n * - In this version, the database used AWS RDS Aurora Serverless v2, which supported RDS\n * Data API. This allowed your machine to connect to the database during \"sst dev\" without\n * the need for a VPN.\n * - In the new version, the database now uses AWS RDS Postgres. The \"sst.aws.Vpc\" component\n * has been enhanced to set up a secure tunnel, enabling seamlessly connections to the\n * database. Postgres provides greater flexibility and wider feature support while being\n * cheaper to run.\n *\n * :::note\n * Data API for Aurora Postgres Serverless v2 is still being [rolled out in all regions](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.Aurora_Fea_Regions_DB-eng.Feature.ServerlessV2.html#Concepts.Aurora_Fea_Regions_DB-eng.Feature.ServerlessV2.apg).\n * :::\n *\n * To connect to your database from your Lambda functions, you can use the\n * [AWS Data API](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html). It\n * does not need a persistent connection, and works over HTTP. You also don't need a VPN to\n * connect to it locally.\n *\n * @example\n *\n * #### Create the database\n *\n * ```js title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const database = new sst.aws.Postgres.v1(\"MyDatabase\", { vpc });\n * ```\n *\n * #### Change the scaling config\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.Postgres.v1(\"MyDatabase\", {\n *   scaling: {\n *     min: \"2 ACU\",\n *     max: \"128 ACU\"\n *   },\n *   vpc\n * });\n * ```\n *\n * #### Link to a resource\n *\n * You can link your database to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [database],\n *   vpc\n * });\n * ```\n *\n * Once linked, you can connect to it from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,6,7,8}\n * import { Resource } from \"sst\";\n * import { drizzle } from \"drizzle-orm/aws-data-api/pg\";\n * import { RDSDataClient } from \"@aws-sdk/client-rds-data\";\n *\n * drizzle(new RDSDataClient({}), {\n *   database: Resource.MyDatabase.database,\n *   secretArn: Resource.MyDatabase.secretArn,\n *   resourceArn: Resource.MyDatabase.clusterArn\n * });\n * ```\n */\nexport class Postgres extends Component implements Link.Linkable {\n  private cluster: rds.Cluster;\n  private instance: rds.ClusterInstance;\n\n  constructor(\n    name: string,\n    args: PostgresArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    if (args && \"ref\" in args) {\n      const ref = args as unknown as PostgresRef;\n      this.cluster = ref.cluster;\n      this.instance = ref.instance;\n      return;\n    }\n\n    const parent = this;\n    const scaling = normalizeScaling();\n    const version = normalizeVersion();\n    const databaseName = normalizeDatabaseName();\n\n    const subnetGroup = createSubnetGroup();\n    const cluster = createCluster();\n    const instance = createInstance();\n\n    this.cluster = cluster;\n    this.instance = instance;\n\n    function normalizeScaling() {\n      return output(args.scaling).apply((scaling) => ({\n        minCapacity: parseACU(scaling?.min ?? \"0.5 ACU\"),\n        maxCapacity: parseACU(scaling?.max ?? \"4 ACU\"),\n      }));\n    }\n\n    function normalizeVersion() {\n      return output(args.version).apply((version) => version ?? \"15.5\");\n    }\n\n    function normalizeDatabaseName() {\n      return output(args.databaseName).apply(\n        (name) => name ?? $app.name.replaceAll(\"-\", \"_\"),\n      );\n    }\n\n    function createSubnetGroup() {\n      if (args.vpc === \"default\") return;\n      return new rds.SubnetGroup(\n        ...transform(\n          args.transform?.subnetGroup,\n          `${name}SubnetGroup`,\n          {\n            subnetIds: output(args.vpc).privateSubnets,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createCluster() {\n      return new rds.Cluster(\n        ...transform(\n          args.transform?.cluster,\n          `${name}Cluster`,\n          {\n            engine: rds.EngineType.AuroraPostgresql,\n            engineMode: \"provisioned\",\n            engineVersion: version,\n            databaseName,\n            masterUsername: \"postgres\",\n            manageMasterUserPassword: true,\n            serverlessv2ScalingConfiguration: scaling,\n            skipFinalSnapshot: true,\n            enableHttpEndpoint: true,\n            dbSubnetGroupName: subnetGroup?.name,\n            vpcSecurityGroupIds:\n              args.vpc === \"default\"\n                ? undefined\n                : output(args.vpc).securityGroups,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createInstance() {\n      return new rds.ClusterInstance(\n        ...transform(\n          args.transform?.instance,\n          `${name}Instance`,\n          {\n            clusterIdentifier: cluster.id,\n            instanceClass: \"db.serverless\",\n            engine: rds.EngineType.AuroraPostgresql,\n            engineVersion: cluster.engineVersion,\n            dbSubnetGroupName: subnetGroup?.name,\n          },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  private _dbSecret?: Output<secretsmanager.GetSecretVersionResult> | undefined;\n  private get secret() {\n    return this.secretArn.apply((val) => {\n      if (this._dbSecret) return this._dbSecret;\n      if (!val) return;\n      this._dbSecret = secretsmanager.getSecretVersionOutput({\n        secretId: val,\n      });\n      return this._dbSecret;\n    });\n  }\n\n  /**\n   * The ID of the RDS Cluster.\n   */\n  public get clusterID() {\n    return this.cluster.id;\n  }\n\n  /**\n   * The ARN of the RDS Cluster.\n   */\n  public get clusterArn() {\n    return this.cluster.arn;\n  }\n\n  /**\n   * The ARN of the master user secret.\n   */\n  public get secretArn() {\n    return this.cluster.masterUserSecrets[0].secretArn;\n  }\n\n  /** The username of the master user. */\n  public get username() {\n    return this.cluster.masterUsername;\n  }\n\n  /** The password of the master user. */\n  public get password() {\n    return this.cluster.masterPassword.apply((val) => {\n      if (val) return output(val);\n      const parsed = jsonParse(\n        this.secret.apply((secret) =>\n          secret ? secret.secretString : output(\"{}\"),\n        ),\n      ) as Output<{ username: string; password: string }>;\n      return parsed.password;\n    });\n  }\n\n  /**\n   * The name of the database.\n   */\n  public get database() {\n    return this.cluster.databaseName;\n  }\n\n  /**\n   * The port of the database.\n   */\n  public get port() {\n    return this.instance.port;\n  }\n\n  /**\n   * The host of the database.\n   */\n  public get host() {\n    return this.instance.endpoint;\n  }\n\n  public get nodes() {\n    return {\n      cluster: this.cluster,\n      instance: this.instance,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        clusterArn: this.clusterArn,\n        secretArn: this.secretArn,\n        database: this.cluster.databaseName,\n        username: this.username,\n        password: this.password,\n        port: this.port,\n        host: this.host,\n      },\n      include: [\n        permission({\n          actions: [\"secretsmanager:GetSecretValue\"],\n          resources: [\n            this.cluster.masterUserSecrets[0].secretArn.apply(\n              (v) => v ?? \"arn:aws:iam::rdsdoesnotusesecretmanager\",\n            ),\n          ],\n        }),\n        permission({\n          actions: [\n            \"rds-data:BatchExecuteStatement\",\n            \"rds-data:BeginTransaction\",\n            \"rds-data:CommitTransaction\",\n            \"rds-data:ExecuteStatement\",\n            \"rds-data:RollbackTransaction\",\n          ],\n          resources: [this.cluster.arn],\n        }),\n      ],\n    };\n  }\n\n  /**\n   * Reference an existing Postgres cluster with the given cluster name. This is useful when you\n   * create a Postgres cluster in one stage and want to share it in another. It avoids having to\n   * create a new Postgres cluster in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share Postgres clusters across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param clusterID The id of the existing Postgres cluster.\n   *\n   * @example\n   * Imagine you create a cluster in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new cluster, you want to share the same cluster from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const database = $app.stage === \"frank\"\n   *   ? sst.aws.Postgres.v1.get(\"MyDatabase\", \"app-dev-mydatabase\")\n   *   : new sst.aws.Postgres.v1(\"MyDatabase\");\n   * ```\n   *\n   * Here `app-dev-mydatabase` is the ID of the cluster created in the `dev` stage.\n   * You can find this by outputting the cluster ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   cluster: database.clusterID\n   * };\n   * ```\n   */\n  public static get(name: string, clusterID: Input<string>) {\n    const cluster = rds.Cluster.get(`${name}Cluster`, clusterID);\n    const instances = rds.getInstancesOutput({\n      filters: [{ name: \"db-cluster-id\", values: [clusterID] }],\n    });\n    const instance = rds.ClusterInstance.get(\n      `${name}Instance`,\n      instances.apply((instances) => {\n        if (instances.instanceIdentifiers.length === 0)\n          throw new Error(`No instance found for cluster ${clusterID}`);\n        return instances.instanceIdentifiers[0];\n      }),\n    );\n    return new Postgres(name, {\n      ref: true,\n      cluster,\n      instance,\n    } as unknown as PostgresArgs);\n  }\n}\n\nconst __pulumiType = \"sst:aws:Postgres\";\n// @ts-expect-error\nPostgres.__pulumiType = __pulumiType;\n", "import {\n  all,\n  ComponentResourceOptions,\n  interpolate,\n  jsonStringify,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport { Input } from \"../input.js\";\nimport { iam, rds, secretsmanager } from \"@pulumi/aws\";\nimport { RandomPassword } from \"@pulumi/random\";\nimport { Vpc } from \"./vpc\";\nimport { Vpc as VpcV1 } from \"./vpc-v1\";\nimport { VisibleError } from \"../error\";\nimport { SizeGbTb, toGBs } from \"../size\";\nimport { DevCommand } from \"../experimental/dev-command.js\";\nimport { RdsRoleLookup } from \"./providers/rds-role-lookup\";\n\nexport interface MysqlArgs {\n  /**\n   * The MySQL engine version. Check out the [available versions in your region](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Concepts.VersionMgmt.html).\n   * @default `\"8.0.40\"`\n   * @example\n   * ```js\n   * {\n   *   version: \"8.4.4\"\n   * }\n   * ```\n   */\n  version?: Input<string>;\n  /**\n   * The username of the master user.\n   *\n   * :::caution\n   * Changing the username will cause the database to be destroyed and recreated.\n   * :::\n   *\n   * @default `\"root\"`\n   * @example\n   * ```js\n   * {\n   *   username: \"admin\"\n   * }\n   * ```\n   */\n  username?: Input<string>;\n  /**\n   * The password of the master user.\n   * @default A random password is generated.\n   * @example\n   * ```js\n   * {\n   *   password: \"Passw0rd!\"\n   * }\n   * ```\n   *\n   * You can use a `Secret` to manage the password.\n   *\n   * ```js\n   * {\n   *   password: new sst.Secret(\"MyDBPassword\").value\n   * }\n   * ```\n   */\n  password?: Input<string>;\n  /**\n   * Name of a database that is automatically created.\n   *\n   * The name must begin with a letter and contain only lowercase letters, numbers, or\n   * underscores. By default, it takes the name of the app, and replaces the hyphens with\n   * underscores.\n   *\n   * @default Based on the name of the current app\n   * @example\n   * ```js\n   * {\n   *   database: \"acme\"\n   * }\n   * ```\n   */\n  database?: Input<string>;\n  /**\n   * The type of instance to use for the database. Check out the [supported instance types](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.Types.html).\n   *\n   * @default `\"t4g.micro\"`\n   * @example\n   * ```js\n   * {\n   *   instance: \"m7g.xlarge\"\n   * }\n   * ```\n   *\n   * By default, these changes are not applied immediately by RDS. Instead, they are\n   * applied in the next maintenance window. Check out the [full list](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_ModifyInstance.Settings.html)\n   * of props that are not applied immediately.\n   */\n  instance?: Input<string>;\n  /**\n   * The maximum storage limit for the database.\n   *\n   * RDS will autoscale your storage to match your usage up to the given limit.\n   * You are not billed for the maximum storage limit, You are only billed for the storage you use.\n   *\n   * :::note\n   * You are only billed for the storage you use, not the maximum limit.\n   * :::\n   *\n   * By default, [gp3 storage volumes](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#Concepts.Storage.GeneralSSD)\n   * are used without additional provisioned IOPS. This provides good baseline\n   * performance for most use cases.\n   *\n   * The minimum storage size is 20 GB. And the maximum storage size is 64 TB.\n   *\n   * @default `\"20 GB\"`\n   * @example\n   * ```js\n   * {\n   *   storage: \"100 GB\"\n   * }\n   * ```\n   */\n  storage?: Input<SizeGbTb>;\n  /**\n   * Enable [RDS Proxy](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/rds-proxy.html) for the database.\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   proxy: true\n   * }\n   * ```\n   */\n  proxy?: Input<\n    | boolean\n    | {\n      /**\n       * Additional credentials the proxy can use to connect to the database. You don't\n       * need to specify the master user credentials as they are always added by default.\n       *\n       * :::note\n       * This component will not create the MySQL users listed here. You need to\n       * create them manually in the database.\n       * :::\n       *\n       * @example\n       * ```js\n       * {\n       *   credentials: [\n       *     {\n       *       username: \"metabase\",\n       *       password: \"Passw0rd!\"\n       *     }\n       *   ]\n       * }\n       * ```\n       *\n       * You can use a `Secret` to manage the password.\n       *\n       * ```js\n       * {\n       *   credentials: [\n       *     {\n       *       username: \"metabase\",\n       *       password: new sst.Secret(\"MyDBPassword\").value\n       *     }\n       *   ]\n       * }\n       * ```\n       */\n      credentials?: Input<\n        Input<{\n          /**\n           * The username of the user.\n           */\n          username: Input<string>;\n          /**\n           * The password of the user.\n           */\n          password: Input<string>;\n        }>[]\n      >;\n    }\n  >;\n  /**\n   * Enable [Multi-AZ](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.MultiAZ.html)\n   * deployment for the database.\n   *\n   * This creates a standby replica for the database in another availability zone (AZ). The\n   * standby database provides automatic failover in case the primary database fails. However,\n   * when the primary database is healthy, the standby database is not used for serving read\n   * traffic.\n   *\n   * :::caution\n   * Using Multi-AZ will approximately double the cost of the database since it will be\n   * deployed in two AZs.\n   * :::\n   *\n   * @default `false`\n   * @example\n   * ```js\n   * {\n   *   multiAz: true\n   * }\n   * ```\n   */\n  multiAz?: Input<boolean>;\n  /**\n   * @internal\n   */\n  replicas?: Input<number>;\n  /**\n   * The VPC subnets to use for the database.\n   *\n   * @example\n   * ```js\n   * {\n   *   vpc: {\n   *     subnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"]\n   *   }\n   * }\n   * ```\n   *\n   * Or create a `Vpc` component.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * And pass it in. The database will be placed in the private subnets.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   */\n  vpc:\n  | Vpc\n  | Input<{\n    /**\n     * A list of subnet IDs in the VPC.\n     */\n    subnets: Input<Input<string>[]>;\n  }>;\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * By default, your MySQL database is deployed in `sst dev`. But if you want to instead\n   * connect to a locally running MySQL database, you can configure the `dev` prop.\n   *\n   * :::note\n   * This will not create an RDS database in `sst dev`.\n   * :::\n   *\n   * This will skip deploying an RDS database and link to the locally running MySQL database\n   * instead.\n   *\n   * @example\n   *\n   * Setting the `dev` prop also means that any linked resources will connect to the right\n   * database both in `sst dev` and `sst deploy`.\n   *\n   * ```ts\n   * {\n   *   dev: {\n   *     username: \"root\",\n   *     password: \"password\",\n   *     database: \"mysql\",\n   *     host: \"localhost\",\n   *     port: 3306\n   *   }\n   * }\n   * ```\n   */\n  dev?: {\n    /**\n     * The host of the local MySQL to connect to when running in dev.\n     * @default `\"localhost\"`\n     */\n    host?: Input<string>;\n    /**\n     * The port of the local MySQL to connect to when running in dev.\n     * @default `3306`\n     */\n    port?: Input<number>;\n    /**\n     * The database of the local MySQL to connect to when running in dev.\n     * @default Inherit from the top-level [`database`](#database).\n     */\n    database?: Input<string>;\n    /**\n     * The username of the local MySQL to connect to when running in dev.\n     * @default Inherit from the top-level [`username`](#username).\n     */\n    username?: Input<string>;\n    /**\n     * The password of the local MySQL to connect to when running in dev.\n     * @default Inherit from the top-level [`password`](#password).\n     */\n    password?: Input<string>;\n  };\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the RDS subnet group.\n     */\n    subnetGroup?: Transform<rds.SubnetGroupArgs>;\n    /**\n     * Transform the RDS parameter group.\n     */\n    parameterGroup?: Transform<rds.ParameterGroupArgs>;\n    /**\n     * Transform the database instance in the RDS Cluster.\n     */\n    instance?: Transform<rds.InstanceArgs>;\n    /**\n     * Transform the RDS Proxy.\n     */\n    proxy?: Transform<rds.ProxyArgs>;\n  };\n}\n\nexport interface MysqlGetArgs {\n  /**\n   * The ID of the database.\n   */\n  id: Input<string>;\n  /**\n   * The ID of the proxy.\n   */\n  proxyId?: Input<string>;\n}\n\ninterface MysqlRef {\n  ref: boolean;\n  id: Input<string>;\n  proxyId?: Input<string>;\n}\n\n/**\n * The `Mysql` component lets you add a MySQL database to your app using\n * [Amazon RDS MySQL](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html).\n *\n * @example\n *\n * #### Create the database\n *\n * ```js title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const database = new sst.aws.Mysql(\"MyDatabase\", { vpc });\n * ```\n *\n * #### Link to a resource\n *\n * You can link your database to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [database],\n *   vpc\n * });\n * ```\n *\n * Once linked, you can connect to it from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,5-9}\n * import { Resource } from \"sst\";\n * import mysql from \"mysql2/promise\";\n *\n * const connection = await mysql.createConnection({\n *   user: Resource.MyDatabase.username,\n *   password: Resource.MyDatabase.password,\n *   database: Resource.MyDatabase.database,\n *   host: Resource.MyDatabase.host,\n *   port: Resource.MyDatabase.port,\n * });\n * await connection.execute(\"SELECT NOW()\");\n * ```\n *\n * #### Running locally\n *\n * By default, your RDS MySQL database is deployed in `sst dev`. But let's say you are\n * running MySQL locally.\n *\n * ```bash\n * docker run \\\n *   --rm \\\n *   -p 3306:3306 \\\n *   -v $(pwd)/.sst/storage/mysql:/var/lib/mysql/data \\\n *   -e MYSQL_DATABASE=local \\\n *   -e MYSQL_ROOT_PASSWORD=password \\\n *   mysql:8.0\n * ```\n *\n * You can connect to it in `sst dev` by configuring the `dev` prop.\n *\n * ```ts title=\"sst.config.ts\" {3-8}\n * const mysql = new sst.aws.Mysql(\"MyMysql\", {\n *   vpc,\n *   dev: {\n *     username: \"root\",\n *     password: \"password\",\n *     database: \"local\",\n *     port: 3306\n *   }\n * });\n * ```\n *\n * This will skip deploying an RDS database and link to the locally running MySQL database\n * instead.\n *\n * ---\n *\n * ### Cost\n *\n * By default this component uses a _Single-AZ Deployment_, _On-Demand DB Instances_ of a\n * `db.t4g.micro` at $0.016 per hour. And 20GB of _General Purpose gp3 Storage_\n * at $0.115 per GB per month.\n *\n * That works out to $0.016 x 24 x 30 + $0.115 x 20 or **$14 per month**. Adjust this for the\n * `instance` type and the `storage` you are using.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [RDS for MySQL pricing](https://aws.amazon.com/rds/mysql/pricing/#On-Demand_DB_Instances_costs) for more details.\n *\n * #### RDS Proxy\n *\n * If you enable the `proxy`, it uses _Provisioned instances_ with 2 vCPUs at $0.015 per hour.\n *\n * That works out to an **additional** $0.015 x 2 x 24 x 30 or **$22 per month**.\n *\n * This is a rough estimate for _us-east-1_, check out the\n * [RDS Proxy pricing](https://aws.amazon.com/rds/proxy/pricing/) for more details.\n */\nexport class Mysql extends Component implements Link.Linkable {\n  private instance?: rds.Instance;\n  private _password?: Output<string>;\n  private proxy?: Output<rds.Proxy | undefined>;\n  private dev?: {\n    enabled: boolean;\n    host: Output<string>;\n    port: Output<number>;\n    username: Output<string>;\n    password: Output<string>;\n    database: Output<string>;\n  };\n\n  constructor(name: string, args: MysqlArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n    const _version = 1;\n    const self = this;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.instance = ref.instance;\n      this._password = ref.password;\n      this.proxy = output(ref.proxy);\n      return;\n    }\n\n    const multiAz = output(args.multiAz).apply((v) => v ?? false);\n    const engineVersion = output(args.version).apply((v) => v ?? \"8.0.40\");\n    const instanceType = output(args.instance).apply((v) => v ?? \"t4g.micro\");\n    const username = output(args.username).apply((v) => v ?? \"root\");\n    const storage = normalizeStorage();\n    const dbName = output(args.database).apply(\n      (v) => v ?? $app.name.replaceAll(\"-\", \"_\"),\n    );\n    const vpc = normalizeVpc();\n\n    const dev = registerDev();\n    if (dev?.enabled) {\n      this.dev = dev;\n      return;\n    }\n\n    const password = createPassword();\n    const secret = createSecret();\n    const subnetGroup = createSubnetGroup();\n    const parameterGroup = createParameterGroup();\n    const instance = createInstance();\n    createReplicas();\n    const proxy = createProxy();\n\n    this.instance = instance;\n    this._password = password;\n    this.proxy = proxy;\n\n    function reference() {\n      const ref = args as unknown as MysqlRef;\n      const instance = rds.Instance.get(`${name}Instance`, ref.id, undefined, {\n        parent: self,\n      });\n\n      const input = instance.tags.apply((tags) => {\n        return {\n          proxyId: output(ref.proxyId),\n          passwordTag: tags?.[\"sst:ref:password\"],\n        };\n      });\n\n      const proxy = input.proxyId.apply((proxyId) =>\n        proxyId\n          ? rds.Proxy.get(`${name}Proxy`, proxyId, undefined, {\n            parent: self,\n          })\n          : undefined,\n      );\n\n      const password = input.passwordTag.apply((passwordTag) => {\n        if (!passwordTag)\n          throw new VisibleError(`Failed to get password for MySQL ${name}.`);\n\n        const secret = secretsmanager.getSecretVersionOutput(\n          { secretId: passwordTag },\n          { parent: self },\n        );\n        return $jsonParse(secret.secretString).apply(\n          (v) => v.password as string,\n        );\n      });\n\n      return { instance, proxy, password };\n    }\n\n    function normalizeStorage() {\n      return output(args.storage ?? \"20 GB\").apply((v) => {\n        const size = toGBs(v);\n        if (size < 20) {\n          throw new VisibleError(\n            `Storage must be at least 20 GB for the ${name} MySQL database.`,\n          );\n        }\n        if (size > 65536) {\n          throw new VisibleError(\n            `Storage cannot be greater than 65536 GB (64 TB) for the ${name} MySQL database.`,\n          );\n        }\n        return size;\n      });\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc.v1 component\n      if (args.vpc instanceof VpcV1) {\n        throw new VisibleError(\n          `You are using the \"Vpc.v1\" component. Please migrate to the latest \"Vpc\" component.`,\n        );\n      }\n\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        return {\n          subnets: args.vpc.privateSubnets,\n        };\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc);\n    }\n\n    function registerDev() {\n      if (!args.dev) return undefined;\n\n      if (\n        $dev &&\n        args.dev.password === undefined &&\n        args.password === undefined\n      ) {\n        throw new VisibleError(\n          `You must provide the password to connect to your locally running MySQL database either by setting the \"dev.password\" or by setting the top-level \"password\" property.`,\n        );\n      }\n\n      const dev = {\n        enabled: $dev,\n        host: output(args.dev.host ?? \"localhost\"),\n        port: output(args.dev.port ?? 3306),\n        username: args.dev.username ? output(args.dev.username) : username,\n        password: output(args.dev.password ?? args.password ?? \"\"),\n        database: args.dev.database ? output(args.dev.database) : dbName,\n      };\n\n      new DevCommand(`${name}Dev`, {\n        dev: {\n          title: name,\n          autostart: true,\n          command: `sst print-and-not-quit`,\n        },\n        environment: {\n          SST_DEV_COMMAND_MESSAGE: interpolate`Make sure your local MySQL server is using:\n\n  username: \"${dev.username}\"\n  password: \"${dev.password}\"\n  database: \"${dev.database}\"\n\nListening on \"${dev.host}:${dev.port}\"...`,\n        },\n      });\n\n      return dev;\n    }\n\n    function createPassword() {\n      return args.password\n        ? output(args.password)\n        : new RandomPassword(\n          `${name}Password`,\n          {\n            length: 32,\n            special: false,\n          },\n          { parent: self },\n        ).result;\n    }\n\n    function createSubnetGroup() {\n      return new rds.SubnetGroup(\n        ...transform(\n          args.transform?.subnetGroup,\n          `${name}SubnetGroup`,\n          {\n            subnetIds: vpc.subnets,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createParameterGroup() {\n      return new rds.ParameterGroup(\n        ...transform(\n          args.transform?.parameterGroup,\n          `${name}ParameterGroup`,\n          {\n            family: engineVersion.apply((v) => {\n              const [major, minor, _patch] = v.split(\".\");\n              return `mysql${major}.${minor}`;\n            }),\n            parameters: [\n              {\n                name: \"require_secure_transport\",\n                value: \"OFF\",\n              },\n            ],\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createSecret() {\n      const secret = new secretsmanager.Secret(\n        `${name}ProxySecret`,\n        {\n          recoveryWindowInDays: 0,\n        },\n        { parent: self },\n      );\n\n      new secretsmanager.SecretVersion(\n        `${name}ProxySecretVersion`,\n        {\n          secretId: secret.id,\n          secretString: jsonStringify({\n            username,\n            password,\n          }),\n        },\n        { parent: self },\n      );\n\n      return secret;\n    }\n\n    function createInstance() {\n      return new rds.Instance(\n        ...transform(\n          args.transform?.instance,\n          `${name}Instance`,\n          {\n            dbName,\n            dbSubnetGroupName: subnetGroup.name,\n            engine: \"mysql\",\n            engineVersion,\n            instanceClass: interpolate`db.${instanceType}`,\n            username,\n            password,\n            parameterGroupName: parameterGroup.name,\n            skipFinalSnapshot: true,\n            storageEncrypted: true,\n            storageType: \"gp3\",\n            allocatedStorage: 20,\n            maxAllocatedStorage: storage,\n            multiAz,\n            backupRetentionPeriod: 7,\n            // performance insights is only supported on .micro and .small MySQL instances\n            // https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.Overview.Engines.html\n            performanceInsightsEnabled: instanceType.apply(\n              (v) => !v.endsWith(\".micro\") && !v.endsWith(\".small\"),\n            ),\n            tags: {\n              \"sst:component-version\": _version.toString(),\n              \"sst:ref:password\": secret.id,\n            },\n          },\n          { parent: self, deleteBeforeReplace: true },\n        ),\n      );\n    }\n\n    function createReplicas() {\n      return output(args.replicas ?? 0).apply((replicas) =>\n        Array.from({ length: replicas }).map(\n          (_, i) =>\n            new rds.Instance(\n              `${name}Replica${i}`,\n              {\n                replicateSourceDb: instance.identifier,\n                dbName: interpolate`${instance.dbName}_replica${i}`,\n                dbSubnetGroupName: instance.dbSubnetGroupName,\n                availabilityZone: instance.availabilityZone,\n                engine: instance.engine,\n                engineVersion: instance.engineVersion,\n                instanceClass: instance.instanceClass,\n                username: instance.username,\n                password: instance.password.apply((v) => v!),\n                parameterGroupName: instance.parameterGroupName,\n                skipFinalSnapshot: true,\n                storageEncrypted: instance.storageEncrypted.apply((v) => v!),\n                storageType: instance.storageType,\n                allocatedStorage: instance.allocatedStorage,\n                maxAllocatedStorage: instance.maxAllocatedStorage.apply(\n                  (v) => v!,\n                ),\n              },\n              { parent: self },\n            ),\n        ),\n      );\n    }\n\n    function createProxy() {\n      return output(args.proxy).apply((proxy) => {\n        if (!proxy) return;\n\n        const credentials = proxy === true ? [] : proxy.credentials ?? [];\n\n        // Create secrets\n        const secrets = credentials.map((credential) => {\n          const secret = new secretsmanager.Secret(\n            `${name}ProxySecret${credential.username}`,\n            {\n              recoveryWindowInDays: 0,\n            },\n            { parent: self },\n          );\n\n          new secretsmanager.SecretVersion(\n            `${name}ProxySecretVersion${credential.username}`,\n            {\n              secretId: secret.id,\n              secretString: jsonStringify({\n                username: credential.username,\n                password: credential.password,\n              }),\n            },\n            { parent: self },\n          );\n          return secret;\n        });\n\n        const role = new iam.Role(\n          `${name}ProxyRole`,\n          {\n            assumeRolePolicy: iam.assumeRolePolicyForPrincipal({\n              Service: \"rds.amazonaws.com\",\n            }),\n            inlinePolicies: [\n              {\n                name: \"inline\",\n                policy: iam.getPolicyDocumentOutput({\n                  statements: [\n                    {\n                      actions: [\"secretsmanager:GetSecretValue\"],\n                      resources: [secret.arn, ...secrets.map((s) => s.arn)],\n                    },\n                  ],\n                }).json,\n              },\n            ],\n          },\n          { parent: self },\n        );\n\n        const lookup = new RdsRoleLookup(\n          `${name}ProxyRoleLookup`,\n          { name: \"AWSServiceRoleForRDS\" },\n          { parent: self },\n        );\n\n        const rdsProxy = new rds.Proxy(\n          ...transform(\n            args.transform?.proxy,\n            `${name}Proxy`,\n            {\n              engineFamily: \"MYSQL\",\n              auths: [\n                {\n                  authScheme: \"SECRETS\",\n                  iamAuth: \"DISABLED\",\n                  secretArn: secret.arn,\n                },\n                ...secrets.map((s) => ({\n                  authScheme: \"SECRETS\",\n                  iamAuth: \"DISABLED\",\n                  secretArn: s.arn,\n                })),\n              ],\n              roleArn: role.arn,\n              vpcSubnetIds: vpc.subnets,\n            },\n            { parent: self, dependsOn: [lookup] },\n          ),\n        );\n\n        const targetGroup = new rds.ProxyDefaultTargetGroup(\n          `${name}ProxyTargetGroup`,\n          {\n            dbProxyName: rdsProxy.name,\n          },\n          { parent: self },\n        );\n\n        new rds.ProxyTarget(\n          `${name}ProxyTarget`,\n          {\n            dbProxyName: rdsProxy.name,\n            targetGroupName: targetGroup.name,\n            dbInstanceIdentifier: instance.identifier,\n          },\n          { parent: self },\n        );\n\n        return rdsProxy;\n      });\n    }\n  }\n\n  /**\n   * The identifier of the MySQL instance.\n   */\n  public get id() {\n    if (this.dev?.enabled) return output(\"placeholder\");\n    return this.instance!.identifier;\n  }\n\n  /**\n   * The name of the MySQL proxy.\n   */\n  public get proxyId() {\n    if (this.dev?.enabled) return output(\"placeholder\");\n\n    return this.proxy!.apply((v) => {\n      if (!v) {\n        throw new VisibleError(\n          `Proxy is not enabled. Enable it with \"proxy: true\".`,\n        );\n      }\n      return v.id;\n    });\n  }\n\n  /** The username of the master user. */\n  public get username() {\n    if (this.dev?.enabled) return this.dev.username;\n    return this.instance!.username;\n  }\n\n  /** The password of the master user. */\n  public get password() {\n    if (this.dev?.enabled) return this.dev.password;\n    return this._password!;\n  }\n\n  /**\n   * The name of the database.\n   */\n  public get database() {\n    if (this.dev?.enabled) return this.dev.database;\n    return this.instance!.dbName;\n  }\n\n  /**\n   * The port of the database.\n   */\n  public get port() {\n    if (this.dev?.enabled) return this.dev.port;\n    return this.instance!.port;\n  }\n\n  /**\n   * The host of the database.\n   */\n  public get host() {\n    if (this.dev?.enabled) return this.dev.host;\n\n    return all([this.instance!.endpoint, this.proxy!]).apply(\n      ([endpoint, proxy]) => proxy?.endpoint ?? output(endpoint.split(\":\")[0]),\n    );\n  }\n\n  public get nodes() {\n    return {\n      instance: this.instance,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        database: this.database,\n        username: this.username,\n        password: this.password,\n        port: this.port,\n        host: this.host,\n      },\n    };\n  }\n\n  /**\n   * Reference an existing MySQL database with the given name. This is useful when you\n   * create a MySQL database in one stage and want to share it in another. It avoids\n   * having to create a new MySQL database in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share MySQL databases across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param args The arguments to get the MySQL database.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a database in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new database, you want to share the same database from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const database = $app.stage === \"frank\"\n   *   ? sst.aws.Mysql.get(\"MyDatabase\", {\n   *       id: \"app-dev-mydatabase\",\n   *       proxyId: \"app-dev-mydatabase-proxy\"\n   *     })\n   *   : new sst.aws.Mysql(\"MyDatabase\", {\n   *       proxy: true\n   *     });\n   * ```\n   *\n   * Here `app-dev-mydatabase` is the ID of the database, and `app-dev-mydatabase-proxy`\n   * is the ID of the proxy created in the `dev` stage. You can find these by outputting\n   * the database ID and proxy ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   id: database.id,\n   *   proxyId: database.proxyId\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    args: MysqlGetArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Mysql(\n      name,\n      {\n        ref: true,\n        id: args.id,\n        proxyId: args.proxyId,\n      } as unknown as MysqlArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Mysql\";\n// @ts-expect-error\nMysql.__pulumiType = __pulumiType;\n", "import { ComponentResourceOptions, Output, all } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { Link } from \"../link\";\nimport type { Input } from \"../input\";\nimport { Function, FunctionArgs, FunctionArn } from \"./function\";\nimport { hashStringToPrettyString, logicalName } from \"../naming\";\nimport { RealtimeLambdaSubscriber } from \"./realtime-lambda-subscriber\";\nimport { iot, lambda } from \"@pulumi/aws\";\nimport { permission } from \"./permission\";\n\nexport interface RealtimeArgs {\n  /**\n   * The Lambda function that'll be used to authorize the client on connection.\n   * @example\n   * ```js\n   * {\n   *   authorizer: \"src/authorizer.handler\"\n   * }\n   * ```\n   */\n  authorizer: Input<string | FunctionArgs>;\n  /**\n   * [Transform](/docs/components#transform) how this subscription creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the IoT authorizer resource.\n     */\n    authorizer?: Transform<iot.AuthorizerArgs>;\n  };\n}\n\nexport interface RealtimeSubscriberArgs {\n  /**\n   * Filter the topics that'll be processed by the subscriber.\n   *\n   * :::tip\n   * Learn more about [topic filters](https://docs.aws.amazon.com/iot/latest/developerguide/topics.html#topicfilters).\n   * :::\n   *\n   * @example\n   * Subscribe to a specific topic.\n   * ```js\n   * {\n   *   filter: `${$app.name}/${$app.stage}/chat/room1`\n   * }\n   * ```\n   *\n   * Subscribe to all topics under a prefix.\n   * ```js\n   * {\n   *   filter: `${$app.name}/${$app.stage}/chat/#`\n   * }\n   * ```\n   */\n  filter: Input<string>;\n  /**\n   * [Transform](/docs/components#transform) how this subscription creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the IoT Topic rule resource.\n     */\n    topicRule?: Transform<iot.TopicRuleArgs>;\n  };\n}\n\n/**\n * The `Realtime` component lets you publish and subscribe to messages in realtime.\n *\n * It offers a **topic-based** messaging network using [AWS IoT](https://docs.aws.amazon.com/iot/latest/developerguide/what-is-aws-iot.html). Letting you publish and subscribe to messages using\n * a WebSocket in the browser and your server.\n *\n * Also, provides an [SDK](#sdk) to authorize clients, grant permissions to subscribe, and\n * publish to topics.\n *\n * :::note\n * IoT is shared across all apps and stages in your AWS account. So you need to prefix the\n * topics by the app and stage name.\n * :::\n *\n * There is **only 1 IoT endpoint** per region per AWS account. Messages from all apps and\n * stages are published to the same IoT endpoint. Make sure to prefix the topics by the\n * app and stage name.\n *\n * @example\n *\n * #### Create a realtime endpoint\n *\n * ```ts title=\"sst.config.ts\"\n * const server = new sst.aws.Realtime(\"MyServer\", {\n *   authorizer: \"src/authorizer.handler\"\n * });\n * ```\n *\n * #### Authorize the client\n *\n * ```ts title=\"src/authorizer.ts\" \"realtime.authorizer\"\n * import { Resource } from \"sst/aws\";\n * import { realtime } from \"sst/aws/realtime\";\n *\n * export const handler = realtime.authorizer(async (token) => {\n *   // Validate the token\n *\n *   // Return the topics to subscribe and publish\n *   return {\n *     subscribe: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],\n *     publish: [`${Resource.App.name}/${Resource.App.stage}/chat/room1`],\n *   };\n * });\n * ```\n *\n * #### Publish and receive messages in your frontend\n *\n * ```ts title=\"app/page.tsx\"\n * import { Resource } from \"sst/aws\";\n *\n * const client = new mqtt.MqttClient();\n * // Configure with\n * // - Resource.Realtime.endpoint\n * // - Resource.Realtime.authorizer\n * const connection = client.new_connection(config);\n *\n * // Subscribe messages\n * connection.on(\"message\", (topic, payload) => {\n *   // Handle the message\n * });\n *\n * // Publish messages\n * connection.publish(topic, payload, mqtt.QoS.AtLeastOnce);\n * ```\n *\n * #### Subscribe messages in your backend\n *\n * ```ts title=\"sst.config.ts\"\n * server.subscribe(\"src/subscriber.handler\", {\n *   filter: `${$app.name}/${$app.stage}/chat/room1`\n * });\n * ```\n *\n * #### Publish message from your backend\n *\n * ```ts title=\"src/lambda.ts\"\n * import { IoTDataPlaneClient, PublishCommand } from \"@aws-sdk/client-iot-data-plane\";\n * const data = new IoTDataPlaneClient();\n * await data.send(\n *   new PublishCommand({\n *     payload: Buffer.from(\n *       JSON.stringify({ message: \"Hello world\" })\n *     ),\n *     topic: `${Resource.App.name}/${Resource.App.stage}/chat/room1`,\n *   })\n * );\n * ```\n */\nexport class Realtime extends Component implements Link.Linkable {\n  private readonly constructorName: string;\n  private constructorOpts: ComponentResourceOptions;\n  private readonly authHadler: Output<Function>;\n  private readonly iotAuthorizer: iot.Authorizer;\n  private readonly iotEndpoint: Output<string>;\n\n  constructor(\n    name: string,\n    args: RealtimeArgs,\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const authHadler = createAuthorizerFunction();\n    const iotAuthorizer = createAuthorizer();\n    createPermission();\n\n    this.constructorOpts = opts;\n    this.iotEndpoint = iot.getEndpointOutput(\n      { endpointType: \"iot:Data-ATS\" },\n      { parent },\n    ).endpointAddress;\n    this.constructorName = name;\n    this.authHadler = authHadler;\n    this.iotAuthorizer = iotAuthorizer;\n\n    function createAuthorizerFunction() {\n      return Function.fromDefinition(\n        `${name}AuthorizerHandler`,\n        args.authorizer,\n        {\n          description: `Authorizer for ${name}`,\n          permissions: [\n            {\n              actions: [\"iot:*\"],\n              resources: [\"*\"],\n            },\n          ],\n        },\n        undefined,\n        { parent },\n      );\n    }\n\n    function createAuthorizer() {\n      return new iot.Authorizer(\n        ...transform(\n          args.transform?.authorizer,\n          `${name}Authorizer`,\n          {\n            signingDisabled: true,\n            authorizerFunctionArn: authHadler.arn,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createPermission() {\n      return new lambda.Permission(\n        `${name}Permission`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: authHadler.arn,\n          principal: \"iot.amazonaws.com\",\n          sourceArn: iotAuthorizer.arn,\n        },\n        { parent },\n      );\n    }\n  }\n\n  /**\n   * The IoT endpoint.\n   */\n  public get endpoint() {\n    return this.iotEndpoint;\n  }\n\n  /**\n   * The name of the IoT authorizer.\n   */\n  public get authorizer() {\n    return this.iotAuthorizer.name;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The IoT authorizer resource.\n       */\n      authorizer: this.iotAuthorizer,\n      /**\n       * The IoT authorizer function resource.\n       */\n      authHandler: this.authHadler,\n    };\n  }\n\n  /**\n   * Subscribe to this Realtime server.\n   *\n   * @param subscriber The function that'll be notified.\n   * @param args Configure the subscription.\n   *\n   * @example\n   *\n   * ```js title=\"sst.config.ts\"\n   * server.subscribe(\"src/subscriber.handler\", {\n   *   filter: `${$app.name}/${$app.stage}/chat/room1`\n   * });\n   * ```\n   *\n   * Customize the subscriber function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * server.subscribe(\n   *   {\n   *     handler: \"src/subscriber.handler\",\n   *     timeout: \"60 seconds\"\n   *   },\n   *   {\n   *     filter: `${$app.name}/${$app.stage}/chat/room1`\n   *   }\n   * );\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```js title=\"sst.config.ts\"\n   * server.subscribe(\"arn:aws:lambda:us-east-1:123456789012:function:my-function\", {\n   *   filter: `${$app.name}/${$app.stage}/chat/room1`\n   * });\n   * ```\n   */\n  public subscribe(\n    subscriber: Input<string | FunctionArgs | FunctionArn>,\n    args: RealtimeSubscriberArgs,\n  ) {\n    return all([subscriber, args.filter]).apply(([subscriber, filter]) => {\n      const suffix = logicalName(\n        hashStringToPrettyString(\n          [\n            filter,\n            typeof subscriber === \"string\" ? subscriber : subscriber.handler,\n          ].join(\"\"),\n          6,\n        ),\n      );\n\n      return new RealtimeLambdaSubscriber(\n        `${this.constructorName}Subscriber${suffix}`,\n        {\n          iot: { name: this.constructorName },\n          subscriber,\n          ...args,\n        },\n        { provider: this.constructorOpts.provider },\n      );\n    });\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        endpoint: this.endpoint,\n        authorizer: this.authorizer,\n      },\n      include: [\n        permission({\n          actions: [\"iot:Publish\"],\n          resources: [\"*\"],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Realtime\";\n// @ts-expect-error\nRealtime.__pulumiType = __pulumiType;\n", "import {\n  ComponentResourceOptions,\n  Input,\n  Output,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, transform } from \"../component\";\nimport { Function, FunctionArgs } from \"./function\";\nimport { RealtimeSubscriberArgs } from \"./realtime\";\nimport { lambda } from \"@pulumi/aws\";\nimport { iot } from \"@pulumi/aws\";\nimport { FunctionBuilder, functionBuilder } from \"./helpers/function-builder\";\nimport { parseFunctionArn } from \"./helpers/arn\";\n\nexport interface Args extends RealtimeSubscriberArgs {\n  /**\n   * The IoT WebSocket server to use.\n   */\n  iot: Input<{\n    /**\n     * The name of the Realtime component.\n     */\n    name: Input<string>;\n  }>;\n  /**\n   * The subscriber function.\n   */\n  subscriber: Input<string | FunctionArgs>;\n}\n\n/**\n * The `RealtimeLambdaSubscriber` component is internally used by the `Realtime` component\n * to add subscriptions to the [AWS IoT endpoint](https://docs.aws.amazon.com/iot/latest/developerguide/what-is-aws-iot.html).\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `subscribe` method of the `Realtime` component.\n */\nexport class RealtimeLambdaSubscriber extends Component {\n  private readonly fn: FunctionBuilder;\n  private readonly permission: lambda.Permission;\n  private readonly rule: iot.TopicRule;\n\n  constructor(name: string, args: Args, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const self = this;\n    const normalizedIot = output(args.iot);\n    const filter = output(args.filter);\n    const fn = createFunction();\n    const rule = createRule();\n    const permission = createPermission();\n\n    this.fn = fn;\n    this.permission = permission;\n    this.rule = rule;\n\n    function createFunction() {\n      return functionBuilder(\n        `${name}Handler`,\n        args.subscriber,\n        {\n          description: interpolate`Subscribed to ${normalizedIot.name} on ${filter}`,\n        },\n        undefined,\n        { parent: self },\n      );\n    }\n\n    function createRule() {\n      return new iot.TopicRule(\n        ...transform(\n          args?.transform?.topicRule,\n          `${name}Rule`,\n          {\n            sqlVersion: \"2016-03-23\",\n            sql: interpolate`SELECT * FROM '${filter}'`,\n            enabled: true,\n            lambdas: [{ functionArn: fn.arn }],\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createPermission() {\n      return new lambda.Permission(\n        `${name}Permission`,\n        {\n          action: \"lambda:InvokeFunction\",\n          function: fn.arn.apply((arn) => parseFunctionArn(arn).functionName),\n          principal: \"iot.amazonaws.com\",\n          sourceArn: rule.arn,\n        },\n        { parent: self },\n      );\n    }\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const self = this;\n    return {\n      /**\n       * The Lambda function that'll be notified.\n       */\n      get function() {\n        return self.fn.apply((fn) => fn.getFunction());\n      },\n      /**\n       * The Lambda permission.\n       */\n      permission: this.permission,\n      /**\n       * The IoT Topic rule.\n       */\n      rule: this.rule,\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:RealtimeLambdaSubscriber\";\n// @ts-expect-error\nRealtimeLambdaSubscriber.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output, output } from \"@pulumi/pulumi\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\n\nexport interface ReactArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your React app is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your React app, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your React app needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your React app is located.  This path is relative to your `sst.config.ts`.\n   *\n   * By default it assumes your React app is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your React app is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your React app. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your React app has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * Set [environment variables](https://vitejs.dev/guide/env-and-mode) in your React app. These are made available:\n   *\n   * 1. In `react-router build`, they are loaded into `process.env`.\n   * 2. Locally while running `react-router dev` through `sst dev`.\n   *\n   * :::tip\n   * You can also `link` resources to your React app and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Set a custom domain for your React app.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Serve your React app through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your React app **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * You also need to set the `base` property in your `vite.config.ts`.\n   *\n   * :::caution\n   * If routing to a path, you need to set that as the base path in your\n   * `vite.config.ts` and `reac-router.config.ts` as well.\n   * :::\n   *\n   * ```js title=\"vite.config.ts\" {3}\n   * export default defineConfig({\n   *   plugins: [tailwindcss(), reactRouter(), tsconfigPaths()],\n   *   base: \"/docs/\"\n   * });\n   * ```\n   *\n   * And the `basename` in your React Router configuration.\n   *\n   * ```jsx title=\"react-router.config.ts\" {2}\n   * export const routerConfig = {\n   *   basename: \"/docs\"\n   * };\n   * ```\n   *\n   * To serve your React app **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your React app **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set the base path in your `vite.config.ts` and `basename`\n   * in your `react-router.config.ts`, like above.\n   */\n  router?: SsrSiteArgs[\"router\"];\n  /**\n   * The command used internally to build your React app.\n   *\n   * @default `\"npm run build\"`\n   *\n   * @example\n   *\n   * If you want to use a different build command.\n   * ```js\n   * {\n   *   buildCommand: \"yarn build\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * Configure how the React app assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the React app to use an existing CloudFront cache policy. By default,\n   * a new cache policy is created. Note that CloudFront has a limit of 20 cache\n   * policies per account. This allows you to reuse an existing policy instead of\n   * creating a new one.\n   * @default A new cache policy is created\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `React` component lets you deploy a React app built with [React Router](https://reactrouter.com/) app to AWS.\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy a React app that's in the project root.\n *\n * ```js\n * new sst.aws.React(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys the React app in the `my-react-app/` directory.\n *\n * ```js {2}\n * new sst.aws.React(\"MyWeb\", {\n *   path: \"my-react-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your React app.\n *\n * ```js {2}\n * new sst.aws.React(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4}\n * new sst.aws.React(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your React app. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4}\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.React(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your React app.\n *\n * ```ts title=\"app/root.tsx\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class React extends SsrSite {\n  constructor(\n    name: string,\n    args: ReactArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand() { }\n\n  protected buildPlan(outputPath: Output<string>): Output<Plan> {\n    return output(outputPath).apply((outputPath) => {\n      const assetsPath = path.join(\"build\", \"client\");\n      const serverPath = (() => {\n        const p = path.join(\"build\", \"server\");\n        return fs.existsSync(path.join(outputPath, p)) ? p : undefined;\n      })();\n      const indexPage = \"index.html\";\n\n      // Get base configured in vite config ie. \"/docs/\"\n      const viteBase = (() => {\n        try {\n          const viteConfig = path.join(outputPath, \"vite.config.ts\");\n          const content = fs.readFileSync(viteConfig, \"utf-8\");\n          const match = content.match(/[\"']?base[\"']?:\\s*[\"']([^\"]+)[\"']/);\n          return match ? match[1] : undefined;\n        } catch (e) { }\n      })();\n\n      // Get base configured in react-router config ie. \"/docs/\"\n      const reactRouterBase = (() => {\n        try {\n          const rrConfig = path.join(outputPath, \"react-router.config.ts\");\n          const content = fs.readFileSync(rrConfig, \"utf-8\");\n          const match = content.match(/[\"']?basename[\"']?:\\s*[\"']([^\"]+)[\"']/);\n          return match ? match[1] : undefined;\n        } catch (e) { }\n      })();\n\n      if (viteBase) {\n        if (!viteBase.endsWith(\"/\"))\n          throw new Error(\n            `The \"base\" value in vite.config.ts must end with a trailing slash (\"/\"). This is required for correct asset path construction.`,\n          );\n        if (!reactRouterBase)\n          throw new Error(\n            `Found \"base\" configured in vite.config.ts but missing \"basename\" in react-router.config.ts. Both configurations are required.`,\n          );\n      }\n      if (reactRouterBase) {\n        if (reactRouterBase.endsWith(\"/\"))\n          throw new Error(\n            `The \"basename\" value in react-router.config.ts must not end with a trailing slash (\"/\"). This ensures the root URL is accessible without a trailing slash.`,\n          );\n        if (!viteBase)\n          throw new Error(\n            `Found \"basename\" configured in react-router.config.ts but missing \"base\" in vite.config.ts. Both configurations are required.`,\n          );\n      }\n\n      return {\n        base: reactRouterBase,\n        server: serverPath\n          ? (() => {\n            // React does perform their own internal ESBuild process, but it doesn't bundle\n            // 3rd party dependencies by default. In the interest of keeping deployments\n            // seamless for users we will create a server bundle with all dependencies included.\n\n            fs.copyFileSync(\n              path.join(\n                $cli.paths.platform,\n                \"functions\",\n                \"react-server\",\n                \"server.mjs\",\n              ),\n              path.join(outputPath, \"build\", \"server.mjs\"),\n            );\n\n            return {\n              handler: path.join(outputPath, \"build\", \"server.handler\"),\n              streaming: true,\n            };\n          })()\n          : undefined,\n        assets: [\n          {\n            from: assetsPath,\n            to: \"\",\n            cached: true,\n            versionedSubDir: \"assets\",\n          },\n        ],\n        custom404: serverPath ? undefined : `/${indexPage}`,\n      };\n    });\n  }\n\n  /**\n   * The URL of the React app.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n}\n\nconst __pulumiType = \"sst:aws:React\";\n// @ts-expect-error\nReact.__pulumiType = __pulumiType;\n", "import {\n  all,\n  ComponentResourceOptions,\n  interpolate,\n  jsonStringify,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { RandomPassword } from \"@pulumi/random\";\nimport { Component, Transform, transform } from \"../component.js\";\nimport { Link } from \"../link.js\";\nimport { Input } from \"../input.js\";\nimport { elasticache, secretsmanager } from \"@pulumi/aws\";\nimport { Vpc } from \"./vpc.js\";\nimport { VisibleError } from \"../error.js\";\nimport { DevCommand } from \"../experimental/dev-command.js\";\nimport { Redis as RedisV1 } from \"./redis-v1\";\n\nexport interface RedisArgs {\n  /**\n   * The Redis engine to use. The following engines are supported:\n   *\n   * - `\"redis\"`: The open-source version of Redis.\n   * - `\"valkey\"`: [Valkey](https://valkey.io/) is a Redis-compatible in-memory key-value store.\n   *\n   * @default `\"redis\"`\n   */\n  engine?: Input<\"redis\" | \"valkey\">;\n  /**\n   * The version of Redis.\n   *\n   * The default is `\"7.1\"` for the `\"redis\"` engine and `\"7.2\"` for the `\"valkey\"` engine.\n   *\n   * Check out the [supported versions](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html).\n   *\n   * @default `\"7.1\"` for Redis, `\"7.2\"` for Valkey\n   * @example\n   * ```js\n   * {\n   *   version: \"6.2\"\n   * }\n   * ```\n   */\n  version?: Input<string>;\n  /**\n   * The type of instance to use for the nodes of the Redis instance. Check out the [supported instance types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html).\n   *\n   * @default `\"t4g.micro\"`\n   * @example\n   * ```js\n   * {\n   *   instance: \"m7g.xlarge\"\n   * }\n   * ```\n   */\n  instance?: Input<string>;\n  /**\n   * @deprecated The `cluster.nodes` prop is now the recommended way to configure the\n   * number of nodes in the cluster.\n   */\n  nodes?: Input<number>;\n  /**\n   * Configure cluster mode for Redis.\n   *\n   * @default `{ nodes: 1 }`\n   * @example\n   * Disable cluster mode.\n   * ```js\n   * {\n   *   cluster: false\n   * }\n   * ```\n   */\n  cluster?: Input<\n    | boolean\n    | {\n        /**\n         * The number of nodes to use for the Redis cluster.\n         *\n         * @default `1`\n         * @example\n         * ```js\n         * {\n         *   nodes: 4\n         * }\n         * ```\n         */\n        nodes: Input<number>;\n      }\n  >;\n  /**\n   * Key-value pairs that define custom parameters for the Redis's parameter group.\n   * These values override the defaults set by AWS.\n   *\n   * @example\n   * ```js\n   * {\n   *   parameters: {\n   *     \"maxmemory-policy\": \"noeviction\"\n   *   }\n   * }\n   * ```\n   */\n  parameters?: Input<Record<string, Input<string>>>;\n  /**\n   * The VPC to use for the Redis instance.\n   *\n   * @example\n   * Create a VPC component.\n   *\n   * ```js\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   *\n   * Or pass in a custom VPC configuration.\n   *\n   * ```js\n   * {\n   *   vpc: {\n   *     subnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"],\n   *     securityGroups: [\"sg-0399348378a4c256c\"]\n   *   }\n   * }\n   * ```\n   */\n  vpc:\n    | Vpc\n    | Input<{\n        /**\n         * A list of subnet IDs in the VPC to deploy the Redis instance in.\n         */\n        subnets: Input<Input<string>[]>;\n        /**\n         * A list of VPC security group IDs.\n         */\n        securityGroups: Input<Input<string>[]>;\n      }>;\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * By default, your Redis instance is deployed in `sst dev`. But if you want to instead\n   * connect to a locally running Redis server, you can configure the `dev` prop.\n   *\n   * :::note\n   * By default, this creates a new Redis ElastiCache instance even in `sst dev`.\n   * :::\n   *\n   * This will skip deploying a Redis ElastiCache instance and link to the locally running\n   * Redis server instead.\n   *\n   * @example\n   *\n   * Setting the `dev` prop also means that any linked resources will connect to the right\n   * Redis instance both in `sst dev` and `sst deploy`.\n   *\n   * ```ts\n   * {\n   *   dev: {\n   *     host: \"localhost\",\n   *     port: 6379\n   *   }\n   * }\n   * ```\n   */\n  dev?: {\n    /**\n     * The host of the local Redis server to connect to when running in dev.\n     * @default `\"localhost\"`\n     */\n    host?: Input<string>;\n    /**\n     * The port of the local Redis server when running in dev.\n     * @default `6379`\n     */\n    port?: Input<number>;\n    /**\n     * The username of the local Redis server to connect to when running in dev.\n     * @default `\"default\"`\n     */\n    username?: Input<string>;\n    /**\n     * The password of the local Redis server to connect to when running in dev.\n     * @default No password\n     */\n    password?: Input<string>;\n  };\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Redis subnet group.\n     */\n    subnetGroup?: Transform<elasticache.SubnetGroupArgs>;\n    /**\n     * Transform the Redis parameter group.\n     */\n    parameterGroup?: Transform<elasticache.ParameterGroupArgs>;\n    /**\n     * Transform the Redis cluster.\n     */\n    cluster?: Transform<elasticache.ReplicationGroupArgs>;\n  };\n}\n\ninterface RedisRef {\n  ref: boolean;\n  clusterId: Input<string>;\n}\n\n/**\n * The `Redis` component lets you add a Redis cluster to your app using\n * [Amazon ElastiCache](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/WhatIs.html).\n *\n * @example\n *\n * #### Create the cluster\n *\n * ```js title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const redis = new sst.aws.Redis(\"MyRedis\", { vpc });\n * ```\n *\n * #### Link to a resource\n *\n * You can link your cluster to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [redis],\n *   vpc\n * });\n * ```\n *\n * Once linked, you can connect to it from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,6,7,12,13}\n * import { Resource } from \"sst\";\n * import { Cluster } from \"ioredis\";\n *\n * const client = new Cluster(\n *   [{\n *     host: Resource.MyRedis.host,\n *     port: Resource.MyRedis.port\n *   }],\n *   {\n *     redisOptions: {\n *       tls: { checkServerIdentity: () => undefined },\n *       username: Resource.MyRedis.username,\n *       password: Resource.MyRedis.password\n *     }\n *   }\n * );\n * ```\n *\n * #### Running locally\n *\n * By default, your Redis cluster is deployed in `sst dev`. But let's say you are running Redis\n * locally.\n *\n * ```bash\n * docker run \\\n *   --rm \\\n *   -p 6379:6379 \\\n *   -v $(pwd)/.sst/storage/redis:/data \\\n *   redis:latest\n * ```\n *\n * You can connect to it in `sst dev` by configuring the `dev` prop.\n *\n * ```ts title=\"sst.config.ts\" {3-6}\n * const redis = new sst.aws.Redis(\"MyRedis\", {\n *   vpc,\n *   dev: {\n *     host: \"localhost\",\n *     port: 6379\n *   }\n * });\n * ```\n *\n * This will skip deploying a Redis ElastiCache cluster and link to the locally running Redis\n * server instead. [Check out the full example](/docs/examples/#aws-redis-local).\n *\n * ---\n *\n * ### Cost\n *\n * By default this component uses _On-demand nodes_ with a single `cache.t4g.micro` instance.\n *\n * The default `redis` engine costs $0.016 per hour. That works out to $0.016 x 24 x 30 or **$12 per month**.\n *\n * If the `valkey` engine is used, the cost is $0.0128 per hour. That works out to $0.0128 x 24 x 30 or **$9 per month**.\n *\n * Adjust this for the `instance` type and number of `nodes` you are using.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [ElastiCache pricing](https://aws.amazon.com/elasticache/pricing/) for more details.\n */\nexport class Redis extends Component implements Link.Linkable {\n  private cluster?: Output<elasticache.ReplicationGroup>;\n  private _authToken?: Output<string>;\n  private dev?: {\n    enabled: boolean;\n    host: Output<string>;\n    port: Output<number>;\n    username: Output<string>;\n    password?: Output<string>;\n  };\n  public static v1 = RedisV1;\n\n  constructor(name: string, args: RedisArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n    const _version = 2;\n    const self = this;\n\n    if (args && \"ref\" in args) {\n      const ref = reference();\n      this.cluster = output(ref.cluster);\n      this._authToken = ref.authToken;\n      return;\n    }\n\n    registerVersion();\n    const engine = output(args.engine).apply((v) => v ?? \"redis\");\n    const version = all([engine, args.version]).apply(\n      ([engine, v]) => v ?? (engine === \"redis\" ? \"7.1\" : \"7.2\"),\n    );\n    const instance = output(args.instance).apply((v) => v ?? \"t4g.micro\");\n    const argsCluster = normalizeCluster();\n    const vpc = normalizeVpc();\n\n    const dev = registerDev();\n    if (dev?.enabled) {\n      this.dev = dev;\n      return;\n    }\n\n    const { authToken, secret } = createAuthToken();\n    const subnetGroup = createSubnetGroup();\n    const parameterGroup = createParameterGroup();\n    const cluster = createCluster();\n\n    this.cluster = cluster;\n    this._authToken = authToken;\n\n    function reference() {\n      const ref = args as unknown as RedisRef;\n      const cluster = elasticache.ReplicationGroup.get(\n        `${name}Cluster`,\n        ref.clusterId,\n        undefined,\n        { parent: self },\n      );\n\n      const input = cluster.tags.apply((tags) => {\n        registerVersion(\n          tags?.[\"sst:component-version\"]\n            ? parseInt(tags[\"sst:component-version\"])\n            : undefined,\n        );\n\n        if (!tags?.[\"sst:ref:secret\"])\n          throw new VisibleError(\n            `Failed to lookup secret for Redis cluster \"${name}\".`,\n          );\n\n        return {\n          secretRef: tags?.[\"sst:ref:secret\"],\n        };\n      });\n\n      const secret = secretsmanager.getSecretVersionOutput(\n        { secretId: input.secretRef },\n        { parent: self },\n      );\n      const authToken = secret.secretString.apply((v) => {\n        return JSON.parse(v).authToken as string;\n      });\n\n      return { cluster, authToken };\n    }\n\n    function registerVersion(overrideVersion?: number) {\n      const oldVersion = overrideVersion ?? $cli.state.version[name];\n      self.registerVersion({\n        new: _version,\n        old: oldVersion,\n        message: [\n          `There is a new version of \"Redis\" that has breaking changes.`,\n          ``,\n          `To continue using the previous version, rename \"Redis\" to \"Redis.v${oldVersion}\".`,\n          `Or recreate this component to update - https://sst.dev/docs/components/#versioning`,\n        ].join(\"\\n\"),\n      });\n    }\n\n    function registerDev() {\n      if (!args.dev) return undefined;\n\n      const dev = {\n        enabled: $dev,\n        host: output(args.dev.host ?? \"localhost\"),\n        port: output(args.dev.port ?? 6379),\n        username: output(args.dev.username ?? \"default\"),\n        password: args.dev.password ? output(args.dev.password) : undefined,\n      };\n\n      new DevCommand(`${name}Dev`, {\n        dev: {\n          title: name,\n          autostart: true,\n          command: `sst print-and-not-quit`,\n        },\n        environment: {\n          SST_DEV_COMMAND_MESSAGE: interpolate`Make sure your local Redis server is using:\n\n  username: \"${dev.username}\"\n  password: ${\n    dev.password ? `\"${dev.password}\"` : \"\\x1b[38;5;8m[no password]\\x1b[0m\"\n  }\n\nListening on \"${dev.host}:${dev.port}\"...`,\n        },\n      });\n\n      return dev;\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        return output({\n          subnets: args.vpc.privateSubnets,\n          securityGroups: args.vpc.securityGroups,\n        });\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc);\n    }\n\n    function normalizeCluster() {\n      return all([args.cluster, args.nodes]).apply(([v, nodes]) => {\n        if (v === false) return undefined;\n        if (v === true) return { nodes: 1 };\n        if (v === undefined) {\n          if (nodes) return { nodes };\n          return { nodes: 1 };\n        }\n        return v;\n      });\n    }\n\n    function createAuthToken() {\n      const authToken = new RandomPassword(\n        `${name}AuthToken`,\n        {\n          length: 32,\n          special: true,\n          overrideSpecial: \"!&#$^<>-\",\n        },\n        { parent: self },\n      ).result;\n\n      const secret = new secretsmanager.Secret(\n        `${name}ProxySecret`,\n        {\n          recoveryWindowInDays: 0,\n        },\n        { parent: self },\n      );\n\n      new secretsmanager.SecretVersion(\n        `${name}ProxySecretVersion`,\n        {\n          secretId: secret.id,\n          secretString: jsonStringify({ authToken }),\n        },\n        { parent: self },\n      );\n\n      return { secret, authToken };\n    }\n\n    function createSubnetGroup() {\n      return new elasticache.SubnetGroup(\n        ...transform(\n          args.transform?.subnetGroup,\n          `${name}SubnetGroup`,\n          {\n            description: \"Managed by SST\",\n            subnetIds: vpc.subnets,\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createParameterGroup() {\n      return new elasticache.ParameterGroup(\n        ...transform(\n          args.transform?.parameterGroup,\n          `${name}ParameterGroup`,\n          {\n            description: \"Managed by SST\",\n            family: all([engine, version]).apply(([engine, version]) => {\n              const majorVersion = version.split(\".\")[0];\n              const defaultFamily = `${engine}${majorVersion}`;\n              return (\n                {\n                  redis4: \"redis4.0\",\n                  redis5: \"redis5.0\",\n                  redis6: \"redis6.x\",\n                }[defaultFamily] ?? defaultFamily\n              );\n            }),\n            parameters: all([args.parameters ?? {}, argsCluster]).apply(\n              ([parameters, argsCluster]) => [\n                {\n                  name: \"cluster-enabled\",\n                  value: argsCluster ? \"yes\" : \"no\",\n                },\n                ...Object.entries(parameters).map(([name, value]) => ({\n                  name,\n                  value,\n                })),\n              ],\n            ),\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createCluster() {\n      return argsCluster.apply(\n        (argsCluster) =>\n          new elasticache.ReplicationGroup(\n            ...transform(\n              args.transform?.cluster,\n              `${name}Cluster`,\n              {\n                description: \"Managed by SST\",\n                engine,\n                engineVersion: version,\n                nodeType: interpolate`cache.${instance}`,\n                dataTieringEnabled: instance.apply((v) =>\n                  v.startsWith(\"r6gd.\"),\n                ),\n                port: 6379,\n                ...(argsCluster\n                  ? {\n                      clusterMode: \"enabled\",\n                      numNodeGroups: argsCluster.nodes,\n                      replicasPerNodeGroup: 0,\n                      automaticFailoverEnabled: true,\n                    }\n                  : {\n                      clusterMode: \"disabled\",\n                    }),\n                multiAzEnabled: false,\n                atRestEncryptionEnabled: true,\n                transitEncryptionEnabled: true,\n                transitEncryptionMode: \"required\",\n                authToken,\n                subnetGroupName: subnetGroup.name,\n                parameterGroupName: parameterGroup.name,\n                securityGroupIds: vpc.securityGroups,\n                tags: {\n                  \"sst:component-version\": _version.toString(),\n                  \"sst:ref:secret\": secret.id,\n                },\n              },\n              { parent: self },\n            ),\n          ),\n      );\n    }\n  }\n\n  /**\n   * The ID of the Redis cluster.\n   */\n  public get clusterId() {\n    return this.dev ? output(\"placeholder\") : this.cluster!.id;\n  }\n\n  /**\n   * The username to connect to the Redis cluster.\n   */\n  public get username() {\n    return this.dev ? this.dev.username : output(\"default\");\n  }\n\n  /**\n   * The password to connect to the Redis cluster.\n   */\n  public get password() {\n    return this.dev ? this.dev.password ?? output(\"\") : this._authToken;\n  }\n\n  /**\n   * The host to connect to the Redis cluster.\n   */\n  public get host() {\n    return this.dev\n      ? this.dev.host\n      : this.cluster!.clusterEnabled.apply((enabled) =>\n          enabled\n            ? this.cluster!.configurationEndpointAddress\n            : this.cluster!.primaryEndpointAddress,\n        );\n  }\n\n  /**\n   * The port to connect to the Redis cluster.\n   */\n  public get port() {\n    return this.dev ? this.dev.port : this.cluster!.port.apply((v) => v!);\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const _this = this;\n    return {\n      /**\n       * The ElastiCache Redis cluster.\n       */\n      get cluster() {\n        if (_this.dev)\n          throw new VisibleError(\"Cannot access `nodes.cluster` in dev mode.\");\n        return _this.cluster!;\n      },\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        host: this.host,\n        port: this.port,\n        username: this.username,\n        password: this.password,\n      },\n    };\n  }\n\n  /**\n   * Reference an existing Redis cluster with the given cluster name. This is useful when you\n   * create a Redis cluster in one stage and want to share it in another. It avoids having to\n   * create a new Redis cluster in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share Redis clusters across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param clusterId The id of the existing Redis cluster.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a cluster in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new cluster, you want to share the same cluster from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const redis = $app.stage === \"frank\"\n   *   ? sst.aws.Redis.get(\"MyRedis\", \"app-dev-myredis\")\n   *   : new sst.aws.Redis(\"MyRedis\");\n   * ```\n   *\n   * Here `app-dev-myredis` is the ID of the cluster created in the `dev` stage.\n   * You can find this by outputting the cluster ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   cluster: redis.clusterId\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    clusterId: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    return new Redis(\n      name,\n      {\n        ref: true,\n        clusterId,\n      } as unknown as RedisArgs,\n      opts,\n    );\n  }\n}\n\nconst __pulumiType = \"sst:aws:Redis\";\n// @ts-expect-error\nRedis.__pulumiType = __pulumiType;\n", "import {\n  all,\n  ComponentResourceOptions,\n  interpolate,\n  jsonStringify,\n  Output,\n  output,\n} from \"@pulumi/pulumi\";\nimport { RandomPassword } from \"@pulumi/random\";\nimport { Component, Transform, transform } from \"../component.js\";\nimport { Link } from \"../link.js\";\nimport { Input } from \"../input.js\";\nimport { elasticache, secretsmanager } from \"@pulumi/aws\";\nimport { Vpc } from \"./vpc.js\";\nimport { VisibleError } from \"../error.js\";\nimport { DevCommand } from \"../experimental/dev-command.js\";\n\nexport interface RedisArgs {\n  /**\n   * The Redis engine to use. The following engines are supported:\n   *\n   * - `\"redis\"`: The open-source version of Redis.\n   * - `\"valkey\"`: [Valkey](https://valkey.io/) is a Redis-compatible in-memory key-value store.\n   *\n   * @default `\"redis\"`\n   */\n  engine?: Input<\"redis\" | \"valkey\">;\n  /**\n   * The version of Redis.\n   *\n   * The default is `\"7.1\"` for the `\"redis\"` engine and `\"7.2\"` for the `\"valkey\"` engine.\n   *\n   * Check out the [supported versions](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html).\n   *\n   * @default `\"7.1\"` for Redis, `\"7.2\"` for Valkey\n   * @example\n   * ```js\n   * {\n   *   version: \"6.2\"\n   * }\n   * ```\n   */\n  version?: Input<string>;\n  /**\n   * The type of instance to use for the nodes of the Redis cluster. Check out the [supported instance types](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/CacheNodes.SupportedTypes.html).\n   *\n   * @default `\"t4g.micro\"`\n   * @example\n   * ```js\n   * {\n   *   instance: \"m7g.xlarge\"\n   * }\n   * ```\n   */\n  instance?: Input<string>;\n  /**\n   * The number of nodes to use for the Redis cluster.\n   *\n   * @default `1`\n   * @example\n   * ```js\n   * {\n   *   nodes: 4\n   * }\n   * ```\n   */\n  nodes?: Input<number>;\n  /**\n   * The VPC to use for the Redis cluster.\n   *\n   * @example\n   * Create a VPC component.\n   *\n   * ```js\n   * const myVpc = new sst.aws.Vpc(\"MyVpc\");\n   * ```\n   *\n   * And pass it in.\n   *\n   * ```js\n   * {\n   *   vpc: myVpc\n   * }\n   * ```\n   *\n   * Or pass in a custom VPC configuration.\n   *\n   * ```js\n   * {\n   *   vpc: {\n   *     subnets: [\"subnet-0db7376a7ad4db5fd \", \"subnet-06fc7ee8319b2c0ce\"],\n   *     securityGroups: [\"sg-0399348378a4c256c\"]\n   *   }\n   * }\n   * ```\n   */\n  vpc:\n    | Vpc\n    | Input<{\n        /**\n         * A list of subnet IDs in the VPC to deploy the Redis cluster in.\n         */\n        subnets: Input<Input<string>[]>;\n        /**\n         * A list of VPC security group IDs.\n         */\n        securityGroups: Input<Input<string>[]>;\n      }>;\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * By default, your Redis cluster is deployed in `sst dev`. But if you want to instead\n   * connect to a locally running Redis server, you can configure the `dev` prop.\n   *\n   * :::note\n   * By default, this creates a new Redis ElastiCache cluster even in `sst dev`.\n   * :::\n   *\n   * This will skip deploying a Redis ElastiCache cluster and link to the locally running Redis\n   * server instead.\n   *\n   * @example\n   *\n   * Setting the `dev` prop also means that any linked resources will connect to the right\n   * Redis instance both in `sst dev` and `sst deploy`.\n   *\n   * ```ts\n   * {\n   *   dev: {\n   *     host: \"localhost\",\n   *     port: 6379\n   *   }\n   * }\n   * ```\n   */\n  dev?: {\n    /**\n     * The host of the local Redis server to connect to when running in dev.\n     * @default `\"localhost\"`\n     */\n    host?: Input<string>;\n    /**\n     * The port of the local Redis server when running in dev.\n     * @default `6379`\n     */\n    port?: Input<number>;\n    /**\n     * The username of the local Redis server to connect to when running in dev.\n     * @default `\"default\"`\n     */\n    username?: Input<string>;\n    /**\n     * The password of the local Redis server to connect to when running in dev.\n     * @default No password\n     */\n    password?: Input<string>;\n  };\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Redis subnet group.\n     */\n    subnetGroup?: Transform<elasticache.SubnetGroupArgs>;\n    /**\n     * Transform the Redis cluster.\n     */\n    cluster?: Transform<elasticache.ReplicationGroupArgs>;\n  };\n}\n\ninterface RedisRef {\n  ref: boolean;\n  cluster: elasticache.ReplicationGroup;\n  authToken: Output<string>;\n}\n\n/**\n * The `Redis` component lets you add a Redis cluster to your app using\n * [Amazon ElastiCache](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/WhatIs.html).\n *\n * For existing usage, rename `sst.aws.Redis` to `sst.aws.Redis.v1`. For new Redis, use\n * the latest [`Redis`](/docs/component/aws/redis) component instead.\n *\n * :::caution\n * This component has been deprecated.\n * :::\n *\n * What changed:\n * - In this version, the Redis/Valkey cluster uses the default parameter group, which\n * cannot be customized.\n * - In the new version, the cluster now creates a custom parameter group. This allows\n * you to customize the parameters via the `transform` prop.\n *\n * @example\n *\n * #### Create the cluster\n *\n * ```js title=\"sst.config.ts\"\n * const vpc = new sst.aws.Vpc(\"MyVpc\");\n * const redis = new sst.aws.Redis.v1(\"MyRedis\", { vpc });\n * ```\n *\n * #### Link to a resource\n *\n * You can link your cluster to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [redis],\n *   vpc\n * });\n * ```\n *\n * Once linked, you can connect to it from your function code.\n *\n * ```ts title=\"app/page.tsx\" {1,6,7,12,13}\n * import { Resource } from \"sst\";\n * import { Cluster } from \"ioredis\";\n *\n * const client = new Cluster(\n *   [{\n *     host: Resource.MyRedis.host,\n *     port: Resource.MyRedis.port\n *   }],\n *   {\n *     redisOptions: {\n *       tls: { checkServerIdentity: () => undefined },\n *       username: Resource.MyRedis.username,\n *       password: Resource.MyRedis.password\n *     }\n *   }\n * );\n * ```\n *\n * #### Running locally\n *\n * By default, your Redis cluster is deployed in `sst dev`. But let's say you are running Redis\n * locally.\n *\n * ```bash\n * docker run \\\n *   --rm \\\n *   -p 6379:6379 \\\n *   -v $(pwd)/.sst/storage/redis:/data \\\n *   redis:latest\n * ```\n *\n * You can connect to it in `sst dev` by configuring the `dev` prop.\n *\n * ```ts title=\"sst.config.ts\" {3-6}\n * const redis = new sst.aws.Redis.v1(\"MyRedis\", {\n *   vpc,\n *   dev: {\n *     host: \"localhost\",\n *     port: 6379\n *   }\n * });\n * ```\n *\n * This will skip deploying a Redis ElastiCache cluster and link to the locally running Redis\n * server instead. [Check out the full example](/docs/examples/#aws-redis-local).\n *\n * ---\n *\n * ### Cost\n *\n * By default this component uses _On-demand nodes_ with a single `cache.t4g.micro` instance.\n *\n * The default `redis` engine costs $0.016 per hour. That works out to $0.016 x 24 x 30 or **$12 per month**.\n *\n * If the `valkey` engine is used, the cost is $0.0128 per hour. That works out to $0.0128 x 24 x 30 or **$9 per month**.\n *\n * Adjust this for the `instance` type and number of `nodes` you are using.\n *\n * The above are rough estimates for _us-east-1_, check out the\n * [ElastiCache pricing](https://aws.amazon.com/elasticache/pricing/) for more details.\n */\nexport class Redis extends Component implements Link.Linkable {\n  private cluster?: elasticache.ReplicationGroup;\n  private _authToken?: Output<string>;\n  private dev?: {\n    enabled: boolean;\n    host: Output<string>;\n    port: Output<number>;\n    username: Output<string>;\n    password?: Output<string>;\n  };\n\n  constructor(name: string, args: RedisArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    if (args && \"ref\" in args) {\n      const ref = args as unknown as RedisRef;\n      this.cluster = ref.cluster;\n      this._authToken = ref.authToken;\n      return;\n    }\n\n    const parent = this;\n    const engine = output(args.engine).apply((v) => v ?? \"redis\");\n    const version = all([engine, args.version]).apply(\n      ([engine, v]) => v ?? (engine === \"redis\" ? \"7.1\" : \"7.2\"),\n    );\n    const instance = output(args.instance).apply((v) => v ?? \"t4g.micro\");\n    const nodes = output(args.nodes).apply((v) => v ?? 1);\n    const vpc = normalizeVpc();\n\n    const dev = registerDev();\n    if (dev?.enabled) {\n      this.dev = dev;\n      return;\n    }\n\n    const { authToken, secret } = createAuthToken();\n    const subnetGroup = createSubnetGroup();\n    const cluster = createCluster();\n\n    this.cluster = cluster;\n    this._authToken = authToken;\n\n    function registerDev() {\n      if (!args.dev) return undefined;\n\n      const dev = {\n        enabled: $dev,\n        host: output(args.dev.host ?? \"localhost\"),\n        port: output(args.dev.port ?? 6379),\n        username: output(args.dev.username ?? \"default\"),\n        password: args.dev.password ? output(args.dev.password) : undefined,\n      };\n\n      new DevCommand(`${name}Dev`, {\n        dev: {\n          title: name,\n          autostart: true,\n          command: `sst print-and-not-quit`,\n        },\n        environment: {\n          SST_DEV_COMMAND_MESSAGE: interpolate`Make sure your local Redis server is using:\n\n  username: \"${dev.username}\"\n  password: ${\n    dev.password ? `\"${dev.password}\"` : \"\\x1b[38;5;8m[no password]\\x1b[0m\"\n  }\n\nListening on \"${dev.host}:${dev.port}\"...`,\n        },\n      });\n\n      return dev;\n    }\n\n    function normalizeVpc() {\n      // \"vpc\" is a Vpc component\n      if (args.vpc instanceof Vpc) {\n        return output({\n          subnets: args.vpc.privateSubnets,\n          securityGroups: args.vpc.securityGroups,\n        });\n      }\n\n      // \"vpc\" is object\n      return output(args.vpc);\n    }\n\n    function createAuthToken() {\n      const authToken = new RandomPassword(\n        `${name}AuthToken`,\n        {\n          length: 32,\n          special: true,\n          overrideSpecial: \"!&#$^<>-\",\n        },\n        { parent },\n      ).result;\n\n      const secret = new secretsmanager.Secret(\n        `${name}ProxySecret`,\n        {\n          recoveryWindowInDays: 0,\n        },\n        { parent },\n      );\n\n      new secretsmanager.SecretVersion(\n        `${name}ProxySecretVersion`,\n        {\n          secretId: secret.id,\n          secretString: jsonStringify({ authToken }),\n        },\n        { parent },\n      );\n\n      return { secret, authToken };\n    }\n\n    function createSubnetGroup() {\n      return new elasticache.SubnetGroup(\n        ...transform(\n          args.transform?.subnetGroup,\n          `${name}SubnetGroup`,\n          {\n            description: \"Managed by SST\",\n            subnetIds: vpc.subnets,\n          },\n          { parent },\n        ),\n      );\n    }\n\n    function createCluster() {\n      return new elasticache.ReplicationGroup(\n        ...transform(\n          args.transform?.cluster,\n          `${name}Cluster`,\n          {\n            description: \"Managed by SST\",\n            engine,\n            engineVersion: version,\n            nodeType: interpolate`cache.${instance}`,\n            dataTieringEnabled: instance.apply((v) => v.startsWith(\"r6gd.\")),\n            port: 6379,\n            automaticFailoverEnabled: true,\n            clusterMode: \"enabled\",\n            numNodeGroups: nodes,\n            replicasPerNodeGroup: 0,\n            multiAzEnabled: false,\n            atRestEncryptionEnabled: true,\n            transitEncryptionEnabled: true,\n            transitEncryptionMode: \"required\",\n            authToken,\n            subnetGroupName: subnetGroup.name,\n            securityGroupIds: vpc.securityGroups,\n            tags: {\n              \"sst:auth-token-ref\": secret.id,\n            },\n          },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The ID of the Redis cluster.\n   */\n  public get clusterID() {\n    return this.dev ? output(\"placeholder\") : this.cluster!.id;\n  }\n\n  /**\n   * The username to connect to the Redis cluster.\n   */\n  public get username() {\n    return this.dev ? this.dev.username : output(\"default\");\n  }\n\n  /**\n   * The password to connect to the Redis cluster.\n   */\n  public get password() {\n    return this.dev ? this.dev.password ?? output(\"\") : this._authToken;\n  }\n\n  /**\n   * The host to connect to the Redis cluster.\n   */\n  public get host() {\n    return this.dev\n      ? this.dev.host\n      : this.cluster!.configurationEndpointAddress;\n  }\n\n  /**\n   * The port to connect to the Redis cluster.\n   */\n  public get port() {\n    return this.dev ? this.dev.port : this.cluster!.port.apply((v) => v!);\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    const _this = this;\n    return {\n      /**\n       * The ElastiCache Redis cluster.\n       */\n      get cluster() {\n        if (_this.dev)\n          throw new VisibleError(\"Cannot access `nodes.cluster` in dev mode.\");\n        return _this.cluster!;\n      },\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        host: this.host,\n        port: this.port,\n        username: this.username,\n        password: this.password,\n      },\n    };\n  }\n\n  /**\n   * Reference an existing Redis cluster with the given cluster name. This is useful when you\n   * create a Redis cluster in one stage and want to share it in another. It avoids having to\n   * create a new Redis cluster in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share Redis clusters across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param clusterID The id of the existing Redis cluster.\n   * @param opts? Resource options.\n   *\n   * @example\n   * Imagine you create a cluster in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new cluster, you want to share the same cluster from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const redis = $app.stage === \"frank\"\n   *   ? sst.aws.Redis.v1.get(\"MyRedis\", \"app-dev-myredis\")\n   *   : new sst.aws.Redis.v1(\"MyRedis\");\n   * ```\n   *\n   * Here `app-dev-myredis` is the ID of the cluster created in the `dev` stage.\n   * You can find this by outputting the cluster ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   cluster: redis.clusterID\n   * };\n   * ```\n   */\n  public static get(\n    name: string,\n    clusterID: Input<string>,\n    opts?: ComponentResourceOptions,\n  ) {\n    const cluster = elasticache.ReplicationGroup.get(\n      `${name}Cluster`,\n      clusterID,\n      undefined,\n      opts,\n    );\n    const secret = cluster.tags.apply((tags) =>\n      tags?.[\"sst:auth-token-ref\"]\n        ? secretsmanager.getSecretVersionOutput(\n            {\n              secretId: tags[\"sst:auth-token-ref\"],\n            },\n            opts,\n          )\n        : output(undefined),\n    );\n    const authToken = secret.apply((v) => {\n      if (!v)\n        throw new VisibleError(`Failed to get auth token for Redis ${name}.`);\n      return JSON.parse(v.secretString).authToken as string;\n    });\n\n    return new Redis(name, {\n      ref: true,\n      cluster,\n      authToken,\n    } as unknown as RedisArgs);\n  }\n}\n\nconst __pulumiType = \"sst:aws:Redis\";\n// @ts-expect-error\nRedis.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output, all } from \"@pulumi/pulumi\";\nimport type { Input } from \"../input.js\";\nimport { VisibleError } from \"../error.js\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\n\nexport interface RemixArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your Remix app is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your Remix app, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your Remix app needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your Remix app is located.  This path is relative to your `sst.config.ts`.\n   *\n   * By default it assumes your Remix app is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your Remix app is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your Remix app. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your Remix app has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * Set [environment variables](https://remix.run/docs/en/main/guides/envvars) in your Remix app. These are made available:\n   *\n   * 1. In `remix build`, they are loaded into `process.env`.\n   * 2. Locally while running through `sst dev`.\n   *\n   * :::tip\n   * You can also `link` resources to your Remix app and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Set a custom domain for your Remix app.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Serve your Remix app through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your Remix app **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * You also need to set the `base` in your `vite.config.ts`.\n   *\n   * :::caution\n   * If routing to a path, you need to set that as the base path in your Remix\n   * app as well.\n   * :::\n   *\n   * ```js title=\"vite.config.ts\" {3}\n   * export default defineConfig({\n   *   plugins: [...],\n   *   base: \"/docs\"\n   * });\n   * ```\n   *\n   * To serve your Remix app **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your Remix app **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set this as the `base` in your `vite.config.ts`, like\n   * above.\n   */\n  router?: SsrSiteArgs[\"router\"];\n  /**\n   * The command used internally to build your Remix app.\n   *\n   * @default `\"npm run build\"`\n   *\n   * @example\n   *\n   * If you want to use a different build command.\n   * ```js\n   * {\n   *   buildCommand: \"yarn build\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * The directory where the build output is located. This should match the value of\n   * `buildDirectory` in the Remix plugin section of your Vite config.\n   *\n   * @default `\"build\"`\n   */\n  buildDirectory?: Input<string>;\n  /**\n   * Configure how the Remix app assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the Remix app to use an existing CloudFront cache policy.\n   *\n   * :::note\n   * CloudFront has a limit of 20 cache policies per account, though you can request a limit\n   * increase.\n   * :::\n   *\n   * By default, a new cache policy is created for it. This allows you to reuse an existing\n   * policy instead of creating a new one.\n   *\n   * @default A new cache policy is created\n   *\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `Remix` component lets you deploy a [Remix](https://remix.run) app to AWS.\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy a Remix app that's in the project root.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.Remix(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys the Remix app in the `my-remix-app/` directory.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Remix(\"MyWeb\", {\n *   path: \"my-remix-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your Remix app.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Remix(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.Remix(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your Remix app. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.Remix(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your Remix app.\n *\n * ```ts title=\"app/root.tsx\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class Remix extends SsrSite {\n  constructor(\n    name: string,\n    args: RemixArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand() { }\n\n  protected buildPlan(\n    outputPath: Output<string>,\n    _name: string,\n    args: RemixArgs,\n  ): Output<Plan> {\n    return all([outputPath, args.buildDirectory]).apply(\n      async ([outputPath, buildDirectory]) => {\n        // The path for all files that need to be in the \"/\" directory (static assets)\n        // is different when using Vite. These will be located in the \"build/client\"\n        // path of the output by default. It will be the \"public\" folder when using remix config.\n        let assetsPath = \"public\";\n        let assetsVersionedSubDir = \"build\";\n        let buildPath = path.join(outputPath, \"build\");\n\n        const viteConfig = await loadViteConfig();\n        if (viteConfig) {\n          assetsPath = path.join(\n            viteConfig.__remixPluginContext.remixConfig.buildDirectory,\n            \"client\",\n          );\n          assetsVersionedSubDir = \"assets\";\n          buildPath = path.join(\n            outputPath,\n            viteConfig.__remixPluginContext.remixConfig.buildDirectory,\n          );\n        }\n\n        const basepath = fs\n          .readFileSync(path.join(outputPath, \"vite.config.ts\"), \"utf-8\")\n          .match(/base: ['\"](.*)['\"]/)?.[1];\n\n        return {\n          base: basepath,\n          server: createServerLambdaBundle(),\n          assets: [\n            {\n              from: assetsPath,\n              to: \"\",\n              cached: true,\n              versionedSubDir: assetsVersionedSubDir,\n            },\n          ],\n        };\n\n        async function loadViteConfig() {\n          const file = [\n            \"vite.config.ts\",\n            \"vite.config.js\",\n            \"vite.config.mts\",\n            \"vite.config.mjs\",\n          ].find((filename) => fs.existsSync(path.join(outputPath, filename)));\n          if (!file) return;\n\n          try {\n            const vite = await import(\"vite\");\n            const config = await vite.loadConfigFromFile(\n              { command: \"build\", mode: \"production\" },\n              path.join(outputPath, file),\n            );\n            if (!config) throw new Error();\n\n            return {\n              __remixPluginContext: {\n                remixConfig: {\n                  buildDirectory: buildDirectory ?? \"build\",\n                },\n              },\n            };\n          } catch (e) {\n            throw new VisibleError(\n              `Could not load Vite configuration from \"${file}\". Check that your Remix project uses Vite and the file exists.`,\n            );\n          }\n        }\n\n        function createServerLambdaBundle() {\n          // Create a Lambda@Edge handler for the Remix server bundle.\n          //\n          // Note: Remix does perform their own internal ESBuild process, but it\n          // doesn't bundle 3rd party dependencies by default. In the interest of\n          // keeping deployments seamless for users we will create a server bundle\n          // with all dependencies included. We will still need to consider how to\n          // address any need for external dependencies, although I think we should\n          // possibly consider this at a later date.\n\n          // In this path we are assuming that the Remix build only outputs the\n          // \"core server build\". We can safely assume this as we have guarded the\n          // remix.config.js to ensure it matches our expectations for the build\n          // configuration.\n          // We need to ensure that the \"core server build\" is wrapped with an\n          // appropriate Lambda@Edge handler. We will utilise an internal asset\n          // template to create this wrapper within the \"core server build\" output\n          // directory.\n\n          // Ensure build directory exists\n          fs.mkdirSync(buildPath, { recursive: true });\n\n          // Copy the server lambda handler and pre-append the build injection based\n          // on the config file used.\n          const content = [\n            // When using Vite config, the output build will be \"server/index.js\"\n            // and when using Remix config it will be `server.js`.\n            `// Import the server build that was produced by 'remix build'`,\n            viteConfig\n              ? `import * as remixServerBuild from \"./server/index.js\";`\n              : `import * as remixServerBuild from \"./index.js\";`,\n            ``,\n            fs.readFileSync(\n              path.join(\n                $cli.paths.platform,\n                \"functions\",\n                \"remix-server\",\n                \"regional-server.mjs\",\n              ),\n            ),\n          ].join(\"\\n\");\n          fs.writeFileSync(path.join(buildPath, \"server.mjs\"), content);\n\n          // Copy the Remix polyfil to the server build directory\n          //\n          // Note: We need to ensure that the polyfills are injected above other code that\n          // will depend on them when not using Vite. Importing them within the top of the\n          // lambda code doesn't appear to guarantee this, we therefore leverage ESBUild's\n          // `inject` option to ensure that the polyfills are injected at the top of\n          // the bundle.\n          const polyfillDest = path.join(buildPath, \"polyfill.mjs\");\n          fs.copyFileSync(\n            path.join(\n              $cli.paths.platform,\n              \"functions\",\n              \"remix-server\",\n              \"polyfill.mjs\",\n            ),\n            polyfillDest,\n          );\n\n          return {\n            handler: path.join(buildPath, \"server.handler\"),\n            nodejs: {\n              esbuild: {\n                inject: [path.resolve(polyfillDest)],\n              },\n            },\n            streaming: true,\n          };\n        }\n      },\n    );\n  }\n\n  /**\n   * The URL of the Remix app.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n}\n\nconst __pulumiType = \"sst:aws:Remix\";\n// @ts-expect-error\nRemix.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output } from \"@pulumi/pulumi\";\nimport { VisibleError } from \"../error.js\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\n\nexport interface SolidStartArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your SolidStart app is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your SolidStart app, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your SolidStart app needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your SolidStart app is located.  This path is relative to your `sst.config.ts`.\n   *\n   * By default it assumes your SolidStart app is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your SolidStart app is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your SolidStart app. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your SolidStart app has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * Set in your SolidStart app. These are made available:\n   *\n   * 1. In `vinxi build`, they are loaded into `process.env`.\n   * 2. Locally while running through `sst dev`.\n   *\n   * :::tip\n   * You can also `link` resources to your SolidStart app and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Set a custom domain for your SolidStart app.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Serve your SolidStart app through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your SolidStart app **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * You also need to set the `baseURL` property in your `app.config.ts` without a\n   * trailing slash.\n   *\n   * :::caution\n   * If routing to a path, you need to set that as the base path in your\n   * SolidStart app as well.\n   * :::\n   *\n   * ```js title=\"app.config.ts\" {3}\n   * export default defineConfig({\n   *   server: { preset: \"aws-lambda\" },\n   *   baseURL: \"/docs\"\n   * });\n   * ```\n   *\n   * To serve your SolidStart app **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your SolidStart app **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set the baseURL in your `app.config.ts`, like above.\n   */\n  router?: SsrSiteArgs[\"router\"];\n  /**\n   * The command used internally to build your SolidStart app.\n   *\n   * @default `\"npm run build\"`\n   *\n   * @example\n   *\n   * If you want to use a different build command.\n   * ```js\n   * {\n   *   buildCommand: \"yarn build\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * Configure how the SolidStart app assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the SolidStart app to use an existing CloudFront cache policy.\n   *\n   * :::note\n   * CloudFront has a limit of 20 cache policies per account, though you can request a limit\n   * increase.\n   * :::\n   *\n   * By default, a new cache policy is created for it. This allows you to reuse an existing\n   * policy instead of creating a new one.\n   *\n   * @default A new cache policy is created\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `SolidStart` component lets you deploy a [SolidStart](https://start.solidjs.com) app to AWS.\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy a SolidStart app that's in the project root.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.SolidStart(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys the SolidStart app in the `my-solid-app/` directory.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.SolidStart(\"MyWeb\", {\n *   path: \"my-solid-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your SolidStart app.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.SolidStart(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.SolidStart(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your SolidStart app. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.SolidStart(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your SolidStart app.\n *\n * ```ts title=\"src/app.tsx\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class SolidStart extends SsrSite {\n  constructor(\n    name: string,\n    args: SolidStartArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand() { }\n\n  protected buildPlan(outputPath: Output<string>): Output<Plan> {\n    return outputPath.apply((outputPath) => {\n      // Make sure aws-lambda preset is used in nitro.json\n      const nitro = JSON.parse(\n        fs.readFileSync(\n          path.join(outputPath, \".output\", \"nitro.json\"),\n          \"utf-8\",\n        ),\n      );\n\n      if (![\"aws-lambda\"].includes(nitro.preset)) {\n        throw new VisibleError(\n          `SolidStart's app.config.ts must be configured to use the \"aws-lambda\" preset. It is currently set to \"${nitro.preset}\".`,\n        );\n      }\n\n      // Get base path\n      const appConfig = fs.readFileSync(\n        path.join(outputPath, \"app.config.ts\"),\n        \"utf-8\",\n      );\n      const basepath = appConfig.match(/baseURL: ['\"](.*)['\"]/)?.[1];\n\n      // Remove the .output/public/_server directory from the assets\n      // b/c all `_server` requests should go to the server function. If this folder is\n      // not removed, it will create an s3 route that conflicts with the `_server` route.\n      fs.rmSync(path.join(outputPath, \".output\", \"public\", \"_server\"), {\n        recursive: true,\n        force: true,\n      });\n\n      return {\n        base: basepath,\n        server: {\n          description: \"Server handler for Solid\",\n          handler: \"index.handler\",\n          bundle: path.join(outputPath, \".output\", \"server\"),\n          streaming: nitro?.config?.awsLambda?.streaming === true,\n        },\n        assets: [\n          {\n            from: path.join(\".output\", \"public\"),\n            to: \"\",\n            cached: true,\n          },\n        ],\n      };\n    });\n  }\n\n  /**\n   * The URL of the SolidStart app.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n}\n\nconst __pulumiType = \"sst:aws:SolidStart\";\n// @ts-expect-error\nSolidStart.__pulumiType = __pulumiType;\n", "import {\n  all,\n  ComponentResourceOptions,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component\";\nimport { cloudwatch, iam, sfn } from \"@pulumi/aws\";\nimport { Link } from \"../link\";\nimport { permission } from \"./permission\";\nimport { State } from \"./step-functions/state\";\nimport { Choice, ChoiceArgs } from \"./step-functions/choice\";\nimport { Fail, FailArgs } from \"./step-functions/fail\";\nimport { Map, MapArgs } from \"./step-functions/map\";\nimport { Parallel, ParallelArgs } from \"./step-functions/parallel\";\nimport { Pass, PassArgs } from \"./step-functions/pass\";\nimport { Succeed, SucceedArgs } from \"./step-functions/succeed\";\nimport {\n  Task,\n  TaskArgs,\n  LambdaInvokeArgs,\n  SnsPublishArgs,\n  SqsSendMessageArgs,\n  EcsRunTaskArgs,\n  EventBridgePutEventsArgs,\n} from \"./step-functions/task\";\nimport { Wait, WaitArgs } from \"./step-functions/wait\";\nimport { Input } from \"../input\";\nimport { RETENTION } from \"./logging\";\nimport { physicalName } from \"../naming\";\nimport { functionBuilder } from \"./helpers/function-builder\";\nimport { Function } from \"./function\";\n\nexport interface StepFunctionsArgs {\n  /**\n   * The type of state machine workflow to create.\n   *\n   * :::caution\n   * Changing the type of the state machine workflow will cause the state machine\n   * to be destroyed and recreated.\n   * :::\n   *\n   * The `standard` workflow is the default and is meant for long running workflows.\n   * The `express` workflow is meant for workflows shorter than 5 minutes.\n   *\n   * This is because the `express` workflow is run in a single Lambda function. As a\n   * result, it's faster and cheaper to run. So if your workflow are short, the\n   * `express` workflow is recommended.\n   *\n   * @default `\"standard\"`\n   * @example\n   * ```js\n   * {\n   *   type: \"express\"\n   * }\n   * ```\n   */\n  type?: Input<\"standard\" | \"express\">;\n  /**\n   * The definition of the state machine. It takes a chain of `State` objects.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const foo = sst.aws.StepFunctions.pass({ name: \"Foo\" });\n   * const bar = sst.aws.StepFunctions.succeed({ name: \"Bar\" });\n   *\n   * new sst.aws.StepFunctions(\"MyStateMachine\", {\n   *   definition: foo.next(bar)\n   * });\n   * ```\n   */\n  definition: State;\n  /**\n   * Configure the execution logs in CloudWatch. Or pass in `false` to disable writing logs.\n   * @default `{retention: \"1 month\", level: \"error\", includeData: false}`\n   * @example\n   * ```js\n   * {\n   *   logging: false\n   * }\n   * ```\n   */\n  logging?: Input<\n    | false\n    | {\n        /**\n         * The duration the logs are kept in CloudWatch.\n         *\n         * @default `1 month`\n         * @example\n         * ```js\n         * {\n         *   logging: {\n         *     retention: \"forever\"\n         *   }\n         * }\n         * ```\n         */\n        retention?: Input<keyof typeof RETENTION>;\n        /**\n         * Specify whether execution data is included in the logs.\n         *\n         * @default `false`\n         * @example\n         * ```js\n         * {\n         *   logging: {\n         *     includeData: true\n         *   }\n         * }\n         * ```\n         */\n        includeData?: Input<boolean>;\n        /**\n         * Specify the type of execution events that are logged. Read more about the\n         * [Step Functions log level](https://docs.aws.amazon.com/step-functions/latest/dg/cw-logs.html#cloudwatch-log-level).\n         *\n         * @default `\"error\"`\n         * @example\n         * ```js\n         * {\n         *   logging: {\n         *     level: \"all\"\n         *   }\n         * }\n         * ```\n         */\n        level?: Input<\"all\" | \"error\" | \"fatal\">;\n      }\n  >;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying resources.\n   */\n  transform?: {\n    /**\n     * Transform the Step Functions StateMachine resource.\n     */\n    stateMachine?: Transform<sfn.StateMachineArgs>;\n    /**\n     * Transform the Step Functions LogGroup resource.\n     */\n    logGroup?: Transform<cloudwatch.LogGroupArgs>;\n  };\n}\n\n/**\n * The `StepFunctions` component lets you add state machines to your app\n * using [AWS Step Functions](https://docs.aws.amazon.com/step-functions/latest/dg/welcome.html).\n *\n * :::note\n * This component is currently in beta. Please [report any issues](https://github.com/sst/sst/issues) you find.\n * :::\n *\n * You define your state machine using a collection of states. Where each state\n * needs a unique name. It uses [JSONata](https://jsonata.org) for transforming\n * data between states.\n *\n * @example\n * #### Minimal example\n *\n * The state machine definition is compiled into JSON and passed to AWS.\n *\n * ```ts title=\"sst.config.ts\"\n * const foo = sst.aws.StepFunctions.pass({ name: \"Foo\" });\n * const bar = sst.aws.StepFunctions.succeed({ name: \"Bar\" });\n *\n * const definition = foo.next(bar);\n *\n * new sst.aws.StepFunctions(\"MyStateMachine\", {\n *   definition\n * });\n * ```\n *\n * #### Invoking a Lambda function\n *\n * Create a function and invoke it from a state machine.\n *\n * ```ts title=\"sst.config.ts\" {5-8,12}\n * const myFunction = new sst.aws.Function(\"MyFunction\", {\n *   handler: \"src/index.handler\"\n * });\n *\n * const invoke = sst.aws.StepFunctions.lambdaInvoke({\n *   name: \"InvokeMyFunction\",\n *   function: myFunction\n * });\n * const done = sst.aws.StepFunctions.succeed({ name: \"Done\" });\n *\n * new sst.aws.StepFunctions(\"MyStateMachine\", {\n *   definition: invoke.next(done)\n * });\n * ```\n *\n * #### Use the express workflow\n *\n * ```ts title=\"sst.config.ts\" {5}\n * const foo = sst.aws.StepFunctions.pass({ name: \"Foo\" });\n * const bar = sst.aws.StepFunctions.succeed({ name: \"Bar\" });\n *\n * new sst.aws.StepFunctions(\"MyStateMachine\", {\n *   type: \"express\",\n *   definition: foo.next(bar)\n * });\n * ```\n */\nexport class StepFunctions extends Component implements Link.Linkable {\n  private stateMachine: sfn.StateMachine;\n\n  constructor(\n    name: string,\n    args: StepFunctionsArgs,\n    opts?: ComponentResourceOptions,\n  ) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n\n    const type = output(args.type ?? \"standard\");\n    const logging = normalizeLogging();\n    const logGroup = createLogGroup();\n    const role = createRole();\n    const stateMachine = createStateMachine();\n\n    this.stateMachine = stateMachine;\n\n    function normalizeLogging() {\n      return output(args.logging).apply((logging) => {\n        if (logging === false) return undefined;\n\n        return {\n          retention: logging?.retention ?? \"1 month\",\n          level: logging?.level ?? \"error\",\n          includeData: logging?.includeData ?? false,\n        };\n      });\n    }\n\n    function createLogGroup() {\n      return logging.apply((logging) => {\n        if (!logging) return;\n\n        return new cloudwatch.LogGroup(\n          ...transform(\n            args.transform?.logGroup,\n            `${name}LogGroup`,\n            {\n              name: interpolate`/aws/states/${physicalName(\n                64,\n                `${name}StateMachine`,\n              )}`,\n              retentionInDays: RETENTION[logging.retention],\n            },\n            { parent, ignoreChanges: [\"name\"] },\n          ),\n        );\n      });\n    }\n\n    function createRole() {\n      return new iam.Role(\n        `${name}Role`,\n        {\n          assumeRolePolicy: iam.assumeRolePolicyForPrincipal({\n            Service: \"states.amazonaws.com\",\n          }),\n          inlinePolicies: [\n            {\n              name: \"inline\",\n              policy: iam.getPolicyDocumentOutput({\n                statements: [\n                  {\n                    actions: [\"events:*\"],\n                    resources: [\"*\"],\n                  },\n                  {\n                    actions: [\n                      \"logs:CreateLogDelivery\",\n                      \"logs:CreateLogStream\",\n                      \"logs:GetLogDelivery\",\n                      \"logs:UpdateLogDelivery\",\n                      \"logs:DeleteLogDelivery\",\n                      \"logs:ListLogDeliveries\",\n                      \"logs:PutLogEvents\",\n                      \"logs:PutResourcePolicy\",\n                      \"logs:DescribeResourcePolicies\",\n                      \"logs:DescribeLogGroups\",\n                    ],\n                    resources: [\"*\"],\n                  },\n                  {\n                    actions: [\n                      \"states:StartExecution\",\n                      \"states:DescribeExecution\",\n                    ],\n                    resources: [\"*\"],\n                  },\n                  ...args.definition.getRoot().getPermissions(),\n                ],\n              }).json,\n            },\n          ],\n        },\n        { parent },\n      );\n    }\n\n    function createStateMachine() {\n      const root = args.definition.getRoot();\n      root.assertStateNameUnique();\n      root.assertStateNotReused();\n\n      return new sfn.StateMachine(\n        ...transform(\n          args.transform?.stateMachine,\n          `${name}StateMachine`,\n          {\n            type: type.apply((type) => type.toUpperCase()),\n            definition: $jsonStringify({\n              StartAt: root.name,\n              States: root.serialize(),\n            }),\n            roleArn: role.arn,\n            loggingConfiguration: all([logging, logGroup]).apply(\n              ([logging, logGroup]) => ({\n                includeExecutionData: logging?.includeData ?? false,\n                level: (logging?.level ?? \"off\").toUpperCase(),\n                logDestination: interpolate`${logGroup?.arn}:*`,\n              }),\n            ),\n          },\n          { parent },\n        ),\n      );\n    }\n  }\n\n  /**\n   * The State Machine ARN.\n   */\n  public get arn() {\n    return this.stateMachine.arn;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Step Function State Machine resource.\n       */\n      stateMachine: this.stateMachine,\n    };\n  }\n\n  /**\n   * A `Choice` state is used to conditionally continue to different states based\n   * on the matched condition.\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * const processPayment = sst.aws.StepFunctions.choice({ name: \"ProcessPayment\" });\n   *\n   * const makePayment = sst.aws.StepFunctions.lambdaInvoke({ name: \"MakePayment\" });\n   * const sendReceipt = sst.aws.StepFunctions.lambdaInvoke({ name: \"SendReceipt\" });\n   * const failure = sst.aws.StepFunctions.fail({ name: \"Failure\" });\n   *\n   * processPayment.when(\"{% $states.input.status === 'unpaid' %}\", makePayment);\n   * processPayment.when(\"{% $states.input.status === 'paid' %}\", sendReceipt);\n   * processPayment.otherwise(failure);\n   * ```\n   */\n  public static choice(args: ChoiceArgs) {\n    return new Choice(args);\n  }\n\n  /**\n   * A `Fail` state is used to fail the execution of a state machine.\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.fail({ name: \"Failure\" });\n   * ```\n   */\n  public static fail(args: FailArgs) {\n    return new Fail(args);\n  }\n\n  /**\n   * A `Map` state is used to iterate over a list of items and execute a task for\n   * each item.\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * const processor = sst.aws.StepFunctions.lambdaInvoke({\n   *   name: \"Processor\",\n   *   function: \"src/processor.handler\"\n   * });\n   *\n   * sst.aws.StepFunctions.map({\n   *   processor,\n   *   name: \"Map\",\n   *   items: \"{% $states.input.items %}\"\n   * });\n   * ```\n   */\n  public static map(args: MapArgs) {\n    return new Map(args);\n  }\n\n  /**\n   * A `Parallel` state is used to execute multiple branches of a state in parallel.\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * const processorA = sst.aws.StepFunctions.lambdaInvoke({\n   *   name: \"ProcessorA\",\n   *   function: \"src/processorA.handler\"\n   * });\n   *\n   * const processorB = sst.aws.StepFunctions.lambdaInvoke({\n   *   name: \"ProcessorB\",\n   *   function: \"src/processorB.handler\"\n   * });\n   *\n   * const parallel = sst.aws.StepFunctions.parallel({ name: \"Parallel\" });\n   *\n   * parallel.branch(processorA);\n   * parallel.branch(processorB);\n   * ```\n   */\n  public static parallel(args: ParallelArgs) {\n    return new Parallel(args);\n  }\n\n  /**\n   * A `Pass` state is used to pass the input to the next state. It's useful for\n   * transforming the input before passing it along.\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.pass({\n   *   name: \"Pass\",\n   *   output: \"{% $states.input.message %}\"\n   * });\n   * ```\n   */\n  public static pass(args: PassArgs) {\n    return new Pass(args);\n  }\n\n  /**\n   * A `Succeed` state is used to indicate that the execution of a state machine\n   * has succeeded.\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.succeed({ name: \"Succeed\" });\n   * ```\n   */\n  public static succeed(args: SucceedArgs) {\n    return new Succeed(args);\n  }\n\n  /**\n   * A `Wait` state is used to wait for a specific amount of time before continuing\n   * to the next state.\n   *\n   * @example\n   *\n   * For example, wait for 10 seconds before continuing to the next state.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.wait({\n   *   name: \"Wait\",\n   *   time: 10\n   * });\n   * ```\n   *\n   * Alternatively, you can wait until a specific timestamp.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.wait({\n   *   name: \"Wait\",\n   *   timestamp: \"2026-01-01T00:00:00Z\"\n   * });\n   * ```\n   */\n  public static wait(args: WaitArgs) {\n    return new Wait(args);\n  }\n\n  /**\n   * A `Task` state can be used to make calls to AWS resources. We created a few\n   * convenience methods for common tasks like:\n   *\n   * - `sst.aws.StepFunctions.lambdaInvoke` to invoke a Lambda function.\n   * - `sst.aws.StepFunctions.ecsRunTask` to run an ECS task.\n   * - `sst.aws.StepFunctions.eventBridgePutEvents` to send custom events to\n   *   EventBridge.\n   *\n   * For everything else, you can use the `Task` state.\n   *\n   * @example\n   *\n   * For example, to start an AWS CodeBuild build.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.task({\n   *   name: \"Task\",\n   *   resource: \"arn:aws:states:::codebuild:startBuild\",\n   *   arguments: {\n   *     projectName: \"my-codebuild-project\"\n   *   },\n   *   permissions: [\n   *     {\n   *       actions: [\"codebuild:StartBuild\"],\n   *       resources: [\"*\"]\n   *     }\n   *   ]\n   * });\n   * ```\n   */\n  public static task(args: TaskArgs) {\n    return new Task(args);\n  }\n\n  /**\n   * Create a `Task` state that invokes a Lambda function. [Learn more](https://docs.aws.amazon.com/lambda/latest/api/API_Invoke.html).\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.lambdaInvoke({\n   *   name: \"LambdaInvoke\",\n   *   function: \"src/index.handler\"\n   * });\n   * ```\n   *\n   * Customize the function.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.lambdaInvoke({\n   *   name: \"LambdaInvoke\",\n   *   function: {\n   *     handler: \"src/index.handler\"\n   *     timeout: \"60 seconds\",\n   *   }\n   * });\n   * ```\n   *\n   * Pass in an existing `Function` component.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const myLambda = new sst.aws.Function(\"MyLambda\", {\n   *   handler: \"src/index.handler\"\n   * });\n   *\n   * sst.aws.StepFunctions.lambdaInvoke({\n   *   name: \"LambdaInvoke\",\n   *   function: myLambda\n   * });\n   * ```\n   *\n   * Or pass in the ARN of an existing Lambda function.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.lambdaInvoke({\n   *   name: \"LambdaInvoke\",\n   *   function: \"arn:aws:lambda:us-east-1:123456789012:function:my-function\"\n   * });\n   * ```\n   */\n  public static lambdaInvoke(args: LambdaInvokeArgs) {\n    const fn =\n      args.function instanceof Function\n        ? args.function\n        : functionBuilder(`${args.name}Function`, args.function, {});\n\n    return new Task({\n      ...args,\n      resource: \"arn:aws:states:::lambda:invoke\",\n      arguments: {\n        FunctionName: fn.arn,\n        Payload: args.payload,\n      },\n      permissions: [\n        {\n          actions: [\"lambda:InvokeFunction\"],\n          resources: [fn.arn],\n        },\n      ],\n    });\n  }\n\n  /**\n   * Create a `Task` state that publishes a message to an SNS topic. [Learn more](https://docs.aws.amazon.com/sns/latest/api/API_Publish.html).\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * const myTopic = new sst.aws.SnsTopic(\"MyTopic\");\n   *\n   * sst.aws.StepFunctions.snsPublish({\n   *   name: \"SnsPublish\",\n   *   topic: myTopic,\n   *   message: \"Hello, world!\"\n   * });\n   * ```\n   */\n  public static snsPublish(args: SnsPublishArgs) {\n    return new Task({\n      ...args,\n      resource: \"arn:aws:states:::sns:publish\",\n      arguments: {\n        TopicArn: args.topic.arn,\n        Message: args.message,\n        MessageAttributes: args.messageAttributes,\n        MessageDeduplicationId: args.messageDeduplicationId,\n        MessageGroupId: args.messageGroupId,\n        Subject: args.subject,\n      },\n      permissions: [\n        {\n          actions: [\"sns:Publish\"],\n          resources: [args.topic.arn],\n        },\n      ],\n    });\n  }\n\n  /**\n   * Create a `Task` state that sends a message to an SQS queue. [Learn more](https://docs.aws.amazon.com/AWSSimpleQueueService/latest/APIReference/API_SendMessage.html).\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * const myQueue = new sst.aws.Queue(\"MyQueue\");\n   *\n   * sst.aws.StepFunctions.sqsSendMessage({\n   *   name: \"SqsSendMessage\",\n   *   queue: myQueue,\n   *   messageBody: \"Hello, world!\"\n   * });\n   * ```\n   */\n  public static sqsSendMessage(args: SqsSendMessageArgs) {\n    return new Task({\n      ...args,\n      resource: \"arn:aws:states:::sqs:sendMessage\",\n      arguments: {\n        QueueUrl: args.queue.url,\n        MessageBody: args.messageBody,\n        MessageAttributes: args.messageAttributes,\n        MessageDeduplicationId: args.messageDeduplicationId,\n        MessageGroupId: args.messageGroupId,\n      },\n      permissions: [\n        {\n          actions: [\"sqs:SendMessage\"],\n          resources: [args.queue.arn],\n        },\n      ],\n    });\n  }\n\n  /**\n   * Create a `Task` state that runs an ECS task using the [`Task`](/docs/component/aws/task) component. [Learn more](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_RunTask.html).\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * const myCluster = new sst.aws.Cluster(\"MyCluster\");\n   * const myTask = new sst.aws.Task(\"MyTask\", { cluster: myCluster });\n   *\n   * sst.aws.StepFunctions.ecsRunTask({\n   *   name: \"RunTask\",\n   *   task: myTask\n   * });\n   * ```\n   */\n  public static ecsRunTask(args: EcsRunTaskArgs) {\n    return new Task({\n      ...args,\n      resource: \"arn:aws:states:::ecs:runTask\",\n      arguments: {\n        Cluster: args.task.cluster,\n        TaskDefinition: args.task.taskDefinition,\n        LaunchType: \"FARGATE\",\n        NetworkConfiguration: {\n          AwsvpcConfiguration: {\n            Subnets: args.task.subnets,\n            SecurityGroups: args.task.securityGroups,\n            AssignPublicIp: args.task.assignPublicIp.apply((v) =>\n              v ? \"ENABLED\" : \"DISABLED\",\n            ),\n          },\n        },\n        Overrides:\n          args.environment &&\n          all([args.environment, args.task.containers]).apply(\n            ([environment, containers]) => ({\n              ContainerOverrides: containers.map((name) => ({\n                Name: name,\n                Environment: Object.entries(environment).map(\n                  ([name, value]) => ({ Name: name, Value: value }),\n                ),\n              })),\n            }),\n          ),\n      },\n      permissions: [\n        {\n          actions: [\"ecs:RunTask\"],\n          resources: [args.task.nodes.taskDefinition.arn],\n        },\n        {\n          actions: [\"iam:PassRole\"],\n          resources: [\n            args.task.nodes.executionRole.arn,\n            args.task.nodes.taskRole.arn,\n          ],\n        },\n      ],\n    });\n  }\n\n  /**\n   * Create a `Task` state that sends custom events to one or more EventBridge buses\n   * using the [`Bus`](/docs/component/aws/bus) component. [Learn more](https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html).\n   *\n   * @example\n   * ```ts title=\"sst.config.ts\"\n   * const myBus = new sst.aws.EventBus(\"MyBus\");\n   *\n   * sst.aws.StepFunctions.eventBridgePutEvents({\n   *   name: \"EventBridgePutEvents\",\n   *   events: [\n   *     {\n   *       bus: myBus,\n   *       source: \"my-source\"\n   *     }\n   *   ]\n   * });\n   * ```\n   */\n  public static eventBridgePutEvents(args: EventBridgePutEventsArgs) {\n    const busArns = output(args.events).apply((events) =>\n      all(events.map((event) => event.bus.arn)).apply((arns) =>\n        arns.filter((arn, index, self) => self.indexOf(arn) === index),\n      ),\n    );\n\n    return new Task({\n      ...args,\n      resource: \"arn:aws:states:::events:putEvents\",\n      arguments: {\n        Entries: output(args.events).apply((events) =>\n          events.map((event) => ({\n            EventBusName: event.bus.name,\n            Source: event.source,\n            DetailType: event.detailType,\n            Detail: event.detail,\n          })),\n        ),\n      },\n      permissions: [\n        {\n          actions: [\"events:PutEvents\"],\n          resources: busArns,\n        },\n      ],\n    });\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        arn: this.arn,\n      },\n      include: [\n        permission({\n          actions: [\"states:*\"],\n          resources: [\n            this.arn,\n            this.arn.apply(\n              (arn) => `${arn.replace(\"stateMachine\", \"execution\")}:*`,\n            ),\n          ],\n        }),\n        permission({\n          actions: [\n            \"states:SendTaskSuccess\",\n            \"states:SendTaskFailure\",\n            \"states:SendTaskHeartbeat\",\n          ],\n          resources: [\"*\"],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:StepFunctions\";\n// @ts-expect-error\nStepFunctions.__pulumiType = __pulumiType;\n", "import { randomBytes } from \"crypto\";\nimport { Duration, toSeconds } from \"../../duration\";\nimport { Input } from \"../../input\";\nimport { FunctionPermissionArgs } from \"../function\";\n\nexport type JSONata = `{% ${string} %}`;\n\nexport function isJSONata(value: string) {\n  return value.startsWith(\"{%\") && value.endsWith(\"%}\");\n}\n\ntype DefaultError =\n  | \"States.ALL\"\n  | \"States.DataLimitExceeded\"\n  | \"States.ExceedToleratedFailureThreshold\"\n  | \"States.HeartbeatTimeout\"\n  | \"States.Http.Socket\"\n  | \"States.IntrinsicFailure\"\n  | \"States.ItemReaderFailed\"\n  | \"States.NoChoiceMatched\"\n  | \"States.ParameterPathFailure\"\n  | \"States.Permissions\"\n  | \"States.ResultPathMatchFailure\"\n  | \"States.ResultWriterFailed\"\n  | \"States.Runtime\"\n  | \"States.TaskFailed\"\n  | \"States.Timeout\";\n\n/**\n * @internal\n */\nexport interface Nextable {\n  next: (state: State) => State;\n}\n\n/**\n * @internal\n */\nexport interface Failable {\n  retry: (props?: RetryArgs) => State;\n  catch: (state: State, props?: CatchArgs) => State;\n}\n\nexport interface RetryArgs {\n  /**\n   * A list of errors that are being retried. By default, this retries all errors.\n   *\n   * @default `[\"States.ALL\"]`\n   */\n  errors?: string[];\n  /**\n   * The amount of time to wait before the first retry attempt. The maximum value is\n   * `99999999 seconds`.\n   *\n   * Following attempts will retry based on the `backoffRate` multiplier.\n   *\n   * @default `\"1 second\"`\n   */\n  interval?: Duration;\n  /**\n   * The maximum number of retries before it falls back to the normal error handling.\n   *\n   * A value of `0` means the error won't be retried. The maximum value is\n   * `99999999`.\n   *\n   * @default `3`\n   */\n  maxAttempts?: number;\n  /**\n   * The backoff rate. This is a multiplier that increases the interval between\n   * retries.\n   *\n   * For example, if the interval is `1 second` and the backoff rate is `2`, the\n   * first retry will happen after `1 second`, and the second retry will happen\n   * after `2 * 1 second = 2 seconds`.\n   *\n   * @default `2`\n   */\n  backoffRate?: number;\n}\n\nexport interface CatchArgs {\n  /**\n   * A list of errors that are being caught. By default, this catches all errors.\n   *\n   * @default `[\"States.ALL\"]`\n   */\n  errors?: string[];\n}\n\nexport interface StateArgs {\n  /**\n   * The name of the state. This needs to be unique within the state machine.\n   */\n  name: string;\n  /**\n   * Optionally add a comment that describes the state.\n   * @internal\n   */\n  comment?: Input<string>;\n  /**\n   * Transform the output of the state. When specified, the value overrides the\n   * default output from the state.\n   *\n   * This takes any JSON value; object, array, string, number, boolean, null.\n   *\n   * ```ts\n   * {\n   *   output: {\n   *     charged: true\n   *   }\n   * }\n   * ```\n   *\n   * Or, you can pass in a JSONata expression.\n   *\n   * ```ts\n   * {\n   *   output: {\n   *     product: \"{% $states.input.product %}\"\n   *   }\n   * }\n   * ```\n   *\n   * Learn more about [transforming data with JSONata](https://docs.aws.amazon.com/step-functions/latest/dg/transforming-data.html).\n   */\n  output?: Input<JSONata | Record<string, any>>;\n  /**\n   * Store variables that can be accessed by any state later in the workflow,\n   * instead of passing it through each state.\n   *\n   * This takes a set of key/value pairs. Where the key is the name of the variable\n   * that can be accessed by any subsequent state.\n   *\n   * @example\n   *\n   * The value can be any JSON value; object, array, string, number, boolean, null.\n   *\n   * ```ts\n   * {\n   *   assign: {\n   *     productName: \"product1\",\n   *     count: 42,\n   *     available: true\n   *   }\n   * }\n   * ```\n   *\n   * Or, you can pass in a JSONata expression.\n   *\n   * ```ts\n   * {\n   *   assign: {\n   *     product: \"{% $states.input.order.product %}\",\n   *     currentPrice: \"{% $states.result.Payload.current_price %}\"\n   *   }\n   * }\n   * ```\n   *\n   * Learn more about [passing data between states with variables](https://docs.aws.amazon.com/step-functions/latest/dg/workflow-variables.html).\n   */\n  assign?: Record<string, any>;\n}\n\n/**\n * The `State` class is the base class for all states in `StepFunctions` state\n * machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * This is used for reference only.\n */\nexport abstract class State {\n  protected _parentGraphState?: State; // only used for Parallel, Map\n  protected _childGraphStates: State[] = []; // only used for Parallel, Map\n  protected _prevState?: State;\n  protected _nextState?: State;\n  protected _retries?: RetryArgs[];\n  protected _catches?: { next: State; props: CatchArgs }[];\n\n  constructor(protected args: StateArgs) {}\n\n  protected addChildGraph<T extends State>(state: T): T {\n    if (state._parentGraphState)\n      throw new Error(\n        `Cannot reuse the \"${state.name}\" state. States cannot be reused in Map or Parallel branches.`,\n      );\n\n    this._childGraphStates.push(state);\n    state._parentGraphState = this;\n    return state;\n  }\n\n  protected addNext<T extends State>(state: T): T {\n    if (this._nextState)\n      throw new Error(\n        `The \"${this.name}\" state already has a next state. States cannot have multiple next states.`,\n      );\n\n    this._nextState = state;\n    state._prevState = this;\n    return state;\n  }\n\n  protected addRetry(args?: RetryArgs) {\n    this._retries = this._retries || [];\n    this._retries.push({\n      errors: [\"States.ALL\"],\n      backoffRate: 2,\n      interval: \"1 second\",\n      maxAttempts: 3,\n      ...args,\n    });\n    return this;\n  }\n\n  protected addCatch(state: State, args: CatchArgs = {}) {\n    this._catches = this._catches || [];\n    this._catches.push({\n      next: state.getHead(),\n      props: {\n        errors: args.errors ?? [\"States.ALL\"],\n      },\n    });\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  public get name() {\n    return this.args.name;\n  }\n\n  /**\n   * @internal\n   */\n  public getRoot(): State {\n    return (\n      this._prevState?.getRoot() ?? this._parentGraphState?.getRoot() ?? this\n    );\n  }\n\n  /**\n   * @internal\n   */\n  public getHead(): State {\n    return this._prevState?.getHead() ?? this;\n  }\n\n  /**\n   * Assert that the state name is unique.\n   * @internal\n   */\n  public assertStateNameUnique(states: Map<string, State> = new Map()) {\n    const existing = states.get(this.name);\n    if (existing && existing !== this)\n      throw new Error(\n        `Multiple states with the same name \"${this.name}\". State names must be unique.`,\n      );\n\n    states.set(this.name, this);\n\n    this._nextState?.assertStateNameUnique(states);\n    this._catches?.forEach((c) => c.next.assertStateNameUnique(states));\n    this._childGraphStates.forEach((c) => c.assertStateNameUnique(states));\n  }\n\n  /**\n   * Assert that the state is not reused.\n   * @internal\n   */\n  public assertStateNotReused(\n    states: Map<State, string> = new Map(),\n    graphId: string = \"main\",\n  ) {\n    const existing = states.get(this);\n    if (existing && existing !== graphId)\n      throw new Error(\n        `Cannot reuse the \"${this.name}\" state. States cannot be reused in Map or Parallel branches.`,\n      );\n\n    states.set(this, graphId);\n\n    this._nextState?.assertStateNotReused(states, graphId);\n    this._catches?.forEach((c) => c.next.assertStateNotReused(states, graphId));\n    this._childGraphStates.forEach((c) => {\n      const childGraphId = randomBytes(16).toString(\"hex\");\n      c.assertStateNotReused(states, childGraphId);\n    });\n  }\n\n  /**\n   * Get the permissions required for the state.\n   * @internal\n   */\n  public getPermissions(): FunctionPermissionArgs[] {\n    return [\n      ...(this._nextState?.getPermissions() || []),\n      ...(this._catches || []).flatMap((c) => c.next.getPermissions()),\n    ];\n  }\n\n  /**\n   * Serialize the state into JSON state definition.\n   * @internal\n   */\n  public serialize(): Record<string, any> {\n    return {\n      [this.name]: this.toJSON(),\n      ...this._nextState?.serialize(),\n      ...this._catches?.reduce(\n        (acc, c) => ({ ...acc, ...c.next.serialize() }),\n        {},\n      ),\n    };\n  }\n\n  protected toJSON(): Record<string, any> {\n    return {\n      QueryLanguage: \"JSONata\",\n      Comment: this.args.comment,\n      Output: this.args.output,\n      Assign: this.args.assign,\n      ...(this._nextState ? { Next: this._nextState.name } : { End: true }),\n      Retry: this._retries?.map((r) => ({\n        ErrorEquals: r.errors,\n        IntervalSeconds: toSeconds(r.interval!),\n        MaxAttempts: r.maxAttempts,\n        BackoffRate: r.backoffRate,\n      })),\n      Catch: this._catches?.map((c) => ({\n        ErrorEquals: c.props.errors,\n        Next: c.next.name,\n      })),\n    };\n  }\n}\n", "import { isJSONata, JSONata, State, StateArgs } from \"./state\";\n\nexport interface ChoiceArgs extends StateArgs { }\n\n/**\n * The `Choice` state is internally used by the `StepFunctions` component to add a [Choice\n * workflow state](https://docs.aws.amazon.com/step-functions/latest/dg/state-choice.html)\n * to a state machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `choice` method of the `StepFunctions` component.\n */\nexport class Choice extends State {\n  private choices: {\n    condition: JSONata;\n    next: State;\n  }[] = [];\n  private defaultNext?: State;\n\n  constructor(protected args: ChoiceArgs) {\n    super(args);\n  }\n\n  /**\n   * Add a matching condition to the `Choice` state. If the given condition matches,\n   * it'll continue execution to the given state.\n   *\n   * The condition needs to be a JSONata expression that evaluates to a boolean.\n   *\n   * @example\n   *\n   * ```ts\n   * sst.aws.StepFunctions.choice({\n   *   // ...\n   * })\n   * .when(\n   *   \"{% $states.input.status === 'unpaid' %}\",\n   *   state\n   * );\n   * ```\n   *\n   * @param condition The JSONata condition to evaluate.\n   * @param next The state to transition to.\n   */\n  public when(condition: JSONata, next: State) {\n    if (!isJSONata(condition))\n      throw new Error(\"Condition must start with '{%' and end with '%}'.\");\n\n    this.choices.push({ condition, next });\n    return this;\n  }\n\n  /**\n   * Add a default next state to the `Choice` state. If no other condition matches,\n   * continue execution with the given state.\n   */\n  public otherwise(next: State) {\n    this.defaultNext = next;\n    return this;\n  }\n\n  /**\n   * @internal\n   */\n  public assertStateNameUnique(states: Map<string, State> = new Map()) {\n    super.assertStateNameUnique(states);\n    this.choices.forEach((c) => c.next.assertStateNameUnique(states));\n    this.defaultNext?.assertStateNameUnique(states);\n  }\n\n  /**\n   * @internal\n   */\n  public assertStateNotReused(\n    states: Map<State, string> = new Map(),\n    graphId: string = \"main\",\n  ) {\n    super.assertStateNotReused(states, graphId);\n    this.choices.forEach((c) => c.next.assertStateNotReused(states, graphId));\n    this.defaultNext?.assertStateNotReused(states, graphId);\n  }\n\n  /**\n   * @internal\n   */\n  public getPermissions() {\n    return [\n      ...this.choices.flatMap((c) => c.next.getPermissions()),\n      ...(this.defaultNext?.getPermissions() || []),\n      ...super.getPermissions(),\n    ];\n  }\n\n  /**\n   * @internal\n   */\n  public serialize() {\n    return {\n      ...super.serialize(),\n      ...this.defaultNext?.serialize(),\n      ...this.choices.reduce(\n        (acc, c) => ({ ...acc, ...c.next.serialize() }),\n        {},\n      ),\n    };\n  }\n\n  protected toJSON() {\n    return {\n      Type: \"Choice\",\n      Choices: this.choices.map((c) => ({\n        Condition: c.condition,\n        Next: c.next.name,\n      })),\n      Default: this.defaultNext?.name,\n      ...super.toJSON(),\n      End: undefined,\n    };\n  }\n}\n", "import { Input } from \"../../input\";\nimport { State, StateArgs } from \"./state\";\n\nexport interface FailArgs extends StateArgs {\n  /**\n   * A custom string that describes the cause of the error.\n   *\n   * ```ts\n   * {\n   *   cause: \"User not found\"\n   * }\n   * ```\n   *\n   * Alternatively, you can specify a JSONata expression that evaluates to a string.\n   *\n   * ```ts\n   * {\n   *   cause: \"{% $states.input.user %}\"\n   * }\n   * ```\n   */\n  cause?: Input<string>;\n  /**\n   * An error name that you can provide to perform error handling using `retry` or\n   * `catch`.\n   * ```ts\n   * {\n   *   error: \"UserNotFound\"\n   * }\n   * ```\n   * Alternatively, you can specify a JSONata expression that evaluates to a string.\n   * ```ts\n   * {\n   *   error: \"{% $states.input.error %}\"\n   * }\n   * ```\n   */\n  error?: Input<string>;\n}\n\n/**\n * The `Fail` state is internally used by the `StepFunctions` component to add a\n * [Fail workflow state](https://docs.aws.amazon.com/step-functions/latest/dg/state-fail.html)\n * to a state machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `fail` method of the `StepFunctions` component.\n */\nexport class Fail extends State {\n  constructor(protected args: FailArgs) {\n    super(args);\n  }\n\n  /**\n   * Serialize the state into JSON state definition.\n   */\n  protected toJSON() {\n    return {\n      Type: \"Fail\",\n      Error: this.args.error,\n      Cause: this.args.cause,\n      ...super.toJSON(),\n      End: undefined,\n    };\n  }\n}\n", "import { Output, output } from \"@pulumi/pulumi\";\nimport { Input } from \"../../input\";\nimport {\n  CatchArgs,\n  Failable,\n  JSONata,\n  Nextable,\n  RetryArgs,\n  State,\n  StateArgs,\n} from \"./state\";\n\nexport interface MapArgs extends StateArgs {\n  /**\n   * The processing mode for the `Map` state.\n   *\n   * The `inline` mode is the default and has limited concurrency. In this mode, each item\n   * in the `Map` state runs as a part of the current workflow.\n   *\n   * The `standard` and `express` mode have high concurrency. In these mode, each item in\n   * the `Map` state runs as a child workflow. This enables high concurrency of up to 10,000\n   * parallel child workflows. Each child workflow has its own, separate execution history.\n   * - In `standard` mode, each child runs as a StepFunctions Standard workflow.\n   * - In `express` mode, each child runs as a StepFunctions Express workflow.\n   *\n   * :::note\n   * `Map` state with `standard` or `express` mode is not supported in `express` type StepFunctions.\n   * :::\n   *\n   * @default `\"inline\"`\n   * @example\n   * ```js\n   * {\n   *   type: \"express\"\n   * }\n   * ```\n   */\n  mode?: Input<\"inline\" | \"standard\" | \"express\">;\n  /**\n   * The list of items to process.\n   *\n   * @example\n   * For example, you can specify an array of items.\n   *\n   * ```ts\n   * {\n   *   items: [\"item1\", \"item2\", \"item3\"]\n   * }\n   * ```\n   *\n   * Or, specify a JSONata expression that evaluates to an array of items.\n   *\n   * ```ts\n   * {\n   *   items: \"{% $states.input.items %}\"\n   * }\n   * ```\n   */\n  items?: Input<JSONata | any[]>;\n  /**\n   * Reformat the values of the input array items before they're passed on to each\n   * state iteration.\n   *\n   * For example, you can pass in what you want the fields to be.\n   *\n   * ```ts\n   * {\n   *   \"itemSelector\": {\n   *     \"size\": 10,\n   *     \"value.$\": \"$$.Map.Item.Value\"\n   *   }\n   * }\n   * ```\n   *\n   * When applied to the following list of items.\n   *\n   * ```ts\n   * [\n   *   {\n   *     \"resize\": \"true\",\n   *     \"format\": \"jpg\"\n   *   },\n   *   {\n   *     \"resize\": \"false\",\n   *     \"format\": \"png\"\n   *   }\n   * ]\n   * ```\n   *\n   * A transformed item will look like.\n   *\n   * ```ts\n   * {\n   *   \"size\": 10,\n   *   \"value\": {\n   *     \"resize\": \"true\",\n   *     \"format\": \"jpg\"\n   *   }\n   * }\n   * ```\n   *\n   * Learn more about [`ItemSelector`](https://docs.aws.amazon.com/step-functions/latest/dg/input-output-itemselector.html).\n   */\n  itemSelector?: Input<Record<string, Input<any>>>;\n  /**\n   * An upper bound on the number of `Map` state iterations that can run in parallel.\n   * Takes an integer or a JSONata expression that evaluates to an integer.\n   *\n   * Default to 0, which means there's no limit on the concurrency.\n   *\n   * @default `0`\n   * @example\n   * For example, to limit it to 10 concurrent iterations.\n   * ```ts\n   * {\n   *   maxConcurrency: 10\n   * }\n   * ```\n   */\n  maxConcurrency?: Input<JSONata | number>;\n  /**\n   * The state to execute for each item in the array.\n   *\n   * @example\n   *\n   * For example, to iterate over an array of items and execute a Lambda function\n   * for each item.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const processor = sst.aws.StepFunctions.lambdaInvoke({\n   *   name: \"Processor\",\n   *   function: \"src/processor.handler\"\n   * });\n   *\n   * sst.aws.StepFunctions.map({\n   *   processor,\n   *   name: \"Map\",\n   *   items: \"{% $states.input.items %}\"\n   * });\n   * ```\n   */\n  processor: State;\n}\n\n/**\n * The `Map` state is internally used by the `StepFunctions` component to add a [Map\n * workflow state](https://docs.aws.amazon.com/step-functions/latest/dg/state-map.html)\n * to a state machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `map` method of the `StepFunctions` component.\n */\nexport class Map extends State implements Nextable, Failable {\n  private processor: State;\n  private mode: Output<\"inline\" | \"standard\" | \"express\">;\n\n  constructor(protected args: MapArgs) {\n    super(args);\n    this.processor = args.processor.getHead();\n    this.addChildGraph(this.processor);\n    this.mode = output(args.mode ?? \"inline\");\n  }\n\n  /**\n   * Add a next state to the `Map` state. If the state completes successfully,\n   * continue execution to the given `state`.\n   *\n   * @param state The state to transition to.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.map({\n   *   // ...\n   * })\n   * .next(state);\n   * ```\n   */\n  public next<T extends State>(state: T): T {\n    return this.addNext(state);\n  }\n\n  /**\n   * Add a retry behavior to the `Map` state. If the state fails with any of the\n   * specified errors, retry the execution.\n   *\n   * @param args Properties to define the retry behavior.\n   *\n   * @example\n   *\n   * This defaults to.\n   *\n   * ```ts title=\"sst.config.ts\" {5-8}\n   * sst.aws.StepFunctions.map({\n   *   // ...\n   * })\n   * .retry({\n   *   errors: [\"States.ALL\"],\n   *   interval: \"1 second\",\n   *   maxAttempts: 3,\n   *   backoffRate: 2\n   * });\n   * ```\n   */\n  public retry(args?: RetryArgs) {\n    return this.addRetry(args);\n  }\n\n  /**\n   * Add a catch behavior to the `Map` state. So if the state fails with any of the\n   * specified errors, it'll continue execution to the given `state`.\n   *\n   * @param state The state to transition to on error.\n   * @param args Properties to customize error handling.\n   *\n   * @example\n   *\n   * This defaults to.\n   *\n   * ```ts title=\"sst.config.ts\" {5}\n   * sst.aws.StepFunctions.map({\n   *   // ...\n   * })\n   * .catch({\n   *   errors: [\"States.ALL\"]\n   * });\n   * ```\n   */\n  public catch(state: State, args: CatchArgs = {}) {\n    return this.addCatch(state, args);\n  }\n\n  /**\n   * @internal\n   */\n  public getPermissions() {\n    return [...this.processor.getPermissions(), ...super.getPermissions()];\n  }\n\n  /**\n   * Serialize the state into JSON state definition.\n   */\n  protected toJSON() {\n    return {\n      Type: \"Map\",\n      Items: this.args.items,\n      ItemSelector: this.args.itemSelector,\n      ItemProcessor: {\n        ProcessorConfig: this.mode.apply((mode) =>\n          mode === \"inline\"\n            ? { Mode: \"INLINE\" }\n            : { Mode: \"DISTRIBUTED\", ExecutionType: mode.toUpperCase() },\n        ),\n        StartAt: this.processor.name,\n        States: this.processor.serialize(),\n      },\n      MaxConcurrency: this.args.maxConcurrency,\n      ...super.toJSON(),\n    };\n  }\n}\n", "import { Input } from \"../../input\";\nimport {\n  CatchArgs,\n  Failable,\n  Nextable,\n  RetryArgs,\n  State,\n  StateArgs,\n} from \"./state\";\n\nexport interface ParallelArgs extends StateArgs {\n  /**\n   * The arguments to be passed to the APIs of the connected resources. Values can\n   * include outputs from other resources and JSONata expressions.\n   *\n   * @example\n   *\n   * ```ts\n   * {\n   *   arguments: {\n   *     product: \"{% $states.input.order.product %}\",\n   *     url: api.url,\n   *     count: 32\n   *   }\n   * }\n   * ```\n   */\n  arguments?: Input<Record<string, Input<any>>>;\n}\n\n/**\n * The `Parallel` state is internally used by the `StepFunctions` component to add a [Parallel\n * workflow state](https://docs.aws.amazon.com/step-functions/latest/dg/state-parallel.html)\n * to a state machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `parallel` method of the `StepFunctions` component.\n */\nexport class Parallel extends State implements Nextable, Failable {\n  private branches: State[] = [];\n\n  constructor(protected args: ParallelArgs) {\n    super(args);\n  }\n\n  /**\n   * Add a branch state to the `Parallel` state. Each branch runs concurrently.\n   *\n   * @param branch The state to add as a branch.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const parallel = sst.aws.StepFunctions.parallel({ name: \"Parallel\" });\n   * \n   * parallel.branch(processorA);\n   * parallel.branch(processorB);\n   * ```\n   */\n  public branch(branch: State) {\n    const head = branch.getHead();\n    this.branches.push(head);\n    this.addChildGraph(head);\n    return this;\n  }\n\n  /**\n   * Add a next state to the `Parallel` state. If all branches complete successfully,\n   * this'll continue execution to the given `state`.\n   *\n   * @param state The state to transition to.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.parallel({\n   *   // ...\n   * })\n   * .next(state);\n   * ```\n   */\n  public next<T extends State>(state: T): T {\n    return this.addNext(state);\n  }\n\n  /**\n   * Add a retry behavior to the `Parallel` state. If the state fails with any of the\n   * specified errors, retry execution using the specified parameters.\n   *\n   * @param args Properties to define the retry behavior.\n   *\n   * @example\n   *\n   * This defaults to.\n   *\n   * ```ts title=\"sst.config.ts\" {5-8}\n   * sst.aws.StepFunctions.parallel({\n   *   // ...\n   * })\n   * .retry({\n   *   errors: [\"States.ALL\"],\n   *   interval: \"1 second\",\n   *   maxAttempts: 3,\n   *   backoffRate: 2\n   * });\n   * ```\n   */\n  public retry(args?: RetryArgs) {\n    return this.addRetry(args);\n  }\n\n  /**\n   * Add a catch behavior to the `Parallel` state. So if the state fails with any\n   * of the specified errors, it'll continue execution to the given `state`.\n   *\n   * @param state The state to transition to on error.\n   * @param args Properties to customize error handling.\n   *\n   * @example\n   *\n   * This defaults to.\n   *\n   * ```ts title=\"sst.config.ts\" {5}\n   * sst.aws.StepFunctions.parallel({\n   *   // ...\n   * })\n   * .catch({\n   *   errors: [\"States.ALL\"]\n   * });\n   * ```\n   */\n  public catch(state: State, args: CatchArgs = {}) {\n    return this.addCatch(state, args);\n  }\n\n  /**\n   * @internal\n   */\n  public getPermissions() {\n    return [\n      ...this.branches.flatMap((b) => b.getPermissions()),\n      ...super.getPermissions(),\n    ];\n  }\n\n  /**\n   * Serialize the state into JSON state definition.\n   */\n  protected toJSON() {\n    if (this.branches.length === 0) {\n      throw new Error(\n        `The \"${this.name}\" Parallel state must have at least one branch.`,\n      );\n    }\n\n    return {\n      Type: \"Parallel\",\n      Branches: this.branches.map((b) => {\n        return {\n          StartAt: b.name,\n          States: b.serialize(),\n        };\n      }),\n      ...super.toJSON(),\n    };\n  }\n}\n", "import { Input } from \"../../input\";\nimport { Nextable, State, StateArgs } from \"./state\";\n\nexport interface PassArgs extends StateArgs { }\n\n/**\n * The `Pass` state is internally used by the `StepFunctions` component to add a [Pass\n * workflow state](https://docs.aws.amazon.com/step-functions/latest/dg/state-pass.html)\n * to a state machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `pass` method of the `StepFunctions` component.\n */\nexport class Pass extends State implements Nextable {\n  constructor(protected args: PassArgs) {\n    super(args);\n  }\n\n  /**\n   * Add a next state to the `Pass` state. After this state completes, it'll\n   * transition to the given `state`.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.pass({\n   *   // ...\n   * })\n   * .next(state);\n   * ```\n   */\n  public next<T extends State>(state: T): T {\n    return this.addNext(state);\n  }\n\n  /**\n   * Serialize the state into JSON state definition.\n   */\n  protected toJSON() {\n    return {\n      Type: \"Pass\",\n      ...super.toJSON(),\n    };\n  }\n}\n", "import { State, StateArgs } from \"./state\";\n\nexport interface SucceedArgs extends StateArgs {}\n\n/**\n * The `Succeed` state is internally used by the `StepFunctions` component to add a [Succeed\n * workflow state](https://docs.aws.amazon.com/step-functions/latest/dg/state-succeed.html)\n * to a state machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `succeed` method of the `StepFunctions` component.\n */\nexport class Succeed extends State {\n  constructor(protected args: SucceedArgs) {\n    super(args);\n  }\n\n  /**\n   * Serialize the state into JSON state definition.\n   */\n  protected toJSON() {\n    return {\n      Type: \"Succeed\",\n      ...super.toJSON(),\n      End: undefined,\n    };\n  }\n}\n", "import { all, Output, output } from \"@pulumi/pulumi\";\nimport { Duration, toSeconds } from \"../../duration\";\nimport { Input } from \"../../input\";\nimport { Prettify } from \"../../component\";\nimport {\n  Function,\n  FunctionArgs,\n  FunctionArn,\n  FunctionPermissionArgs,\n} from \"../function\";\nimport {\n  CatchArgs,\n  Failable,\n  isJSONata,\n  JSONata,\n  Nextable,\n  RetryArgs,\n  State,\n  StateArgs,\n} from \"./state\";\nimport { SnsTopic } from \"../sns-topic\";\nimport { Queue } from \"../queue\";\nimport { Task as ServiceTask } from \"../task\";\nimport { Bus } from \"../bus\";\n\ninterface TaskBaseArgs extends StateArgs {\n  /**\n   * Specifies how a `Task` state integrates with the specified AWS service.\n   *\n   * The `response` integration is the default. The `Task` state calls a service and\n   * progress to the next state immediately after it gets an HTTP response.\n   *\n   * In `sync` integration, the `Task` state waits for the service to complete the\n   * job (ie. Amazon ECS task, AWS CodeBuild build, etc.) before progressing to\n   * the next state.\n   *\n   * In `token` integration, the `Task` state calls a service and pauses until a task token\n   * is returned. To resume execution, call the [`SendTaskSuccess`](https://docs.aws.amazon.com/step-functions/latest/apireference/API_SendTaskSuccess.html)\n   * or [`SendTaskFailure`](https://docs.aws.amazon.com/step-functions/latest/apireference/API_SendTaskFailure.html)\n   * API with the task token.\n   *\n   * Learn more about [service integration patterns](https://docs.aws.amazon.com/step-functions/latest/dg/connect-to-resource.html).\n   *\n   * @default `\"response\"`\n   *\n   * @example\n   *\n   * ```ts\n   * {\n   *   integration: \"token\"\n   * }\n   * ```\n   */\n  integration?: Input<\"response\" | \"sync\" | \"token\">;\n  /**\n   * Specifies a target role the state machine's execution role must assume before invoking the specified resource.\n   * See [Task state's Credentials field](https://docs.aws.amazon.com/step-functions/latest/dg/state-task.html#task-state-example-credentials) examples.\n   *\n   * @internal\n   *\n   * @example\n   *\n   * ```ts\n   * {\n   *   role: \"arn:aws:iam::123456789012:role/MyRole\"\n   * }\n   * ```\n   */\n  role?: Input<string>;\n  /**\n   * Specifies the maximum time a task can run before it times out with the\n   * `States.Timeout` error and fails.\n   *\n   * @example\n   * ```ts\n   * {\n   *   timeout: \"10 seconds\"\n   * }\n   * ```\n   *\n   * Alternatively, you can specify a JSONata expression that evaluates to a number\n   * in seconds.\n   *\n   * ```ts\n   * {\n   *   time: \"{% $states.input.timeout %}\"\n   * }\n   * ```\n   *\n   * @default `\"99999999 seconds\"`\n   */\n  timeout?: Input<JSONata | Duration>;\n}\n\nexport interface TaskArgs extends TaskBaseArgs {\n  /**\n   * Specifies the maximum time a task can run before it times out with the\n   * `States.Timeout` error and fails.\n   *\n   * @example\n   * ```ts\n   * {\n   *   timeout: \"10 seconds\"\n   * }\n   * ```\n   *\n   * Alternatively, you can specify a JSONata expression that evaluates to a number\n   * in seconds.\n   *\n   * ```ts\n   * {\n   *   time: \"{% $states.input.timeout %}\"\n   * }\n   * ```\n   *\n   * @default `\"60 seconds\"` for HTTP tasks, `\"99999999 seconds\"` for all other tasks.\n   */\n  timeout?: Input<JSONata | Duration>;\n  /**\n   * The ARN of the task. Follows the format.\n   *\n   * ```ts\n   * {\n   *   resource: \"arn:aws:states:::service:task_type:name\"\n   * }\n   * ```\n   *\n   * @example\n   *\n   * For example, to start an AWS CodeBuild build.\n   *\n   * ```ts\n   * {\n   *   resource: \"arn:aws:states:::codebuild:startBuild\"\n   * }\n   * ```\n   *\n   * Learn more about [task ARNs](https://docs.aws.amazon.com/step-functions/latest/dg/state-task.html#task-types).\n   *\n   */\n  resource: Input<string>;\n  /**\n   * The arguments to be passed to the APIs of the connected resources. Values can\n   * include outputs from other resources and JSONata expressions.\n   *\n   * @example\n   *\n   * ```ts\n   * {\n   *   arguments: {\n   *     product: \"{% $states.input.order.product %}\",\n   *     url: api.url,\n   *     count: 32\n   *   }\n   * }\n   * ```\n   */\n  arguments?: Input<Record<string, Input<any>>>;\n  /**\n   * Permissions and the resources that the task needs to access. These permissions\n   * are used to create the task's IAM role.\n   *\n   * @example\n   * For example, allow the task to read and write to an S3 bucket called\n   * `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * Allow the task to perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   *\n   * Granting the task permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: Prettify<FunctionPermissionArgs>[];\n}\n\n/**\n * The `Task` state is internally used by the `StepFunctions` component to add a [Task\n * workflow state](https://docs.aws.amazon.com/step-functions/latest/dg/state-task.html)\n * to a state machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `task` method of the `StepFunctions`\n * component.\n *\n * It's also returned by convenience methods like `lambdaInvoke`, `snsPublish`,\n * `sqsSendMessage`, and more.\n */\nexport class Task extends State implements Nextable, Failable {\n  private resource: Output<string>;\n\n  constructor(protected args: TaskArgs) {\n    super(args);\n\n    const integration = output(this.args.integration ?? \"response\");\n    this.resource = all([this.args.resource, integration]).apply(\n      ([resource, integration]) => {\n        if (integration === \"sync\" && !resource.endsWith(\".sync\"))\n          return `${resource}.sync`;\n        if (integration === \"token\" && !resource.endsWith(\".waitForTaskToken\"))\n          return `${resource}.waitForTaskToken`;\n        return resource;\n      },\n    );\n  }\n\n  /**\n   * Add a next state to the `Task` state. If the state completes successfully,\n   * continue execution to the given `state`.\n   *\n   * @param state The state to transition to.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.task({\n   *   // ...\n   * })\n   * .next(state);\n   * ```\n   */\n  public next<T extends State>(state: T): T {\n    return this.addNext(state);\n  }\n\n  /**\n   * Add a retry behavior to the `Task` state. If the state fails with any of the\n   * specified errors, retry the execution.\n   *\n   * @param args Properties to define the retry behavior.\n   *\n   * @example\n   *\n   * This defaults to.\n   *\n   * ```ts title=\"sst.config.ts\" {5-8}\n   * sst.aws.StepFunctions.task({\n   *   // ...\n   * })\n   * .retry({\n   *   errors: [\"States.ALL\"],\n   *   interval: \"1 second\",\n   *   maxAttempts: 3,\n   *   backoffRate: 2\n   * });\n   * ```\n   */\n  public retry(args?: RetryArgs) {\n    return this.addRetry(args);\n  }\n\n  /**\n   * Add a catch behavior to the `Task` state. So if the state fails with any of the\n   * specified errors, it'll continue execution to the given `state`.\n   *\n   * @param state The state to transition to on error.\n   * @param args Properties to customize error handling.\n   *\n   * @example\n   *\n   * This defaults to.\n   *\n   * ```ts title=\"sst.config.ts\" {5}\n   * sst.aws.StepFunctions.task({\n   *   // ...\n   * })\n   * .catch({\n   *   errors: [\"States.ALL\"]\n   * });\n   * ```\n   */\n  public catch(state: State, args: CatchArgs = {}) {\n    return this.addCatch(state, args);\n  }\n\n  /**\n   * @internal\n   */\n  public getPermissions() {\n    return [...(this.args.permissions || []), ...super.getPermissions()];\n  }\n\n  /**\n   * Serialize the state into JSON state definition.\n   */\n  protected toJSON() {\n    return {\n      Type: \"Task\",\n      ...super.toJSON(),\n      Resource: this.resource,\n      Credentials: this.args.role && {\n        RoleArn: this.args.role,\n      },\n      Timeout: this.args.timeout\n        ? output(this.args.timeout).apply((t) =>\n            isJSONata(t) ? t : toSeconds(t as Duration),\n          )\n        : undefined,\n      Arguments: this.args.arguments,\n    };\n  }\n}\n\nexport interface LambdaInvokeArgs extends TaskBaseArgs {\n  /**\n   * The `Function` to invoke.\n   */\n  function: Function | Input<string | FunctionArgs | FunctionArn>;\n  /**\n   * The payload to send to the Lambda function. Values can include outputs from\n   * other resources and JSONata expressions.\n   * @example\n   *\n   * ```ts\n   * {\n   *   payload: {\n   *     env: \"{% $states.input.foo %}\",\n   *     url: api.url,\n   *     key: 1\n   *   }\n   * }\n   * ```\n   */\n  payload?: Record<string, Input<unknown>>;\n}\n\nexport interface SnsPublishArgs extends TaskBaseArgs {\n  /**\n   * The `SnsTopic` component to publish the message to.\n   */\n  topic: SnsTopic;\n  /**\n   * The message to send to the SNS topic.\n   */\n  message: Input<string>;\n  /**\n   * The message attributes to send to the SNS topic. Values can include outputs\n   * from other resources and JSONata expressions.\n   * @example\n   *\n   * ```ts\n   * {\n   *   messageAttributes: {\n   *     env: \"{% $states.input.foo %}\",\n   *     url: api.url,\n   *     key: 1\n   *   }\n   * }\n   * ```\n   */\n  messageAttributes?: Input<Record<string, Input<string>>>;\n  /**\n   * The message deduplication ID to send to the SNS topic. This applies to FIFO\n   * topics only.\n   *\n   * This is a string that's used to deduplicate messages sent within the minimum\n   * 5 minute interval.\n   */\n  messageDeduplicationId?: Input<string>;\n  /**\n   * The message group ID to send to the SNS topic. This only applies to FIFO\n   * topics.\n   */\n  messageGroupId?: Input<string>;\n  /**\n   * An optional subject line when the message is delivered to email endpoints.\n   */\n  subject?: Input<string>;\n}\n\nexport interface SqsSendMessageArgs extends TaskBaseArgs {\n  /**\n   * The `Queue` component to send the message to.\n   */\n  queue: Queue;\n  /**\n   * The message body to send to the SQS queue. The maximum size is 256KB.\n   */\n  messageBody: Input<string | Record<string, Input<unknown>>>;\n  /**\n   * The message attributes to send to the SQS queue. Values can include outputs\n   * from other resources and JSONata expressions.\n   * @example\n   *\n   * ```ts\n   * {\n   *   messageAttributes: {\n   *     env: \"{% $states.input.foo %}\",\n   *     url: api.url,\n   *     key: 1\n   *   }\n   * }\n   * ```\n   */\n  messageAttributes?: Input<Record<string, Input<string>>>;\n  /**\n   * The message deduplication ID to send to the SQS queue. This applies to FIFO\n   * queues only.\n   *\n   * This is a string that's used to deduplicate messages sent within the minimum\n   * 5 minute interval.\n   */\n  messageDeduplicationId?: Input<string>;\n  /**\n   * The message group ID to send to the SQS queue. This only applies to FIFO\n   * queues.\n   */\n  messageGroupId?: Input<string>;\n}\n\nexport interface EcsRunTaskArgs extends TaskBaseArgs {\n  /**\n   * The ECS `Task` to run.\n   *\n   * ```ts title=\"sst.config.ts\" {6}\n   * const myCluster = new sst.aws.Cluster(\"MyCluster\");\n   * const myTask = new sst.aws.Task(\"MyTask\", { cluster: myCluster });\n   *\n   * sst.aws.StepFunctions.ecsRunTask({\n   *   name: \"RunTask\",\n   *   task: myTask\n   * });\n   * ```\n   */\n  task: ServiceTask;\n  /**\n   * The environment variables to apply to the ECS task. Values can include outputs\n   * from other resources and JSONata expressions.\n   * @example\n   *\n   * ```ts\n   * {\n   *   environment: {\n   *     MY_ENV: \"{% $states.input.foo %}\",\n   *     MY_URL: api.url,\n   *     MY_KEY: 1\n   *   }\n   * }\n   * ```\n   */\n  environment?: Input<Record<string, Input<string>>>;\n}\n\nexport interface EventBridgePutEventsArgs extends TaskBaseArgs {\n  /**\n   * A list of events to send to the EventBridge.\n   *\n   * @example\n   * ```ts\n   * {\n   *   events: [\n   *     {\n   *       bus: myBus,\n   *       source: \"my-application\",\n   *       detailType: \"order-created\",\n   *       detail: {\n   *         orderId: \"{% $states.input.orderId %}\",\n   *         customerId: \"{% $states.input.customer.id %}\",\n   *         items: \"{% $states.input.items %}\"\n   *       }\n   *     }\n   *   ]\n   * }\n   * ```\n   */\n  events: {\n    /**\n     * The `Bus` component to send the event to.\n     */\n    bus: Bus;\n    /**\n     * The source of the event. This string or JSONata expression identifies the\n     * service or component that generated it.\n     */\n    source?: Input<string>;\n    /**\n     * The detail type of the event. This helps subscribers filter and route events.\n     * This can be a string or JSONata expression.\n     */\n    detailType?: Input<string>;\n    /**\n     * The event payload containing the event details as a JSON object.\n     * Values can also include a JSONata expression.\n     *\n     * @example\n     * ```ts\n     * {\n     *   detail: {\n     *     type: \"order\",\n     *     message: \"{% $states.input.message %}\"\n     *   }\n     * }\n     * ```\n     */\n    detail?: Input<Record<string, Input<unknown>>>;\n  }[];\n}\n", "import { output } from \"@pulumi/pulumi\";\nimport { Duration, toSeconds } from \"../../duration\";\nimport { Input } from \"../../input\";\nimport { isJSONata, JSONata, Nextable, State, StateArgs } from \"./state\";\n\nexport interface WaitArgs extends StateArgs {\n  /**\n   * Specify the amount of time to wait before starting the next state.\n   * @example\n   *\n   * ```ts\n   * {\n   *   time: \"10 seconds\"\n   * }\n   * ```\n   *\n   * Alternatively, you can specify a JSONata expression that evaluates to a number\n   * in seconds.\n   *\n   * ```ts\n   * {\n   *   time: \"{% $states.input.wait_time %}\"\n   * }\n   * ```\n   *\n   * Here `wait_time` is a number in seconds.\n   */\n  time?: Input<JSONata | Duration>;\n  /**\n   * A timestamp to wait till.\n   *\n   * Timestamps must conform to the RFC3339 profile of ISO 8601 and it needs:\n   *\n   * 1. An uppercase T as a delimiter between the date and time.\n   * 2. An uppercase Z to denote that a time zone offset is not present.\n   *\n   * @example\n   * ```ts\n   * {\n   *   timestamp: \"2026-01-01T00:00:00Z\"\n   * }\n   * ```\n   *\n   * Alternatively, you can use a JSONata expression to evaluate to a timestamp that\n   * conforms to the above format.\n   *\n   * ```ts\n   * {\n   *   timestamp: \"{% $states.input.timestamp %}\"\n   * }\n   * ```\n   */\n  timestamp?: Input<string>;\n}\n\n/**\n * The `Wait` state is internally used by the `StepFunctions` component to add a [Wait\n * workflow state](https://docs.aws.amazon.com/step-functions/latest/dg/state-wait.html)\n * to a state machine.\n *\n * :::note\n * This component is not intended to be created directly.\n * :::\n *\n * You'll find this component returned by the `wait` method of the `StepFunctions` component.\n */\nexport class Wait extends State implements Nextable {\n  constructor(protected args: WaitArgs) {\n    super(args);\n  }\n\n  /**\n   * Add a next state to the `Wait` state. After the wait completes, it'll transition\n   * to the given `state`.\n   *\n   * @example\n   *\n   * ```ts title=\"sst.config.ts\"\n   * sst.aws.StepFunctions.wait({\n   *   name: \"Wait\",\n   *   time: \"10 seconds\"\n   * })\n   * .next(state);\n   * ```\n   */\n  public next<T extends State>(state: T): T {\n    return this.addNext(state);\n  }\n\n  /**\n   * Serialize the state into JSON state definition.\n   */\n  protected toJSON() {\n    return {\n      Type: \"Wait\",\n      Seconds: this.args.time\n        ? output(this.args.time).apply((t) =>\n          isJSONata(t) ? t : toSeconds(t as Duration),\n        )\n        : undefined,\n      Timestamp: this.args.timestamp,\n      ...super.toJSON(),\n    };\n  }\n}\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output } from \"@pulumi/pulumi\";\nimport { VisibleError } from \"../error.js\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\nimport { RouterRouteArgs } from \"./router.js\";\nimport { Prettify } from \"../component.js\";\n\nexport interface TanStackStartArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * Instead of deploying your TanStack Start app, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your TanStack Start app needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your TanStack Start app is located.  This path is relative to your `sst.config.ts`.\n   *\n   * By default it assumes your TanStack Start app is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your TanStack Start app is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your TanStack Start app. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your TanStack Start app has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * Set in your TanStack Start app. These are made available:\n   *\n   * 1. In `vinxi build`, they are loaded into `process.env`.\n   * 2. Locally while running `sst dev vinxi dev`.\n   *\n   * :::tip\n   * You can also `link` resources to your TanStack Start app and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Set a custom domain for your TanStack Start app.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Serve your TanStack Start app through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router`.\n   *\n   * :::note\n   * TanStack Start does not currently support base paths and can only be routed\n   * from the root `/` path.\n   * :::\n   *\n   * To serve your TanStack Start app **from a subdomain**, you'll need to\n   * configure the domain in your `Router` component to match both the root and the\n   * subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   */\n  router?: Prettify<Omit<RouterRouteArgs, \"path\">>;\n  /**\n   * The command used internally to build your TanStack Start app.\n   *\n   * @default `\"npm run build\"`\n   *\n   * @example\n   *\n   * If you want to use a different build command.\n   * ```js\n   * {\n   *   buildCommand: \"yarn build\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * Configure how the TanStack Start app assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the TanStack Start app to use an existing CloudFront cache policy.\n   *\n   * :::note\n   * CloudFront has a limit of 20 cache policies per account, though you can request a limit\n   * increase.\n   * :::\n   *\n   * By default, a new cache policy is created for it. This allows you to reuse an existing\n   * policy instead of creating a new one.\n   *\n   * @default A new cache policy is created\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `TanStackStart` component lets you deploy a [TanStack Start](https://tanstack.com/start/latest) app to AWS.\n *\n * :::note\n * You need to make sure the `server.preset` value in the `app.config.ts` is set to `aws-lambda`.\n * :::\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy a TanStack Start app that's in the project root.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.TanStackStart(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys the TanStack Start app in the `my-app/` directory.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.TanStackStart(\"MyWeb\", {\n *   path: \"my-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your TanStack Start app.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.TanStackStart(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.TanStackStart(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your TanStack Start app. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.TanStackStart(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your TanStack Start app.\n *\n * ```ts title=\"src/app.tsx\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class TanStackStart extends SsrSite {\n  constructor(\n    name: string,\n    args: TanStackStartArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand() { }\n\n  protected buildPlan(outputPath: Output<string>): Output<Plan> {\n    return outputPath.apply((outputPath) => {\n      const nitro = JSON.parse(\n        fs.readFileSync(\n          path.join(outputPath, \".output\", \"nitro.json\"),\n          \"utf-8\",\n        ),\n      );\n\n      if (![\"aws-lambda\"].includes(nitro.preset)) {\n        throw new VisibleError(\n          `TanStackStart's app.config.ts must be configured to use the \"aws-lambda\" preset. It is currently set to \"${nitro.preset}\".`,\n        );\n      }\n\n      const serverOutputPath = path.join(outputPath, \".output\", \"server\");\n\n      // If basepath is configured, nitro.mjs will have a line that looks like this:\n      // return createRouter$2({ routeTree: Nr, defaultPreload: \"intent\", defaultErrorComponent: ce, defaultNotFoundComponent: () => jsx(de, {}), scrollRestoration: true, basepath: \"/tan\" });\n      let basepath;\n      // TanStack Start currently doesn't support basepaths.\n      //try {\n      //  const serverNitroChunk = fs.readFileSync(\n      //    path.join(serverOutputPath, \"chunks\", \"nitro\", \"nitro.mjs\"),\n      //    \"utf-8\",\n      //  );\n      //  basepath = serverNitroChunk.match(/basepath: \"(.*)\"/)?.[1];\n      //} catch (e) {}\n\n      // Remove the .output/public/_server directory from the assets\n      // b/c all `_server` requests should go to the server function. If this folder is\n      // not removed, it will create an s3 route that conflicts with the `_server` route.\n      fs.rmSync(path.join(outputPath, \".output\", \"public\", \"_server\"), {\n        recursive: true,\n        force: true,\n      });\n      fs.rmSync(path.join(outputPath, \".output\", \"public\", \"api\"), {\n        recursive: true,\n        force: true,\n      });\n\n      return {\n        base: basepath,\n        server: {\n          description: \"Server handler for TanStack\",\n          handler: \"index.handler\",\n          bundle: serverOutputPath,\n          streaming: nitro?.config?.awsLambda?.streaming === true,\n        },\n        assets: [\n          {\n            from: path.join(\".output\", \"public\"),\n            to: \"\",\n            cached: true,\n          },\n        ],\n      };\n    });\n  }\n\n  /**\n   * The URL of the TanStack Start app.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n}\n\nconst __pulumiType = \"sst:aws:TanstackStart\";\n// @ts-expect-error\nTanStackStart.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output } from \"@pulumi/pulumi\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\n\nexport interface NuxtArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your Nuxt app is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your Nuxt app, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your Nuxt app needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your Nuxt app is located.  This path is relative to your `sst.config.ts`.\n   *\n   * By default it assumes your Nuxt app is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your Nuxt app is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your Nuxt app. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your Nuxt app has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * Set [environment variables](https://cli.vuejs.org/guide/mode-and-env.html) in your Nuxt\n   * app. These are made available:\n   *\n   * 1. In `nuxt build`, they are loaded into `process.env`.\n   * 2. Locally while running through `sst dev`.\n   *\n   * :::tip\n   * You can also `link` resources to your Nuxt app and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * Recall that in Vue, you need to prefix your environment variables with `VUE_APP_` to access these in the browser. [Read more here](https://cli.vuejs.org/guide/mode-and-env.html#using-env-variables-in-client-side-code).\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     // Accessible in the browser\n   *     VUE_APP_STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Set a custom domain for your Nuxt app.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Serve your Nuxt app through a `Router` component instead of a standalone CloudFront\n   * distribution.\n   *\n   * Let's say you have a Router component.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"*.example.com\",\n   * });\n   * ```\n   *\n   * You can then match a pattern and route to your app based on:\n   *\n   * - A path like `/docs`\n   * - A domain pattern like `docs.example.com`\n   * - A combined pattern like `dev.example.com/docs`\n   *\n   * For example, to match a path.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\",\n   *   },\n   * }\n   * ```\n   *\n   * Or match a domain.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\",\n   *   },\n   * }\n   * ```\n   *\n   * Route by both domain and path:\n   *\n   * ```ts title=\"sst.config.ts\"\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\",\n   *   },\n   * }\n   * ```\n   *\n   * If you are routing to a path like `/docs`, you must configure the\n   * base path in your Nuxt app. The base path must match the path in your\n   * route prop.\n   *\n   * :::caution\n   * If routing to a path, you need to configure that as the base path in your\n   * Nuxt app as well.\n   * :::\n   *\n   * For example, if you are routing `/docs` to a Nuxt app, you need to set\n   * [`baseURL`](https://nuxt.com/docs/api/nuxt-config#baseurl)\n   * to `/docs` in your `nuxt.config.ts` without a trailing slash.\n   *\n   * ```js title=\"nuxt.config.ts\" {3}\n   * export default defineNuxtConfig({\n   *   app: {\n   *     baseURL: '/docs'\n   *   }\n   * });\n   * ```\n   */\n  /**\n   * Serve your Nuxt app through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your Nuxt app **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * You also need to set the\n   * [`baseURL`](https://nuxt.com/docs/api/nuxt-config#baseurl) in your\n   * `nuxt.config.ts`.\n   *\n   * :::caution\n   * If routing to a path, you need to set that as the base path in your Nuxt\n   * app as well.\n   * :::\n   *\n   * ```js title=\"nuxt.config.ts\" {3}\n   * export default defineNuxtConfig({\n   *   app: {\n   *     baseURL: \"/docs\"\n   *   }\n   * });\n   * ```\n   *\n   * To serve your Nuxt app **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your Nuxt app **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set this as the `basePath` in your `nuxt.config.ts`, like\n   * above.\n   */\n  router?: SsrSiteArgs[\"router\"];\n  /**\n   * The command used internally to build your Nuxt app.\n   *\n   * @default `\"npm run build\"`\n   *\n   * @example\n   *\n   * If you want to use a different build command.\n   * ```js\n   * {\n   *   buildCommand: \"yarn build\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * Configure how the Nuxt app assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the Nuxt app to use an existing CloudFront cache policy.\n   *\n   * :::note\n   * CloudFront has a limit of 20 cache policies per account, though you can request a limit\n   * increase.\n   * :::\n   *\n   * By default, a new cache policy is created for it. This allows you to reuse an existing\n   * policy instead of creating a new one.\n   *\n   * @default A new cache policy is created\n   *\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `Nuxt` component lets you deploy a [Nuxt](https://nuxt.com) app to AWS.\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy a Nuxt app that's in the project root.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.Nuxt(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys the Nuxt app in the `my-nuxt-app/` directory.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Nuxt(\"MyWeb\", {\n *   path: \"my-nuxt-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your Nuxt app.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.Nuxt(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.Nuxt(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your Nuxt app. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.Nuxt(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your Nuxt app.\n *\n * ```ts title=\"server/api/index.ts\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class Nuxt extends SsrSite {\n  constructor(\n    name: string,\n    args: NuxtArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand() { }\n\n  protected buildPlan(outputPath: Output<string>): Output<Plan> {\n    return outputPath.apply((outputPath) => {\n      const basepath = fs\n        .readFileSync(path.join(outputPath, \"nuxt.config.ts\"), \"utf-8\")\n        .match(/baseURL: ['\"](.*)['\"]/)?.[1];\n\n      return {\n        base: basepath,\n        server: {\n          description: \"Server handler for Nuxt\",\n          handler: \"index.handler\",\n          bundle: path.join(outputPath, \".output\", \"server\"),\n        },\n        assets: [\n          {\n            from: path.join(\".output\", \"public\"),\n            to: \"\",\n            cached: true,\n          },\n        ],\n      };\n    });\n  }\n\n  /**\n   * The URL of the Nuxt app.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n}\n\nconst __pulumiType = \"sst:aws:Nuxt\";\n// @ts-expect-error\nNuxt.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport crypto from \"crypto\";\nimport {\n  ComponentResourceOptions,\n  Output,\n  Resource,\n  all,\n  interpolate,\n  output,\n} from \"@pulumi/pulumi\";\nimport { Cdn, CdnArgs } from \"./cdn.js\";\nimport { Bucket, BucketArgs } from \"./bucket.js\";\nimport { Component, Prettify, Transform, transform } from \"../component.js\";\nimport { Link } from \"../link.js\";\nimport { Input } from \"../input.js\";\nimport { globSync } from \"glob\";\nimport { BucketFile, BucketFiles } from \"./providers/bucket-files.js\";\nimport { getContentType, BaseSiteDev } from \"../base/base-site.js\";\nimport {\n  BaseStaticSiteArgs,\n  BaseStaticSiteAssets,\n  buildApp,\n  prepare,\n} from \"../base/base-static-site.js\";\nimport { cloudfront, getRegionOutput, s3 } from \"@pulumi/aws\";\nimport { URL_UNAVAILABLE } from \"./linkable.js\";\nimport { KvKeys } from \"./providers/kv-keys.js\";\nimport {\n  CF_BLOCK_CLOUDFRONT_URL_INJECTION,\n  CF_ROUTER_INJECTION,\n  KV_SITE_METADATA,\n  normalizeRouteArgs,\n  RouterRouteArgs,\n  RouterRouteArgsDeprecated,\n} from \"./router.js\";\nimport { DistributionInvalidation } from \"./providers/distribution-invalidation.js\";\nimport { VisibleError } from \"../error.js\";\nimport { KvRoutesUpdate } from \"./providers/kv-routes-update.js\";\nimport { toPosix } from \"../path.js\";\n\nexport interface StaticSiteArgs extends BaseStaticSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your static site is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your static site, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: false | Prettify<BaseSiteDev>;\n  /**\n   * Path to the directory where your static site is located. By default this assumes your static site is in the root of your SST app.\n   *\n   * This directory will be uploaded to S3. The path is relative to your `sst.config.ts`.\n   *\n   * :::note\n   * If the `build` options are specified, `build.output` will be uploaded to S3 instead.\n   * :::\n   *\n   * If you are using a static site generator, like Vite, you'll need to configure the `build` options. When these are set, the `build.output` directory will be uploaded to S3 instead.\n   *\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * Change where your static site is located.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: BaseStaticSiteArgs[\"path\"];\n  /**\n   * Configure CloudFront Functions to customize the behavior of HTTP requests and responses at the edge.\n   */\n  edge?: Input<{\n    /**\n     * Configure the viewer request function.\n     *\n     * The viewer request function can be used to modify incoming requests before they\n     * reach your origin server. For example, you can redirect users, rewrite URLs,\n     * or add headers.\n     *\n     * By default, a viewer request function is created to:\n     * - Disable CloudFront default URL if custom domain is set.\n     * - Rewrite URLs to append `index.html` to the URL if the URL ends with a `/`.\n     * - Rewrite URLs to append `.html` to the URL if the URL does not contain a file extension.\n     *\n     * @example\n     *\n     * You can pass in the code to inject into the function. The provided code will\n     * be injected at the start of the function.\n     *\n     * ```js\n     * async function handler(event) {\n     *   // User injected code\n     *\n     *   // Default behavior code\n     *\n     *   return event.request;\n     * }\n     * ```\n     *\n     * To add a custom header to all requests.\n     *\n     * ```js\n     * {\n     *   edge: {\n     *     viewerRequest: {\n     *       injection: `event.request.headers[\"x-foo\"] = { value: \"bar\" };`\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * You can use this add basic auth, [check out an example](/docs/examples/#aws-static-site-basic-auth).\n     */\n    viewerRequest?: Input<{\n      /**\n       * The code to inject into the viewer request function.\n       *\n       * @example\n       * To add a custom header to all requests.\n       *\n       * ```js\n       * {\n       *   edge: {\n       *     viewerRequest: {\n       *       injection: `event.request.headers[\"x-foo\"] = { value: \"bar\" };`\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      injection: Input<string>;\n      /**\n       * The KV store to associate with the viewer request function.\n       *\n       * @example\n       * ```js\n       * {\n       *   edge: {\n       *     viewerRequest: {\n       *       kvStore: \"arn:aws:cloudfront::123456789012:key-value-store/my-store\"\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      kvStore?: Input<string>;\n      /**\n       * @deprecated Use `kvStore` instead because CloudFront Functions only support one KV store.\n       */\n      kvStores?: Input<Input<string>[]>;\n    }>;\n    /**\n     * Configure the viewer response function.\n     *\n     * The viewer response function can be used to modify outgoing responses before they\n     * are sent to the client. For example, you can add security headers or change the response\n     * status code.\n     *\n     * By default, no viewer response function is set. A new function will be created with\n     * the provided code.\n     *\n     * @example\n     *\n     * You can pass in the code to inject into the function. And a CloudFront function will\n     * be created with the provided code injected into it.\n     *\n     * ```js\n     * async function handler(event) {\n     *   // User injected code\n     *\n     *   return event.response;\n     * }\n     * ```\n     *\n     * To add a custom header to all responses.\n     *\n     * ```js\n     * {\n     *   edge: {\n     *     viewerResponse: {\n     *       injection: `event.response.headers[\"x-foo\"] = { value: \"bar\" };`\n     *     }\n     *   }\n     * }\n     * ```\n     */\n    viewerResponse?: Input<{\n      /**\n       * The code to inject into the viewer response function.\n       *\n       * @example\n       * To add a custom header to all responses.\n       *\n       * ```js\n       * {\n       *   edge: {\n       *     viewerResponse: {\n       *       injection: `event.response.headers[\"x-foo\"] = { value: \"bar\" };`\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      injection: Input<string>;\n      /**\n       * The KV store to associate with the viewer response function.\n       *\n       * @example\n       * ```js\n       * {\n       *   server: {\n       *     edge: {\n       *       viewerResponse: {\n       *         kvStore: \"arn:aws:cloudfront::123456789012:key-value-store/my-store\"\n       *       }\n       *     }\n       *   }\n       * }\n       * ```\n       */\n      kvStore?: Input<string>;\n      /**\n       * @deprecated Use `kvStore` instead because CloudFront Functions only support one KV store.\n       */\n      kvStores?: Input<Input<string>[]>;\n    }>;\n  }>;\n  /**\n   * Configure if your static site needs to be built. This is useful if you are using a static site generator.\n   *\n   * The `build.output` directory will be uploaded to S3 instead.\n   * @example\n   * For a Vite project using npm this might look like this.\n   *\n   * ```js\n   * {\n   *   build: {\n   *     command: \"npm run build\",\n   *     output: \"dist\"\n   *   }\n   * }\n   * ```\n   */\n  build?: BaseStaticSiteArgs[\"build\"];\n  /**\n   * Configure how the static site's assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     fileOptions: [\n   *       {\n   *         files: \"**\",\n   *         cacheControl: \"max-age=31536000,public,immutable\"\n   *       },\n   *       {\n   *         files: \"**\\/*.html\",\n   *         cacheControl: \"max-age=0,no-cache,no-store,must-revalidate\"\n   *       }\n   *     ]\n   *   }\n   * }\n   * ```\n   * @default `Object`\n   */\n  assets?: Prettify<\n    BaseStaticSiteAssets & {\n      /**\n       * The name of the S3 bucket to upload the assets to.\n       * @default Creates a new bucket\n       * @example\n       * ```js\n       * {\n       *   assets: {\n       *     bucket: \"my-existing-bucket\"\n       *   }\n       * }\n       * ```\n       *\n       * :::note\n       * The bucket must allow CloudFront to access the bucket.\n       * :::\n       *\n       * When using an existing bucket, ensure that the bucket has a policy that allows CloudFront to access the bucket.\n       * For example, the bucket policy might look like this:\n       * ```json\n       * {\n       *   \"Version\": \"2012-10-17\",\n       *   \"Statement\": [\n       *     {\n       *       \"Effect\": \"Allow\",\n       *       \"Principal\": {\n       *         \"Service\": \"cloudfront.amazonaws.com\"\n       *       },\n       *       \"Action\": \"s3:GetObject\",\n       *       \"Resource\": \"arn:aws:s3:::my-existing-bucket/*\"\n       *     }\n       *   ]\n       * }\n       * ```\n       */\n      bucket?: Input<string>;\n      /**\n       * The path into the S3 bucket where the assets should be uploaded.\n       * @default Root of the bucket\n       * @example\n       * ```js\n       * {\n       *   assets: {\n       *     path: \"websites/my-website\"\n       *   }\n       * }\n       * ```\n       */\n      path?: Input<string>;\n      /**\n       * Configure if files from previous deployments should be purged from the bucket.\n       * @default `true`\n       * @example\n       * ```js\n       * {\n       *   assets: {\n       *     purge: false\n       *   }\n       * }\n       * ```\n       */\n      purge?: Input<boolean>;\n      /**\n       * Configure additional asset routes for serving files directly from the S3 bucket.\n       *\n       * These routes allow files stored in specific S3 bucket paths to be served under the\n       * same domain as your site. This is particularly useful for handling user-uploaded\n       * content.\n       *\n       * @example\n       * If user-uploaded files are stored in the `uploads` directory, and no `routes` are\n       * configured, these files will return 404 errors or display the `errorPage` if set.\n       * By including `uploads` in `routes`, all files in that folder will be served\n       * directly from the S3 bucket.\n       *\n       * ```js\n       * {\n       *   assets: {\n       *     routes: [\"uploads\"]\n       *   }\n       * }\n       * ```\n       */\n      routes?: Input<Input<string>[]>;\n    }\n  >;\n  /**\n   * Set a custom domain for your static site. Supports domains hosted either on\n   * [Route 53](https://aws.amazon.com/route53/) or outside AWS.\n   *\n   * :::tip\n   * You can also migrate an externally hosted domain to Amazon Route 53 by\n   * [following this guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/MigratingDNS.html).\n   * :::\n   *\n   * @example\n   *\n   * ```js\n   * {\n   *   domain: \"domain.com\"\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: CdnArgs[\"domain\"];\n  /**\n   * @deprecated The `router` prop is now the recommended way to serve your site\n   * through a `Router` component.\n   */\n  route?: Prettify<RouterRouteArgsDeprecated>;\n  /**\n   * Serve your static site through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your static site **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * If you are using a static site generator make sure the base path is set in your\n   * config.\n   *\n   * :::caution\n   * If routing to a path, you need to configure that as the base path in your\n   * static site generator as well.\n   * :::\n   *\n   * For Vite, set the `base` option in your `vite.config.ts`. It should end with\n   * a `/` to ensure asset paths like CSS and JS, are constructed correctly.\n   *\n   * ```js title=\"vite.config.ts\" {2}\n   * export default defineConfig({\n   *   base: \"/docs/\"\n   * });\n   * ```\n   *\n   * To serve your static site **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your static site **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set the base path in your static site generator\n   * configuration, like above.\n   */\n  router?: Prettify<RouterRouteArgs>;\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your static site has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Turn off invalidations.\n   * ```js\n   * {\n   *   invalidation: false\n   * }\n   * ```\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: Input<\n    | false\n    | {\n      /**\n       * Configure if `sst deploy` should wait for the CloudFront cache invalidation to finish.\n       *\n       * :::tip\n       * For non-prod environments it might make sense to pass in `false`.\n       * :::\n       *\n       * Waiting for the CloudFront cache invalidation process to finish ensures that the new content will be served once the deploy finishes. However, this process can sometimes take more than 5 mins.\n       * @default `false`\n       * @example\n       * ```js\n       * {\n       *   invalidation: {\n       *     wait: true\n       *   }\n       * }\n       * ```\n       */\n      wait?: Input<boolean>;\n      /**\n       * The paths to invalidate.\n       *\n       * You can either pass in an array of glob patterns to invalidate specific files. Or you can use the built-in option `all` to invalidation all files when any file changes.\n       *\n       * :::note\n       * Invalidating `all` counts as one invalidation, while each glob pattern counts as a single invalidation path.\n       * :::\n       * @default `\"all\"`\n       * @example\n       * Invalidate the `index.html` and all files under the `products/` route.\n       * ```js\n       * {\n       *   invalidation: {\n       *     paths: [\"/index.html\", \"/products/*\"]\n       *   }\n       * }\n       * ```\n       */\n      paths?: Input<\"all\" | string[]>;\n    }\n  >;\n  /**\n   * @deprecated The `route.path` prop is now the recommended way to configure the base\n   * path for the site.\n   */\n  base?: Input<string>;\n  /**\n   * @deprecated The `route` prop is now the recommended way to use the `Router` component\n   * to serve your site. Setting `route` will not create a standalone CloudFront\n   * distribution.\n   */\n  cdn?: Input<boolean>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Bucket resource used for uploading the assets.\n     */\n    assets?: Transform<BucketArgs>;\n    /**\n     * Transform the CloudFront CDN resource.\n     */\n    cdn?: Transform<CdnArgs>;\n  };\n}\n\n/**\n * The `StaticSite` component lets you deploy a static website to AWS. It uses [Amazon S3](https://aws.amazon.com/s3/) to store your files and [Amazon CloudFront](https://aws.amazon.com/cloudfront/) to serve them.\n *\n * It can also `build` your site by running your static site generator, like [Vite](https://vitejs.dev) and uploading the build output to S3.\n *\n * @example\n *\n * #### Minimal example\n *\n * Simply uploads the current directory as a static site.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.StaticSite(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Change the `path` that should be uploaded.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.StaticSite(\"MyWeb\", {\n *   path: \"path/to/site\"\n * });\n * ```\n *\n * #### Running locally\n *\n * In `sst dev`, we don't deploy your site to AWS because we assume you are running it locally.\n *\n * :::note\n * Your static site will not be deployed when run locally with `sst dev`.\n * :::\n *\n * For example, for a Vite site, you can run it locally with.\n *\n * ```bash\n * sst dev vite dev\n * ```\n *\n * This will start the Vite dev server and pass in any environment variables that you've set in your config. But it will not deploy your site to AWS.\n *\n * #### Deploy a Vite SPA\n *\n * Use [Vite](https://vitejs.dev) to deploy a React/Vue/Svelte/etc. SPA by specifying the `build` config.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.StaticSite(\"MyWeb\", {\n *   build: {\n *     command: \"npm run build\",\n *     output: \"dist\"\n *   }\n * });\n * ```\n *\n * #### Deploy a Jekyll site\n *\n * Use [Jekyll](https://jekyllrb.com) to deploy a static site.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.StaticSite(\"MyWeb\", {\n *   errorPage: \"/404.html\",\n *   build: {\n *     command: \"bundle exec jekyll build\",\n *     output: \"_site\"\n *   }\n * });\n * ```\n *\n * #### Deploy a Gatsby site\n *\n * Use [Gatsby](https://www.gatsbyjs.com) to deploy a static site.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.StaticSite(\"MyWeb\", {\n *   errorPage: \"/404.html\",\n *   build: {\n *     command: \"npm run build\",\n *     output: \"public\"\n *   }\n * });\n * ```\n *\n * #### Deploy an Angular SPA\n *\n * Use [Angular](https://angular.dev) to deploy a SPA.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.StaticSite(\"MyWeb\", {\n *   build: {\n *     command: \"ng build --output-path dist\",\n *     output: \"dist\"\n *   }\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your site.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.StaticSite(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.StaticSite(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Set environment variables\n *\n * Set `environment` variables for the build process of your static site. These will be used locally and on deploy.\n *\n * :::tip\n * For Vite, the types for the environment variables are also generated. This can be configured through the `vite` prop.\n * :::\n *\n * For some static site generators like Vite, [environment variables](https://vitejs.dev/guide/env-and-mode) prefixed with `VITE_` can be accessed in the browser.\n *\n * ```ts {5-7} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.StaticSite(\"MyWeb\", {\n *   environment: {\n *     BUCKET_NAME: bucket.name,\n *     // Accessible in the browser\n *     VITE_STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n *   },\n *   build: {\n *     command: \"npm run build\",\n *     output: \"dist\"\n *   }\n * });\n * ```\n */\nexport class StaticSite extends Component implements Link.Linkable {\n  private cdn?: Cdn;\n  private bucket?: Bucket;\n  private devUrl?: Output<string>;\n  private prodUrl?: Output<string | undefined>;\n\n  constructor(\n    name: string,\n    args: StaticSiteArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n    const self = this;\n\n    validateDeprecatedProps();\n    const { sitePath, environment, indexPage } = prepare(args);\n    const dev = normalizeDev();\n\n    if (dev.enabled) {\n      this.devUrl = dev.url;\n      this.registerOutputs({\n        _metadata: {\n          mode: \"placeholder\",\n          path: sitePath,\n          environment,\n          url: this.url,\n        },\n        _dev: dev.outputs,\n      });\n      return;\n    }\n\n    const route = normalizeRoute();\n    const errorPage = normalizeErrorPage();\n    const assets = normalizeAsssets();\n    const outputPath = buildApp(self, name, args.build, sitePath, environment);\n    const bucket = createBucket();\n    const { bucketName, bucketDomain } = getBucketDetails();\n    const assetsUploaded = uploadAssets();\n    const kvNamespace = buildKvNamespace();\n\n    let distribution: Cdn | undefined;\n    let distributionId: Output<string>;\n    let kvStoreArn: Output<string>;\n    let invalidationDependsOn: Resource[] = [];\n    let prodUrl: Output<string | undefined>;\n    if (route) {\n      kvStoreArn = route.routerKvStoreArn;\n      distributionId = route.routerDistributionId;\n      invalidationDependsOn = [updateRouterKvRoutes()];\n      prodUrl = route.routerUrl;\n    } else {\n      kvStoreArn = createRequestKvStore();\n      distribution = createDistribution();\n      distributionId = distribution.nodes.distribution.id;\n      prodUrl = distribution.domainUrl.apply((domainUrl) =>\n        output(domainUrl ?? distribution!.url),\n      );\n    }\n\n    const kvUpdated = createKvEntries();\n    createInvalidation();\n\n    this.bucket = bucket;\n    this.cdn = distribution;\n    this.prodUrl = prodUrl;\n\n    this.registerOutputs({\n      _hint: this.url,\n      _metadata: {\n        mode: \"deployed\",\n        path: sitePath,\n        environment,\n        url: this.url,\n      },\n      _dev: dev.outputs,\n    });\n\n    function validateDeprecatedProps() {\n      if (args.base !== undefined)\n        throw new VisibleError(\n          `\"base\" prop is deprecated. Use the \"route.path\" prop instead to set the base path of the site.`,\n        );\n\n      if (args.cdn !== undefined)\n        throw new VisibleError(\n          `\"cdn\" prop is deprecated. Use the \"route.router\" prop instead to use an existing \"Router\" component to serve your site.`,\n        );\n    }\n\n    function normalizeRoute() {\n      const route = normalizeRouteArgs(args.router, args.route);\n\n      if (route) {\n        if (args.domain)\n          throw new VisibleError(\n            `Cannot provide both \"domain\" and \"route\". Use the \"domain\" prop on the \"Router\" component when serving your site through a Router.`,\n          );\n\n        if (args.edge)\n          throw new VisibleError(\n            `Cannot provide both \"edge\" and \"route\". Use the \"edge\" prop on the \"Router\" component when serving your site through a Router.`,\n          );\n      }\n\n      return route;\n    }\n\n    function normalizeDev() {\n      const enabled = $dev && args.dev !== false;\n      const devArgs = args.dev || {};\n\n      return {\n        enabled,\n        url: output(devArgs.url ?? URL_UNAVAILABLE),\n        outputs: {\n          title: devArgs.title,\n          environment,\n          command: output(devArgs.command ?? \"npm run dev\"),\n          autostart: output(devArgs.autostart ?? true),\n          directory: output(devArgs.directory ?? sitePath),\n        },\n      };\n    }\n\n    function normalizeErrorPage() {\n      return all([indexPage, args.errorPage]).apply(\n        ([indexPage, errorPage]) => {\n          return \"/\" + (errorPage ?? indexPage).replace(/^\\//, \"\");\n        },\n      );\n    }\n\n    function normalizeAsssets() {\n      return {\n        ...args.assets,\n        // remove leading and trailing slashes from the path\n        path: args.assets?.path\n          ? output(args.assets?.path).apply((v) =>\n            v.replace(/^\\//, \"\").replace(/\\/$/, \"\"),\n          )\n          : undefined,\n        purge: output(args.assets?.purge ?? true),\n        // normalize to /path format\n        routes: args.assets?.routes\n          ? output(args.assets?.routes).apply((v) =>\n            v.map(\n              (route) => \"/\" + route.replace(/^\\//, \"\").replace(/\\/$/, \"\"),\n            ),\n          )\n          : [],\n      };\n    }\n\n    function createBucket() {\n      if (assets.bucket) return;\n\n      return new Bucket(\n        ...transform(\n          args.transform?.assets,\n          `${name}Assets`,\n          { access: \"cloudfront\" },\n          { parent: self, retainOnDelete: false },\n        ),\n      );\n    }\n\n    function getBucketDetails() {\n      const s3Bucket = bucket\n        ? bucket.nodes.bucket\n        : s3.BucketV2.get(`${name}Assets`, assets.bucket!, undefined, {\n          parent: self,\n        });\n\n      return {\n        bucketName: s3Bucket.bucket,\n        bucketDomain: s3Bucket.bucketRegionalDomainName,\n      };\n    }\n\n    function uploadAssets() {\n      return all([outputPath, assets, route]).apply(\n        async ([outputPath, assets, route]) => {\n          const bucketFiles: BucketFile[] = [];\n\n          // Build fileOptions\n          const fileOptions = assets?.fileOptions ?? [\n            {\n              files: \"**\",\n              cacheControl: \"max-age=31536000,public,immutable\",\n            },\n            {\n              files: \"**/*.html\",\n              cacheControl: \"max-age=0,no-cache,no-store,must-revalidate\",\n            },\n          ];\n\n          // Upload files based on fileOptions\n          const filesProcessed: string[] = [];\n          for (const fileOption of fileOptions.reverse()) {\n            const files = globSync(fileOption.files, {\n              cwd: path.resolve(outputPath),\n              nodir: true,\n              dot: true,\n              ignore: [\n                \".sst/**\",\n                ...(typeof fileOption.ignore === \"string\"\n                  ? [fileOption.ignore]\n                  : fileOption.ignore ?? []),\n              ],\n            }).filter((file) => !filesProcessed.includes(file));\n\n            bucketFiles.push(\n              ...(await Promise.all(\n                files.map(async (file) => {\n                  const source = path.resolve(outputPath, file);\n                  const content = await fs.promises.readFile(source, \"utf-8\");\n                  const hash = crypto\n                    .createHash(\"sha256\")\n                    .update(content)\n                    .digest(\"hex\");\n                  return {\n                    source,\n                    key: toPosix(\n                      path.join(\n                        assets.path ?? \"\",\n                        route?.pathPrefix?.replace(/^\\//, \"\") ?? \"\",\n                        file,\n                      ),\n                    ),\n                    hash,\n                    cacheControl: fileOption.cacheControl,\n                    contentType:\n                      fileOption.contentType ?? getContentType(file, \"UTF-8\"),\n                  };\n                }),\n              )),\n            );\n            filesProcessed.push(...files);\n          }\n\n          return new BucketFiles(\n            `${name}AssetFiles`,\n            {\n              bucketName,\n              files: bucketFiles,\n              purge: assets.purge,\n              region: getRegionOutput(undefined, { parent: self }).name,\n            },\n            { parent: self },\n          );\n        },\n      );\n    }\n\n    function buildKvNamespace() {\n      // In the case multiple sites use the same kv store, we need to namespace the keys\n      return crypto\n        .createHash(\"md5\")\n        .update(`${$app.name}-${$app.stage}-${name}`)\n        .digest(\"hex\")\n        .substring(0, 4);\n    }\n\n    function createKvEntries() {\n      const entries = all([\n        outputPath,\n        assets,\n        bucketDomain,\n        errorPage,\n        route,\n      ]).apply(async ([outputPath, assets, bucketDomain, errorPage, route]) => {\n        const kvEntries: Record<string, string> = {};\n        const dirs: string[] = [];\n        // Router append .html and index.html suffixes to requests to s3 routes:\n        // - `.well-known` contain files without suffix, hence will be appended .html\n        // - in the future, it might make sense for each dir to have props that controls\n        //   the suffixes ie. \"handleTrailingSlashse\"\n        const expandDirs = [\".well-known\"];\n\n        const processDir = (childPath = \"\", level = 0) => {\n          const currentPath = path.join(outputPath, childPath);\n          fs.readdirSync(currentPath, { withFileTypes: true }).forEach(\n            (item) => {\n              // File: add to kvEntries\n              if (item.isFile()) {\n                kvEntries[toPosix(path.join(\"/\", childPath, item.name))] = \"s3\";\n                return;\n              }\n              // Directory + expand: recursively process it\n              if (level === 0 && expandDirs.includes(item.name)) {\n                processDir(path.join(childPath, item.name), level + 1);\n                return;\n              }\n              // Directory + NOT expand: add to route\n              dirs.push(toPosix(path.join(\"/\", childPath, item.name)));\n            },\n          );\n        };\n        processDir();\n\n        kvEntries[\"metadata\"] = JSON.stringify({\n          base: route?.pathPrefix === \"/\" ? undefined : route?.pathPrefix,\n          custom404: errorPage,\n          s3: {\n            domain: bucketDomain,\n            dir: assets.path ? \"/\" + assets.path : \"\",\n            routes: [...assets.routes, ...dirs],\n          },\n        } satisfies KV_SITE_METADATA);\n\n        return kvEntries;\n      });\n\n      return new KvKeys(\n        `${name}KvKeys`,\n        {\n          store: kvStoreArn!,\n          namespace: kvNamespace,\n          entries,\n          purge: assets.purge,\n        },\n        { parent: self },\n      );\n    }\n\n    function updateRouterKvRoutes() {\n      return new KvRoutesUpdate(\n        `${name}RoutesUpdate`,\n        {\n          store: route!.routerKvStoreArn,\n          namespace: route!.routerKvNamespace,\n          key: \"routes\",\n          entry: route!.apply((route) =>\n            [\"site\", kvNamespace, route!.hostPattern, route!.pathPrefix].join(\n              \",\",\n            ),\n          ),\n        },\n        { parent: self },\n      );\n    }\n\n    function createRequestKvStore() {\n      return output(args.edge).apply((edge) => {\n        const viewerRequest = edge?.viewerRequest;\n        if (viewerRequest?.kvStore) return output(viewerRequest?.kvStore);\n\n        return new cloudfront.KeyValueStore(\n          `${name}KvStore`,\n          {},\n          { parent: self },\n        ).arn;\n      });\n    }\n\n    function createRequestFunction() {\n      return output(args.edge).apply((edge) => {\n        const userInjection = edge?.viewerRequest?.injection ?? \"\";\n        const blockCloudfrontUrlInjection = args.domain\n          ? CF_BLOCK_CLOUDFRONT_URL_INJECTION\n          : \"\";\n        return new cloudfront.Function(\n          `${name}CloudfrontFunctionRequest`,\n          {\n            runtime: \"cloudfront-js-2.0\",\n            keyValueStoreAssociations: kvStoreArn ? [kvStoreArn] : [],\n            code: interpolate`\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  ${userInjection}\n  ${blockCloudfrontUrlInjection}\n  ${CF_ROUTER_INJECTION}\n\n  const kvNamespace = \"${kvNamespace}\";\n\n  // Load metadata\n  let metadata;\n  try {\n    const v = await cf.kvs().get(kvNamespace + \":metadata\");\n    metadata = JSON.parse(v);\n  } catch (e) {}\n\n  await routeSite(kvNamespace, metadata);\n  return event.request;\n}`,\n          },\n          { parent: self },\n        );\n      });\n    }\n\n    function createResponseFunction() {\n      return output(args.edge).apply((edge) => {\n        const userConfig = edge?.viewerResponse;\n        const userInjection = userConfig?.injection;\n        const kvStoreArn = userConfig?.kvStore ?? userConfig?.kvStores?.[0];\n\n        if (!userInjection) return;\n\n        return new cloudfront.Function(\n          `${name}CloudfrontFunctionResponse`,\n          {\n            runtime: \"cloudfront-js-2.0\",\n            keyValueStoreAssociations: kvStoreArn ? [kvStoreArn] : [],\n            code: `\nimport cf from \"cloudfront\";\nasync function handler(event) {\n  ${userInjection}\n  return event.response;\n}`,\n          },\n          { parent: self },\n        );\n      });\n    }\n\n    function createDistribution() {\n      return new Cdn(\n        ...transform(\n          args.transform?.cdn,\n          `${name}Cdn`,\n          {\n            comment: `${name} site`,\n            domain: args.domain,\n            origins: [\n              {\n                originId: \"default\",\n                domainName: \"placeholder.sst.dev\",\n                customOriginConfig: {\n                  httpPort: 80,\n                  httpsPort: 443,\n                  originProtocolPolicy: \"https-only\",\n                  originReadTimeout: 20,\n                  originSslProtocols: [\"TLSv1.2\"],\n                },\n              },\n            ],\n            defaultCacheBehavior: {\n              targetOriginId: \"default\",\n              viewerProtocolPolicy: \"redirect-to-https\",\n              allowedMethods: [\n                \"DELETE\",\n                \"GET\",\n                \"HEAD\",\n                \"OPTIONS\",\n                \"PATCH\",\n                \"POST\",\n                \"PUT\",\n              ],\n              cachedMethods: [\"GET\", \"HEAD\"],\n              compress: true,\n              // CloudFront's managed CachingOptimized policy\n              cachePolicyId: \"658327ea-f89d-4fab-a63d-7e88639e58f6\",\n              functionAssociations: all([\n                createRequestFunction(),\n                createResponseFunction(),\n              ]).apply(([reqFn, resFn]) => [\n                { eventType: \"viewer-request\", functionArn: reqFn.arn },\n                ...(resFn\n                  ? [{ eventType: \"viewer-response\", functionArn: resFn.arn }]\n                  : []),\n              ]),\n            },\n          },\n          { parent: self },\n        ),\n      );\n    }\n\n    function createInvalidation() {\n      all([outputPath, args.assets, args.invalidation]).apply(\n        ([outputPath, assets, invalidationRaw]) => {\n          // Normalize invalidation\n          if (invalidationRaw === false) return;\n          const invalidation = {\n            wait: false,\n            paths: \"all\" as const,\n            ...invalidationRaw,\n          };\n\n          // Build invalidation paths\n          const invalidationPaths =\n            invalidation.paths === \"all\" ? [\"/*\"] : invalidation.paths;\n          if (invalidationPaths.length === 0) return;\n\n          // Calculate a hash based on the contents of the S3 files. This will be\n          // used to determine if we need to invalidate our CloudFront cache.\n          //\n          // The below options are needed to support following symlinks when building zip files:\n          // - nodir: This will prevent symlinks themselves from being copied into the zip.\n          // - follow: This will follow symlinks and copy the files within.\n          const hash = crypto.createHash(\"md5\");\n          hash.update(JSON.stringify(assets ?? {}));\n          globSync(\"**\", {\n            dot: true,\n            nodir: true,\n            follow: true,\n            cwd: path.resolve(outputPath),\n          }).forEach((filePath) =>\n            hash.update(\n              fs.readFileSync(path.resolve(outputPath, filePath), \"utf-8\"),\n            ),\n          );\n\n          new DistributionInvalidation(\n            `${name}Invalidation`,\n            {\n              distributionId,\n              paths: invalidationPaths,\n              version: hash.digest(\"hex\"),\n              wait: invalidation.wait,\n            },\n            {\n              parent: self,\n              dependsOn: [assetsUploaded, kvUpdated, ...invalidationDependsOn],\n            },\n          );\n        },\n      );\n    }\n  }\n\n  /**\n   * The URL of the website.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return all([this.prodUrl, this.devUrl]).apply(\n      ([prodUrl, devUrl]) => (prodUrl ?? devUrl)!,\n    );\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Amazon S3 Bucket that stores the assets.\n       */\n      assets: this.bucket,\n      /**\n       * The Amazon CloudFront CDN that serves the site.\n       */\n      cdn: this.cdn,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        url: this.url,\n      },\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:StaticSite\";\n// @ts-expect-error\nStaticSite.__pulumiType = __pulumiType;\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { all, output, Resource } from \"@pulumi/pulumi\";\nimport { VisibleError } from \"../error.js\";\nimport { Input } from \"../input.js\";\nimport { Prettify } from \"../component.js\";\nimport { BaseSiteFileOptions } from \"./base-site.js\";\nimport { siteBuilder } from \"../aws/helpers/site-builder.js\";\n\nexport type BaseStaticSiteAssets = {\n  /**\n   * Character encoding for text based assets uploaded, like HTML, CSS, JS. This is\n   * used to set the `Content-Type` header when these files are served out.\n   *\n   * If set to `\"none\"`, then no charset will be returned in header.\n   * @default `\"utf-8\"`\n   * @example\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"iso-8859-1\"\n   *   }\n   * }\n   * ```\n   */\n  textEncoding?: Input<\n    \"utf-8\" | \"iso-8859-1\" | \"windows-1252\" | \"ascii\" | \"none\"\n  >;\n  /**\n   * Specify the `Content-Type` and `Cache-Control` headers for specific files. This allows\n   * you to override the default behavior for specific files using glob patterns.\n   *\n   * By default, this is set to cache CSS/JS files for 1 year and not cache HTML files.\n   *\n   * ```js\n   * {\n   *   assets: {\n   *     fileOptions: [\n   *       {\n   *         files: [\"**\\/*.css\", \"**\\/*.js\"],\n   *         cacheControl: \"max-age=31536000,public,immutable\"\n   *       },\n   *       {\n   *         files: \"**\\/*.html\",\n   *         cacheControl: \"max-age=0,no-cache,no-store,must-revalidate\"\n   *       }\n   *     ]\n   *   }\n   * }\n   * ```\n   *\n   * @default `Object[]`\n   * @example\n   * You can change the default options. For example, apply `Cache-Control` and `Content-Type` to all zip files.\n   * ```js\n   * {\n   *   assets: {\n   *     fileOptions: [\n   *       {\n   *         files: \"**\\/*.zip\",\n   *         contentType: \"application/zip\",\n   *         cacheControl: \"private,no-cache,no-store,must-revalidate\"\n   *       },\n   *     ],\n   *   }\n   * }\n   * ```\n   * Apply `Cache-Control` to all CSS and JS files except for CSS files with `index-`\n   * prefix in the `main/` directory.\n   * ```js\n   * {\n   *   assets: {\n   *     fileOptions: [\n   *       {\n   *         files: [\"**\\/*.css\", \"**\\/*.js\"],\n   *         ignore: \"main\\/index-*.css\",\n   *         cacheControl: \"private,no-cache,no-store,must-revalidate\"\n   *       },\n   *     ],\n   *   }\n   * }\n   * ```\n   */\n  fileOptions?: Input<Prettify<BaseSiteFileOptions>[]>;\n};\n\nexport interface BaseStaticSiteArgs {\n  path?: Input<string>;\n  /**\n   * The name of the index page of the site. This is a path relative to the root of your site, or the `path`.\n   *\n   * :::note\n   * The index page only applies to the root of your site.\n   * :::\n   *\n   * By default this is set to `index.html`. So if a visitor goes to your site, let's say `example.com`, `example.com/index.html` will be served.\n   *\n   * @default `\"index.html\"`\n   * @example\n   * ```js\n   * {\n   *   indexPage: \"home.html\"\n   * }\n   * ```\n   */\n  indexPage?: string;\n  /**\n   * The error page to display on a 403 or 404 error. This is a path relative to the root of your site, or the `path`.\n   * @default The `indexPage` of your site.\n   * @example\n   * ```js\n   * {\n   *   errorPage: \"404.html\"\n   * }\n   * ```\n   */\n  errorPage?: Input<string>;\n  /**\n   * Set environment variables for your static site. These are made available:\n   *\n   * 1. Locally while running your site through `sst dev`.\n   * 2. In the build process when running `build.command`.\n   *\n   * @example\n   * ```js\n   * environment: {\n   *   API_URL: api.url\n   *   STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   * }\n   * ```\n   *\n   * Some static site generators like Vite have their [concept of environment variables](https://vitejs.dev/guide/env-and-mode), and you can use this option to set them.\n   *\n   * :::note\n   * The types for the Vite environment variables are generated automatically. You can change their location through `vite.types`.\n   * :::\n   *\n   * These can be accessed as `import.meta.env` in your site. And only the ones prefixed with `VITE_` can be accessed in the browser.\n   *\n   * ```js\n   * environment: {\n   *   API_URL: api.url\n   *   // Accessible in the browser\n   *   VITE_STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   * }\n   * ```\n   */\n  environment?: Input<Record<string, Input<string>>>;\n  build?: Input<{\n    /**\n     * The command that builds the static site. It's run before your site is deployed. This is run at the root of your site, `path`.\n     * @example\n     * ```js\n     * {\n     *   build: {\n     *     command: \"yarn build\"\n     *   }\n     * }\n     * ```\n     */\n    command: Input<string>;\n    /**\n     * The directory where the build output of your static site is generated. This will be uploaded.\n     *\n     * The path is relative to the root of your site, `path`.\n     * @example\n     * ```js\n     * {\n     *   build: {\n     *     output: \"build\"\n     *   }\n     * }\n     * ```\n     */\n    output: Input<string>;\n  }>;\n  /**\n   * Configure [Vite](https://vitejs.dev) related options.\n   *\n   * :::tip\n   * If a `vite.config.ts` or `vite.config.js` file is detected in the `path`, then these options will be used during the build and deploy process.\n   * :::\n   */\n  vite?: Input<{\n    /**\n     * The path where the type definition for the `environment` variables are generated. This is relative to the `path`. [Read more](https://vitejs.dev/guide/env-and-mode#intellisense-for-typescript).\n     *\n     * @default `\"src/sst-env.d.ts\"`\n     * @example\n     * ```js\n     * {\n     *   vite: {\n     *     types: \"other/path/sst-env.d.ts\"\n     *   }\n     * }\n     * ```\n     */\n    types?: string;\n  }>;\n}\n\nexport function prepare(args: BaseStaticSiteArgs) {\n  const sitePath = normalizeSitePath();\n  const environment = normalizeEnvironment();\n  const indexPage = normalizeIndexPage();\n  generateViteTypes();\n\n  return {\n    sitePath,\n    environment,\n    indexPage,\n  };\n\n  function normalizeSitePath() {\n    return output(args.path).apply((sitePath) => {\n      if (!sitePath) return \".\";\n\n      if (!fs.existsSync(sitePath)) {\n        throw new VisibleError(`No site found at \"${path.resolve(sitePath)}\".`);\n      }\n      return sitePath;\n    });\n  }\n\n  function normalizeEnvironment() {\n    return output(args.environment).apply((environment) => environment ?? {});\n  }\n\n  function normalizeIndexPage() {\n    return output(args.indexPage).apply(\n      (indexPage) => indexPage ?? \"index.html\",\n    );\n  }\n\n  function generateViteTypes() {\n    return all([sitePath, args.vite, environment]).apply(\n      ([sitePath, vite, environment]) => {\n        // Build the path\n        let typesPath = vite?.types;\n        if (!typesPath) {\n          if (\n            fs.existsSync(path.join(sitePath, \"vite.config.js\")) ||\n            fs.existsSync(path.join(sitePath, \"vite.config.ts\"))\n          ) {\n            typesPath = \"src/sst-env.d.ts\";\n          }\n        }\n        if (!typesPath) {\n          return;\n        }\n\n        // Create type file\n        const filePath = path.resolve(path.join(sitePath, typesPath));\n        const content = `/* This file is auto-generated by SST. Do not edit. */\n/* tslint:disable */\n/* eslint-disable */\n/// <reference types=\"vite/client\" />\ninterface ImportMetaEnv {\n${Object.keys(environment)\n  .map((key) => `  readonly ${key}: string`)\n  .join(\"\\n\")}\n}\ninterface ImportMeta {\n  readonly env: ImportMetaEnv\n}`;\n\n        const fileDir = path.dirname(filePath);\n        fs.mkdirSync(fileDir, { recursive: true });\n        fs.writeFileSync(filePath, content);\n      },\n    );\n  }\n}\n\nexport function buildApp(\n  parent: Resource,\n  name: string,\n  build: BaseStaticSiteArgs[\"build\"],\n  sitePath: ReturnType<typeof prepare>[\"sitePath\"],\n  environment: ReturnType<typeof prepare>[\"environment\"],\n) {\n  if (!build) return sitePath;\n\n  const result = siteBuilder(\n    `${name}Builder`,\n    {\n      create: output(build).command,\n      update: output(build).command,\n      dir: output(sitePath).apply((sitePath) =>\n        path.join($cli.paths.root, sitePath),\n      ),\n      environment,\n      triggers: [Date.now().toString()],\n    },\n    {\n      parent,\n      ignoreChanges: process.env.SKIP ? [\"*\"] : undefined,\n    },\n  );\n\n  // Validate build output\n  return all([sitePath, build, result.id]).apply(([sitePath, build, _]) => {\n    const outputPath = path.join(sitePath, build.output);\n    if (!fs.existsSync(outputPath)) {\n      throw new VisibleError(\n        `No build output found at \"${path.resolve(outputPath)}\".`,\n      );\n    }\n\n    return outputPath;\n  });\n}\n", "import fs from \"fs\";\nimport path from \"path\";\nimport { ComponentResourceOptions, Output } from \"@pulumi/pulumi\";\nimport { Plan, SsrSite, SsrSiteArgs } from \"./ssr-site.js\";\n\nexport interface SvelteKitArgs extends SsrSiteArgs {\n  /**\n   * Configure how this component works in `sst dev`.\n   *\n   * :::note\n   * In `sst dev` your SvelteKit app is run in dev mode; it's not deployed.\n   * :::\n   *\n   * Instead of deploying your SvelteKit app, this starts it in dev mode. It's run\n   * as a separate process in the `sst dev` multiplexer. Read more about\n   * [`sst dev`](/docs/reference/cli/#dev).\n   *\n   * To disable dev mode, pass in `false`.\n   */\n  dev?: SsrSiteArgs[\"dev\"];\n  /**\n   * Permissions and the resources that the [server function](#nodes-server) in your SvelteKit app needs to access. These permissions are used to create the function's IAM role.\n   *\n   * :::tip\n   * If you `link` the function to a resource, the permissions to access it are\n   * automatically added.\n   * :::\n   *\n   * @example\n   * Allow reading and writing to an S3 bucket called `my-bucket`.\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:GetObject\", \"s3:PutObject\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Perform all actions on an S3 bucket called `my-bucket`.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"s3:*\"],\n   *       resources: [\"arn:aws:s3:::my-bucket/*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   *\n   * Grant permissions to access all resources.\n   *\n   * ```js\n   * {\n   *   permissions: [\n   *     {\n   *       actions: [\"*\"],\n   *       resources: [\"*\"]\n   *     },\n   *   ]\n   * }\n   * ```\n   */\n  permissions?: SsrSiteArgs[\"permissions\"];\n  /**\n   * Path to the directory where your SvelteKit app is located.  This path is relative to your `sst.config.ts`.\n   *\n   * By default it assumes your SvelteKit app is in the root of your SST app.\n   * @default `\".\"`\n   *\n   * @example\n   *\n   * If your SvelteKit app is in a package in your monorepo.\n   *\n   * ```js\n   * {\n   *   path: \"packages/web\"\n   * }\n   * ```\n   */\n  path?: SsrSiteArgs[\"path\"];\n  /**\n   * [Link resources](/docs/linking/) to your SvelteKit app. This will:\n   *\n   * 1. Grant the permissions needed to access the resources.\n   * 2. Allow you to access it in your site using the [SDK](/docs/reference/sdk/).\n   *\n   * @example\n   *\n   * Takes a list of resources to link to the function.\n   *\n   * ```js\n   * {\n   *   link: [bucket, stripeKey]\n   * }\n   * ```\n   */\n  link?: SsrSiteArgs[\"link\"];\n  /**\n   * Configure how the CloudFront cache invalidations are handled. This is run after your SvelteKit app has been deployed.\n   * :::tip\n   * You get 1000 free invalidations per month. After that you pay $0.005 per invalidation path. [Read more here](https://aws.amazon.com/cloudfront/pricing/).\n   * :::\n   * @default `{paths: \"all\", wait: false}`\n   * @example\n   * Wait for all paths to be invalidated.\n   * ```js\n   * {\n   *   invalidation: {\n   *     paths: \"all\",\n   *     wait: true\n   *   }\n   * }\n   * ```\n   */\n  invalidation?: SsrSiteArgs[\"invalidation\"];\n  /**\n   * Set [environment variables](https://vitejs.dev/guide/env-and-mode.html#env-files) in your SvelteKit app. These are made available:\n   *\n   * 1. In `vite build`, they are loaded into `process.env`.\n   * 2. Locally while running through `sst dev`.\n   *\n   * :::tip\n   * You can also `link` resources to your SvelteKit app and access them in a type-safe way with the [SDK](/docs/reference/sdk/). We recommend linking since it's more secure.\n   * :::\n   *\n   * @example\n   * ```js\n   * {\n   *   environment: {\n   *     API_URL: api.url,\n   *     STRIPE_PUBLISHABLE_KEY: \"pk_test_123\"\n   *   }\n   * }\n   * ```\n   */\n  environment?: SsrSiteArgs[\"environment\"];\n  /**\n   * Set a custom domain for your SvelteKit app.\n   *\n   * Automatically manages domains hosted on AWS Route 53, Cloudflare, and Vercel. For other\n   * providers, you'll need to pass in a `cert` that validates domain ownership and add the\n   * DNS records.\n   *\n   * :::tip\n   * Built-in support for AWS Route 53, Cloudflare, and Vercel. And manual setup for other\n   * providers.\n   * :::\n   *\n   * @example\n   *\n   * By default this assumes the domain is hosted on Route 53.\n   *\n   * ```js\n   * {\n   *   domain: \"example.com\"\n   * }\n   * ```\n   *\n   * For domains hosted on Cloudflare.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"example.com\",\n   *     dns: sst.cloudflare.dns()\n   *   }\n   * }\n   * ```\n   *\n   * Specify a `www.` version of the custom domain.\n   *\n   * ```js\n   * {\n   *   domain: {\n   *     name: \"domain.com\",\n   *     redirects: [\"www.domain.com\"]\n   *   }\n   * }\n   * ```\n   */\n  domain?: SsrSiteArgs[\"domain\"];\n  /**\n   * Serve your SvelteKit app through a `Router` instead of a standalone CloudFront\n   * distribution.\n   *\n   * By default, this component creates a new CloudFront distribution. But you might\n   * want to serve it through the distribution of your `Router` as a:\n   *\n   * - A path like `/docs`\n   * - A subdomain like `docs.example.com`\n   * - Or a combined pattern like `dev.example.com/docs`\n   *\n   * @example\n   *\n   * To serve your SvelteKit app **from a path**, you'll need to configure the root domain\n   * in your `Router` component.\n   *\n   * ```ts title=\"sst.config.ts\" {2}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: \"example.com\"\n   * });\n   * ```\n   *\n   * Now set the `router` and the `path`.\n   *\n   * ```ts {3,4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * You also need to set the [`base`](https://kit.svelte.dev/docs/configuration#paths)\n   * to `/docs` in your `svelte.config.js` without a trailing slash.\n   *\n   * :::caution\n   * If routing to a path, you need to set that as the base path in your\n   * SvelteKit app as well.\n   * :::\n   *\n   * ```js title=\"svelte.config.js\" {4}\n   * export default {\n   *   kit: {\n   *     paths: {\n   *       base: \"/docs\"\n   *     }\n   *   }\n   * };\n   * ```\n   *\n   * To serve your SvelteKit app **from a subdomain**, you'll need to configure the\n   * domain in your `Router` component to match both the root and the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * Now set the `domain` in the `router` prop.\n   *\n   * ```ts {4}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"docs.example.com\"\n   *   }\n   * }\n   * ```\n   *\n   * Finally, to serve your SvelteKit app **from a combined pattern** like\n   * `dev.example.com/docs`, you'll need to configure the domain in your `Router` to\n   * match the subdomain.\n   *\n   * ```ts title=\"sst.config.ts\" {3,4}\n   * const router = new sst.aws.Router(\"Router\", {\n   *   domain: {\n   *     name: \"example.com\",\n   *     aliases: [\"*.example.com\"]\n   *   }\n   * });\n   * ```\n   *\n   * And set the `domain` and the `path`.\n   *\n   * ```ts {4,5}\n   * {\n   *   router: {\n   *     instance: router,\n   *     domain: \"dev.example.com\",\n   *     path: \"/docs\"\n   *   }\n   * }\n   * ```\n   *\n   * Also, make sure to set the base path in your `svelte.config.js`, like above.\n   */\n  router?: SsrSiteArgs[\"router\"];\n  /**\n   * The command used internally to build your SvelteKit app.\n   *\n   * @default `\"npm run build\"`\n   *\n   * @example\n   *\n   * If you want to use a different build command.\n   * ```js\n   * {\n   *   buildCommand: \"yarn build\"\n   * }\n   * ```\n   */\n  buildCommand?: SsrSiteArgs[\"buildCommand\"];\n  /**\n   * Configure how the SvelteKit app assets are uploaded to S3.\n   *\n   * By default, this is set to the following. Read more about these options below.\n   * ```js\n   * {\n   *   assets: {\n   *     textEncoding: \"utf-8\",\n   *     versionedFilesCacheHeader: \"public,max-age=31536000,immutable\",\n   *     nonVersionedFilesCacheHeader: \"public,max-age=0,s-maxage=86400,stale-while-revalidate=8640\"\n   *   }\n   * }\n   * ```\n   */\n  assets?: SsrSiteArgs[\"assets\"];\n  /**\n   * Configure the SvelteKit app to use an existing CloudFront cache policy.\n   *\n   * :::note\n   * CloudFront has a limit of 20 cache policies per account, though you can request a limit\n   * increase.\n   * :::\n   *\n   * By default, a new cache policy is created for it. This allows you to reuse an existing\n   * policy instead of creating a new one.\n   *\n   * @default A new cache policy is created\n   * @example\n   * ```js\n   * {\n   *   cachePolicy: \"658327ea-f89d-4fab-a63d-7e88639e58f6\"\n   * }\n   * ```\n   */\n  cachePolicy?: SsrSiteArgs[\"cachePolicy\"];\n}\n\n/**\n * The `SvelteKit` component lets you deploy a [SvelteKit](https://kit.svelte.dev/) app to AWS.\n *\n * @example\n *\n * #### Minimal example\n *\n * Deploy a SvelteKit app that's in the project root.\n *\n * ```js title=\"sst.config.ts\"\n * new sst.aws.SvelteKit(\"MyWeb\");\n * ```\n *\n * #### Change the path\n *\n * Deploys the SvelteKit app in the `my-svelte-app/` directory.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.SvelteKit(\"MyWeb\", {\n *   path: \"my-svelte-app/\"\n * });\n * ```\n *\n * #### Add a custom domain\n *\n * Set a custom domain for your SvelteKit app.\n *\n * ```js {2} title=\"sst.config.ts\"\n * new sst.aws.SvelteKit(\"MyWeb\", {\n *   domain: \"my-app.com\"\n * });\n * ```\n *\n * #### Redirect www to apex domain\n *\n * Redirect `www.my-app.com` to `my-app.com`.\n *\n * ```js {4} title=\"sst.config.ts\"\n * new sst.aws.SvelteKit(\"MyWeb\", {\n *   domain: {\n *     name: \"my-app.com\",\n *     redirects: [\"www.my-app.com\"]\n *   }\n * });\n * ```\n *\n * #### Link resources\n *\n * [Link resources](/docs/linking/) to your SvelteKit app. This will grant permissions\n * to the resources and allow you to access it in your app.\n *\n * ```ts {4} title=\"sst.config.ts\"\n * const bucket = new sst.aws.Bucket(\"MyBucket\");\n *\n * new sst.aws.SvelteKit(\"MyWeb\", {\n *   link: [bucket]\n * });\n * ```\n *\n * You can use the [SDK](/docs/reference/sdk/) to access the linked resources\n * in your SvelteKit app.\n *\n * ```ts title=\"src/routes/+page.server.ts\"\n * import { Resource } from \"sst\";\n *\n * console.log(Resource.MyBucket.name);\n * ```\n */\nexport class SvelteKit extends SsrSite {\n  constructor(\n    name: string,\n    args: SvelteKitArgs = {},\n    opts: ComponentResourceOptions = {},\n  ) {\n    super(__pulumiType, name, args, opts);\n  }\n\n  protected normalizeBuildCommand() { }\n\n  protected buildPlan(outputPath: Output<string>): Output<Plan> {\n    return outputPath.apply((outputPath) => {\n      const serverOutputPath = path.join(\n        outputPath,\n        \".svelte-kit\",\n        \"svelte-kit-sst\",\n        \"server\",\n      );\n      let basepath: string | undefined;\n      try {\n        const manifest = fs\n          .readFileSync(path.join(serverOutputPath, \"manifest.js\"))\n          .toString();\n        const appDir = manifest.match(/appDir: \"(.+?)\"/)?.[1];\n        const appPath = manifest.match(/appPath: \"(.+?)\"/)?.[1];\n        if (appDir && appPath && appPath.endsWith(appDir)) {\n          basepath = appPath.substring(0, appPath.length - appDir.length);\n        }\n      } catch (e) { }\n\n      return {\n        base: basepath,\n        server: {\n          handler: path.join(\n            serverOutputPath,\n            \"lambda-handler\",\n            \"index.handler\",\n          ),\n          nodejs: {\n            esbuild: {\n              minify: process.env.SST_DEBUG ? false : true,\n              sourcemap: process.env.SST_DEBUG ? (\"inline\" as const) : false,\n              define: {\n                \"process.env.SST_DEBUG\": process.env.SST_DEBUG\n                  ? \"true\"\n                  : \"false\",\n              },\n            },\n          },\n          copyFiles: [\n            {\n              from: path.join(\n                outputPath,\n                \".svelte-kit\",\n                \"svelte-kit-sst\",\n                \"prerendered\",\n              ),\n              to: \"prerendered\",\n            },\n          ],\n        },\n        assets: [\n          {\n            from: path.join(\".svelte-kit\", \"svelte-kit-sst\", \"client\"),\n            to: \"\",\n            cached: true,\n            versionedSubDir: \"_app\",\n          },\n          {\n            from: path.join(\".svelte-kit\", \"svelte-kit-sst\", \"prerendered\"),\n            to: \"\",\n            cached: false,\n          },\n        ],\n      };\n    });\n  }\n\n  /**\n   * The URL of the SvelteKit app.\n   *\n   * If the `domain` is set, this is the URL with the custom domain.\n   * Otherwise, it's the auto-generated CloudFront URL.\n   */\n  public get url() {\n    return super.url;\n  }\n}\n\nconst __pulumiType = \"sst:aws:SvelteKit\";\n// @ts-expect-error\nSvelteKit.__pulumiType = __pulumiType;\n", "import path from \"path\";\nimport { ComponentResourceOptions } from \"@pulumi/pulumi\";\nimport { Component, Transform, transform } from \"../component.js\";\nimport { Postgres, PostgresArgs } from \"./postgres-v1.js\";\nimport { VectorTable } from \"./providers/vector-table.js\";\nimport { Function } from \"./function.js\";\nimport { Link } from \"../link.js\";\nimport { Input } from \"../input.js\";\nimport { permission } from \"./permission.js\";\n\nexport interface VectorArgs {\n  /**\n   * The dimension size of each vector.\n   *\n   * The maximum supported dimension is 2000. To store vectors with greater dimension,\n   * use dimensionality reduction to reduce the dimension to 2000 or less. OpenAI supports\n   * [dimensionality reduction](https://platform.openai.com/docs/api-reference/embeddings/create#embeddings-create-dimensions) automatically when generating embeddings.\n   *\n   * :::caution\n   * Changing the dimension will cause the data to be cleared.\n   * :::\n   *\n   * @example\n   * ```js\n   * {\n   *   dimension: 1536\n   * }\n   * ```\n   */\n  dimension: Input<number>;\n  /**\n   * [Transform](/docs/components#transform) how this component creates its underlying\n   * resources.\n   */\n  transform?: {\n    /**\n     * Transform the Postgres component.\n     */\n    postgres?: Transform<PostgresArgs>;\n  };\n}\n\ninterface VectorRef {\n  ref: boolean;\n  postgres: Postgres;\n}\n\n/**\n * The `Vector` component lets you store and retrieve vector data in your app.\n *\n * - It uses a vector database powered by [RDS Postgres Serverless v2](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless-v2.html).\n * - Provides a [SDK](/docs/reference/sdk/) to query, put, and remove the vector data.\n *\n * @example\n *\n * #### Create the database\n *\n * ```ts title=\"sst.config.ts\"\n * const vector = new sst.aws.Vector(\"MyVectorDB\", {\n *   dimension: 1536\n * });\n * ```\n *\n * #### Link to a resource\n *\n * You can link it to other resources, like a function or your Next.js app.\n *\n * ```ts title=\"sst.config.ts\"\n * new sst.aws.Nextjs(\"MyWeb\", {\n *   link: [vector]\n * });\n * ```\n *\n * Once linked, you can query it in your function code using the [SDK](/docs/reference/sdk/).\n *\n * ```ts title=\"app/page.tsx\"\n * import { VectorClient } from \"sst\";\n *\n * await VectorClient(\"MyVectorDB\").query({\n *   vector: [32.4, 6.55, 11.2, 10.3, 87.9]\n * });\n * ```\n */\nexport class Vector extends Component implements Link.Linkable {\n  private postgres: Postgres;\n  private queryHandler: Function;\n  private putHandler: Function;\n  private removeHandler: Function;\n\n  constructor(name: string, args: VectorArgs, opts?: ComponentResourceOptions) {\n    super(__pulumiType, name, args, opts);\n\n    const parent = this;\n    const tableName = normalizeTableName();\n\n    let postgres: Postgres;\n    if (args && \"ref\" in args) {\n      const ref = args as unknown as VectorRef;\n      postgres = ref.postgres;\n    } else {\n      postgres = createDB();\n      createDBTable();\n    }\n\n    const queryHandler = createQueryHandler();\n    const putHandler = createPutHandler();\n    const removeHandler = createRemoveHandler();\n\n    this.postgres = postgres;\n    this.queryHandler = queryHandler;\n    this.putHandler = putHandler;\n    this.removeHandler = removeHandler;\n\n    function normalizeTableName() {\n      return \"embeddings\";\n    }\n\n    function createDB() {\n      return new Postgres(\n        ...transform(\n          args?.transform?.postgres,\n          `${name}Database`,\n          { vpc: \"default\" },\n          { parent },\n        ),\n      );\n    }\n\n    function createDBTable() {\n      new VectorTable(\n        `${name}Table`,\n        {\n          clusterArn: postgres.nodes.cluster.arn,\n          secretArn: postgres.nodes.cluster.masterUserSecrets[0].secretArn,\n          databaseName: postgres.database,\n          tableName,\n          dimension: args.dimension,\n        },\n        { parent, dependsOn: postgres.nodes.instance },\n      );\n    }\n\n    function createQueryHandler() {\n      return new Function(\n        `${name}Query`,\n        {\n          description: `${name} query handler`,\n          bundle: useBundlePath(),\n          handler: \"index.query\",\n          environment: useHandlerEnvironment(),\n          permissions: useHandlerPermissions(),\n          dev: false,\n        },\n        { parent },\n      );\n    }\n\n    function createPutHandler() {\n      return new Function(\n        `${name}Put`,\n        {\n          description: `${name} put handler`,\n          bundle: useBundlePath(),\n          handler: \"index.put\",\n          environment: useHandlerEnvironment(),\n          permissions: useHandlerPermissions(),\n          dev: false,\n        },\n        { parent },\n      );\n    }\n\n    function createRemoveHandler() {\n      return new Function(\n        `${name}Remove`,\n        {\n          description: `${name} remove handler`,\n          bundle: useBundlePath(),\n          handler: \"index.remove\",\n          environment: useHandlerEnvironment(),\n          permissions: useHandlerPermissions(),\n          dev: false,\n        },\n        { parent },\n      );\n    }\n\n    function useBundlePath() {\n      return path.join($cli.paths.platform, \"dist\", \"vector-handler\");\n    }\n\n    function useHandlerEnvironment() {\n      return {\n        CLUSTER_ARN: postgres.nodes.cluster.arn,\n        SECRET_ARN: postgres.nodes.cluster.masterUserSecrets[0].secretArn,\n        DATABASE_NAME: postgres.database,\n        TABLE_NAME: tableName,\n      };\n    }\n\n    function useHandlerPermissions() {\n      return [\n        {\n          actions: [\"secretsmanager:GetSecretValue\"],\n          resources: [postgres.nodes.cluster.masterUserSecrets[0].secretArn],\n        },\n        {\n          actions: [\"rds-data:ExecuteStatement\"],\n          resources: [postgres.nodes.cluster.arn],\n        },\n      ];\n    }\n  }\n\n  /**\n   * Reference an existing Vector database with the given name. This is useful when you\n   * create a Vector database in one stage and want to share it in another. It avoids having to\n   * create a new Vector database in the other stage.\n   *\n   * :::tip\n   * You can use the `static get` method to share Vector databases across stages.\n   * :::\n   *\n   * @param name The name of the component.\n   * @param clusterID The RDS cluster id of the existing Vector database.\n   *\n   * @example\n   * Imagine you create a vector database  in the `dev` stage. And in your personal stage `frank`,\n   * instead of creating a new database, you want to share the same database from `dev`.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * const vector = $app.stage === \"frank\"\n   *   ? sst.aws.Vector.get(\"MyVectorDB\", \"app-dev-myvectordb\")\n   *   : new sst.aws.Vector(\"MyVectorDB\", {\n   *       dimension: 1536\n   *     });\n   * ```\n   *\n   * Here `app-dev-myvectordb` is the ID of the underlying Postgres cluster created in the `dev` stage.\n   * You can find this by outputting the cluster ID in the `dev` stage.\n   *\n   * ```ts title=\"sst.config.ts\"\n   * return {\n   *   cluster: vector.clusterID\n   * };\n   * ```\n   *\n   * :::note\n   * The Vector component creates a Postgres cluster and lambda functions for interfacing with the VectorDB.\n   * The `static get` method only shares the underlying Postgres cluster. Each stage will have its own\n   * lambda functions.\n   * :::\n   */\n  public static get(name: string, clusterID: Input<string>) {\n    const postgres = Postgres.get(`${name}Database`, clusterID);\n    return new Vector(name, {\n      ref: true,\n      postgres,\n    } as unknown as VectorArgs);\n  }\n\n  /**\n   * The ID of the RDS Postgres Cluster.\n   */\n  public get clusterID() {\n    return this.postgres.nodes.cluster.id;\n  }\n\n  /**\n   * The underlying [resources](/docs/components/#nodes) this component creates.\n   */\n  public get nodes() {\n    return {\n      /**\n       * The Postgres database.\n       */\n      postgres: this.postgres,\n    };\n  }\n\n  /** @internal */\n  public getSSTLink() {\n    return {\n      properties: {\n        /** @internal */\n        queryFunction: this.queryHandler.name,\n        /** @internal */\n        putFunction: this.putHandler.name,\n        /** @internal */\n        removeFunction: this.removeHandler.name,\n      },\n      include: [\n        permission({\n          actions: [\"lambda:InvokeFunction\"],\n          resources: [\n            this.queryHandler.nodes.function.arn,\n            this.putHandler.nodes.function.arn,\n            this.removeHandler.nodes.function.arn,\n          ],\n        }),\n      ],\n    };\n  }\n}\n\nconst __pulumiType = \"sst:aws:Vector\";\n// @ts-expect-error\nVector.__pulumiType = __pulumiType;\n", "import { CustomResourceOptions, Input, dynamic } from \"@pulumi/pulumi\";\nimport { rpc } from \"../../rpc/rpc.js\";\n\nexport interface PostgresTableInputs {\n  clusterArn: Input<string>;\n  secretArn: Input<string>;\n  databaseName: Input<string>;\n  tableName: Input<string>;\n  dimension: Input<number>;\n}\n\nexport class VectorTable extends dynamic.Resource {\n  constructor(\n    name: string,\n    args: PostgresTableInputs,\n    opts?: CustomResourceOptions,\n  ) {\n    super(\n      new rpc.Provider(\"Aws.VectorTable\"),\n      `${name}.sst.aws.VectorTable`,\n      args,\n      opts,\n    );\n  }\n}\n", "import { Input, jsonStringify, output, UnwrappedObject } from \"@pulumi/pulumi\";\nimport { iam } from \"@pulumi/aws\";\nimport { Prettify } from \"../component\";\n\ntype PartialUnwrappedPolicyDocument = {\n  Id?: string;\n  Version: \"2008-10-17\" | \"2012-10-17\";\n  Statement: Input<iam.PolicyStatement>[];\n};\n\n/**\n * A helper to modify the AWS IAM policy.\n *\n * The IAM policy document is normally in the form of a JSON string. This helper decodes\n * the string into a JSON object and passes it to the callback. Allowing you to modify the\n * policy document in a type-safe way.\n *\n * @example\n *\n * For example, this comes in handy when you are transforming the policy of a component.\n *\n * ```ts title=\"sst.config.ts\" \"sst.aws.iamEdit\"\n * new sst.aws.Bucket(\"MyBucket\", {\n *   transform: {\n *     policy: (args) => {\n *       args.policy = sst.aws.iamEdit(args.policy, (policy) => {\n *         policy.Statement.push({\n *           Effect: \"Allow\",\n *           Action: \"s3:PutObject\",\n *           Principal: { Service: \"ses.amazonaws.com\" },\n *           Resource: $interpolate`arn:aws:s3:::${args.bucket}/*`,\n *         });\n *       });\n *     },\n *   },\n * });\n * ```\n */\nexport function iamEdit(\n  policy: Input<iam.PolicyDocument | string>,\n  cb: (doc: Prettify<PartialUnwrappedPolicyDocument>) => void,\n) {\n  return output(policy).apply((v) => {\n    const json = typeof v === \"string\" ? JSON.parse(v) : v;\n    cb(json);\n    return iam.getPolicyDocumentOutput({\n      sourcePolicyDocuments: [jsonStringify(json)],\n    }).json;\n  });\n}\n", "export * as aws from \"./aws/index.js\";\nexport * as cloudflare from \"./cloudflare/index.js\";\nexport * as vercel from \"./vercel/index.js\";\nexport * from \"./secret.js\";\nexport * from \"./linkable.js\";\n/**\n * experimental packages, you may be fired for using\n */\nexport * as x from \"./experimental/index.js\";\n\nimport { Link } from \"./link.js\";\n\n/**\n * @deprecated\n * Use sst.Linkable.wrap instead.\n */\nexport const linkable = Link.linkable;\n", "\n      import { run } from \"/Users/alexanderfitterling/dev/auth-pools/budget-cognito-dev/.sst/platform/src/auto/run.ts\";\n\t\t\timport mod from '/Users/alexanderfitterling/dev/auth-pools/budget-cognito-dev/sst.config.ts';\n      const result = await run(mod.run);\n      export default result;\n    "],
  "mappings": ";;;;;;;;;;;;;;AAAA,2BAAC,MAAO,cAAa,OAAQ,uBAAsB,SAAU,UAAS,WAAY,EAAC,KAAM,EAAC,aAAc,EAAC,MAAO,EAAC,WAAU,cAAa,aAAY,sBAAqB,EAAC,GAAE,QAAS,eAAc,EAAC,GAAE,MAAO,OAAM,SAAU,IAAG,SAAU,OAAM,SAAU,IAAG,eAAgB,GAAE;;;ACA/Q,2BAAC,SAAU,UAAS,KAAM,OAAM,OAAQ,EAAC,MAAO,8DAA6D,UAAW,8EAA6E,MAAO,gEAA+D,MAAO,oEAAmE,GAAE,OAAQ,EAAC,SAAU,EAAC,gBAAiB,GAAE,uBAAwB,GAAE,YAAa,GAAE,mBAAoB,GAAE,4BAA6B,GAAE,KAAM,GAAE,YAAa,EAAC,EAAC,EAAC;;;ACApf,YAAY,UAAU;;;ACAtB;AAAA,EAGE,WAAAA;AAAA,EACA,UAAAC;AAAA,EACA,OAAAC;AAAA,EACA,qBAAAC;AAAA,OACK;;;ACPA,IAAM,eAAN,cAA2B,MAAM;AAAA,EACtC,eAAe,SAAmB;AAChC,UAAM,QAAQ,KAAK,IAAI,CAAC;AAAA,EAC1B;AACF;;;ACJA,SAAS,UAAAC,eAAc;;;ACAvB;AAAA,EACE;AAAA,EAGA;AAAA,EACA,UAAAC;AAAA,EACA,SAAS;AAAA,EAET,OAAAC;AAAA,OAEK;;;ACVP,OAAO,YAAY;AAEZ,SAAS,YAAY,MAAc;AACxC,SAAO,KAAK,QAAQ,iBAAiB,EAAE;AACvC,SAAO,KAAK,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,CAAC;AACpD;AAEO,SAAS,aAAa,KAAa,MAAc,SAAiB,IAAI;AAO3E,QAAM,OAAO,WAAW,MAAM,IAAI,OAAO,QAAQ,IAAI;AACrD,QAAM,SAAS;AAAA,IACb,OAAO,YAAY,CAAC,EAAE,SAAS,KAAK;AAAA,IACpC;AAAA,EACF;AACA,SAAO,GAAG,IAAI,IAAI,MAAM,GAAG,MAAM;AACnC;AAEO,SAAS,WAAW,KAAa,MAAc;AAOpD,SAAO,KAAK,QAAQ,iBAAiB,EAAE;AAEvC,QAAM,WAAW,mBAAK,MAAM;AAC5B,QAAM,UAAU,KAAK;AACrB,QAAM,WACJ,UAAU,KAAK,MACV,SACD,UAAU,WAAW,KAAK,MACvB,eACA;AAET,MAAI,aAAa,OAAQ,QAAO,GAAG,KAAK,UAAU,GAAG,GAAG,CAAC;AACzD,MAAI,aAAa;AACf,WAAO,GAAG,mBAAK,MAAM,UAAU,GAAG,MAAM,UAAU,CAAC,CAAC,IAAI,IAAI;AAC9D,SAAO,GAAG,mBAAK,KAAK,UAAU,GAAG,MAAM,WAAW,UAAU,CAAC,CAAC,IAC5D,mBAAK,KACP,IAAI,IAAI;AACV;AAEO,SAAS,yBAAyB,QAAgB,QAAgB;AACvE,QAAM,aAAa,aAAa;AAChC,MAAI,OAAO;AACX,SAAO,SAAS,GAAG;AACjB,WAAO,aAAa,SAAS,UAAU,IAAI;AAC3C,aAAS,KAAK,MAAM,SAAS,UAAU;AAAA,EACzC;AAGA,SAAO,KAAK,MAAM,GAAG,MAAM;AAC3B,SAAO,KAAK,SAAS,QAAQ;AAC3B,WAAO,MAAM;AAAA,EACf;AAEA,SAAO;AACT;AAEO,SAAS,yBAAyB,KAAa,QAAgB;AACpE,QAAM,OAAO,OAAO,WAAW,QAAQ;AACvC,OAAK,OAAO,GAAG;AACf,QAAM,MAAM,OAAO,OAAO,KAAK,OAAO,KAAK,EAAE,UAAU,GAAG,EAAE,CAAC;AAC7D,SAAO,yBAAyB,KAAK,MAAM;AAC7C;AAEO,IAAM,eAAe;;;ADrDrB,IAAM,WACX;AAaK,SAAS,UACdC,YACA,MACA,MACA,MACA;AAEA,MAAI,OAAOA,eAAc,YAAY;AACnC,IAAAA,WAAU,MAAM,MAAM,IAAI;AAC1B,WAAO,CAAC,MAAM,MAAM,IAAI;AAAA,EAC1B;AAIA,SAAO,CAAC,MAAM,EAAE,GAAG,MAAM,GAAGA,WAAU,GAAG,IAAI;AAC/C;AAEO,IAAM,YAAN,cAAwB,kBAAkB;AAAA,EACvC;AAAA,EACA;AAAA,EAER,YACE,MACA,MACA,MACA,MACA;AACA,UAAM,aAAa,oBAAoB,IAAI,IAAI,KAAK,CAAC;AACrD,eAAWA,cAAa,YAAY;AAClC,MAAAA,WAAU,EAAE,MAAM,OAAO,MAAM,KAAK,CAAC;AAAA,IACvC;AACA,UAAM,MAAM,MAAM,MAAM;AAAA,MACtB,iBAAiB;AAAA;AAAA,QAEf,CAACC,UAAS;AAER,cAAI,KAAK,SAAS,GAAG;AACnB,kBAAM,IAAI;AAAA,cACR,2BAA2B,IAAI,MAAMA,MAAK,IAAI;AAAA,YAChD;AAGF,cACEA,MAAK,SAAS;AAAA,UAEd,CAACA,MAAK,KAAK,WAAWA,MAAK,KAAK,OAAQ,MAAM,GAC9C;AACA,kBAAM,IAAI;AAAA,cACR,OAAO,IAAI,qCAAqCA,MAAK,IAAI,MACvDA,MAAK,IACP;AAAA,cAEEA,MAAK,KAAK,OAAQ,MACpB;AAAA,YACF;AAAA,UACF;AAMA,cAAIA,MAAK,KAAK,WAAW,MAAM,EAAG;AAClC,cpB;AAEF,gBAAM,cAWF;AAAA,YACF,gCAAgC,CAAC,QAAQ,IAAI;AAAA,YAC7C,wCAAwC,CAAC,QAAQ,GAAG;AAAA,YACpD,kCAAkC,CAAC,QAAQ,GAAG;AAAA,YAC9C,sCAAsC,CAAC,QAAQ,KAAK;AAAA;AAAA,YACpD,4BAA4B,CAAC,QAAQ,GAAG;AAAA,YACxC,0CAA0C,CAAC,QAAQ,GAAG;AAAA,YACtD,oCAAoC,CAAC,QAAQ,GAAG;AAAA,YAChD,oCAAoC,CAAC,QAAQ,GAAG;AAAA,YAChD,qCAAqC,CAAC,QAAQ,KAAK;AAAA,YACnD,oCAAoC,CAAC,QAAQ,GAAG;AAAA,YAChD,0CAA0C,CAAC,YAAY,EAAE;AAAA,YACzD,sCAAsC,CAAC,QAAQ,EAAE;AAAA,YACjD,oCAAoC,CAAC,QAAQ,EAAE;AAAA,YAC/C,8CAA8C,CAAC,QAAQ,EAAE;AAAA,YACzD,yCAAyC,CAAC,oBAAoB,GAAG;AAAA,YACjE,iCAAiC,CAAC,QAAQ,GAAG;AAAA,YAC7C,4BAA4B,CAAC,QAAQ,GAAG;AAAA,YACxC,2BAA2B,CAAC,WAAW,GAAG;AAAA,YAC1C,mBAAmB,CAAC,QAAQ,GAAG;AAAA,YAC/B,6BAA6B,CAAC,QAAQ,GAAG;AAAA,YACzC,2CAA2C,CAAC,QAAQ,GAAG;AAAA,YACvD,iCAAiC,CAAC,QAAQ,GAAG;AAAA,YAC7C,iCAAiC,CAAC,QAAQ,GAAG;AAAA,YAC7C,uCAAuC,CAAC,QAAQ,GAAG;AAAA,YACnD,qDAAqD,CAAC,QAAQ,GAAG;AAAA,YACjE,yBAAyB,CAAC,QAAQ,GAAG;AAAA,YACrC,mBAAmB,CAAC,QAAQ,GAAG;AAAA,YAC/B,2BAA2B,CAAC,QAAQ,GAAG;AAAA,YACvC,iDAAiD;AAAA,cAC/C;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,qDAAqD;AAAA,cACnD;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,2CAA2C;AAAA,cACzC;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,qBAAqB,CAAC,QAAQ,EAAE;AAAA,YAChC,qBAAqB,CAAC,QAAQ,EAAE;AAAA,YAChC,iCAAiC,CAAC,QAAQ,GAAG;AAAA,YAC7C,+BAA+B;AAAA,cAC7B;AAAA,cACA;AAAA,cACA,EAAE,SAAS,CAACC,UAASA,MAAK,WAAW,KAAK,GAAG,EAAE;AAAA,YACjD;AAAA,YACA,6BAA6B,CAAC,QAAQ,GAAG;AAAA;AAAA;AAAA,YAGzC,oCAAoC,CAAC,QAAQ,EAAE;AAAA,YAC/C,gCAAgC,CAAC,QAAQ,EAAE;AAAA,YAC3C,gCAAgC,CAAC,cAAc,IAAI,EAAE,OAAO,KAAK,CAAC;AAAA,YAClE,2BAA2B;AAAA,cACzB;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,2CAA2C;AAAA,cACzC;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,6BAA6B,CAAC,cAAc,IAAI,EAAE,OAAO,KAAK,CAAC;AAAA,YAC/D,uBAAuB,CAAC,QAAQ,IAAI,EAAE,OAAO,KAAK,CAAC;AAAA,YACnD,uDAAuD;AAAA,cACrD;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,yCAAyC;AAAA,cACvC;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,mCAAmC,CAAC,QAAQ,KAAK,EAAE,OAAO,KAAK,CAAC;AAAA,YAChE,4BAA4B,CAAC,UAAU,IAAI,EAAE,OAAO,KAAK,CAAC;AAAA,YAC1D,oCAAoC,CAAC,QAAQ,GAAG;AAAA,YAChD,+CAA+C;AAAA,cAC7C;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,qCAAqC,CAAC,QAAQ,EAAE;AAAA,YAChD,uBAAuB;AAAA,cACrB;AAAA,cACA;AAAA,cACA;AAAA,gBACE,QAAQ,MACNC,QAAOF,MAAK,MAAM,SAAS,EAAE;AAAA,kBAAM,CAAC,SAClC,OAAO,UAAU;AAAA,gBACnB;AAAA,cACJ;AAAA,YACF;AAAA,YACA,uBAAuB;AAAA,cACrB;AAAA,cACA;AAAA,cACA;AAAA,gBACE,QAAQ,MACNE,QAAOF,MAAK,MAAM,SAAS,EAAE;AAAA,kBAAM,CAAC,SAClC,OAAO,UAAU;AAAA,gBACnB;AAAA,cACJ;AAAA,YACF;AAAA,YACA,0CAA0C;AAAA,cACxC;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,sCAAsC,CAAC,QAAQ,IAAI,EAAE,OAAO,KAAK,CAAC;AAAA,YAClE,gDAAgD;AAAA,cAC9C;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,YACA,gCAAgC,CAAC,aAAa,IAAI,EAAE,OAAO,KAAK,CAAC;AAAA,YACjE,0DAA0D;AAAA,cACxD;AAAA,cACA;AAAA,cACA,EAAE,OAAO,KAAK;AAAA,YAChB;AAAA,UACF;AAEA,gBAAM,OAAO,YAAYA,MAAK,IAAI;AAClC,cAAI,CAAC;AACH,kBAAM,IAAI;AAAA,cACR,OAAO,IAAI,sCAAsCA,MAAK,IAAI,MAAMA,MAAK,IAAI;AAAA,YAC3E;AAGF,gBAAM,YAAY,KAAK,CAAC;AACxB,gBAAM,SAAS,KAAK,CAAC;AACrB,gBAAM,UAAU,KAAK,CAAC;AACtB,cAAIA,MAAK,MAAM,SAAS,KAAKA,MAAK,MAAM,SAAS,MAAM,GAAI;AAG3D,cAAI,cAAc,QAAQ;AACxB,mBAAO;AAAA,cACL,OAAO;AAAA,gBACL,GAAGA,MAAK;AAAA,gBACR,MAAM;AAAA;AAAA,kBAEJ,GAAGA,MAAK;AAAA,kBACR,MAAM,WAAW,QAAQA,MAAK,IAAI;AAAA,gBACpC;AAAA,cACF;AAAA,cACA,MAAMA,MAAK;AAAA,YACb;AAAA,UACF;AAGA,gBAAM,SAAS,SAAS,SAAS,QAAQ,OAAO,IAAIE,QAAO,EAAE;AAC7D,iBAAO;AAAA,YACL,OAAO;AAAA,cACL,GAAGF,MAAK;AAAA,cACR,CAAC,SAAS,GAAG,OAAO,MAAM,CAACG,YAAW;AACpC,oBAAI,IAAI,SAAS,QACb,aAAa,QAAQH,MAAK,MAAMG,OAAM,EAAE,YAAY,IACpD,aAAa,QAAQH,MAAK,MAAMG,OAAM;AAC1C,oBAAI,SAAS,QAAS,KAAI,QAAQ,QAAQ,CAAC;AAC3C,uBAAO;AAAA,cACT,CAAC;AAAA,YACH;AAAA,YACA,MAAM;AAAA,cACJ,GAAGH,MAAK;AAAA,cACR,eAAe,CAAC,GAAIA,MAAK,KAAK,iBAAiB,CAAC,GAAI,SAAS;AAAA,YAC/D;AAAA,UACF;AAAA,QACF;AAAA;AAAA,QAEA,CAACA,WAAU;AAAA,UACT,OAAOA,MAAK;AAAA,UACZ,MAAM;AAAA,YACJ,GAAGA,MAAK;AAAA,YACR,gBAAgBA,MAAK,KAAK,kBAAkB,MAAM;AAAA,UACpD;AAAA,QACF;AAAA,QACA,GAAI,MAAM,mBAAmB,CAAC;AAAA,MAChC;AAAA,MACA,GAAG;AAAA,IACL,CAAC;AAED,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAAA,EACvB;AAAA;AAAA,EAGU,gBAAgB,OAKvB;AAED,UAAM,aAAa,MAAM;AACzB,UAAM,aAAa,MAAM,OAAO;AAChC,QAAI,YAAY;AACd,YAAM,YAAY,KAAK,cAAc,WAAW,KAAK,GAAG;AAExD,UAAI,MAAM,gBAAgB,MAAM,iBAAiB,IAAI,UAAU,IAAI;AACjE,cAAM,IAAI;AAAA,UACR;AAAA,YACE,8DAA8D,SAAS;AAAA,YACvE,2BAA2B,UAAU;AAAA,UACvC,EAAE,KAAK,IAAI;AAAA,QACb;AAAA,MACF;AAEA,UAAI,aAAa,cAAc,CAAC,MAAM,cAAc;AAClD,cAAM,IAAI,aAAa,MAAM,WAAW,EAAE;AAAA,MAC5C;AAEA,UAAI,aAAa,YAAY;AAC3B,cAAM,IAAI;AAAA,UACR;AAAA,YACE,uDAAuD,SAAS;AAAA,YAChE;AAAA,UACF,EAAE,KAAK,IAAI;AAAA,QACb;AAAA,MACF;AAAA,IACF;AAGA,QAAI,aAAa,GAAG;AAClB,UAAI,QAAQ,KAAK,eAAe,YAAY,EAAE,QAAQ,KAAK,CAAC;AAAA,IAC9D;AAAA,EACF;AACF;AAEA,IAAM,sBAAsB,oBAAI,IAAmB;AAkD5C,IAAM,UAAN,cAAsB,kBAAkB;AAAA,EAC7C,YAAY,QAAgB,SAAiB,MAAgC;AAC3E,UAAM,mBAAmB,SAAS,WAAW,CAAC,GAAG,IAAI;AACrD,SAAK,gBAAgB,EAAE,QAAQ,QAAQ,CAAC;AAAA,EAC1C;AACF;AAGO,SAAS,sBAAsB,SAAmC;AACvE,QAAM,CAAC,OAAO,KAAK,IAAI,QAAQ,MAAM,GAAG;AACxC,SAAO,EAAE,OAAO,SAAS,KAAK,GAAG,OAAO,SAAS,KAAK,EAAE;AAC1D;;;AD7TO,IAAM,WAAN,cACG,UAEV;AAAA,EACU;AAAA,EACA;AAAA,EAER,OAAc,mBAAmB,oBAAI,IAAY;AAAA,EAEjD,YAAY,MAAc,YAA2B;AACnD,UAAM,oBAAoB,MAAM,YAAY,CAAC,CAAC;AAC9C,SAAK,QAAQ;AACb,SAAK,cAAc;AAAA,EACrB;AAAA,EAEA,IAAW,OAAO;AAChB,WAAOI,QAAO,KAAK,KAAK;AAAA,EAC1B;AAAA,EAEA,IAAW,aAAa;AACtB,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuEA,OAAc,KACZ,KACA,IACA;AAEA,SAAK,iBAAiB,IAAI,IAAI,YAAY;AAE1C,QAAI,UAAU,aAAa,WAAY;AACrC,aAAO,GAAG,IAAI;AAAA,IAChB;AAAA,EACF;AACF;AAwCO,SAAS,IAAIC,MAAoC;AACtD,SAAO;AAAA,IACL,MAAM;AAAA,IACN,KAAAA;AAAA,EACF;AACF;;;AF5TO,IAAO;AAAA,CAAP,CAAOC,UAAP;AAAA,EAWE,MAAM,YAAYC,mBAAkB;AAAA,IACzC,YAAY,QAAgB,MAAc,YAAiB,SAAe;AACxE;AAAA,QACE;AAAA,QACA,SAAS;AAAA,QACT;AAAA,UACE;AAAA,UACA;AAAA,QACF;AAAA,QACA,CAAC;AAAA,MACH;AACA,WAAK,gBAAgB;AAAA,QACnB;AAAA,QACA;AAAA,QACA,YAAY;AAAA,UACV,MAAM,KAAK,WAAW,KAAK,GAAG;AAAA,UAC9B,GAAG;AAAA,QACL;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AApBO,EAAAD,MAAM;AAsBN,WAAS,QAAQ;AACtB,UAAM,QAAQ,oBAAI,IAAY;AAE9B,IAAAE,SAAQ,4BAA4B,CAAC,SAAS;AAC5C,YAAMC,cACJ,KAAK,KAAK,WAAW,MAAM,KAC3B,SAAS,iBAAiB,IAAI,KAAK,IAAI;AACzC,UAAIA,eAAc,CAAC,KAAK,KAAK,QAAQ;AACnC,cAAM,SAAS,KAAK,KAAK,YAAY;AAGrC,YAAI,WAAW,OAAO;AACpB,gBAAM,IAAI;AAAA,YACR,mBAAmB,KAAK,IAAI,2DAA2D,KAAK,IAAI;AAAA,UAClG;AAAA,QACF;AAIA,YAAI,MAAM,IAAI,MAAM,GAAG;AACrB,gBAAM,IAAI,aAAa,kBAAkB,KAAK,IAAI,iBAAiB;AAAA,QACrE;AACA,cAAM,IAAI,MAAM;AAAA,MAClB;AACA,aAAO;AAAA,QACL,MAAM,KAAK;AAAA,QACX,OAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAGD,IAAAD,SAAQ,4BAA4B,CAAC,SAAS;AAC5C,YAAM,WAAW,KAAK;AACtB,cAAQ,SAAS,MAAM;AACrB,YAAIF,MAAK,WAAW,QAAQ,KAAK,CAAC,KAAK,KAAK,QAAQ;AAClD,cAAI;AACF,kBAAM,OAAO,SAAS,WAAW;AACjC,gBAAI,IAAI,KAAK,MAAM,KAAK,MAAM,KAAK,YAAY,KAAK,OAAO;AAAA,UAC7D,SAAS,GAAG;AAAA,UAAC;AAAA,QACf;AAAA,MACF,CAAC;AACD,aAAO;AAAA,QACL,MAAM,KAAK;AAAA,QACX,OAAO,KAAK;AAAA,MACd;AAAA,IACF,CAAC;AAAA,EACH;AA9CO,EAAAA,MAAS;AAqDT,WAAS,WAAW,KAA2B;AACpD,WAAO,gBAAgB;AAAA,EACzB;AAFO,EAAAA,MAAS;AAIT,WAAS,MAAM,OAAc;AAClC,WAAO,MACJ,IAAI,CAAC,SAAS;AACb,UAAI,CAAC;AACH,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AACF,aAAO;AAAA,IACT,CAAC,EACA,OAAO,CAAC,MAAM,WAAW,CAAC,CAAC,EAC3B,IAAI,CAAC,MAAgB;AACpB,YAAM,OAAO,EAAE,WAAW;AAC1B,aAAOI,KAAI,CAAC,EAAE,KAAK,IAAI,CAAC,EAAE,MAAM,CAAC,CAAC,KAAKC,KAAI,OAAO;AAAA,QAChD,MAAM,IAAI,MAAM,IAAI,EAAE,GAAG,EAAE;AAAA,QAC3B,YAAY;AAAA,UACV,GAAGA,MAAK;AAAA,UACR,MAAM,IAAI,MAAM,IAAI,EAAE,GAAG,EAAE;AAAA,QAC7B;AAAA,MACF,EAAE;AAAA,IACJ,CAAC;AAAA,EACL;AApBO,EAAAL,MAAS;AAsBT,WAAS,cAAc,OAAsB;AAClD,UAAM,iBAAiBM,QAAO,SAAS,CAAC,CAAC,EAAE;AAAA,MAAM,CAACC,WAChDA,OACG,IAAI,CAAC,SAAS;AACb,YAAI,CAAC;AACH,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO;AAAA,MACT,CAAC,EACA,OAAO,CAAC,MAAM,WAAW,CAAC,CAAC,EAC3B,IAAI,CAAC,OAAiB;AAAA,QACrB,KAAK,EAAE;AAAA,QACP,YAAY,EAAE,WAAW,EAAE;AAAA,MAC7B,EAAE;AAAA,IACN;AAEA,WAAOD,QAAO,cAAc,EAAE;AAAA,MAAM,CAAC,MACnC,OAAO;AAAA,QACL,EAAE,IAAI,CAAC,EAAE,KAAK,WAAW,MAAM;AAC7B,gBAAM,OAAO,IAAI,MAAM,IAAI,EAAE,GAAG,EAAE;AAClC,gBAAM,OAAO;AAAA,YACX,GAAG;AAAA,YACH,MAAM,IAAI,MAAM,IAAI,EAAE,GAAG,EAAE;AAAA,UAC7B;AACA,iBAAO,CAAC,MAAM,IAAI;AAAA,QACpB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AA7BO,EAAAN,MAAS;AA+BT,WAAS,gBACd,YACA;AACA,WAAOM,QAAO,UAAU,EAAE,MAAM,CAACE,gBAAe;AAC9C,YAAMC,OAAM,OAAO;AAAA,QACjB,OAAO,QAAQD,WAAU,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,MAAM;AAC/C,iBAAO,CAAC,gBAAgB,GAAG,IAAI,KAAK,UAAU,KAAK,CAAC;AAAA,QACtD,CAAC;AAAA,MACH;AACA,MAAAC,KAAI,kBAAkB,IAAI,KAAK,UAAU;AAAA,QACvC,MAAM,mBAAK;AAAA,QACX,OAAO,mBAAK;AAAA,MACd,CAAC;AACD,aAAOA;AAAA,IACT,CAAC;AAAA,EACH;AAfO,EAAAT,MAAS;AAiBT,WAAS,WACd,MACA,OACa;AACb,QAAI,CAAC,MAAO,QAAOM,QAAO,CAAC,CAAC;AAC5B,WAAOA,QAAO,KAAK,EAAE,MAAM,CAAC,UAAU;AACpC,aAAO,MAAM,OAAO,UAAU,EAAE,QAAQ,CAAC,MAAgB;AACvD,cAAM,OAAO,EAAE,WAAW;AAC1B,gBAAQ,KAAK,WAAW,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,SAAS,IAAI;AAAA,MAC3D,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAXO,EAAAN,MAAS;AAgBT,WAASU,UACd,KACA,IACA;AACA,YAAQ,KAAK,4DAA4D;AACzE,QAAI,UAAU,aAAa,WAAY;AACrC,aAAO,GAAG,IAAI;AAAA,IAChB;AAAA,EACF;AARO,EAAAV,MAAS,WAAAU;AAAA,GAhLJ;;;AKguCP,SAAS,QAAQ,OAAuB;AAC7C,SAAO;AACT;;;ANxuCA,IAAM,WAAW,KAAK,MAAM,QAAQ,IAAI,eAAe,IAAI;AAC3D,IAAM,EAAE,QAAQ,OAAO,KAAK,aAAa,QAAQ,WAAW,cAAc,IACxE;AAEF,IAAM,WAAW,KAAK;;;AORtB;AAAA,EAEE,WAAAC;AAAA,EAEA,UAAAC;AAAA,OACK;AAIP,eAAsB,IAAI,SAA8B;AACtD,UAAQ,MAAM,mBAAK,MAAM,IAAI;AAE7B,6CAA2C;AAC3C,6BAA2B;AAC3B,sDAAoD;AAEpD,OAAK,MAAM;AACX,QAAM,UAAW,MAAM,QAAQ,KAAM,CAAC;AACtC,UAAQ,WAAW,mBAAK;AACxB,SAAO;AACT;AAEA,SAAS,6CAA6C;AACpD,EAAAC,SAAQ,4BAA4B,CAAC,SAAqC;AACxE,QACE,mBAAK,YAAY,gBAChB,mBAAK,YAAY,YAChB;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,SAAS,KAAK,IAAI,GACtB;AACA,WAAK,KAAK,iBAAiB,KAAK,KAAK,kBAAkB;AACvD,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT,CAAC;AACH;AAEA,SAAS,6BAA6B;AACpC,EAAAA,SAAQ,4BAA4B,CAAC,SAAqC;AACxE,QAAI,YAAY,KAAK,QAAQ,KAAK,KAAK,QAAQ;AAC7C,UAAI,CAAC,KAAK,KAAK,cAAe,MAAK,KAAK,gBAAgB,CAAC;AACzD,WAAK,KAAK,cAAc,KAAK,MAAM;AACnC,WAAK,KAAK,cAAc,KAAK,SAAS;AAAA,IACxC;AACA,WAAO;AAAA,EACT,CAAC;AACH;AAEA,SAAS,sDAAsD;AAC7D,QAAM,oBAA4C,CAAC;AACnD,EAAAA,SAAQ,4BAA4B,CAAC,SAAqC;AACxE,QAAI,KAAK,SAAS,mCAAoC;AAEtD,IAAAC,QAAO,KAAK,MAAM,MAAM,EAAE,MAAM,CAAC,WAAmB;AAClD,UAAI,kBAAkB,MAAM;AAC1B,cAAM,IAAI;AAAA,UACR,6BAA6B,KAAK,IAAI,2BAA2B,MAAM,gDAAgD,kBAAkB,MAAM,CAAC;AAAA,QAClJ;AAEF,wBAAkB,MAAM,IAAI,KAAK;AAAA,IACnC,CAAC;AAED,WAAO;AAAA,EACT,CAAC;AACH;;;ACvEA,YAAYC,UAAS;;;ACArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA;AAAA;AAAA;AAAA,eAAAC;AAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAAC;AAAA,EAAA;AAAA;AAAA,kBAAAC;AAAA,EAAA;AAAA;AAAA;;;ACAA,OAAOC,SAAQ;AACf,OAAOC,WAAU;;;ACDjB,OAAOC,WAAU;AACjB,OAAOC,SAAQ;AACf,SAAS,gBAAgB;AACzB,OAAOC,aAAY;AAEnB;AAAA,EAGE,UAAAC;AAAA,EACA,OAAAC;AAAA,EACA,eAAAC;AAAA,OAGK;;;ACbP;AAAA,EAGE,UAAAC;AAAA,EACA,eAAAC;AAAA,EACA,OAAAC;AAAA,OACK;;;ACNP,SAA2C,OAAAC,YAAW;AAItD,SAAS,WAAW;AAoBb,IAAM,0BAAN,cAAsC,UAAU;AAAA,EAC7C;AAAA,EAIR,YACE,MACA,MACA,MACA;AACA,UAAM,cAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AACf,UAAM,EAAE,YAAY,kBAAkB,KAAAC,KAAI,IAAI;AAE9C,UAAM,cAAc,kBAAkB;AACtC,UAAM,UAAU,iBAAiB;AACjC,SAAK,wBAAwB,oBAAoB;AAEjD,aAAS,oBAAoB;AAC3B,aAAO,IAAI,IAAI;AAAA,QACb,GAAG,IAAI;AAAA,QACP;AAAA,UACE;AAAA,UACA,kBAAkB;AAAA,UAClB,yBAAyB,oBAAoB,CAAC;AAAA,QAChD;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAOC,KAAI,CAACD,MAAK,YAAY,YAAY,uBAAuB,CAAC,EAAE;AAAA,QACjE,CAAC,CAACA,MAAKE,aAAY,OAAO,MAAM;AAE9B,gBAAMC,WAAoB,CAAC;AAC3B,oBAAU,QAAQ,OAAO,CAAC,WAAW;AACnC,kBAAM,MAAM,OAAO,qBAAqB,OAAO;AAC/C,gBAAIA,SAAQ,SAAS,GAAG,EAAG,QAAO;AAClC,YAAAA,SAAQ,KAAK,GAAG;AAChB,mBAAO;AAAA,UACT,CAAC;AAGD,gBAAM,aACJH,KAAI,aAAa,QACb,SACAA,KAAI,UAAU,MAAME,aAAY,EAAE,OAAO,CAAC;AAGhD,iBAAO,QAAQ;AAAA,YAAI,CAAC,WAClBF,KAAI;AAAA,cACF;AAAA,cACA;AAAA,gBACE,MAAM,OAAO;AAAA,gBACb,MAAM,OAAO;AAAA,gBACb,OAAO,OAAO;AAAA,cAChB;AAAA,cACA,EAAE,QAAQ,WAAW,aAAa,CAAC,GAAG,UAAU,IAAI,CAAC,EAAE;AAAA,YACzD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,aAAO,IAAI,IAAI;AAAA,QACb,GAAG,IAAI;AAAA,QACP;AAAA,UACE,gBAAgB,YAAY;AAAA,QAC9B;AAAA,QACA,EAAE,QAAQ,WAAW,QAAQ;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAW,MAAM;AACf,WAAO,KAAK,sBAAsB;AAAA,EACpC;AACF;AAEA,IAAM,eAAe;AAErB,wBAAwB,eAAe;;;AC3GvC,SAAmC,OAAAI,OAAK,UAAAC,gBAAc;;;ACAtD;AAAA,EAEE,UAAAC;AAAA,EACA,eAAAC;AAAA,EACA,OAAAC;AAAA,OAEK;;;ACoBA,SAAS,UACd,UACA;AACA,QAAM,CAAC,OAAO,IAAI,IAAI,SAAS,MAAM,GAAG;AACxC,QAAM,WAAW,SAAS,KAAK;AAC/B,QAAM,YAAY,KAAK,YAAY;AACnC,MAAI,UAAU,WAAW,QAAQ,GAAG;AAClC,WAAO;AAAA,EACT,WAAW,UAAU,WAAW,QAAQ,GAAG;AACzC,WAAO,WAAW;AAAA,EACpB,WAAW,UAAU,WAAW,MAAM,GAAG;AACvC,WAAO,WAAW;AAAA,EACpB,WAAW,UAAU,WAAW,KAAK,GAAG;AACtC,WAAO,WAAW;AAAA,EACpB;AAEA,QAAM,IAAI,MAAM,oBAAoB,QAAQ,EAAE;AAChD;;;ACxCO,SAAS,iBAAiB,KAAa;AAE5C,QAAM,eAAe,IAAI,MAAM,GAAG,EAAE,CAAC;AACrC,MAAI,CAAC,IAAI,WAAW,MAAM,KAAK,CAAC;AAC9B,UAAM,IAAI;AAAA,MACR,qBAAqB,GAAG;AAAA,IAC1B;AACF,SAAO,EAAE,aAAa;AACxB;AAEO,SAAS,eAAe,KAAa;AAE1C,QAAM,aAAa,IAAI,MAAM,GAAG,EAAE,CAAC;AACnC,MAAI,CAAC,IAAI,WAAW,MAAM,KAAK,CAAC;AAC9B,UAAM,IAAI;AAAA,MACR,qBAAqB,GAAG;AAAA,IAC1B;AACF,SAAO,EAAE,WAAW;AACtB;AAEO,SAAS,cAAc,KAAa;AAEzC,QAAM,YAAY,IAAI,MAAM,GAAG,EAAE,CAAC;AAClC,MAAI,CAAC,IAAI,WAAW,MAAM,KAAK,CAAC;AAC9B,UAAM,IAAI;AAAA,MACR,qBAAqB,GAAG;AAAA,IAC1B;AACF,SAAO,EAAE,UAAU;AACrB;AAEO,SAAS,cAAc,KAAa;AAEzC,QAAM,CAAC,QAAQ,EAAE,EAAE,QAAQ,WAAW,SAAS,IAAI,IAAI,MAAM,GAAG;AAChE,MAAI,WAAW,SAAS,CAAC;AACvB,UAAM,IAAI;AAAA,MACR,qBAAqB,GAAG;AAAA,IAC1B;AACF,SAAO;AAAA,IACL;AAAA,IACA,UAAU,eAAe,MAAM,kBAAkB,SAAS,IAAI,SAAS;AAAA,EACzE;AACF;AAEO,SAAS,eAAe,KAAa;AAE1C,QAAM,YAAY,IAAI,MAAM,GAAG,EAAE,CAAC;AAClC,MAAI,CAAC,IAAI,WAAW,MAAM,KAAK,CAAC;AAC9B,UAAM,IAAI;AAAA,MACR,qBAAqB,GAAG;AAAA,IAC1B;AACF,SAAO,EAAE,UAAU;AACrB;AAEO,SAAS,qBAAqB,WAAmB;AAEtD,QAAM,QAAQ,UAAU,MAAM,GAAG;AACjC,QAAM,YAAY,MAAM,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;AACxC,MAAI,MAAM,CAAC,MAAM,SAAS,MAAM,CAAC,MAAM,cAAc,CAAC;AACpD,UAAM,IAAI;AAAA,MACR,qBAAqB,SAAS;AAAA,IAChC;AACF,SAAO,EAAE,UAAU;AACrB;AAEO,SAAS,sBAAsB,WAAmB;AAEvD,QAAM,QAAQ,UAAU,MAAM,GAAG;AACjC,QAAM,aAAa,MAAM,CAAC,GAAG,MAAM,GAAG,EAAE,CAAC;AACzC,MAAI,MAAM,CAAC,MAAM,SAAS,MAAM,CAAC,MAAM,aAAa,CAAC;AACnD,UAAM,IAAI;AAAA,MACR,qBAAqB,SAAS;AAAA,IAChC;AACF,SAAO,EAAE,WAAW;AACtB;AAEO,SAAS,iBAAiB,KAAa;AAE5C,QAAM,UAAU,IAAI,MAAM,GAAG,EAAE,CAAC;AAChC,MAAI,CAAC,IAAI,WAAW,MAAM,KAAK,CAAC;AAC9B,UAAM,IAAI;AAAA,MACR,qBAAqB,GAAG;AAAA,IAC1B;AACF,SAAO,EAAE,QAAQ;AACnB;AAEO,SAAS,aAAa,KAAa;AAExC,QAAM,WAAW,IAAI,MAAM,GAAG,EAAE,CAAC;AACjC,MAAI,CAAC,IAAI,WAAW,MAAM,KAAK,CAAC;AAC9B,UAAM,IAAI,aAAa,qBAAqB,GAAG,2BAA2B;AAC5E,SAAO,EAAE,SAAS;AACpB;;;AC9FA;AAAA,EAIE,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAIP,SAAS,UAAAC,SAAQ,MAAAC,WAAU;;;ACV3B;AAAA,EACE,OAAAC;AAAA,EAIA,UAAAC;AAAA,OACK;;;ACNP,OAAO,QAAQ;AACf,OAAO,UAAU;AACjB,OAAOC,aAAY;AACnB,OAAO,cAAc;AAErB,SAAS,YAAY;AACrB;AAAA,EACE,OAAAC;AAAA,EACA;AAAA,EAEA,eAAAC;AAAA,EAEA,UAAAC;AAAA,EACA;AAAA,EACA;AAAA,OACK;;;ACdP,OAAO,UAAU;AAEV,IAAO;AAAA,CAAP,CAAOC,SAAP;AAAA,EACE,MAAM,4BAA4B,MAAM;AAAA,IAC7C,YAAmB,QAAgB;AACjC,YAAM,WAAW,MAAM,aAAa;AADnB;AAAA,IAEnB;AAAA,EACF;AAJO,EAAAA,KAAM;AAKb,iBAAsB,KAAc,QAAgB,MAAW;AAC7D,WAAO,IAAI,QAAW,CAAC,SAAS,WAAW;AACzC,YAAM,MAAM,IAAI,IAAI,QAAQ,IAAI,aAAc,MAAM;AACpD,YAAM,UAAU;AAAA,QACd,UAAU,IAAI;AAAA,QACd,MAAM,IAAI;AAAA,QACV,MAAM,IAAI;AAAA,QACV,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,QAClB;AAAA,MACF;AAEA,YAAM,MAAM,KAAK,QAAQ,SAAS,CAAC,QAAQ;AACzC,YAAI,OAAO;AAEX,YAAI,GAAG,QAAQ,CAAC,UAAU;AACxB,kBAAQ;AAAA,QACV,CAAC;AAED,YAAI,GAAG,OAAO,MAAM;AAClB,cAAI,IAAI,eAAe,KAAK;AAC1B,mBAAO,IAAI,MAAM,uBAAuB,IAAI,EAAE,CAAC;AAC/C;AAAA,UACF;AACA,cAAI;AACF,kBAAM,OAAO,KAAK,MAAM,IAAI;AAC5B,gBAAI,KAAK,OAAO;AACd,kBAAI,KAAK,MAAM,WAAW,iBAAiB,GAAG;AAC5C,uBAAO,IAAI,oBAAoB,MAAM,CAAC;AACtC;AAAA,cACF;AACA,qBAAO,IAAI,MAAM,KAAK,KAAK,CAAC;AAC5B;AAAA,YACF;AACA,oBAAQ,KAAK,MAAM;AAAA,UACrB,SAAS,OAAY;AACnB,mBAAO,IAAI,MAAM,yBAAyB,MAAM,OAAO,EAAE,CAAC;AAAA,UAC5D;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAED,UAAI,GAAG,SAAS,CAAC,UAAU;AACzB,eAAO,KAAK;AAAA,MACd,CAAC;AAGD,UAAI,WAAW,CAAC;AAEhB,YAAM,OAAO,KAAK,UAAU;AAAA,QAC1B,SAAS;AAAA,QACT;AAAA,QACA,QAAQ,CAAC,IAAI;AAAA,MACf,CAAC;AAED,UAAI,MAAM,IAAI;AACd,UAAI,IAAI;AAAA,IACV,CAAC;AAAA,EACH;AA1DA,EAAAA,KAAsB;AAAA,EA4Df,MAAMC,UAA6C;AAAA,IACxD,YAAoB,MAAc;AAAd;AAAA,IAAe;AAAA,IAC3B,KAAK,QAAgB;AAC3B,aAAO,cAAc,KAAK,OAAO,MAAM;AAAA,IACzC;AAAA,IACA,MAAM,OAAO,QAAa;AACxB,aAAO,KAAK,KAAK,KAAK,QAAQ,GAAG,MAAM;AAAA,IACzC;AAAA,IAEA,MAAM,OAAO,IAAY,MAA0B;AACjD,aAAO,KAAK,KAAK,KAAK,QAAQ,GAAG,EAAE,IAAI,KAAK,CAAC,EAAE,MAAM,CAAC,OAAO;AAC3D,YAAI,cAAc,oBAAqB;AACvC,cAAM;AAAA,MACR,CAAC;AAAA,IACH;AAAA,IAEA,MAAM,OAAO,IAAY,MAAW,MAAW;AAC7C,aAAO,KAAK,KAAK,KAAK,QAAQ,GAAG,EAAE,IAAI,MAAM,KAAK,CAAC,EAAE,MAAM,CAAC,OAAO;AACjE,YAAI,cAAc;AAChB,iBAAO;AAAA,YACL;AAAA,UACF;AACF,cAAM;AAAA,MACR,CAAC;AAAA,IACH;AAAA,IAEA,MAAM,KAAK,IAAY,OAAyC;AAC9D,aAAO,KAAK,KAAK,KAAK,MAAM,GAAG,EAAE,IAAI,MAAM,CAAC,EAAE,MAAM,CAAC,OAAO;AAC1D,YAAI,cAAc,oBAAqB,QAAO,EAAE,IAAI,MAAM;AAC1D,cAAM;AAAA,MACR,CAAC;AAAA,IACH;AAAA,IAEA,MAAM,KAAK,IAAY,MAAW,MAAwC;AACxE,aAAO,KAAK,KAAK,KAAK,MAAM,GAAG,EAAE,IAAI,MAAM,KAAK,CAAC,EAAE,MAAM,CAAC,OAAO;AAC/D,YAAI,cAAc,oBAAqB,QAAO,EAAE,IAAI,MAAM,KAAK;AAC/D,cAAM;AAAA,MACR,CAAC;AAAA,IACH;AAAA,EACF;AAvCO,EAAAD,KAAM,WAAAC;AAAA,GAlED;;;ACQP,IAAM,YAAY;AAAA,EACvB,UAAU,QAAwC;AAChD,WAAO,IAAI,KAAK,0BAA0B,EAAE,OAAO,CAAC;AAAA,EACtD;AACF;;;ACZO,SAAS,MAAM,MAAuB;AAC3C,QAAM,CAAC,OAAO,IAAI,IAAI,KAAK,MAAM,GAAG;AACpC,QAAM,WAAW,WAAW,KAAK;AACjC,MAAI,SAAS,MAAM;AACjB,WAAO;AAAA,EACT,WAAW,SAAS,MAAM;AACxB,WAAO,WAAW;AAAA,EACpB,WAAW,SAAS,MAAM;AACxB,WAAO,WAAW,OAAO;AAAA,EAC3B;AACA,QAAM,IAAI,MAAM,gBAAgB,IAAI,EAAE;AACxC;AAEO,SAAS,MAAM,MAAuB;AAC3C,QAAM,CAAC,OAAO,IAAI,IAAI,KAAK,MAAM,GAAG;AACpC,QAAM,WAAW,WAAW,KAAK;AACjC,MAAI,SAAS,MAAM;AACjB,WAAO,WAAW;AAAA,EACpB,WAAW,SAAS,MAAM;AACxB,WAAO;AAAA,EACT,WAAW,SAAS,MAAM;AACxB,WAAO,WAAW;AAAA,EACpB;AACA,QAAM,IAAI,MAAM,gBAAgB,IAAI,EAAE;AACxC;;;AC3BO,IAAM,YAAY;AAAA,EACvB,SAAS;AAAA,EACT,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,aAAa;AAAA,EACb,aAAa;AAAA,EACb,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,WAAW;AAAA,EACX,YAAY;AAAA,EACZ,SAAS;AACX;;;AJCA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,EACA,sBAAAC;AAAA,EACA;AAAA,EACA,OAAAC;AAAA,EACA;AAAA,EACA;AAAA,OAEK;;;AKdA,SAAS,WAAW,OAAkB;AAC3C,SAAO;AAAA,IACL,MAAM;AAAA,IACN,GAAG;AAAA,EACL;AACF;;;AC1BA;AAAA,EACE,OAAAC;AAAA,EAEA,eAAAC;AAAA,EAEA,UAAAC;AAAA,OACK;AAGP;AAAA,EACE,OAAAC;AAAA,EACA,8BAAAC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,OACK;;;ACjBP,SAA2C,OAAAC,MAAK,UAAAC,eAAc;AAG9D,SAAS,KAAK,kCAAkC;AAsHzC,IAAM,MAAN,MAAM,aAAY,UAAU;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,MAAc,MAAgB,MAAiC;AACzE,UAAMC,eAAc,MAAM,MAAM,IAAI;AAEpC,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,WAAK,MAAM,IAAI;AACf,WAAK,kBAAkB,IAAI;AAC3B,WAAK,gBAAgB,IAAI;AACzB,WAAK,iBAAiBC,QAAO,IAAI,aAAa;AAC9C,WAAK,kBAAkBA,QAAO,IAAI,cAAc;AAChD,WAAK,oBAAoBA,QAAO,IAAI,iBAAiB;AACrD,WAAK,qBAAqBA,QAAO,IAAI,kBAAkB;AACvD,WAAK,cAAcA,QAAO,IAAI,WAAW;AACzC,WAAK,aAAa,IAAI;AACtB;AAAA,IACF;AAEA,UAAM,SAAS;AAEf,UAAM,QAAQ,YAAY;AAE1B,UAAM,MAAM,UAAU;AACtB,UAAM,kBAAkB,sBAAsB;AAC9C,UAAM,gBAAgB,oBAAoB;AAC1C,UAAM,EAAE,eAAe,kBAAkB,IAAI,oBAAoB;AACjE,UAAM,EAAE,YAAY,YAAY,IAAI,kBAAkB;AACtD,UAAM,EAAE,gBAAgB,mBAAmB,IAAI,qBAAqB;AAEpE,SAAK,MAAM;AACX,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,SAAK,cAAc;AACnB,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,SAAK,qBAAqB;AAE1B,aAAS,cAAc;AACrB,YAAMC,SAAQ,2BAA2B;AAAA,QACvC,OAAO;AAAA,MACT,CAAC;AACD,aAAOC,KAAI,CAACD,QAAO,MAAM,MAAM,CAAC,CAAC,EAAE;AAAA,QAAM,CAAC,CAACA,QAAO,EAAE,MAClD,MAAM,EAAE,EACL,KAAK,CAAC,EACN,IAAI,CAAC,GAAG,MAAMA,OAAM,MAAM,CAAC,CAAC;AAAA,MACjC;AAAA,IACF;AAEA,aAAS,YAAY;AACnB,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW;AAAA,YACX,kBAAkB;AAAA,YAClB,oBAAoB;AAAA,UACtB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,wBAAwB;AAC/B,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,UACb;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,QAAQ;AAAA,cACN;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY,CAAC,WAAW;AAAA,cAC1B;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY,CAAC,WAAW;AAAA,cAC1B;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,YAAM,MAAM,cAAc;AAAA,QAAM,CAAC,YAC/B,QAAQ,IAAI,CAAC,QAAQ,MAAM;AACzB,gBAAM,YAAY,IAAI,IAAI;AAAA,YACxB,GAAG;AAAA,cACD,MAAM,WAAW;AAAA,cACjB,GAAG,IAAI,YAAY,IAAI,CAAC;AAAA,cACxB;AAAA,gBACE,KAAK;AAAA,cACP;AAAA,cACA,EAAE,OAAO;AAAA,YACX;AAAA,UACF;AAEA,gBAAM,aAAa,IAAI,IAAI;AAAA,YACzB,GAAG;AAAA,cACD,MAAM,WAAW;AAAA,cACjB,GAAG,IAAI,aAAa,IAAI,CAAC;AAAA,cACzB;AAAA,gBACE,UAAU,OAAO;AAAA,gBACjB,cAAc,UAAU;AAAA,cAC1B;AAAA,cACA,EAAE,OAAO;AAAA,YACX;AAAA,UACF;AACA,iBAAO,EAAE,WAAW,WAAW;AAAA,QACjC,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,QACL,YAAY,IAAI,MAAM,CAACE,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC;AAAA,QAC1D,aAAa,IAAI,MAAM,CAACA,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC;AAAA,MAC9D;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,YAAM,MAAM,MAAM;AAAA,QAAM,CAACF,WACvBA,OAAM,IAAI,CAAC,MAAM,MAAM;AACrB,gBAAM,SAAS,IAAI,IAAI;AAAA,YACrB,GAAG;AAAA,cACD,MAAM,WAAW;AAAA,cACjB,GAAG,IAAI,eAAe,IAAI,CAAC;AAAA,cAC3B;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,WAAW,QAAQ,IAAI,CAAC;AAAA,gBACxB,kBAAkB;AAAA,gBAClB,qBAAqB;AAAA,cACvB;AAAA,cACA,EAAE,OAAO;AAAA,YACX;AAAA,UACF;AAEA,gBAAM,aAAa,IAAI,IAAI;AAAA,YACzB,GAAG;AAAA,cACD,MAAM,WAAW;AAAA,cACjB,GAAG,IAAI,mBAAmB,IAAI,CAAC;AAAA,cAC/B;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,QAAQ;AAAA,kBACN;AAAA,oBACE,WAAW;AAAA,oBACX,WAAW,gBAAgB;AAAA,kBAC7B;AAAA,gBACF;AAAA,cACF;AAAA,cACA,EAAE,OAAO;AAAA,YACX;AAAA,UACF;AAEA,cAAI,IAAI;AAAA,YACN,GAAG,IAAI,8BAA8B,IAAI,CAAC;AAAA,YAC1C;AAAA,cACE,UAAU,OAAO;AAAA,cACjB,cAAc,WAAW;AAAA,YAC3B;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAEA,iBAAO,EAAE,QAAQ,WAAW;AAAA,QAC9B,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,QACL,eAAe,IAAI,MAAM,CAACE,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;AAAA,QAC1D,mBAAmB,IAAI,MAAM,CAACA,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC;AAAA,MACpE;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,YAAM,MAAM,MAAM;AAAA,QAAM,CAACF,WACvBA,OAAM,IAAI,CAAC,MAAM,MAAM;AACrB,gBAAM,SAAS,IAAI,IAAI;AAAA,YACrB,GAAG;AAAA,cACD,MAAM,WAAW;AAAA,cACjB,GAAG,IAAI,gBAAgB,IAAI,CAAC;AAAA,cAC5B;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,WAAW,QAAQA,OAAM,SAAS,IAAI,CAAC;AAAA,gBACvC,kBAAkB;AAAA,cACpB;AAAA,cACA,EAAE,OAAO;AAAA,YACX;AAAA,UACF;AAEA,gBAAM,aAAa,IAAI,IAAI;AAAA,YACzB,GAAG;AAAA,cACD,MAAM,WAAW;AAAA,cACjB,GAAG,IAAI,oBAAoB,IAAI,CAAC;AAAA,cAChC;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,QAAQ;AAAA,kBACN;AAAA,oBACE,WAAW;AAAA,oBACX,cAAc,YAAY,CAAC,EAAE;AAAA,kBAC/B;AAAA,gBACF;AAAA,cACF;AAAA,cACA,EAAE,OAAO;AAAA,YACX;AAAA,UACF;AAEA,cAAI,IAAI;AAAA,YACN,GAAG,IAAI,+BAA+B,IAAI,CAAC;AAAA,YAC3C;AAAA,cACE,UAAU,OAAO;AAAA,cACjB,cAAc,WAAW;AAAA,YAC3B;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAEA,iBAAO,EAAE,QAAQ,WAAW;AAAA,QAC9B,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,QACL,gBAAgB,IAAI,MAAM,CAACE,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;AAAA,QAC3D,oBAAoB,IAAI,MAAM,CAACA,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC;AAAA,MACrE;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,gBAAgB;AACzB,WAAO,KAAK,eAAe;AAAA,MAAM,CAAC,YAChC,QAAQ,IAAI,CAAC,WAAW,OAAO,EAAE;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,iBAAiB;AAC1B,WAAO,KAAK,gBAAgB;AAAA,MAAM,CAAC,YACjC,QAAQ,IAAI,CAAC,WAAW,OAAO,EAAE;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,iBAAiB;AAC1B,WAAO,CAAC,KAAK,cAAc,EAAE;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA,MAIV,iBAAiB,KAAK;AAAA;AAAA;AAAA;AAAA,MAItB,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA,MAIpB,aAAa,KAAK;AAAA;AAAA;AAAA;AAAA,MAIlB,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA,MAIpB,gBAAgB,KAAK;AAAA;AAAA;AAAA;AAAA,MAIrB,mBAAmB,KAAK;AAAA;AAAA;AAAA;AAAA,MAIxB,oBAAoB,KAAK;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,OAAc,IAAI,MAAc,OAAsB;AACpD,UAAM,MAAM,IAAI,IAAI,IAAI,GAAG,IAAI,OAAO,KAAK;AAC3C,UAAM,kBAAkB,IAAI,gBAAgB;AAAA,MAC1C,GAAG,IAAI;AAAA,MACP,IAAI,yBAAyB;AAAA,QAC3B,SAAS,CAAC,EAAE,MAAM,qBAAqB,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC;AAAA,MAC3D,CAAC,EAAE;AAAA,IACL;AACA,UAAM,gBAAgB,IAAI,cAAc;AAAA,MACtC,GAAG,IAAI;AAAA,MACP,IACG,wBAAwB;AAAA,QACvB,SAAS;AAAA,UACP,EAAE,MAAM,cAAc,QAAQ,CAAC,iBAAiB,EAAE;AAAA,UAClD,EAAE,MAAM,UAAU,QAAQ,CAAC,IAAI,EAAE,EAAE;AAAA,QACrC;AAAA,MACF,CAAC,EACA,IAAI,MAAM,CAAC,QAAQ;AAClB,YAAI,CAAC,IAAI;AACP,gBAAM,IAAI,MAAM,mCAAmC,KAAK,EAAE;AAC5D,eAAO,IAAI,CAAC;AAAA,MACd,CAAC;AAAA,IACL;AACA,UAAM,iBAAiB,IACpB,iBAAiB;AAAA,MAChB,SAAS;AAAA,QACP,EAAE,MAAM,UAAU,QAAQ,CAAC,IAAI,EAAE,EAAE;AAAA,QACnC,EAAE,MAAM,YAAY,QAAQ,CAAC,WAAW,EAAE;AAAA,MAC5C;AAAA,IACF,CAAC,EACA,IAAI;AAAA,MAAM,CAAC,QACV,IAAI,IAAI,CAAC,IAAI,MAAM,IAAI,OAAO,IAAI,GAAG,IAAI,gBAAgB,IAAI,CAAC,IAAI,EAAE,CAAC;AAAA,IACvE;AACF,UAAM,qBAAqB,eAAe;AAAA,MAAM,CAAC,YAC/C,QAAQ;AAAA,QAAI,CAAC,QAAQ,MACnB,IAAI,WAAW;AAAA,UACb,GAAG,IAAI,oBAAoB,IAAI,CAAC;AAAA,UAChC,IAAI,oBAAoB,EAAE,UAAU,OAAO,GAAG,CAAC,EAAE;AAAA,QACnD;AAAA,MACF;AAAA,IACF;AACA,UAAM,gBAAgB,IACnB,iBAAiB;AAAA,MAChB,SAAS;AAAA,QACP,EAAE,MAAM,UAAU,QAAQ,CAAC,IAAI,EAAE,EAAE;AAAA,QACnC,EAAE,MAAM,YAAY,QAAQ,CAAC,UAAU,EAAE;AAAA,MAC3C;AAAA,IACF,CAAC,EACA,IAAI;AAAA,MAAM,CAAC,QACV,IAAI,IAAI,CAAC,IAAI,MAAM,IAAI,OAAO,IAAI,GAAG,IAAI,eAAe,IAAI,CAAC,IAAI,EAAE,CAAC;AAAA,IACtE;AACF,UAAM,oBAAoB,cAAc;AAAA,MAAM,CAAC,YAC7C,QAAQ;AAAA,QAAI,CAAC,QAAQ,MACnB,IAAI,WAAW;AAAA,UACb,GAAG,IAAI,mBAAmB,IAAI,CAAC;AAAA,UAC/B,IAAI,oBAAoB,EAAE,UAAU,OAAO,GAAG,CAAC,EAAE;AAAA,QACnD;AAAA,MACF;AAAA,IACF;AACA,UAAM,cAAc,cAAc;AAAA,MAAM,CAAC,YACvC,QAAQ;AAAA,QAAI,CAAC,QAAQ,MACnB,IAAI,WAAW;AAAA,UACb,GAAG,IAAI,aAAa,IAAI,CAAC;AAAA,UACzB,IAAI,oBAAoB,EAAE,UAAU,OAAO,GAAG,CAAC,EAAE;AAAA,QACnD;AAAA,MACF;AAAA,IACF;AACA,UAAM,aAAa,YAAY;AAAA,MAAM,CAAC,SACpC,KAAK;AAAA,QAAI,CAAC,KAAK,MACb,IAAI,IAAI;AAAA,UACN,GAAG,IAAI,YAAY,IAAI,CAAC;AAAA,UACxB,IAAI;AAAA,QACN;AAAA,MACF;AAAA,IACF;AAEA,WAAO,IAAI,KAAI,MAAM;AAAA,MACnB,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAA6B;AAAA,EAC/B;AACF;AAEA,IAAMJ,gBAAe;AAErB,IAAI,eAAeA;;;AD9iBnB,SAAS,kBAAkB;AAgUpB,IAAMK,OAAN,MAAM,aAAY,UAAmC;AAAA,EAClD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACR,OAAc,KAAK;AAAA,EAEnB,YACE,MACA,OAAgB,CAAC,GACjB,MACA;AACA,UAAMC,eAAc,MAAM,MAAM,IAAI;AACpC,UAAM,WAAW;AACjB,UAAM,cAAc;AACpB,UAAM,OAAO;AAEb,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,MAAM,IAAI;AACf,WAAK,kBAAkB,IAAI;AAC3B,WAAK,gBAAgB,IAAI;AACzB,WAAK,iBAAiBC,QAAO,IAAI,aAAa;AAC9C,WAAK,kBAAkBA,QAAO,IAAI,cAAc;AAChD,WAAK,oBAAoBA,QAAO,IAAI,iBAAiB;AACrD,WAAK,qBAAqBA,QAAO,IAAI,kBAAkB;AACvD,WAAK,cAAcA,QAAO,IAAI,WAAW;AACzC,WAAK,eAAeA,QAAO,IAAI,YAAY;AAC3C,WAAK,aAAa,IAAI;AACtB,WAAK,kBAAkB,IAAI;AAC3B,WAAK,oBAAoB,IAAI;AAC7B,WAAK,kBAAkBA,QAAO,IAAI,eAAe;AACjD,sBAAgB;AAChB;AAAA,IACF;AAEA,oBAAgB;AAChB,UAAM,QAAQ,YAAY;AAC1B,UAAM,MAAM,aAAa;AACzB,UAAM,YAAY,mBAAmB,CAAC,GAAG,IAAI,EAAE;AAE/C,UAAM,MAAM,UAAU;AACtB,UAAM,EAAE,SAAS,gBAAgB,IAAI,cAAc;AACnD,UAAM,kBAAkB,sBAAsB;AAC9C,UAAM,gBAAgB,oBAAoB;AAC1C,UAAM,EAAE,eAAe,kBAAkB,IAAI,oBAAoB;AACjE,UAAM,aAAa,iBAAiB;AACpC,UAAM,cAAc,kBAAkB;AACtC,UAAM,eAAe,mBAAmB;AACxC,UAAM,EAAE,gBAAgB,mBAAmB,IAAI,qBAAqB;AACpE,UAAM,kBAAkB,cAAc;AACtC,UAAM,oBAAoB,wBAAwB;AAElD,SAAK,MAAM;AACX,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,SAAK,qBAAqB;AAC1B,SAAK,kBAAkBA,QAAO,eAAe;AAC7C,SAAK,oBAAoB;AACzB,SAAK,kBAAkBA,QAAO,eAAe;AAC7C,oBAAgB;AAEhB,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,OAAMC,KAAI,IAAI,IAAI,GAAG,IAAI,OAAO,IAAI,OAAO,QAAW;AAAA,QAC1D,QAAQ;AAAA,MACV,CAAC;AAED,YAAM,QAAQD,KAAI,KAAK,MAAM,CAAC,SAAS;AACrC;AAAA,UACE,OAAO,uBAAuB,IAC1B,SAAS,KAAK,uBAAuB,CAAC,IACtC;AAAA,QACN;AAEA,YAAI,OAAO,iBAAiB,MAAM,YAAY,SAAS,GAAG;AACxD,gBAAM,IAAI;AAAA,YACR;AAAA,cACE,yFAAyF,IAAI;AAAA;AAAA,cAC7F;AAAA,YACF,EAAE,KAAK,IAAI;AAAA,UACb;AAAA,QACF;AAEA,eAAOD,QAAO,IAAI,KAAK;AAAA,MACzB,CAAC;AAED,YAAMG,mBAAkBD,KAAI,gBAAgB;AAAA,QAC1C,GAAG,IAAI;AAAA,QACPA,KAAI;AAAA,UACF;AAAA,YACE,SAAS,CAAC,EAAE,MAAM,qBAAqB,QAAQ,CAAC,KAAK,EAAE,CAAC;AAAA,UAC1D;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB,EAAE;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AACA,YAAME,iBAAgBF,KAAI,cAAc;AAAA,QACtC,GAAG,IAAI;AAAA,QACPA,KACG;AAAA,UACC;AAAA,YACE,SAAS;AAAA,cACP,EAAE,MAAM,cAAc,QAAQ,CAAC,SAAS,EAAE;AAAA,cAC1C,EAAE,MAAM,UAAU,QAAQ,CAAC,KAAK,EAAE;AAAA,YACpC;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB,EACC,IAAI,MAAM,CAAC,QAAQ;AAClB,cAAI,CAAC,IAAI,QAAQ;AACf,kBAAM,IAAI;AAAA,cACR,mCAAmC,KAAK;AAAA,YAC1C;AAAA,UACF;AACA,iBAAO,IAAI,CAAC;AAAA,QACd,CAAC;AAAA,QACH;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AACA,YAAMG,kBAAiBH,KACpB;AAAA,QACC;AAAA,UACE,SAAS;AAAA,YACP,EAAE,MAAM,UAAU,QAAQ,CAAC,KAAK,EAAE;AAAA,YAClC,EAAE,MAAM,YAAY,QAAQ,CAAC,WAAW,EAAE;AAAA,UAC5C;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EACC,IAAI;AAAA,QAAM,CAAC,QACV,IAAI;AAAA,UAAI,CAAC,IAAI,MACXA,KAAI,OAAO,IAAI,GAAG,IAAI,gBAAgB,IAAI,CAAC,IAAI,IAAI,QAAW;AAAA,YAC5D,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,MACF;AACF,YAAMI,sBAAqBD,gBAAe;AAAA,QAAM,CAAC,YAC/C,QAAQ;AAAA,UAAI,CAAC,QAAQ,MACnBH,KAAI,WAAW;AAAA,YACb,GAAG,IAAI,oBAAoB,IAAI,CAAC;AAAA,YAChCA,KAAI,oBAAoB,EAAE,UAAU,OAAO,GAAG,GAAG,EAAE,QAAQ,KAAK,CAAC,EAC9D;AAAA,YACH;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AACA,YAAMK,iBAAgBL,KACnB;AAAA,QACC;AAAA,UACE,SAAS;AAAA,YACP,EAAE,MAAM,UAAU,QAAQ,CAAC,KAAK,EAAE;AAAA,YAClC,EAAE,MAAM,YAAY,QAAQ,CAAC,UAAU,EAAE;AAAA,UAC3C;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EACC,IAAI;AAAA,QAAM,CAAC,QACV,IAAI;AAAA,UAAI,CAAC,IAAI,MACXA,KAAI,OAAO,IAAI,GAAG,IAAI,eAAe,IAAI,CAAC,IAAI,IAAI,QAAW;AAAA,YAC3D,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,MACF;AACF,YAAMM,qBAAoBD,eAAc;AAAA,QAAM,CAAC,YAC7C,QAAQ;AAAA,UAAI,CAAC,QAAQ,MACnBL,KAAI,WAAW;AAAA,YACb,GAAG,IAAI,mBAAmB,IAAI,CAAC;AAAA,YAC/BA,KAAI,oBAAoB,EAAE,UAAU,OAAO,GAAG,GAAG,EAAE,QAAQ,KAAK,CAAC,EAC9D;AAAA,YACH;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AACA,YAAMO,eAAcF,eAAc,MAAM,CAAC,YAAY;AACnD,cAAM,gBAAgB,QAAQ;AAAA,UAAI,CAAC,QAAQ,MACzCL,KACG;AAAA,YACC;AAAA,cACE,SAAS;AAAA,gBACP,EAAE,MAAM,aAAa,QAAQ,CAAC,OAAO,EAAE,EAAE;AAAA,gBACzC,EAAE,MAAM,SAAS,QAAQ,CAAC,WAAW,EAAE;AAAA,cACzC;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB,EACC,IAAI,MAAM,CAAC,QAAQ,IAAI,CAAC,CAAC;AAAA,QAC9B;AACA,eAAOF,QAAO,aAAa,EAAE;AAAA,UAAM,CAAC,QAClC,IACG,OAAO,CAAC,OAAO,EAAE,EACjB;AAAA,YAAI,CAAC,IAAI,MACRE,KAAI,WAAW,IAAI,GAAG,IAAI,aAAa,IAAI,CAAC,IAAI,IAAI,QAAW;AAAA,cAC7D,QAAQ;AAAA,YACV,CAAC;AAAA,UACH;AAAA,QACJ;AAAA,MACF,CAAC;AACD,YAAMQ,cAAaD,aAAY;AAAA,QAAM,CAAC,SACpC,KAAK;AAAA,UAAI,CAACE,MAAK,MACbT,KAAI,IAAI;AAAA,YACN,GAAG,IAAI,YAAY,IAAI,CAAC;AAAA,YACxBS,KAAI;AAAA,YACJ;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AACA,YAAMC,gBAAeV,KAClB;AAAA,QACC;AAAA,UACE,SAAS;AAAA,YACP,EAAE,MAAM,kBAAkB,QAAQ,CAAC,MAAM,EAAE;AAAA,YAC3C,EAAE,MAAM,UAAU,QAAQ,CAAC,KAAK,EAAE;AAAA,UACpC;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EACC,IAAI;AAAA,QAAM,CAAC,QACV,IAAI;AAAA,UAAI,CAAC,IAAI,MACXA,KAAI,SAAS,IAAI,GAAG,IAAI,cAAc,IAAI,CAAC,IAAI,IAAI,QAAW;AAAA,YAC5D,QAAQ;AAAA,UACV,CAAC;AAAA,QACH;AAAA,MACF;AACF,YAAMW,mBAAkBX,KACrB;AAAA,QACC;AAAA,UACE,SAAS;AAAA,YACP,EAAE,MAAM,sBAAsB,QAAQ,CAAC,MAAM,EAAE;AAAA,YAC/C,EAAE,MAAM,UAAU,QAAQ,CAAC,KAAK,EAAE;AAAA,UACpC;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EACC,IAAI;AAAA,QAAM,CAAC,QACV,IAAI,SACAA,KAAI,SAAS,IAAI,GAAG,IAAI,mBAAmB,IAAI,CAAC,GAAG,QAAW;AAAA,UAC5D,QAAQ;AAAA,QACV,CAAC,IACD;AAAA,MACN;AAYF,YAAM,OAAOF,QAAO,KAAK,EAAE;AAAA,QAAM,CAACc,WAChC,QAAQ;AAAA,UACN;AAAA,YACE,MAAM;AAAA,YACN,aAAa;AAAA,YACb,OAAAA;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AACA,YAAM,cAAc,KAAK,yBAAyB,MAAM,CAAC,gBAAgB;AACvE,cAAM,QAAQ,YAAY,MAAM,4BAA4B,IAAI,CAAC;AACjE,YAAI,CAAC,OAAO;AACV,gBAAM,IAAI;AAAA,YACR,yCAAyC,KAAK;AAAA,UAChD;AAAA,QACF;AACA,eAAO;AAAA,MACT,CAAC;AACD,YAAMC,qBAAoB,iBAAiB,oBAAoB;AAAA,QAC7D,GAAG,IAAI;AAAA,QACP;AAAA,QACA,EAAE,KAAK,MAAM;AAAA,QACb,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,YAAMC,mBAAkBH,iBAAgB,MAAM,CAAC,MAAM;AACnD,YAAI,CAAC,EAAG;AACR,cAAM,QAAQ,IAAI,UAAU;AAAA,UAC1B,GAAG,IAAI;AAAA,UACPI,wBAAuB,KAAK;AAAA,UAC5B;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AACA,eAAO,MAAM;AAAA,MACf,CAAC;AAED,aAAO;AAAA,QACL,KAAAhB;AAAA,QACA,iBAAAE;AAAA,QACA,eAAAC;AAAA,QACA,eAAAG;AAAA,QACA,mBAAAC;AAAA,QACA,gBAAAH;AAAA,QACA,oBAAAC;AAAA,QACA,aAAAG;AAAA,QACA,cAAAG;AAAA,QACA,YAAAF;AAAA,QACA,iBAAAG;AAAA,QACA,mBAAAE;AAAA,QACA,iBAAAC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB,iBAA0B;AACjD,WAAK,gBAAgB;AAAA,QACnB,KAAK;AAAA,QACL,KAAK,mBAAmB,mBAAK,MAAM,QAAQ,IAAI;AAAA,QAC/C,SAAS;AAAA,UACP;AAAA,UACA;AAAA,UACA,iEAAiE,mBAAK,MAAM,QAAQ,IAAI,CAAC;AAAA,QAC3F,EAAE,KAAK,IAAI;AAAA,MACb,CAAC;AAAA,IACH;AAEA,aAAS,kBAAkB;AACzB,WAAK,gBAAgB;AAAA,QACnB,SAASE,KAAI;AAAA,UACX,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,UACL,KAAK;AAAA,QACP,CAAC,EAAE;AAAA,UACD,CAAC,CAAC,SAASF,kBAAiBX,iBAAgBE,cAAa,MAAM;AAC7D,gBAAI,CAAC,QAAS;AACd,mBAAO;AAAA,cACL,IAAI,QAAQ;AAAA,cACZ,UAAU;AAAA,cACV,YAAYS;AAAA,cACZ,SAAS,CAAC,GAAGX,iBAAgB,GAAGE,cAAa,EAAE;AAAA,gBAC7C,CAAC,MAAM,EAAE;AAAA,cACX;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,cAAc;AACrB,aAAOP,QAAO,KAAK,EAAE,EAAE,MAAM,CAAC,OAAO;AACnC,YAAI,MAAM,QAAQ,EAAE,EAAG,QAAOA,QAAO,EAAE;AAEvC,cAAMmB,SAAQC;AAAA,UACZ;AAAA,YACE,OAAO;AAAA,UACT;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AACA,eAAOF,KAAI,CAACC,QAAO,KAAK,MAAM,CAAC,CAAC,EAAE;AAAA,UAAM,CAAC,CAACA,QAAOE,GAAE,MACjD,MAAMA,GAAE,EACL,KAAK,CAAC,EACN,IAAI,CAAC,GAAG,MAAMF,OAAM,MAAM,CAAC,CAAC;AAAA,QACjC;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,eAAe;AACtB,aAAOD,KAAI,CAAC,KAAK,KAAK,KAAK,CAAC,EAAE,MAAM,CAAC,CAACP,MAAKQ,MAAK,MAAM;AACpD,YAAIR,SAAQ,WAAW;AACrB,iBAAO,EAAE,MAAM,UAAmB;AAAA,QACpC;AACA,YAAIA,SAAQ,OAAO;AACjB,iBAAO;AAAA,YACL,MAAM;AAAA,YACN,KAAK,EAAE,UAAU,YAAY,KAAK,OAAU;AAAA,UAC9C;AAAA,QACF;AACA,YAAIA,MAAK;AACP,cAAIA,KAAI,OAAOA,KAAI,SAAS;AAC1B,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AAEF,cAAI,CAACA,KAAI;AACP,kBAAM,IAAI;AAAA,cACR,+BAA+B,IAAI;AAAA,YACrC;AAEF,cAAIA,KAAI,MAAMA,KAAI,GAAG,WAAWQ,OAAM;AACpC,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AAEF,iBAAOR,KAAI,OAAOA,KAAI,SAAS,QAC3B;AAAA,YACE,MAAM;AAAA,YACN,IAAIA,KAAI;AAAA,YACR,KAAKA,KAAI,OAAO,EAAE,UAAU,WAAW;AAAA,UACzC,IACA;AAAA,YACE,MAAM;AAAA,YACN,IAAIA,KAAI;AAAA,UACV;AAAA,QACN;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,YAAY;AACnB,aAAO,IAAIT,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW;AAAA,YACX,kBAAkB;AAAA,YAClB,oBAAoB;AAAA,YACpB,MAAM;AAAA,cACJ,MAAM,GAAG,mBAAK,IAAI,IAAI,mBAAK,KAAK,IAAI,IAAI;AAAA,cACxC,yBAAyB,SAAS,SAAS;AAAA,cAC3C,mBAAmB,YAAY,SAAS;AAAA,YAC1C;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,YAAM,MAAMF,QAAO,KAAK,OAAO,EAAE,MAAM,CAAC,YAAY;AAClD,YAAI,CAAC,QAAS,QAAO,CAAC;AAEtB,cAAM,gBAAgB,IAAI;AAAA,UACxB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW;AAAA,YACX,SAAS;AAAA,UACX;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,YAAI,IAAI;AAAA,UACN,GAAG,IAAI;AAAA,UACP;AAAA,YACE,MAAMiB,wBAAuB,IAAI,EAAE;AAAA,YACnC,aAAa;AAAA,YACb,MAAM,IAAI,cAAc;AAAA,YACxB,OAAO,cAAc;AAAA,UACvB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,cAAMK,WAAU,IAAIpB,KAAI;AAAA,UACtB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW,cAAc;AAAA,UAC3B;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,eAAO,EAAE,SAAAoB,UAAS,iBAAiB,cAAc,kBAAkB;AAAA,MACrE,CAAC;AACD,aAAO;AAAA,QACL,SAAStB,QAAO,IAAI,OAAO;AAAA,QAC3B,iBAAiBA,QAAO,IAAI,eAAe;AAAA,MAC7C;AAAA,IACF;AAEA,aAAS,wBAAwB;AAC/B,aAAO,IAAIE,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,UACb;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,aAAO,IAAIA,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa;AAAA,YACb,OAAO,IAAI;AAAA,YACX,QAAQ;AAAA,cACN;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY,CAAC,WAAW;AAAA,cAC1B;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA;AAAA,gBAEV,YAAY,CAAC,IAAI,SAAS;AAAA,cAC5B;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAOgB,KAAI,CAAC,KAAK,aAAa,CAAC,EAAE,MAAM,CAAC,CAACP,MAAK,OAAO,MAAM;AACzD,YAAI,CAACA,KAAK,QAAO,CAAC;AAClB,YAAIA,MAAK,GAAI,QAAO,CAAC;AAErB,eAAO,QAAQ;AAAA,UACb,CAAC,GAAG,MACF,IAAIT,KAAI;AAAA,YACN,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,YAAY,IAAI,CAAC;AAAA,cACxB;AAAA,gBACE,KAAK;AAAA,cACP;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAAA,QACJ;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,oBAAoB;AAC3B,aAAOgB,KAAI,CAAC,KAAK,eAAe,UAAU,CAAC,EAAE;AAAA,QAC3C,CAAC,CAACP,MAAK,SAASD,WAAU,MAAM;AAC9B,cAAIC,MAAK,SAAS,UAAW,QAAO,CAAC;AAErC,iBAAO,QAAQ;AAAA,YACb,CAAC,QAAQ,MACP,IAAIT,KAAI;AAAA,cACN,GAAG;AAAA,gBACD,KAAK,WAAW;AAAA,gBAChB,GAAG,IAAI,aAAa,IAAI,CAAC;AAAA,gBACzB;AAAA,kBACE,UAAU,OAAO;AAAA,kBACjB,cAAcQ,YAAW,CAAC,GAAG,MAAMC,KAAI,GAAI,CAAC;AAAA,gBAC9C;AAAA,gBACA,EAAE,QAAQ,KAAK;AAAA,cACjB;AAAA,YACF;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAI,MAAM,CAACA,SAAQ;AACxB,YAAIA,MAAK,SAAS,MAAO,QAAOX,QAAO,CAAC,CAAC;AAEzC,cAAM,KAAK,IAAIE,KAAI;AAAA,UACjB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,OAAO,IAAI;AAAA,cACX,SAAS;AAAA,gBACP;AAAA,kBACE,UAAU;AAAA,kBACV,UAAU;AAAA,kBACV,QAAQ;AAAA,kBACR,YAAY,CAAC,WAAW;AAAA,gBAC1B;AAAA,cACF;AAAA,cACA,QAAQ;AAAA,gBACN;AAAA,kBACE,UAAU;AAAA,kBACV,UAAU;AAAA,kBACV,QAAQ;AAAA,kBACR,YAAY,CAAC,WAAW;AAAA,gBAC1B;AAAA,cACF;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAEA,cAAM,OAAO,IAAI,IAAI;AAAA,UACnB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkB,IAAI,wBAAwB;AAAA,cAC5C,YAAY;AAAA,gBACV;AAAA,kBACE,SAAS,CAAC,gBAAgB;AAAA,kBAC1B,YAAY;AAAA,oBACV;AAAA,sBACE,MAAM;AAAA,sBACN,aAAa,CAAC,mBAAmB;AAAA,oBACnC;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC,EAAE;AAAA,YACH,mBAAmB;AAAA,cACjBe,mBAAkB,SAAS;AAAA,YAC7B;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,cAAM,kBAAkB,IAAI,IAAI;AAAA,UAC9B,GAAG,IAAI;AAAA,UACP,EAAE,MAAM,KAAK,KAAK;AAAA,UAClB,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,cAAM,MACJN,KAAI,IAAI,OACRT,KAAI;AAAA,UACF;AAAA,YACE,QAAQ,CAAC,cAAc;AAAA;AAAA,YACvB,SAAS;AAAA,cACP;AAAA,gBACE,MAAM;AAAA;AAAA,gBAEN,QAAQ,CAAC,kBAAkB;AAAA,cAC7B;AAAA,cACA;AAAA,gBACE,MAAM;AAAA,gBACN,QAAQ,CAAC,OAAO;AAAA,cAClB;AAAA,YACF;AAAA,YACA,YAAY;AAAA,UACd;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB,EAAE;AAEJ,eAAOgB,KAAI;AAAA,UACT;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,KAAK;AAAA,QACP,CAAC,EAAE;AAAA,UAAM,CAAC,CAACC,QAAOZ,gBAAeG,aAAYY,UAAS,OAAO,MAC3DH,OAAM,IAAI,CAAC,GAAG,MAAM;AAClB,kBAAM,WAAW,IAAIjB,KAAI;AAAA,cACvB,GAAG;AAAA,gBACD,KAAK,WAAW;AAAA,gBAChB,GAAG,IAAI,cAAc,IAAI,CAAC;AAAA,gBAC1B;AAAA,kBACE,cAAcS,KAAI,IAAI;AAAA,kBACtB;AAAA,kBACA,UAAUJ,eAAc,CAAC,EAAE;AAAA,kBAC3B,qBAAqB,CAAC,GAAG,EAAE;AAAA,kBAC3B,oBAAoB,gBAAgB;AAAA,kBACpC,iBAAiB;AAAA,kBACjB,SAASe,UAAS;AAAA,kBAClB,MAAM;AAAA,oBACJ,MAAM,GAAG,IAAI;AAAA,oBACb,cAAc;AAAA,oBACd,GAAI,WAAW,MAAM,IAAI,EAAE,kBAAkB,OAAO,IAAI,CAAC;AAAA,kBAC3D;AAAA,gBACF;AAAA,gBACA,EAAE,QAAQ,KAAK;AAAA,cACjB;AAAA,YACF;AAEA,gBAAIpB,KAAI,eAAe,GAAG,IAAI,4BAA4B,IAAI,CAAC,IAAI;AAAA,cACjE,YAAY,SAAS;AAAA,cACrB,cAAcQ,YAAW,CAAC,GAAG,MAAMC,KAAI,GAAI,CAAC;AAAA,YAC9C,CAAC;AAED,mBAAO;AAAA,UACT,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,sBAAsB;AAC7B,YAAM,MAAM,MAAM;AAAA,QAAM,CAACQ,WACvBA,OAAM,IAAI,CAAC,MAAM,MAAM;AACrB,gBAAM,SAAS,IAAIjB,KAAI;AAAA,YACrB,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,eAAe,IAAI,CAAC;AAAA,cAC3B;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,WAAW,QAAQ,IAAI,CAAC;AAAA,gBACxB,kBAAkB;AAAA,gBAClB,qBAAqB;AAAA,cACvB;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAEA,gBAAM,aAAa,IAAIA,KAAI;AAAA,YACzB,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,mBAAmB,IAAI,CAAC;AAAA,cAC/B;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,QAAQ;AAAA,kBACN;AAAA,oBACE,WAAW;AAAA,oBACX,WAAW,gBAAgB;AAAA,kBAC7B;AAAA,gBACF;AAAA,cACF;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAEA,cAAIA,KAAI;AAAA,YACN,GAAG,IAAI,8BAA8B,IAAI,CAAC;AAAA,YAC1C;AAAA,cACE,UAAU,OAAO;AAAA,cACjB,cAAc,WAAW;AAAA,YAC3B;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAEA,iBAAO,EAAE,QAAQ,WAAW;AAAA,QAC9B,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,QACL,eAAe,IAAI,MAAM,CAACqB,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;AAAA,QAC1D,mBAAmB,IAAI,MAAM,CAACA,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC;AAAA,MACpE;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,YAAM,MAAM,MAAM;AAAA,QAAM,CAACJ,WACvBA,OAAM,IAAI,CAAC,MAAM,MAAM;AACrB,gBAAM,SAAS,IAAIjB,KAAI;AAAA,YACrB,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,gBAAgB,IAAI,CAAC;AAAA,cAC5B;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,WAAW,QAAQ,IAAI,IAAI,CAAC;AAAA,gBAC5B,kBAAkB;AAAA,cACpB;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAEA,gBAAM,aAAa,IAAIA,KAAI;AAAA,YACzB,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,oBAAoB,IAAI,CAAC;AAAA,cAChC;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,QAAQgB,KAAI,CAAC,aAAa,YAAY,CAAC,EAAE;AAAA,kBACvC,CAAC,CAACT,cAAaG,aAAY,MAAM;AAAA,oBAC/B,GAAIH,aAAY,CAAC,IACb;AAAA,sBACE;AAAA,wBACE,WAAW;AAAA,wBACX,cAAcA,aAAY,CAAC,EAAE;AAAA,sBAC/B;AAAA,oBACF,IACA,CAAC;AAAA,oBACL,GAAIG,cAAa,CAAC,IACd;AAAA,sBACE;AAAA,wBACE,WAAW;AAAA,wBACX,oBACEA,cAAa,CAAC,EAAE;AAAA,sBACpB;AAAA,oBACF,IACA,CAAC;AAAA,kBACP;AAAA,gBACF;AAAA,cACF;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAEA,cAAIV,KAAI;AAAA,YACN,GAAG,IAAI,+BAA+B,IAAI,CAAC;AAAA,YAC3C;AAAA,cACE,UAAU,OAAO;AAAA,cACjB,cAAc,WAAW;AAAA,YAC3B;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAEA,iBAAO,EAAE,QAAQ,WAAW;AAAA,QAC9B,CAAC;AAAA,MACH;AAEA,aAAO;AAAA,QACL,gBAAgB,IAAI,MAAM,CAACqB,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;AAAA,QAC3D,oBAAoB,IAAI,MAAM,CAACA,SAAQA,KAAI,IAAI,CAAC,MAAM,EAAE,UAAU,CAAC;AAAA,MACrE;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAOL,KAAI,CAAC,KAAK,SAAS,cAAc,OAAO,CAAC,EAAE;AAAA,QAChD,CAAC,CAAC,SAASN,eAAcU,QAAO,MAAM;AACpC,cAAI,CAAC,QAAS,QAAO;AAErB,cAAIV,cAAa,OAAQ,QAAOA,cAAa,CAAC;AAE9C,gBAAM,KAAK,IAAIV,KAAI;AAAA,YACjB,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI;AAAA,cACP;AAAA,gBACE,OAAO,IAAI;AAAA,gBACX,SAAS;AAAA,kBACP;AAAA,oBACE,UAAU;AAAA,oBACV,UAAU;AAAA,oBACV,QAAQ;AAAA,oBACR,YAAY,CAAC,WAAW;AAAA,kBAC1B;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN;AAAA,oBACE,UAAU;AAAA,oBACV,UAAU;AAAA,oBACV,QAAQ;AAAA,oBACR,YAAY,CAAC,WAAW;AAAA,kBAC1B;AAAA,gBACF;AAAA,cACF;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAEA,gBAAM,OAAO,IAAI,IAAI;AAAA,YACnB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,kBAAkB,IAAI,wBAAwB;AAAA,gBAC5C,YAAY;AAAA,kBACV;AAAA,oBACE,SAAS,CAAC,gBAAgB;AAAA,oBAC1B,YAAY;AAAA,sBACV;AAAA,wBACE,MAAM;AAAA,wBACN,aAAa,CAAC,mBAAmB;AAAA,sBACnC;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,CAAC,EAAE;AAAA,cACH,mBAAmB;AAAA,gBACjBe,mBAAkB,SAAS;AAAA,cAC7B;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AACA,gBAAM,kBAAkB,IAAI,IAAI;AAAA,YAC9B,GAAG,IAAI;AAAA,YACP,EAAE,MAAM,KAAK,KAAK;AAAA,YAClB,EAAE,QAAQ,KAAK;AAAA,UACjB;AACA,gBAAM,MAAMf,KAAI;AAAA,YACd;AAAA,cACE,QAAQ,CAAC,QAAQ;AAAA,cACjB,SAAS;AAAA,gBACP;AAAA,kBACE,MAAM;AAAA;AAAA,kBAEN,QAAQ,CAAC,gBAAgB;AAAA,gBAC3B;AAAA,gBACA;AAAA,kBACE,MAAM;AAAA,kBACN,QAAQ,CAAC,OAAO;AAAA,gBAClB;AAAA,cACF;AAAA,cACA,YAAY;AAAA,YACd;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AACA,iBAAO,IAAIA,KAAI;AAAA,YACb,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI;AAAA,cACP;AAAA,gBACE,cAAc;AAAA,gBACd,KAAK,IAAI;AAAA,gBACT,UAAU,cAAc,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AAAA,gBAC5C,qBAAqB,CAAC,GAAG,EAAE;AAAA,gBAC3B,oBAAoB,gBAAgB;AAAA,gBACpC,SAASoB,UAAS;AAAA,gBAClB,MAAM;AAAA,kBACJ,kBAAkB;AAAA,gBACpB;AAAA,cACF;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,0BAA0B;AACjC,aAAO,IAAI,iBAAiB;AAAA,QAC1B,GAAG,IAAI;AAAA,QACP;AAAA,UACE,MAAM;AAAA,UACN,KAAK,IAAI;AAAA,QACX;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,gBAAgB;AACzB,WAAO,KAAK,eAAe;AAAA,MAAM,CAAC,YAChC,QAAQ,IAAI,CAAC,WAAW,OAAO,EAAE;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,iBAAiB;AAC1B,WAAO,KAAK,gBAAgB;AAAA,MAAM,CAAC,YACjC,QAAQ,IAAI,CAAC,WAAW,OAAO,EAAE;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,iBAAiB;AAC1B,WAAOtB,QAAO,KAAK,aAAa,EAAE,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,UAAU;AACnB,WAAO,KAAK,gBAAgB,MAAM,CAAC,MAAM;AACvC,UAAI,CAAC,GAAG;AACN,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AACA,aAAO,EAAE;AAAA,IACX,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA,MAIV,iBAAiB,KAAK;AAAA;AAAA;AAAA;AAAA,MAItB,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA,MAIpB,aAAa,KAAK;AAAA;AAAA;AAAA;AAAA,MAIlB,cAAc,KAAK;AAAA;AAAA;AAAA;AAAA,MAInB,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA,MAIpB,gBAAgB,KAAK;AAAA;AAAA;AAAA;AAAA,MAIrB,mBAAmB,KAAK;AAAA;AAAA;AAAA;AAAA,MAIxB,oBAAoB,KAAK;AAAA;AAAA;AAAA;AAAA,MAIzB,iBAAiB,KAAK;AAAA;AAAA;AAAA;AAAA,MAItB,mBAAmB,KAAK;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,OAAc,IACZ,MACA,OACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,SAAS,KAAK,gBAAgB,MAAM,CAAC,MAAM,GAAG,EAAE;AAAA,MAClD;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,gBAAe;AAErBD,KAAI,eAAeC;;;AN32CnB,SAAS,aAAa;AAGtB,SAAS,mBAAmB;;;AQzCrB,SAAS,KAAQ,UAAmB;AACzC,MAAI,SAAS;AACb,MAAIyB;AAEJ,SAAO,MAAM;AACX,QAAI,CAAC,QAAQ;AACX,eAAS;AACT,MAAAA,UAAS,SAAS;AAAA,IACpB;AACA,WAAOA;AAAA,EACT;AACF;;;ACXA,SAAS,OAAAC,MAAuC,UAAAC,eAAc;AAG9D,SAAS,OAAAC,MAAK,WAAW;AAoKlB,IAAM,MAAN,MAAM,aAAY,UAAU;AAAA,EACzB;AAAA,EACA;AAAA,EAER,YAAY,MAAc,MAAe,MAAiC;AACxE,UAAMC,eAAc,MAAM,MAAM,IAAI;AAEpC,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,WAAK,cAAcC,QAAO,IAAI,UAAU;AACxC,WAAK,eAAeA,QAAO,IAAI,WAAW;AAC1C;AAAA,IACF;AAEA,UAAM,SAAS;AACf,UAAM,MAAM,aAAa;AACzB,UAAM,aAAaA,QAAO,KAAK,cAAc,SAAS;AACtD,UAAM,cAAcA,QAAO,KAAK,eAAe,iBAAiB;AAEhE,UAAM,aAAa,iBAAiB;AACpC,UAAM,gBAAgB,oBAAoB;AAC1C,UAAM,eAAe,mBAAmB;AACxC,UAAM,cAAc,kBAAkB;AAEtC,UAAM,SAAS,aAAa;AAAA,MAAM,CAAC,YACjCC,KAAI,QAAQ,IAAI,CAAC,WAAW,OAAO,GAAG,CAAC,EAAE,MAAM,OAAO;AAAA,QACpD;AAAA,QACA;AAAA,MACF,EAAE;AAAA,IACJ;AACA,SAAK,cAAc,OAAO;AAC1B,SAAK,eAAe,OAAO;AAE3B,aAAS,eAAe;AAEtB,UAAI,KAAK,eAAeC,MAAK;AAC3B,eAAOF,QAAO;AAAA,UACZ,IAAI,KAAK,IAAI;AAAA,UACb,SAAS,KAAK,IAAI;AAAA,UAClB,WAAW,KAAK,IAAI,MAAM,IAAI;AAAA,QAChC,CAAC;AAAA,MACH;AAGA,aAAOA,QAAO,KAAK,GAAG,EAAE,MAAM,CAACG,SAAQ;AAGrC,YAAI,CAACA,KAAI;AACP,gBAAM,IAAI;AAAA,YACR,6BAA6B,IAAI;AAAA,UACnC;AAEF,cAAM,SAASC,KAAI,IAAI,IAAI,GAAG,IAAI,OAAOD,KAAI,IAAI,QAAW;AAAA,UAC1D;AAAA,QACF,CAAC;AACD,eAAO;AAAA,UACL,IAAIA,KAAI;AAAA,UACR,SAASA,KAAI;AAAA,UACb,WAAW,OAAO;AAAA,QACpB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,iBAAiB,YAAY;AAAA,cAAM,CAAC,MAClC,MAAM,oBAAoB,mBAAmB;AAAA,YAC/C;AAAA,YACA,gBAAgB;AAAA,YAChB,WAAW;AAAA,UACb;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,aAAO,IAAIC,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa;AAAA,YACb,OAAO,IAAI;AAAA,YACX,QAAQ;AAAA,cACN;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY,CAAC,WAAW;AAAA,cAC1B;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA;AAAA,gBAEV,YAAY,CAAC,IAAI,SAAS;AAAA,cAC5B;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAI,QAAQ;AAAA,QAAM,CAAC,YACxB,QAAQ;AAAA,UACN,CAAC,WACC,IAAI,IAAI;AAAA,YACN,GAAG,IAAI,cAAc,MAAM;AAAA,YAC3B;AAAA,cACE,cAAc,WAAW;AAAA,cACzB,UAAU;AAAA,cACV,gBAAgB,CAAC,cAAc,EAAE;AAAA,YACnC;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,cAAc,WAAW;AAAA,YACzB,WAAW;AAAA,cACT,KAAK;AAAA,cACL,KAAK;AAAA,YACP;AAAA,YACA,eAAe;AAAA,cACb,MAAM;AAAA,YACR;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,YAAY;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,cAAc;AACvB,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,aAAa,KAAK;AAAA,IACpB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCA,OAAc,IACZ,MACA,cACA,MACA;AACA,UAAM,aAAa,IAAI,WAAW;AAAA,MAChC,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAM,gBAAgB,IACnB,sBAAsB,EAAE,cAAc,WAAW,GAAG,GAAG,IAAI,EAC3D,MAAM,CAAC,iBAAiB,aAAa,IAAI,CAAC,CAAC;AAC9C,UAAM,cAAc,IAAI,YAAY;AAAA,MAClC,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO,IAAI,KAAI,MAAM;AAAA,MACnB,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACF,CAAwC;AAAA,EAC1C;AACF;AAEA,IAAML,gBAAe;AAErB,IAAI,eAAeA;;;ACzZnB,SAAuC,eAAe;AA4B/C,IAAM,4BAAN,cAAwC,QAAQ,SAAS;AAAA,EAC9D,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,+BAA+B;AAAA,MAChD,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ACzCA,IAAM,gBAAgB,oBAAI,IAAY;AAE/B,SAAS,SAAS,SAAiB;AACxC,MAAI,cAAc,IAAI,OAAO,EAAG;AAChC,gBAAc,IAAI,OAAO;AACzB,UAAQ,KAAK,OAAO;AACtB;;;ACNA;AAAA,EAGE,OAAAM;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AACP,OAAOC,aAAY;AAKnB,SAAS,kBAAkB;;;ACZ3B,SAAgC,WAAAC,gBAAsB;AAO/C,IAAM,sBAAN,cAAkCC,SAAQ,SAAS;AAAA,EACxD,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,yBAAyB;AAAA,MAC1C,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ACpBA,SAA0C,OAAAC,YAAW;;;ACArD,OAAOC,aAAY;AACnB,SAAgB,iBAAAC,sBAAqB;;;ACDrC,SAAuC,WAAAC,gBAAe;AAU/C,IAAM,iBAAN,cAA6BC,SAAQ,SAAS;AAAA,EACnD,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,oBAAoB;AAAA,MACrC,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ACvBA,SAAuC,WAAAC,gBAAe;AAU/C,IAAM,SAAN,cAAqBC,SAAQ,SAAS;AAAA,EAC3C,YAAY,MAAc,MAAoB,MAA8B;AAC1E,UAAM,IAAI,IAAI,SAAS,YAAY,GAAG,GAAG,IAAI,mBAAmB,MAAM,IAAI;AAAA,EAC5E;AACF;;;AFOO,SAAS,aAAa,SAAiB;AAC5C,QAAM,CAAC,MAAM,GAAGC,MAAI,IAAI,QAAQ,MAAM,GAAG;AACzC,SAAO;AAAA,IACL,MAAM,KACH,QAAQ,sBAAsB,MAAM,EACpC,QAAQ,OAAO,IAAI;AAAA;AAAA,IACtB,MAAM,MAAMA,OAAK,KAAK,GAAG;AAAA,EAC3B;AACF;AAEO,SAAS,iBAAiB,MAAc;AAE7C,SAAOC,QACJ,WAAW,KAAK,EAChB,OAAO,GAAG,mBAAK,IAAI,IAAI,mBAAK,KAAK,IAAI,IAAI,EAAE,EAC3C,OAAO,KAAK,EACZ,UAAU,GAAG,CAAC;AACnB;AAEO,SAAS,kBACd,MACA,MACA,QACA,SACA,MACA;AACA,MAAI;AAAA,IACF,GAAG,IAAI;AAAA,IACP;AAAA,MACE,OAAO,KAAK;AAAA,MACZ,WAAW;AAAA,MACX,SAAS;AAAA,QACP,UAAUC,eAAc,IAAI;AAAA,MAC9B;AAAA,MACA,OAAO;AAAA,IACT;AAAA,IACA,EAAE,OAAO;AAAA,EACX;AACF;AAEO,SAAS,eACd,MACA,MACA,QACA,WACA,SACA,SAIA;AACA,SAAO,IAAI;AAAA,IACT,GAAG,IAAI;AAAA,IACP;AAAA,MACE,OAAO,KAAK;AAAA,MACZ,WAAW,KAAK;AAAA,MAChB,KAAK;AAAA,MACL,OAAO,CAAC,WAAW,SAAS,QAAQ,MAAM,QAAQ,IAAI,EAAE,KAAK,GAAG;AAAA,IAClE;AAAA,IACA,EAAE,OAAO;AAAA,EACX;AACF;;;ADjDO,IAAM,iBAAN,cAA6B,UAAU;AAAA,EAC5C,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,eAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,IAAAC,KAAI,CAAC,KAAK,KAAK,KAAK,SAAS,KAAK,SAAS,CAAC,EAAE;AAAA,MAC5C,CAAC,CAAC,KAAK,SAAS,SAAS,MAAM;AAC7B,cAAM,IAAI,IAAI,IAAI,GAAG;AACrB,cAAM,OAAO,EAAE;AACf,cAAM,WAAW,EAAE,SAAS,MAAM,GAAG,EAAE;AAEvC,cAAM,cAAc,aAAa,OAAO;AACxC,cAAM,YAAY,iBAAiB,IAAI;AACvC,0BAAkB,MAAM,MAAM,MAAM,WAAW;AAAA,UAC7C;AAAA,UACA,SAAS,WAAW;AAAA,UACpB,QAAQ;AAAA,YACN,UAAU,aAAa,UAAU,SAAY;AAAA,YAC7C,oBAAoB,WAAW;AAAA,YAC/B,WAAW,MAAM;AACf,oBAAM,WAAW;AAAA,gBACf;AAAA,gBACA;AAAA,gBACA;AAAA,cACF,EAAE,QAAQ,CAAC,MAAM;AACf,sBAAM,QAAQ,YAAY,CAAC;AAC3B,uBAAO,QAAQ,CAAC,CAAC,GAAG,UAAU,KAAK,CAAC,CAAC,IAAI,CAAC;AAAA,cAC5C,CAAC;AACD,qBAAO,SAAS,SAAS,OAAO,YAAY,QAAQ,IAAI;AAAA,YAC1D,GAAG;AAAA,UACL;AAAA,QACF,CAAC;AACD,uBAAe,MAAM,MAAM,MAAM,OAAO,WAAW,WAAW;AAAA,MAChE;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,gBAAe;AAErB,eAAe,eAAeA;;;AI1E9B,SAA0C,OAAAE,MAAK,UAAAC,eAAc;AAkCtD,IAAM,oBAAN,cAAgC,UAAU;AAAA,EAC/C,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,eAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,IAAAC,KAAI,CAAC,KAAK,SAAS,KAAK,SAAS,CAAC,EAAE,MAAM,CAAC,CAAC,SAAS,SAAS,MAAM;AAClE,YAAM,cAAc,aAAa,OAAO;AACxC,YAAM,YAAY,iBAAiB,IAAI;AACvC,wBAAkB,MAAM,MAAM,MAAM,WAAW;AAAA,QAC7C,QAAQC,QAAO,KAAK,MAAM,EAAE,MAAM,OAAO;AAAA,QACzC,SAAS,WAAW;AAAA,QACpB,QAAQ;AAAA,UACN,oBAAoB,WAAW;AAAA,UAC/B,UAAU;AAAA,YACR,mBACE,WAAW,qBACX,UAAU,WAAW,iBAAiB;AAAA,UAC1C;AAAA,QACF;AAAA,MACF,CAAC;AACD,qBAAe,MAAM,MAAM,MAAM,UAAU,WAAW,WAAW;AAAA,IACnE,CAAC;AAAA,EACH;AACF;AAEA,IAAMF,gBAAe;AAErB,kBAAkB,eAAeA;;;ANw6B1B,IAAM,SAAN,MAAM,gBAAe,UAAmC;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAAmB,CAAC,GACpB,OAAiC,CAAC,GAClC;AACA,UAAMG,eAAc,MAAM,MAAM,IAAI;AACpC,UAAM,cAAc;AACpB,UAAM,OAAO;AACb,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAEvB,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,MAAMC,SAAO,IAAI,GAAG;AACzB,WAAK,aAAa,IAAI;AACtB,WAAK,cAAc,IAAI;AACvB,WAAK,kBAAkB,IAAI;AAC3B,sBAAgB;AAChB;AAAA,IACF;AAEA,UAAM,kBAAkB,KAAK,WAAW;AAExC,QAAI,KAAK,YAAY;AACrB,QAAI,iBAAiB;AACnB,YAAM,mBAAmB;AAAA,IAC3B,OAAO;AACL,YAAM,IAAI,iBAAiB;AAC3B,YAAMA,SAAO,EAAE,YAAY;AAC3B,mBAAa,EAAE;AACf,oBAAcA,SAAO,EAAE,WAAW;AAAA,IACpC;AAEA,SAAK,MAAM;AACX,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,kBAAkBA,SAAO,eAAe;AAC7C,oBAAgB;AAEhB,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,OAAM,IAAI,IAAI,GAAG,IAAI,OAAO,IAAI,gBAAgB,EAAE,QAAQ,KAAK,CAAC;AACtE,YAAM,OAAOA,KAAI,MAAM,aAAa,KAAK,MAAM,CAACC,UAAS;AACvD,YAAIA,QAAO,iBAAiB,MAAM,YAAY,SAAS,GAAG;AACxD,gBAAM,IAAI;AAAA,YACR;AAAA,cACE,4FAA4F,IAAI;AAAA;AAAA,cAChG;AAAA,YACF,EAAE,KAAK,IAAI;AAAA,UACb;AAAA,QACF;AAEA,eAAO;AAAA,UACL,YAAYA,QAAO,YAAY;AAAA,UAC/B,aAAaA,QAAO,sBAAsB;AAAA,UAC1C,iBAAiBA,QAAO,YAAY,MAAM;AAAA,QAC5C;AAAA,MACF,CAAC;AAED,aAAO;AAAA,QACL,KAAAD;AAAA,QACA,YAAY,KAAK;AAAA,QACjB,aAAa,KAAK;AAAA,QAClB,iBAAiB,KAAK;AAAA,MACxB;AAAA,IACF;AAEA,aAAS,kBAAkB;AACzB,WAAK,gBAAgB;AAAA,QACnB,OAAO,KAAK,YAAY,SAAY,KAAK;AAAA,MAC3C,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,UAAI;AACJ,UAAI;AACJ,UAAI;AACJ,YAAM,SAAS,gBAAgB;AAC/B,YAAMA,OAAM,UAAU;AACtB,aAAOA;AAEP,eAAS,kBAAkB;AACzB,eAAOD,SAAO,KAAK,MAAO,EAAE,MAAM,CAACG,YAAW;AAC5C,gBAAM,mBAAmB,OAAO;AAAA,YAC9B,OAAO,QAAQA,OAAM,EAAE,IAAI,CAAC,CAACC,QAAM,KAAK,MAAM;AAE5C,kBAAI,CAACA,OAAK,WAAW,GAAG;AACtB,sBAAM,IAAI;AAAA,kBACR,OAAO,IAAI,6BAA6BA,MAAI;AAAA,gBAC9C;AAEF,sBAAQ,OAAO,UAAU,WAAW,EAAE,KAAK,MAAM,IAAI;AAErD,oBAAM,SAAS,SAAS,QAAQ,IAAI;AACpC,oBAAM,YAAY,YAAY,QAAQ,IAAI;AAC1C,kBAAI,SAAS,cAAc;AACzB,sBAAM,IAAI;AAAA,kBACR,OAAO,IAAI,6BAA6BA,MAAI;AAAA,gBAC9C;AAEF,qBAAO,CAACA,QAAM,KAAK;AAAA,YACrB,CAAC;AAAA,UACH;AAEA,2BAAiB,IAAI,IAAI,iBAAiB,IAAI,KAAK;AAAA,YACjD,KAAK;AAAA,UACP;AAEA,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAEA,eAAS,iCAAiC;AACxC,4BACE,qBACA,IAAI,WAAW;AAAA,UACb,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS;AAAA,YACT,MAAM;AAAA,cACJ;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF,EAAE,KAAK,IAAI;AAAA,UACb;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AACF,eAAO;AAAA,MACT;AAEA,eAAS,wBACPA,QACA,QAOA,SAMA,kBACA;AACA,eAAO,IAAI,WAAW;AAAA,UACpB,GAAG,IAAI,qBAAqB,yBAAyBA,QAAM,CAAC,CAAC;AAAA,UAC7D;AAAA,YACE,SAAS;AAAA,YACT,2BAA2B,QAAQ,UAC/B,CAAC,OAAO,OAAO,IACf,QAAQ,YAAY,CAAC;AAAA,YACzB,MAAM;AAAA;AAAA,IAGd,mBACI,4EACA,EACN;AAAA,IAEE,UACI;AAAA,yBACiB,QAAQ,KAAK;AAAA,qDACe,QAAQ,EAAE,QACvD,EACN;AAAA,IACE,QAAQ,aAAa,EAAE;AAAA;AAAA;AAAA,UAGjB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAEA,eAAS,yBACPA,QACA,QAKA;AACA,eAAO,IAAI,WAAW;AAAA,UACpB,GAAG,IAAI,6BAA6B;AAAA,YAClCA;AAAA,YACA;AAAA,UACF,CAAC;AAAA,UACD;AAAA,YACE,SAAS;AAAA,YACT,2BAA2B,OAAO,UAC9B,CAAC,OAAO,OAAO,IACf,OAAO,YAAY,CAAC;AAAA,YACxB,MAAM;AAAA;AAAA,IAEd,OAAO,aAAa,EAAE;AAAA;AAAA;AAAA,UAGhB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAEA,eAAS,4BAA4B;AACnC,qBACE,cACA,IAAI;AAAA,UACF,GAAG,IAAI;AAAA,UACP,EAAE,MAAM,aAAa,IAAI,IAAI,EAAE;AAAA,UAC/B,EAAE,QAAQ,MAAM,eAAe,CAAC,MAAM,EAAE;AAAA,QAC1C;AACF,eAAO;AAAA,MACT;AAEA,eAAS,oBAAoB;AAC3B,6BACE,sBACA,IAAI,WAAW;AAAA,UACb,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,SAAS,GAAG,IAAI;AAAA,cAChB,YAAY;AAAA,cACZ,QAAQ;AAAA;AAAA,cACR,QAAQ;AAAA,cACR,0CAA0C;AAAA,gBACxC,eAAe;AAAA,kBACb,gBAAgB;AAAA,gBAClB;AAAA,gBACA,eAAe;AAAA,kBACb,gBAAgB;AAAA,gBAClB;AAAA,gBACA,oBAAoB;AAAA,kBAClB,qBAAqB;AAAA,gBACvB;AAAA,gBACA,4BAA4B;AAAA,gBAC5B,0BAA0B;AAAA,cAC5B;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAEF,eAAO;AAAA,MACT;AAEA,eAAS,YAAY;AACnB,eAAO,OAAO,MAAM,CAACD,YAAW;AAC9B,gBAAM,mBAAmB,OAAO,QAAQA,OAAM,EAAE;AAAA,YAC9C,CAAC,CAACC,QAAM,KAAK,MAAM;AACjB,kBAAI,SAAS,OAAO;AAClB,uBAAO;AAAA,kBACL,QAAQ;AAAA,oBACN,UAAUA;AAAA,oBACV,YAAY,IAAI,IAAI,MAAM,GAAG,EAAE;AAAA,oBAC/B,oBAAoB;AAAA,sBAClB,UAAU;AAAA,sBACV,WAAW;AAAA,sBACX,sBAAsB;AAAA,sBACtB,mBAAmB;AAAA,sBACnB,oBAAoB,CAAC,SAAS;AAAA,oBAChC;AAAA,kBACF;AAAA,kBACA,UAAU;AAAA,oBACR,aAAaA;AAAA,oBACb,gBAAgBA;AAAA,oBAChB,sBAAsB;AAAA,sBACpB;AAAA,wBACE,WAAW;AAAA,wBACX,aACE,MAAM,MAAM,iBAAiB,MAAM,UAC/B;AAAA,0BACEA;AAAA,0BACA,MAAM,MAAM;AAAA,0BACZ,MAAM;AAAA,0BACN;AAAA,wBACF,EAAE,MACF,+BAA+B,EAAE;AAAA,sBACzC;AAAA,sBACA,GAAI,MAAM,MAAM,iBACZ;AAAA,wBACE;AAAA,0BACE,WAAW;AAAA,0BACX,aAAa;AAAA,4BACXA;AAAA,4BACA,MAAM,KAAK;AAAA,0BACb,EAAE;AAAA,wBACJ;AAAA,sBACF,IACA,CAAC;AAAA,oBACP;AAAA,oBACA,sBAAsB;AAAA,oBACtB,gBAAgB;AAAA,sBACd;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,oBACF;AAAA,oBACA,eAAe,CAAC,OAAO,MAAM;AAAA,oBAC7B,YAAY;AAAA,oBACZ,UAAU;AAAA,oBACV,eAAe,MAAM,eAAe,kBAAkB,EAAE;AAAA;AAAA,oBAExD,uBACE;AAAA,kBACJ;AAAA,gBACF;AAAA,cACF,WAAW,YAAY,OAAO;AAC5B,uBAAO;AAAA,kBACL,QAAQ;AAAA,oBACN,UAAUA;AAAA,oBACV,YACE,MAAM,kBAAkB,SACpB,MAAM,OAAO,MAAM,OAAO,2BAC1B,MAAM;AAAA,oBACZ,YAAY;AAAA,oBACZ,uBAAuB,0BAA0B,EAAE;AAAA,kBACrD;AAAA,kBACA,UAAU;AAAA,oBACR,aAAaA;AAAA,oBACb,gBAAgBA;AAAA,oBAChB,sBAAsB;AAAA,sBACpB,GAAI,MAAM,MAAM,iBAAiB,MAAM,UACnC;AAAA,wBACE;AAAA,0BACE,WAAW;AAAA,0BACX,aACE,MAAM,MAAM,iBAAiB,MAAM,UAC/B;AAAA,4BACEA;AAAA,4BACA,MAAM,MAAM;AAAA,4BACZ,MAAM;AAAA,4BACN;AAAA,0BACF,EAAE,MACF,+BAA+B,EAAE;AAAA,wBACzC;AAAA,sBACF,IACA,CAAC;AAAA,sBACL,GAAI,MAAM,MAAM,iBACZ;AAAA,wBACE;AAAA,0BACE,WAAW;AAAA,0BACX,aAAa;AAAA,4BACXA;AAAA,4BACA,MAAM,KAAK;AAAA,0BACb,EAAE;AAAA,wBACJ;AAAA,sBACF,IACA,CAAC;AAAA,oBACP;AAAA,oBACA,sBAAsB;AAAA,oBACtB,gBAAgB,CAAC,OAAO,QAAQ,SAAS;AAAA,oBACzC,eAAe,CAAC,OAAO,MAAM;AAAA,oBAC7B,UAAU;AAAA;AAAA,oBAEV,eACE,MAAM,eACN;AAAA,kBACJ;AAAA,gBACF;AAAA,cACF;AACA,oBAAM,IAAI,MAAM,oBAAoB;AAAA,YACtC;AAAA,UACF;AAEA,iBAAO,IAAI;AAAA,YACT,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI;AAAA,cACP;AAAA,gBACE,SAAS,GAAG,IAAI;AAAA,gBAChB,SAAS,iBAAiB,IAAI,CAAC,MAAM,EAAE,MAAM;AAAA,gBAC7C,sBAAsB;AAAA,kBACpB,GAAG,iBAAiB;AAAA,oBAClB,CAAC,MAAM,EAAE,SAAS,gBAAgB;AAAA,kBACpC,EAAG;AAAA;AAAA,kBAEH,aAAa;AAAA,gBACf;AAAA,gBACA,uBAAuB,iBACpB,OAAO,CAAC,MAAM,EAAE,SAAS,gBAAgB,IAAI,EAC7C,IAAI,CAAC,MAAM,EAAE,QAAQ;AAAA,gBACxB,QAAQ,KAAK;AAAA,gBACb,MAAM;AAAA,cACR;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,YAAMC,eAAc,wBAAwB;AAC5C,YAAMC,cAAa,qBAAqB;AACxC,YAAM,kBAAkB,sBAAsB;AAC9C,YAAM,mBAAmB,uBAAuB;AAChD,YAAM,gBAAgB,kBAAkB,EAAE;AAC1C,YAAM,eAAe,mBAAmB;AAExC,aAAO,EAAE,aAAAD,cAAa,YAAAC,aAAY,aAAa;AAE/C,eAAS,0BAA0B;AAEjC,eAAOC,QACJ,WAAW,KAAK,EAChB,OAAO,GAAG,mBAAK,IAAI,IAAI,mBAAK,KAAK,IAAI,IAAI,EAAE,EAC3C,OAAO,KAAK,EACZ,UAAU,GAAG,CAAC;AAAA,MACnB;AAEA,eAAS,uBAAuB;AAC9B,eAAOP,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,gBAAM,gBAAgB,MAAM;AAC5B,gBAAM,cAAc,eAAe;AACnC,cAAI,YAAa,QAAOA,SAAO,WAAW;AAE1C,iBAAO,IAAI,WAAW;AAAA,YACpB,GAAG,IAAI;AAAA,YACP,CAAC;AAAA,YACD,EAAE,QAAQ,KAAK;AAAA,UACjB,EAAE;AAAA,QACJ,CAAC;AAAA,MACH;AAEA,eAAS,oBAAoB;AAC3B,eAAO,IAAI,WAAW;AAAA,UACpB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,SAAS;AAAA,cACT,YAAY;AAAA,cACZ,QAAQ;AAAA;AAAA,cACR,QAAQ;AAAA,cACR,0CAA0C;AAAA,gBACxC,eAAe;AAAA,kBACb,gBAAgB;AAAA,gBAClB;AAAA,gBACA,eAAe;AAAA,kBACb,gBAAgB;AAAA,kBAChB,SAAS;AAAA,oBACP,OAAO,CAAC,uBAAuB;AAAA,kBACjC;AAAA,gBACF;AAAA,gBACA,oBAAoB;AAAA,kBAClB,qBAAqB;AAAA,gBACvB;AAAA,gBACA,4BAA4B;AAAA,gBAC5B,0BAA0B;AAAA,cAC5B;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAEA,eAAS,wBAAwB;AAC/B,eAAOA,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,gBAAM,gBAAgB,MAAM,eAAe,aAAa;AACxD,gBAAM,8BAA8B,KAAK,SACrC,oCACA;AACJ,iBAAO,IAAI,WAAW;AAAA,YACpB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,SAAS;AAAA,cACT,2BAA2BM,cAAa,CAACA,WAAU,IAAI,CAAC;AAAA,cACxD,MAAME;AAAA;AAAA;AAAA,IAGhB,aAAa;AAAA,IACb,2BAA2B;AAAA,IAC3B,mBAAmB;AAAA;AAAA,sBAEDH,YAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAgCxB,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAyDM;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF,CAAC;AAAA,MACH;AAEA,eAAS,yBAAyB;AAChC,eAAOL,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,gBAAM,aAAa,MAAM;AACzB,gBAAM,gBAAgB,YAAY;AAClC,gBAAMM,cAAa,YAAY;AAE/B,cAAI,CAAC,cAAe;AAEpB,iBAAO,IAAI,WAAW;AAAA,YACpB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,SAAS;AAAA,cACT,2BAA2BA,cAAa,CAACA,WAAU,IAAI,CAAC;AAAA,cACxD,MAAM;AAAA;AAAA;AAAA,IAGhB,aAAa;AAAA;AAAA;AAAA,YAGL;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF,CAAC;AAAA,MACH;AAEA,eAAS,qBAAqB;AAC5B,eAAO,IAAI;AAAA,UACT,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,SAAS,GAAG,IAAI;AAAA,cAChB,QAAQ,KAAK;AAAA,cACb,SAAS;AAAA,gBACP;AAAA,kBACE,UAAU;AAAA,kBACV,YAAY;AAAA,kBACZ,oBAAoB;AAAA,oBAClB,UAAU;AAAA,oBACV,WAAW;AAAA,oBACX,sBAAsB;AAAA,oBACtB,mBAAmB;AAAA,oBACnB,oBAAoB,CAAC,SAAS;AAAA,kBAChC;AAAA,gBACF;AAAA,cACF;AAAA,cACA,sBAAsB;AAAA,gBACpB,gBAAgB;AAAA,gBAChB,sBAAsB;AAAA,gBACtB,gBAAgB;AAAA,kBACd;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF;AAAA,gBACA,eAAe,CAAC,OAAO,MAAM;AAAA,gBAC7B,UAAU;AAAA,gBACV;AAAA;AAAA,gBAEA,uBAAuB;AAAA,gBACvB,sBAAsBG,MAAI;AAAA,kBACxB;AAAA,kBACA;AAAA,gBACF,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,KAAK,MAAM;AAAA,kBAC3B,EAAE,WAAW,kBAAkB,aAAa,MAAM,IAAI;AAAA,kBACtD,GAAI,QACA,CAAC,EAAE,WAAW,mBAAmB,aAAa,MAAM,IAAI,CAAC,IACzD,CAAC;AAAA,gBACP,CAAC;AAAA,cACH;AAAA,cACA,MAAM;AAAA,gBACJ,cAAcH;AAAA,gBACd,wBAAwBD;AAAA,gBACxB,mBAAmB,YAAY,SAAS;AAAA,cAC1C;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,iBAAiB;AAC1B,WAAO,KAAK,IAAI,MAAM,aAAa;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAOI,MAAI,CAAC,KAAK,IAAI,WAAW,KAAK,IAAI,GAAG,CAAC,EAAE;AAAA,MAC7C,CAAC,CAAC,WAAW,GAAG,MAAM,aAAa;AAAA,IACrC;AAAA,EACF;AAAA;AAAA,EAGA,IAAW,cAAc;AACvB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,IAAW,eAAe;AACxB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,IAAW,mBAAmB;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiDO,MACL,SACA,KACA,MACA;AACA,IAAAA,MAAI,CAAC,SAAS,MAAM,KAAK,eAAe,CAAC,EAAE;AAAA,MACzC,CAAC,CAACC,UAASC,OAAM,eAAe,MAAM;AACpC,YAAI;AACF,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,YAAI;AAAA,UACF,GAAG,KAAK,eAAe,QAAQD,QAAO;AAAA,UACtC;AAAA,YACE,OAAO,KAAK;AAAA,YACZ,iBAAiB,KAAK;AAAA,YACtB,SAAAA;AAAA,YACA;AAAA,YACA,WAAWC;AAAA,UACb;AAAA,UACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyDO,YACL,SACA,QACA,MACA;AACA,IAAAF,MAAI,CAAC,SAAS,MAAM,KAAK,eAAe,CAAC,EAAE;AAAA,MACzC,CAAC,CAACC,UAASC,OAAM,eAAe,MAAM;AACpC,YAAI;AACF,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,YAAI;AAAA,UACF,GAAG,KAAK,eAAe,QAAQD,QAAO;AAAA,UACtC;AAAA,YACE,OAAO,KAAK;AAAA,YACZ,iBAAiB,KAAK;AAAA,YACtB,SAAAA;AAAA,YACA;AAAA,YACA,WAAWC;AAAA,UACb;AAAA,UACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWO,UAAU,SAAwB,MAAW;AAClD,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCA,OAAc,IACZ,MACA,gBACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMZ,gBAAe;AAErB,OAAO,eAAeA;AAEf,IAAM,oCAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY1C,IAAM,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4D7B,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBE,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAusNG,SAAS,mBACd,OACA,iBACA;AACA,MAAI,CAAC,SAAS,CAAC,gBAAiB,QAAO;AAEvC,SAAOU,MAAI,CAAC,OAAO,eAAe,CAAC,EAAE,MAAM,CAAC,CAACG,QAAOC,gBAAe,MAAM;AACvE,UAAM,IAAID,SACNA,SACA,EAAE,GAAGC,kBAAiB,UAAUA,iBAAiB,OAAO;AAE5D,WAAO,EAAE,SAAS,iBAAiB,MAAM,CAAC,oBAAoB;AAC5D,UAAI;AACF,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAEF,YAAM,aAAa,EAAE,OACjB,MAAM,EAAE,KAAK,QAAQ,OAAO,EAAE,EAAE,QAAQ,OAAO,EAAE,IACjD;AACJ,aAAO;AAAA,QACL,aAAa,EAAE,SACX,EAAE,OACC,QAAQ,sBAAsB,MAAM,EACpC,QAAQ,OAAO,IAAI,IACtB;AAAA,QACJ;AAAA,QACA,sBAAsB,EAAE,SAAS,MAAM,IAAI,MAAM,aAAa;AAAA,QAC9D,WAAW,EAAE,SAAS,IAAI;AAAA,UACxB,CAAC,SACE,EAAE,SAAS,WAAW,EAAE,MAAM,KAAK,QAAQ,cAAc;AAAA,QAC9D;AAAA,QACA,mBAAmB,EAAE,SAAS;AAAA,QAC9B,kBAAkB,EAAE,SAAS;AAAA,MAC/B;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;;;AZ1rBO,IAAM,WAAN,MAAM,kBAAiB,UAAmC;AAAA,EACvD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,OAAwB,gBAAgB;AAAA,IACtC,MACE,IAAI,YAAY,uBAAuB;AAAA,MACrC,QAAQ;AAAA,IACV,CAAC;AAAA,EACL;AAAA,EAEA,OAAuB,UAAU;AAAA,IAAK,MACpC,IAAI,KAAK,wBAAwB,CAAC,CAAC;AAAA,EACrC;AAAA,EAEA,YACE,MACA,MACA,MACA;AACA,UAAMC,eAAc,MAAM,MAAM,IAAI;AACpC,SAAK,kBAAkB;AAEvB,UAAM,SAAS;AACf,UAAM,MAAM,aAAa;AACzB,UAAM,cAAcC,MAAI,CAAC,KAAK,QAAQ,GAAG,CAAC,EAAE;AAAA,MAC1C,CAAC,CAAC,QAAQC,IAAG,MAAM,CAACA,SAAQ,QAAQ,aAAa;AAAA,IACnD;AACA,UAAM,YAAYC,oBAAmB,CAAC,GAAG,IAAI,EAAE;AAC/C,UAAM,SAAS,gBAAgB,CAAC,GAAG,IAAI,EAAE;AACzC,UAAM,gBAAgB,OAAO,MAAM,CAACC,YAAW,UAAU,UAAUA,OAAM,CAAC;AAC1E,UAAM,aAAa,oBAAoB;AACvC,UAAMC,WAAUC,SAAO,KAAK,WAAW,YAAY;AACnD,UAAM,UAAU,iBAAiB;AACjC,UAAM,SAASC,iBAAgB;AAC/B,UAAM,UAAUD,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,QAAQ;AAC/D,UAAM,eAAeA,SAAO,KAAK,YAAY,EAAE,MAAM,CAAC,MAAM,KAAK,QAAQ;AACzE,UAAM,cAAc,qBAAqB;AACzC,UAAM,YAAY,mBAAmB;AACrC,UAAM,UAAU,iBAAiB;AACjC,UAAM,SAAS,gBAAgB;AAC/B,UAAM,MAAM,aAAa;AACzB,UAAM,YAAY,mBAAmB;AACrC,UAAM,WAAWA,SAAO,KAAK,YAAY,CAAC,CAAC;AAC3C,UAAM,MAAM,aAAa;AAEzB,UAAM,WAAW,cAAc;AAC/B,UAAM,kBAAkB,qBAAqB;AAC7C,UAAM,EAAE,QAAQ,SAAS,UAAU,WAAW,IAAI,aAAa;AAC/D,UAAM,EAAE,SAAS,QAAQ,IAAI,oBAAoB;AACjD,UAAM,OAAO,WAAW;AACxB,UAAM,aAAa,iBAAiB;AACpC,UAAM,WAAW,eAAe;AAChC,UAAM,WAAW,eAAe;AAChC,UAAM,KAAK,eAAe;AAC1B,UAAM,cAAc,UAAU;AAC9B,sBAAkB;AAClB,UAAM,oBAAoB,wBAAwB;AAElD,UAAM,QAAQ,SAAS,MAAM,CAAC,UAAU,MAAM,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;AAEtE,SAAK,WAAW;AAChB,SAAK,OAAO;AACZ,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,SAAK,oBAAoB;AAEzB,UAAM,aAAaA,SAAO;AAAA,MACxB,YAAY;AAAA,MACZ,SAAS,KAAK;AAAA,MACd,QAAQ,KAAK;AAAA,MACb,UAAU,SAAS,MAAM,CAAC,MAAM,GAAG,IAAI;AAAA,MACvC,eAAe,UAAS,cAAc,EAAE;AAAA,MACxC,SAAAD;AAAA,MACA,OAAOC,SAAO,QAAQ,EAAE;AAAA,QAAM,CAAC,UAC7B,OAAO,YAAY,MAAM,IAAI,CAAC,SAAS,CAAC,KAAK,MAAM,KAAK,UAAU,CAAC,CAAC;AAAA,MACtE;AAAA,MACA;AAAA,MACA,YAAYA,SAAO,EAAE,QAAQ,KAAK,QAAQ,QAAQ,KAAK,OAAO,CAAC,EAAE;AAAA,QAC/D,CAAC,SAAS;AAAA,UACR,GAAI,IAAI,UAAU,IAAI;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,IACF,CAAC;AAED,eAAW,MAAM,OAAO,UAAU;AAChC,UAAI,CAAC,MAAM,IAAK;AAChB,YAAM,IAAI,KAAK,qBAAqB,KAAK;AAAA,IAC3C,CAAC;AAED,SAAK,gBAAgB;AAAA,MACnB,OAAO;AAAA,QACLA,SAAO,GAAG,EAAE,MAAM,CAACJ,SAAQ;AACzB,cAAI,CAACA,KAAK,QAAO;AACjB,iBAAOD,MAAI;AAAA,YACT;AAAA,YACA;AAAA,YACA,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL;AAAA,UACF,CAAC,EAAE;AAAA,YACD,CAAC,CAACO,OAAMC,QAAOC,UAASC,SAAQN,UAAS,QAAQO,UAAS,MAAM;AAC9D,qBAAO;AAAA,gBACL,YAAYJ;AAAA,gBACZ,OAAAC;AAAA,gBACA,SAASC;AAAA,gBACT,QAAQC;AAAA,gBACR,SAASN,YAAW;AAAA,gBACpB,WAAAO;AAAA,gBACA,YAAY;AAAA,cACd;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,WAAW;AAAA,QACT,SAAS,KAAK;AAAA,QACd,UAAU,KAAK;AAAA,QACf;AAAA,MACF;AAAA,MACA,OAAO,KAAK,YAAY,SAAY;AAAA,IACtC,CAAC;AAED,aAAS,eAAe;AACtB,aAAOX,MAAI,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,EAAE;AAAA,QAChC,CAAC,CAAC,GAAG,CAAC,MAAM;AAAA,MACd;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,aAAOK,SAAO,KAAK,UAAU,EAAE,MAAM,CAACO,gBAAeA,eAAc,CAAC,CAAC;AAAA,IACvE;AAEA,aAAS,mBAAmB;AAC1B,aAAOP,SAAO,KAAK,OAAO,EAAE,MAAM,CAACQ,aAAYA,YAAW,YAAY;AAAA,IACxE;AAEA,aAASP,mBAAkB;AACzB,aAAOD,SAAO,KAAK,MAAM,EAAE,MAAM,CAACS,YAAWA,WAAU,SAAS;AAAA,IAClE;AAEA,aAAS,uBAAuB;AAC9B,aAAOd,MAAI;AAAA,QACT,KAAK;AAAA,QACL;AAAA,QACA;AAAA,QACA,UAAS,cAAc,EAAE;AAAA,QACzB,KAAK;AAAA,MACP,CAAC,EAAE,MAAM,OAAO,CAACe,cAAad,MAAKe,YAAW,KAAK,IAAI,MAAM;AAC3D,cAAMC,UAASF,gBAAe,CAAC;AAC/B,QAAAE,QAAO,mBAAmB,KAAK,UAAU;AAAA,UACvC,MAAM,mBAAK;AAAA,UACX,OAAO,mBAAK;AAAA,QACd,CAAC;AACD,mBAAWC,aAAY,QAAQ,CAAC,GAAG;AACjC,cAAI,CAAC,KAAK,WAAWA,SAAQ,EAAG;AAChC,gBAAM,MAAMA,UAAS,WAAW;AAChC,qBAAW,QAAQ,IAAI,WAAW,CAAC,GAAG;AACpC,gBAAI,KAAK,SAAS,cAAe,QAAO,OAAOD,SAAQ,KAAK,GAAG;AAAA,UACjE;AAAA,QACF;AACA,QAAAA,QAAO,UAAU;AACjB,QAAAA,QAAO,eAAe;AACtB,YAAIhB,MAAK;AACP,gBAAMkB,WAAU,MAAM,UAAS,QAAQ;AACvC,UAAAF,QAAO,aAAa,QAAQ,IAAI;AAChC,UAAAA,QAAO,mBAAmBE,SAAQ;AAClC,UAAAF,QAAO,uBAAuBE,SAAQ;AACtC,UAAAF,QAAO,kBAAkB;AACzB,UAAAA,QAAO,UAAU,mBAAK;AACtB,UAAAA,QAAO,YAAY,mBAAK;AACxB,UAAAA,QAAO,mBAAmBD,WAAU;AACpC,cAAI,QAAQ,IAAI,sBAAsB;AACpC,YAAAC,QAAO,uBAAuB,QAAQ,IAAI;AAAA,UAC5C;AAAA,QACF;AACA,eAAOA;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,aAAOZ,SAAO,KAAK,SAAS,EAAE,MAAM,CAACe,eAAcA,cAAa,KAAK;AAAA,IACvE;AAEA,aAAS,mBAAmB;AAC1B,aAAOf,SAAO,KAAK,OAAO,EAAE,MAAM,CAACgB,aAAY;AAC7C,YAAIA,aAAY,MAAO,QAAO;AAE9B,YAAIA,UAAS,aAAaA,UAAS,UAAU;AAC3C,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,UACL,UAAUA,UAAS;AAAA,UACnB,WAAWA,UAAS,aAAa;AAAA,UACjC,QAAQA,UAAS,UAAU;AAAA,QAC7B;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,kBAAkB;AACzB,UAAI,CAAC,KAAK,OAAQ;AAElB,aAAOhB,SAAO,KAAK,MAAM,EAAE,MAAM,CAACiB,aAAY;AAAA,QAC5C,KACEA,QAAO,eAAe,MAClBA,QAAO,IAAI,MAAM,YAAY,MAC7BjB,SAAOiB,QAAO,GAAG;AAAA,QACvB,MAAMA,QAAO,QAAQ;AAAA,MACvB,EAAE;AAAA,IACJ;AAEA,aAAS,eAAe;AACtB,aAAOjB,SAAO,KAAK,GAAG,EAAE,MAAM,CAACkB,SAAQ;AACrC,YAAIA,SAAQ,SAASA,SAAQ,OAAW;AACxC,YAAIA,SAAQ,MAAM;AAChB,UAAAA,OAAM,CAAC;AAAA,QACT;AAGA,cAAM,uBAAuB;AAC7B,cAAM,gBAAgBA,KAAI,iBAAiB;AAG3C,cAAM,cAAkD;AAAA,UACtD,cAAc,CAAC,GAAG;AAAA,UAClB,cAAc,CAAC,GAAG;AAAA,UAClB,cAAc,CAAC,GAAG;AAAA,QACpB;AACA,cAAM,OACJA,KAAI,SAAS,QACT,SACAA,KAAI,SAAS,QAAQA,KAAI,SAAS,SAChC,cACA;AAAA,UACA,GAAG;AAAA,UACH,GAAGA,KAAI;AAAA,UACP,QAAQA,KAAI,KAAK,UAAU,UAAUA,KAAI,KAAK,MAAM;AAAA,QACtD;AAEN,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA,OAAO,mBAAmBA,KAAI,QAAQA,KAAI,KAAK;AAAA,QACjD;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,aAAOlB,SAAO,KAAK,aAAa,CAAC,CAAC,EAAE;AAAA,QAAM,CAACM,eACzC,QAAQ;AAAA,UACNA,WAAU,IAAI,OAAO,UAAU;AAC7B,kBAAM,OAAO,KAAK,KAAK,mBAAK,MAAM,MAAM,MAAM,IAAI;AAClD,kBAAM,KAAK,MAAM,MAAM,MAAM;AAC7B,gBAAI,KAAK,WAAW,EAAE,GAAG;AACvB,oBAAM,IAAI;AAAA,gBACR,0BAA0B,EAAE;AAAA,cAC9B;AAAA,YACF;AAEA,kBAAM,QAAQ,MAAM,GAAG,SAAS,KAAK,IAAI;AACzC,kBAAM,QAAQ,MAAM,YAAY;AAEhC,mBAAO,EAAE,MAAM,IAAI,MAAM;AAAA,UAC3B,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAEA,aAAS,eAAe;AAEtB,UAAI,CAAC,KAAK,IAAK;AAGf,UAAI,KAAK,eAAea,MAAK;AAC3B,cAAMP,UAAS;AAAA,UACb,gBAAgB,KAAK,IAAI;AAAA,UACzB,gBAAgB,KAAK,IAAI;AAAA,QAC3B;AACA,eAAOjB,MAAI;AAAA,UACT,KAAK,IAAI;AAAA,UACT,KAAK,IAAI,MAAM;AAAA,UACf,KAAK,IAAI,MAAM;AAAA,QACjB,CAAC,EAAE,MAAM,CAAC,CAAC,IAAI,aAAa,YAAY,MAAM;AAC5C,cAAI,YAAY,WAAW,KAAK,aAAa,WAAW,GAAG;AACzD;AAAA,cACE;AAAA,sDAAyD,EAAE;AAAA;AAAA,YAC7D;AAAA,UACF;AACA,iBAAOiB;AAAA,QACT,CAAC;AAAA,MACH;AAEA,aAAOZ,SAAO,KAAK,GAAG,EAAE,MAAM,CAACoB,SAAQ;AAErC,YAAIA,KAAI,SAAS;AACf,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAEA,eAAOA;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,gBAAgB;AACvB,aAAOpB,SAAO,KAAK,QAAQ,CAAC,CAAC,EAAE,MAAM,CAACG,WAAU,KAAK,MAAMA,MAAK,CAAC;AAAA,IACnE;AAEA,aAAS,uBAAuB;AAC9B,aAAO,KAAK,WAAuB,kBAAkB,KAAK,IAAI;AAAA,IAChE;AAEA,aAAS,eAAe;AACtB,aAAOR,MAAI,CAACI,UAAS,KAAK,WAAW,CAAC,EAAE;AAAA,QACtC,OAAO,CAACA,UAASH,MAAKyB,YAAW,MAAM;AACrC,cAAIzB,MAAK;AACP,mBAAO;AAAA,cACL,SAAS;AAAA,cACT,QAAQ,KAAK,KAAK,mBAAK,MAAM,UAAU,QAAQ,QAAQ;AAAA,YACzD;AAAA,UACF;AAEA,gBAAM,cAAc,WAAW,MAAM,OAAO,UAAU;AACpD,kBAAMgB,UAAS,MAAM,IAAI,KAKtB,iBAAiB,EAAE,GAAG,OAAO,aAAAS,aAAY,CAAC;AAC7C,gBAAIT,QAAO,OAAO,SAAS,GAAG;AAC5B,oBAAM,IAAI,MAAMA,QAAO,OAAO,KAAK,IAAI,CAAC;AAAA,YAC1C;AACA,gBAAI,KAAK,MAAM,UAAW,OAAM,KAAK,KAAK,UAAUA,QAAO,GAAG;AAC9D,mBAAOA;AAAA,UACT,CAAC;AAED,iBAAO;AAAA,YACL,SAAS,YAAY;AAAA,YACrB,QAAQ,YAAY;AAAA,YACpB,YAAY,YAAY;AAAA,UAC1B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,YAAM,MAAMjB,MAAI;AAAA,QACd;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACAI;AAAA,MACF,CAAC,EAAE;AAAA,QACD,OAAO;AAAA,UACLH;AAAA,UACAS;AAAA,UACAD;AAAA,UACAkB;AAAA,UACAP;AAAA,UACAR;AAAA,UACAR;AAAA,QACF,MAAM;AACJ,cAAIH,KAAK,QAAO,EAAE,SAAAQ,SAAQ;AAC1B,cAAI,CAACL,SAAQ,WAAW,QAAQ,GAAG;AACjC,mBAAO,EAAE,SAAAK,SAAQ;AAAA,UACnB;AAEA,gBAAM,oBAAoBG,YAAW,SAAS;AAE9C,cAAI,CAAC,kBAAmB,QAAO,EAAE,SAAAH,SAAQ;AAEzC,gBAAM,SAAS,KAAK,MAAM,MAAMA,QAAO;AACvC,gBAAM,aAAa,OAAO;AAC1B,gBAAM,qBAAqB,OAAO;AAClC,gBAAM,qBAAqB,OAAO,IAAI,QAAQ,OAAO,EAAE;AACvD,gBAAM,qBAAqB;AAC3B,gBAAM,qBAAqB;AAG3B,gBAAM,oBAAoB,CAAC,OAAO,QAAQ,MAAM,EAAE;AAAA,YAAK,CAAC,QACtD,GAAG;AAAA,cACD,KAAK,KAAKC,SAAS,YAAY,qBAAqB,GAAG;AAAA,YACzD;AAAA,UACF;AACA,cAAI,CAAC,mBAAmB;AACtB,kBAAM,IAAI;AAAA,cACR,gCAAgCD,QAAO,mBAAmB,IAAI;AAAA,YAChE;AAAA,UACF;AAEA,gBAAM,QAAQG,YAAW;AAAA,YACvB,CAAC,KAAK,SAAS;AACb,kBAAI,KAAK,WAAW,QAAQ,GAAG;AAC7B,oBAAI,MAAM,KAAK,KAAK,UAAU,SAAS,MAAM,CAAC;AAC9C,uBAAO;AAAA,cACT;AACA,kBAAI,MAAM,KAAK,IAAI;AACnB,qBAAO;AAAA,YACT;AAAA,YACA,EAAE,OAAO,CAAC,GAAe,OAAO,CAAC,EAAc;AAAA,UACjD;AAEA,iBAAO;AAAA,YACL,SAAS,KAAK,MAAM;AAAA,cAClB;AAAA,cACA,GAAG,kBAAkB,IAAI,kBAAkB;AAAA,YAC7C;AAAA,YACA,SAAS;AAAA,cACP,MAAM,KAAK,MAAM,KAAK,YAAY,GAAG,kBAAkB,MAAM;AAAA,cAC7D,SAASQ,aACL;AAAA,gBACA,GAAG,MAAM;AAAA,gBACT,gBAAgB,kBAAkB;AAAA,gBAClC,GAAG,MAAM;AAAA,gBACT,aAAa,kBAAkB,mCAAmC,kBAAkB,GAAG,iBAAiB;AAAA,gBACxG;AAAA,gBACA;AAAA,cACF,EAAE,KAAK,IAAI,IACT;AAAA,gBACA,GAAG,MAAM;AAAA,gBACT,gBAAgB,kBAAkB;AAAA,gBAClC,GAAG,MAAM;AAAA,gBACT,aAAa,kBAAkB,mCAAmC,kBAAkB,GAAG,iBAAiB;AAAA,gBACxG;AAAA,gBACA;AAAA,cACF,EAAE,KAAK,IAAI;AAAA,YACf;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,QACL,SAAS,IAAI;AAAA,QACb,SAAS,IAAI;AAAA,MACf;AAAA,IACF;AAEA,aAAS,aAAa;AACpB,UAAI,KAAK,MAAM;AACb,eAAOQ,KAAI,KAAK;AAAA,UACd,GAAG,IAAI;AAAA,UACPvB,SAAO,KAAK,IAAI,EAAE,MAAM,YAAY,EAAE;AAAA,UACtC,CAAC;AAAA,UACD,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAEA,YAAM,SAASL,MAAI,CAAC,KAAK,eAAe,CAAC,GAAG,iBAAiB,GAAG,CAAC,EAAE;AAAA,QACjE,CAAC,CAAC,iBAAiB6B,kBAAiB5B,IAAG,MACrC2B,KAAI,wBAAwB;AAAA,UAC1B,YAAY;AAAA,YACV,GAAG;AAAA,YACH,GAAGC;AAAA,YACH,GAAI5B,OACA;AAAA,cACA;AAAA,gBACE,QAAQ;AAAA,gBACR,SAAS,CAAC,WAAW;AAAA,gBACrB,WAAW,CAAC,GAAG;AAAA,cACjB;AAAA,cACA;AAAA,gBACE,QAAQ;AAAA,gBACR,SAAS,CAAC,MAAM;AAAA,gBAChB,WAAW;AAAA,kBACT6B,mBAAkB,SAAS,SAAS,cAAc,KAAK;AAAA,kBACvDA,mBAAkB,SAAS,SAAS,cAAc,KAAK;AAAA,gBACzD;AAAA,cACF;AAAA,YACF,IACE,CAAC;AAAA,UACP,EAAE,IAAI,CAAC,UAAU;AAAA,YACf,SAAS,MAAM;AACb,oBAAM,SAAS,KAAK,UAAU;AAC9B,qBAAO,OAAO,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,MAAM,CAAC;AAAA,YACxD,GAAG;AAAA,YACH,SAAS,KAAK;AAAA,YACd,WAAW,KAAK;AAAA,UAClB,EAAE;AAAA,QACJ,CAAC;AAAA,MACL;AAEA,aAAO,IAAIF,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkB,CAAC,MACfA,KAAI,6BAA6B;AAAA,cACjC,SAAS;AAAA,YACX,CAAC,IACCA,KAAI,wBAAwB;AAAA,cAC5B,YAAY;AAAA,gBACV;AAAA,kBACE,SAAS,CAAC,gBAAgB;AAAA,kBAC1B,YAAY;AAAA,oBACV;AAAA,sBACE,MAAM;AAAA,sBACN,aAAa,CAAC,sBAAsB;AAAA,oBACtC;AAAA,oBACA;AAAA,sBACE,MAAM;AAAA,sBACN,aAAa;AAAA,wBACXE,mBAAkB,SAAS,SAAS,wBAAwB,CAAC,GAAG,IAAI,EAAE,SACpE;AAAA,sBACJ;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC,EAAE;AAAA;AAAA;AAAA,YAGL,gBAAgB,OAAO;AAAA,cAAM,CAAC,EAAE,WAAW,MACzC,aAAa,CAAC,EAAE,MAAM,UAAU,QAAQ,OAAO,KAAK,CAAC,IAAI,CAAC;AAAA,YAC5D;AAAA,YACA,mBAAmB9B,MAAI,CAAC,SAAS,QAAQ,CAAC,EAAE;AAAA,cAC1C,CAAC,CAACqB,UAASU,SAAQ,MAAM;AAAA,gBACvB,GAAGA;AAAA,gBACH,GAAIV,WACA;AAAA,kBACAS,mBAAkB,SAAS;AAAA,gBAC7B,IACE,CAAC;AAAA,gBACL,GAAI,MACA;AAAA,kBACAA,mBAAkB,SAAS;AAAA,gBAC7B,IACE,CAAC;AAAA,cACP;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAI1B,aAAO9B,MAAI,CAAC,aAAa,KAAK,MAAM,CAAC,EAAE;AAAA,QACrC,CAAC;AAAA,UACC0B;AAAA,UACAzB;AAAA,UACAS;AAAA;AAAA,QACF,MAAM;AACJ,cAAI,CAACgB,gBAAezB,KAAK;AAEzB,gBAAM,YAAY,IAAI,4BAA4B;AAAA,YAChD,YAAY,cAAc;AAAA,UAC5B,CAAC;AAED,iBAAO,IAAI;AAAA,YACT,GAAG,IAAI;AAAA,YACP;AAAA,cACE,MAAM,CAAC,cAAe,cAAc,WAAW,SAAS;AAAA,cACxD,SAAS;AAAA,gBACP,UAAU,KAAK;AAAA,kBACb,mBAAK,MAAM;AAAA,kBACX;AAAA,kBACA,GAAG,IAAI;AAAA,gBACT;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT;AAAA,kBACE,UAAU;AAAA,oBACR,KAAK,cAAe,cAAc,WAAW,IAAI,IAAI;AAAA,kBACvD;AAAA,gBACF;AAAA,cACF;AAAA,cACA,SAAS;AAAA,gBACP;AAAA,kBACE,UAAU;AAAA,oBACR,KAAK,cAAe,cAAc,WAAW,IAAI,IAAI;AAAA,oBACrD,eAAe;AAAA,oBACf,eAAe;AAAA,oBACf,MAAM;AAAA,kBACR;AAAA,gBACF;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT,aAAa;AAAA,kBAAM,CAAC,MAClB,MAAM,UAAU,gBAAgB;AAAA,gBAClC;AAAA,cACF;AAAA,cACA,MAAM;AAAA,cACN,YAAY;AAAA,gBACV,UAAU,MAAM,CAAC+B,gBAAe;AAAA,kBAC9B,SAASA,WAAU;AAAA,kBACnB,UAAUA,WAAU;AAAA,kBACpB,UAAU,OAAOA,WAAU,QAAQ;AAAA,gBACrC,EAAE;AAAA,cACJ;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AAKxB,aAAOhC,MAAI;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,SAAS,MAAM,CAAC,MAAM,GAAG,GAAG;AAAA,QAC5B;AAAA,MACF,CAAC,EAAE;AAAA,QACD,OAAO;AAAA,UACLU;AAAA,UACAuB;AAAA,UACAC;AAAA,UACAvB;AAAA,UACAe;AAAA,UACA;AAAA,UACAzB;AAAA,QACF,MAAM;AACJ,cAAIyB,aAAa;AAEjB,gBAAM,UAAU,KAAK;AAAA,YACnB,mBAAK,MAAM;AAAA,YACX;AAAA,YACA;AAAA,YACA;AAAA,UACF;AACA,gBAAM,GAAG,SAAS,MAAM,KAAK,QAAQ,OAAO,GAAG;AAAA,YAC7C,WAAW;AAAA,UACb,CAAC;AAED,gBAAM,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC3C,kBAAM,KAAK,GAAG,kBAAkB,OAAO;AACvC,kBAAM,UAAU,SAAS,OAAO;AAAA;AAAA;AAAA,cAG9B,iBAAiB;AAAA,YACnB,CAAC;AACD,oBAAQ,GAAG,WAAW,MAAM;AAC5B,oBAAQ,GAAG,SAAS,MAAM;AAI1B,eAAG,KAAK,SAAS,MAAM;AACrB,sBAAQ,OAAO;AAAA,YACjB,CAAC;AACD,oBAAQ,KAAK,EAAE;AAEf,kBAAM,QAAQ,CAAC;AAEf,uBAAW,QAAQ;AAAA,cACjB;AAAA,gBACE,MAAMhB;AAAA,gBACN,IAAI;AAAA,gBACJ,OAAO;AAAA,cACT;AAAA,cACA,GAAI,CAACT,OAAMU,aAAY,CAAC;AAAA,YAC1B,GAAG;AACD,kBAAI,CAAC,KAAK,OAAO;AACf,sBAAM,KAAK;AAAA,kBACT,MAAM,KAAK;AAAA,kBACX,IAAI,KAAK;AAAA,gBACX,CAAC;AAAA,cACH;AACA,oBAAM,QAAQ,MAAM,KAAK,MAAM;AAAA,gBAC7B,KAAK,KAAK;AAAA,gBACV,KAAK;AAAA,gBACL,QACEuB,aAAY,IAAI,CAACC,UAAS,KAAK,SAASzB,SAAQyB,KAAI,CAAC,KAAK,CAAC;AAAA,cAC/D,CAAC;AACD,oBAAM;AAAA,gBACJ,GAAG,MAAM,IAAI,CAAC,UAAU;AAAA,kBACtB,MAAM,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,kBAC/B,IAAI,KAAK,KAAK,KAAK,IAAI,IAAI;AAAA,gBAC7B,EAAE;AAAA,cACJ;AAAA,YACF;AACA,kBAAM,KAAK,CAAC,GAAG,MAAM,EAAE,GAAG,cAAc,EAAE,EAAE,CAAC;AAC7C,uBAAW,QAAQ,OAAO;AACxB,sBAAQ,KAAK,KAAK,MAAM;AAAA,gBACtB,MAAM,KAAK;AAAA,gBACX,MAAM,oBAAI,KAAK,CAAC;AAAA,cAClB,CAAC;AAAA,YACH;AAGA,gBAAIF,UAAS;AACX,sBAAQ,OAAOA,SAAQ,SAAS;AAAA,gBAC9B,MAAMA,SAAQ;AAAA,gBACd,MAAM,oBAAI,KAAK,CAAC;AAAA,cAClB,CAAC;AAAA,YACH;AAEA,kBAAM,QAAQ,SAAS;AAAA,UACzB,CAAC;AAGD,gBAAM,OAAOG,QAAO,WAAW,QAAQ;AACvC,eAAK,OAAO,MAAM,GAAG,SAAS,SAAS,SAAS,OAAO,CAAC;AACxD,gBAAM,YAAY,KAAK,OAAO,KAAK;AACnC,gBAAM,cAAc,OAAO;AAAA,YAAM,CAACjC,YAChC,UAAU,UAAUA,OAAM,EAAE,KAAK,CAAC,MAAM,EAAE,KAAK;AAAA,UACjD;AACA,cAAI,eAAe+B,aAAY;AAC7B,gBAAI,QAAQ;AACZ,uBAAW,QAAQA,aAAY;AAC7B,kBAAI,GAAG;AAAA,gBACL,GAAG,IAAI,YAAY,KAAK;AAAA,gBACxB;AAAA,kBACE,KAAKJ,yBAAwB,WAAW,IAAI,SAAS,IAAI,KAAK;AAAA,oBAC5D;AAAA,kBACF,CAAC;AAAA,kBACD,QAAQ;AAAA,kBACR,QAAQ,IAAI,MAAM,UAAU,IAAI;AAAA,gBAClC;AAAA,gBACA,EAAE,QAAQ,gBAAgB,KAAK;AAAA,cACjC;AACA;AAAA,YACF;AAAA,UACF;AAEA,iBAAO,IAAI,GAAG;AAAA,YACZ,GAAG,IAAI;AAAA,YACP;AAAA,cACE,KAAKA,sBAAqB,IAAI,SAAS,SAAS;AAAA,cAChD,QAAQ;AAAA,cACR,QAAQ,IAAI,MAAM,YAAY,OAAO;AAAA,YACvC;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAO,QAAQ,MAAM,CAACT,aAAY;AAChC,YAAI,CAACA,SAAS;AACd,YAAIA,SAAQ,SAAU;AAEtB,eAAO,IAAI,WAAW;AAAA,UACpB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,MAAMS,2BAA0B,KAAK,QAAQ,aAAa,IAAI,GAAG,IAAI,UAAU,CAC7E;AAAA,cACF,iBAAiB,UAAUT,SAAQ,SAAS;AAAA,YAC9C;AAAA,YACA,EAAE,QAAQ,eAAe,CAAC,MAAM,EAAE;AAAA,UACpC;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,iBAAiB;AACxB,aAAOrB,MAAI;AAAA,QACT;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,KAAK;AAAA,QACL;AAAA,MACF,CAAC,EAAE;AAAA,QACD,CAAC;AAAA,UACCqB;AAAA,UACAgB;AAAA,UACAX;AAAA,UACAY;AAAA,UACAC;AAAA,UACA;AAAA,UACAtC;AAAA,QACF,MAAM;AAIJ,kBAAQ,eAAe,MAAM,QAAQ,QAAQ,oBAAI,IAAI,CAAC;AACtD,gBAAM,cAAc;AAAA,YAClB,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,MAAM,KAAK;AAAA,cACX,aAAa,KAAK,eAAe;AAAA,cACjC,MAAM,KAAK,QAAQ,KAAM;AAAA,cACzB,SAAS,QAAQ,MAAM,CAACY,aAAY,UAAUA,QAAO,CAAC;AAAA,cACtD,YAAY,OAAO,MAAM,CAACC,YAAW,MAAMA,OAAM,CAAC;AAAA,cAClD,kBAAkB,EAAE,MAAM,QAAQ,MAAM,CAAC,MAAM,MAAM,CAAC,CAAC,EAAE;AAAA,cACzD,aAAa;AAAA,gBACX,WAAW;AAAA,cACb;AAAA,cACA,eAAe,CAAC,YAAY;AAAA,cAC5B,eAAeO,YAAW;AAAA,gBACxB,WAAWA,SAAQ,WAAW,SAAS,SAAS;AAAA,gBAChD,UAAUA,SAAQ,YAAYgB,UAAU;AAAA,cAC1C;AAAA,cACA,WAAW,OAAO;AAAA,gBAChB,kBAAkB,IAAI;AAAA,gBACtB,WAAW,IAAI;AAAA,cACjB;AAAA,cACA,kBAAkB,UAAU;AAAA,gBAC1B,KAAK,OAAO;AAAA,gBACZ,gBAAgB,OAAO;AAAA,cACzB;AAAA,cACA,QAAQ,KAAK;AAAA,cACb,MAAM,KAAK;AAAA,cACX,SAAShC,SAAO,KAAK,UAAU,EAAE,MAAM,CAAC,MAAM,KAAK,KAAK;AAAA,cACxD,8BAA8B,aAAa;AAAA,cAC3C,GAAIqB,eACA;AAAA,gBACA,aAAa;AAAA,gBACb,UAAUY,YAAY,IAAI;AAAA,kBACxB,CAAC,QAAQ,KAAK,QAAQ,WAAW,EAAE;AAAA,gBACrC;AAAA,gBACA,aAAa;AAAA,kBACX,UAAU;AAAA,oBACRtC,MAAI,CAAC,SAASI,QAAO,CAAC,EAAE,MAAM,CAAC,CAACK,UAASL,QAAO,MAAM;AAGpD,0BAAIsB,gBAAetB,SAAQ,SAAS,QAAQ,GAAG;AAC7C,+BAAOK,SACJ,QAAQ,SAAS,EAAE,EACnB,QAAQ,OAAO,GAAG;AAAA,sBACvB;AACA,6BAAOA;AAAA,oBACT,CAAC;AAAA,kBACH;AAAA,gBACF;AAAA,cACF,IACE;AAAA,gBACA,aAAa;AAAA,gBACb,UAAU8B,UAAU;AAAA,gBACpB,OAAOA,UAAU;AAAA,gBACjB,SAAS,SAAS,OAAO;AAAA,gBACzB,SAASnC,SAAQ;AAAA,kBAAM,CAAC,MACtB,MAAM,QAAQ,MAAM,SAAS,oBAAoB;AAAA,gBACnD;AAAA,cACF;AAAA,YACJ;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AACA,iBAAO,IAAI,OAAO;AAAA,YAChB,YAAY,CAAC;AAAA,YACb;AAAA,cACE,GAAG,YAAY,CAAC;AAAA,cAChB,GAAIH,OACA;AAAA,gBACA,aAAa,YAAY,CAAC,EAAE,cACxBI,SAAO,YAAY,CAAC,EAAE,WAAW,EAAE;AAAA,kBACnC,CAAC,MAAM,GAAG,EAAE,UAAU,GAAG,GAAG,CAAC;AAAA,gBAC/B,IACE;AAAA,gBACJ,SAAS;AAAA,gBACT,eAAe,CAAC,QAAQ;AAAA,cAC1B,IACE,CAAC;AAAA,YACP;AAAA,YACA,YAAY,CAAC;AAAA,UACf;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,YAAY;AACnB,aAAO,IAAI,MAAM,CAACkB,SAAQ;AACxB,YAAIA,SAAQ,OAAW,QAAOlB,SAAO,MAAS;AAG9C,cAAM,QAAQ,IAAI,OAAO;AAAA,UACvB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,cAAc,GAAG;AAAA,YACjB,mBAAmBkB,KAAI,kBAAkB,QAAQ,YAAY;AAAA,YAC7D,YAAY,UAAU;AAAA,cAAM,CAACH,eAC3BA,aAAY,oBAAoB;AAAA,YAClC;AAAA,YACA,MAAMG,KAAI;AAAA,UACZ;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AACA,YAAI,CAACA,KAAI,MAAO,QAAO,MAAM;AAG7B,cAAM,iBAAiBa,QACpB,WAAW,KAAK,EAChB,OAAO,GAAG,mBAAK,IAAI,IAAI,mBAAK,KAAK,IAAI,IAAI,EAAE,EAC3C,OAAO,KAAK,EACZ,UAAU,GAAG,CAAC;AACjB,YAAI;AAAA,UACF,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAOb,KAAI,MAAM;AAAA,YACjB,WAAW;AAAA,YACX,SAAS,MAAM,YAAY,MAAM,CAACiB,YAAW;AAAA,cAC3C,UAAU,KAAK,UAAU;AAAA,gBACvB,MAAM,IAAI,IAAIA,MAAK,EAAE;AAAA,cACvB,CAAC;AAAA,YACH,EAAE;AAAA,YACF,OAAO;AAAA,UACT;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AACA,YAAI;AAAA,UACF,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAOjB,KAAI,MAAM;AAAA,YACjB,WAAWA,KAAI,MAAM;AAAA,YACrB,KAAK;AAAA,YACL,OAAOA,KAAI,MAAM;AAAA,cAAM,CAAC,UACtB,CAAC,OAAO,gBAAgB,MAAM,aAAa,MAAM,UAAU,EAAE;AAAA,gBAC3D;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AACA,eAAOA,KAAI,MAAM;AAAA,MACnB,CAAC;AAAA,IACH;AAEA,aAAS,oBAAoB;AAC3B,aAAOvB,MAAI,CAAC,KAAK,aAAa,GAAG,OAAO,CAAC,EAAE;AAAA,QACzC,CAAC,CAAC,aAAa,OAAO,MAAM;AAC1B,cAAI,CAAC,aAAa,eAAe,YAAY,gBAAgB,GAAG;AAC9D;AAAA,UACF;AAEA,cAAI,YAAY,MAAM;AACpB,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAEA,iBAAO,IAAI,OAAO;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,cAAc,GAAG;AAAA,cACjB,WAAW,GAAG;AAAA,cACd,iCAAiC,YAAY;AAAA,YAC/C;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,0BAA0B;AACjC,UAAI,KAAK,YAAY,QAAW;AAC9B,eAAO;AAAA,MACT;AAEA,aAAO,IAAI,OAAO;AAAA,QAChB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,cAAc,GAAG;AAAA,YACjB,sBAAsB,KAAK;AAAA,UAC7B;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA,MAIX,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA,MAIf,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA,MAIf,mBAAmB,KAAK;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,YAAY,MAAM,CAAC,QAAQ;AACrC,UAAI,CAAC,KAAK;AACR,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBO,eAAe,aAAmD;AACvE,WAAO,IAAI;AAAA,MACT,GAAG,KAAK,eAAe;AAAA,MACvB;AAAA,QACE,cAAc,KAAK;AAAA,QACnB;AAAA,QACA,QAAQ,gBAAgB,QAAW,EAAE,QAAQ,KAAK,CAAC,EAAE;AAAA,MACvD;AAAA,MACA,EAAE,QAAQ,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA,EAGA,OAAO,eACL,MACA,YACA,UACA,eACA,MACA;AACA,WAAOK,SAAO,UAAU,EAAE,MAAM,CAACoC,gBAAe;AAC9C,UAAI,OAAOA,gBAAe,UAAU;AAClC,eAAO,IAAI;AAAA,UACT,GAAG;AAAA,YACD;AAAA,YACA;AAAA,YACA,EAAE,SAASA,aAAY,GAAG,SAAS;AAAA,YACnC,QAAQ,CAAC;AAAA,UACX;AAAA,QACF;AAAA,MACF,WAAWA,YAAW,SAAS;AAC7B,eAAO,IAAI;AAAA,UACT,GAAG;AAAA,YACD;AAAA,YACA;AAAA,YACA;AAAA,cACE,GAAGA;AAAA,cACH,GAAG;AAAA,cACH,aAAazC,MAAI;AAAA,gBACfyC,YAAW;AAAA,gBACX,UAAU;AAAA,cACZ,CAAC,EAAE,MAAM,CAAC,CAAC,aAAa,mBAAmB,MAAM;AAAA,gBAC/C,GAAI,eAAe,CAAC;AAAA,gBACpB,GAAI,uBAAuB,CAAC;AAAA,cAC9B,CAAC;AAAA,YACH;AAAA,YACA,QAAQ,CAAC;AAAA,UACX;AAAA,QACF;AAAA,MACF;AACA,YAAM,IAAI,MAAM,wCAAwC,IAAI,YAAY;AAAA,IAC1E,CAAC;AAAA,EACH;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,MAAM,KAAK;AAAA,QACX,KAAK,KAAK;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,uBAAuB;AAAA,UACjC,WAAW,CAAC,KAAK,SAAS,GAAG;AAAA,QAC/B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM1C,gBAAe;AAErB,SAAS,eAAeA;;;ADxqFjB,SAAS,gBACd,MACA,YACA,aAIA,eACA,MACiB;AACjB,SAAO2C,SAAO,UAAU,EAAE,MAAM,CAACC,gBAAe;AAC9C,QAAI,OAAOA,gBAAe,UAAU;AAElC,UAAIA,YAAW,WAAW,MAAM,GAAG;AACjC,cAAM,QAAQA,YAAW,MAAM,GAAG;AAClC,eAAO;AAAA,UACL,aAAa,MAAM;AACjB,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AAAA,UACF;AAAA,UACA,KAAKD,SAAOC,WAAU;AAAA,UACtB,WAAWD;AAAA,YACT,OAAO,MAAM,CAAC,CAAC,eAAe,MAAM,CAAC,CAAC,qCAAqCC,WAAU;AAAA,UACvF;AAAA,QACF;AAAA,MACF;AAGA,YAAM,KAAK,IAAI;AAAA,QACb,GAAG;AAAA,UACD;AAAA,UACA;AAAA,UACA,EAAE,SAASA,aAAY,GAAG,YAAY;AAAA,UACtC,QAAQ,CAAC;AAAA,QACX;AAAA,MACF;AACA,aAAO;AAAA,QACL,aAAa,MAAM;AAAA,QACnB,KAAK,GAAG;AAAA,QACR,WAAW,GAAG,MAAM,SAAS;AAAA,MAC/B;AAAA,IACF,WAGSA,YAAW,SAAS;AAC3B,YAAM,KAAK,IAAI;AAAA,QACb,GAAG;AAAA,UACD;AAAA,UACA;AAAA,UACA;AAAA,YACE,GAAG;AAAA,YACH,GAAGA;AAAA,YACH,MAAMC,MAAI,CAAC,aAAa,MAAMD,YAAW,IAAI,CAAC,EAAE;AAAA,cAC9C,CAAC,CAAC,aAAa,IAAI,MAAM;AAAA,gBACvB,GAAI,eAAe,CAAC;AAAA,gBACpB,GAAI,QAAQ,CAAC;AAAA,cACf;AAAA,YACF;AAAA,YACA,aAAaC,MAAI;AAAA,cACf,aAAa;AAAA,cACbD,YAAW;AAAA,YACb,CAAC,EAAE,MAAM,CAAC,CAAC,oBAAoB,WAAW,OAAO;AAAA,cAC/C,GAAI,sBAAsB,CAAC;AAAA,cAC3B,GAAI,eAAe,CAAC;AAAA,YACtB,EAAE;AAAA,YACF,aAAaC,MAAI;AAAA,cACf,aAAa;AAAA,cACbD,YAAW;AAAA,YACb,CAAC,EAAE,MAAM,CAAC,CAAC,oBAAoB,WAAW,MAAM;AAAA,cAC9C,GAAI,sBAAsB,CAAC;AAAA,cAC3B,GAAI,eAAe,CAAC;AAAA,YACtB,CAAC;AAAA,UACH;AAAA,UACA,QAAQ,CAAC;AAAA,QACX;AAAA,MACF;AACA,aAAO;AAAA,QACL,aAAa,MAAM;AAAA,QACnB,KAAK,GAAG;AAAA,QACR,WAAW,GAAG,MAAM,SAAS;AAAA,MAC/B;AAAA,IACF;AACA,UAAM,IAAI,MAAM,wCAAwC,IAAI,YAAY;AAAA,EAC1E,CAAC;AACH;;;ADvDO,IAAM,yBAAN,cAAqC,UAAU;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAME,eAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,SAASC,SAAO,KAAK,MAAM;AACjC,UAAM,SAAS,KAAK,SAChBA,SAAO,KAAK,MAAM,IAClBA,SAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAEL,UAAM,KAAK,eAAe;AAC1B,UAAMC,cAAa,iBAAiB;AACpC,UAAM,eAAe,mBAAmB;AAExC,SAAK,KAAK;AACV,SAAK,aAAaA;AAClB,SAAK,eAAe;AAEpB,aAAS,iBAAiB;AACxB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAa,OAAO;AAAA,YAAM,CAACC,YACzBA,QAAO,SAAS,IACZ,iBAAiB,IAAI,OAAOA,QAAO,KAAK,IAAI,CAAC,KAC7C,iBAAiB,IAAI,OAAOA,QACzB,MAAM,GAAG,CAAC,EACV,KAAK,IAAI,CAAC,SAASA,QAAO,SAAS,CAAC;AAAA,UAC7C;AAAA,QACF;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIC,QAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAW,OAAO;AAAA,QACpB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAIC,IAAG;AAAA,QACZ,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQ,OAAO;AAAA,YACf,iBAAiB;AAAA,cACf;AAAA,gBACE,IAAIC,2BAA0B,KAAK,YAAY;AAAA,gBAC/C,mBAAmB,GAAG;AAAA,gBACtB;AAAA,gBACA,cAAc,KAAK;AAAA,gBACnB,cAAc,KAAK;AAAA,cACrB;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,MAAM,WAAW,CAACJ,WAAU,EAAE;AAAA,QAC1C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,cAAc,KAAK;AAAA,IACrB;AAAA,EACF;AACF;AAEA,IAAMF,gBAAe;AAErB,uBAAuB,eAAeA;;;AHhJtC,SAAS,OAAAO,MAAK,MAAAC,WAAU;;;AwBhBxB;AAAA,EAGE,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAGP,SAAS,MAAAC,WAAe;;;ACRxB;AAAA,EAGE,UAAAC;AAAA,EACA,iBAAAC;AAAA,OAEK;;;ACNP;AAAA,EAIE,UAAAC;AAAA,OACK;AAIP,SAAS,UAAAC,eAAc;AA+BhB,IAAM,wBAAN,cAAoC,UAAU;AAAA,EAClC;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,QAAQC,SAAO,KAAK,KAAK;AAC/B,UAAM,KAAK,eAAe;AAC1B,UAAM,qBAAqB,yBAAyB;AAEpD,SAAK,KAAK;AACV,SAAK,qBAAqB;AAE1B,aAAS,iBAAiB;AACxB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAa,iBAAiB,IAAI;AAAA,UAClC,aAAa;AAAA,YACX;AAAA,cACE,SAAS;AAAA,gBACP;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA,WAAW,CAAC,MAAM,GAAG;AAAA,YACvB;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,2BAA2B;AAClC,aAAO,IAAIC,QAAO;AAAA,QAChB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,uBAAuBD,SAAO,KAAK,KAAK,EAAE;AAAA,cAAM,CAAC,UAC/C,OAAO,mBAAmB,CAAC,yBAAyB,IAAI,CAAC;AAAA,YAC3D;AAAA,YACA,WAAWA,SAAO,KAAK,KAAK,EAAE,MAAM,CAAC,UAAU,OAAO,QAAQ,EAAE;AAAA,YAChE,gCAAgCA,SAAO,KAAK,KAAK,EAAE;AAAA,cAAM,CAAC,UACxD,OAAO,SAAS,UAAU,MAAM,MAAM,IAAI;AAAA,YAC5C;AAAA,YACA,gBAAgB,MAAM;AAAA,YACtB,cAAc,GAAG,IAAI;AAAA,cACnB,CAAC,QAAQ,iBAAiB,GAAG,EAAE;AAAA,YACjC;AAAA,YACA,gBAAgB,KAAK,WAAW;AAAA,cAC9B,SAASA,SAAO,KAAK,OAAO,EAAE;AAAA,gBAAM,CAAC,YACnC,QAAQ,IAAI,CAAC,YAAY;AAAA,kBACvB,SAAS,KAAK,UAAU,MAAM;AAAA,gBAChC,EAAE;AAAA,cACJ;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,oBAAoB,KAAK;AAAA,IAC3B;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,sBAAsB,eAAeA;;;ADrHrC,SAAS,OAAAG,MAAa,WAAW;AA+U1B,IAAM,QAAN,MAAM,eAAc,UAAmC;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EACA,eAAwB;AAAA,EAEhC,YACE,MACA,OAAkB,CAAC,GACnB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,OAAO;AACb,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAEvB,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,QAAQ,IAAI;AACjB;AAAA,IACF;AAEA,UAAM,OAAO,cAAc;AAC3B,UAAM,MAAM,aAAa;AACzB,UAAM,oBAAoBC,SAAO,MAAM,qBAAqB,YAAY;AACxE,UAAM,QAAQA,SAAO,MAAM,SAAS,WAAW;AAE/C,SAAK,QAAQ,YAAY;AAEzB,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAM,QAAQ,IAAI,MAAM,IAAI,GAAG,IAAI,SAAS,IAAI,UAAU,QAAW;AAAA,QACnE,QAAQ;AAAA,MACV,CAAC;AAED,aAAO,EAAE,MAAM;AAAA,IACjB;AAEA,aAAS,gBAAgB;AACvB,aAAOA,SAAO,MAAM,IAAI,EAAE,MAAM,CAAC,MAAM;AACrC,YAAI,CAAC,EAAG,QAAO;AACf,YAAI,MAAM;AACR,iBAAO;AAAA,YACL,2BAA2B;AAAA,UAC7B;AAEF,eAAO;AAAA,UACL,2BAA2B,EAAE,6BAA6B;AAAA,QAC5D;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,eAAe;AACtB,UAAI,MAAM,QAAQ,OAAW;AAE7B,aAAOA,SAAO,MAAM,GAAG,EAAE;AAAA,QAAM,CAAC,MAC9B,OAAO,MAAM,WAAW,EAAE,OAAO,GAAG,OAAO,EAAE,IAAI;AAAA,MACnD;AAAA,IACF;AAEA,aAAS,cAAc;AACrB,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW,KAAK,MAAM,CAAC,MAAM,MAAM,KAAK;AAAA,YACxC,2BAA2B,KAAK;AAAA,cAAM,CAAC,MACrC,MAAM,QAAQ,QAAQ,EAAE;AAAA,YAC1B;AAAA,YACA,0BAA0B,kBAAkB;AAAA,cAAM,CAAC,MACjD,UAAU,CAAC;AAAA,YACb;AAAA,YACA,cAAc,MAAM,MAAM,CAAC,MAAM,UAAU,CAAC,CAAC;AAAA,YAC7C,eACE,OACAC,eAAc;AAAA,cACZ,qBAAqB,IAAI;AAAA,cACzB,iBAAiB,IAAI;AAAA,YACvB,CAAC;AAAA,UACL;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,OAAO,KAAK;AAAA,IACd;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2CO,UACL,YACA,MACA,MACA;AACA,QAAI,KAAK;AACP,YAAM,IAAI;AAAA,QACR,4BAA4B,KAAK,eAAe;AAAA,MAClD;AACF,SAAK,eAAe;AAEpB,WAAO,OAAM;AAAA,MACX,KAAK;AAAA,MACL,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,EAAE,GAAG,MAAM,UAAU,KAAK,gBAAgB,SAAS;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8CA,OAAc,UACZ,UACA,YACA,MACA,MACA;AACA,WAAOD,SAAO,QAAQ,EAAE;AAAA,MAAM,CAACE,cAC7B,KAAK;AAAA,QACH,YAAY,cAAcA,SAAQ,EAAE,SAAS;AAAA,QAC7CA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAe,mBACb,MACA,UACA,YACA,OAA4B,CAAC,GAC7B,MACA;AACA,WAAOF,SAAO,QAAQ,EAAE,MAAM,CAACE,cAAa;AAC1C,YAAM,SAAS,YAAY,yBAAyBA,WAAU,CAAC,CAAC;AAEhE,aAAO,IAAI;AAAA,QACT,GAAG,IAAI,aAAa,MAAM;AAAA,QAC1B;AAAA,UACE,OAAO,EAAE,KAAKA,UAAS;AAAA,UACvB;AAAA,UACA,GAAG;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,OAAc,IACZ,MACA,UACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,OAAO;AAAA,UACjB,WAAW,CAAC,KAAK,GAAG;AAAA,QACtB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,OAAO,aACL,MACA,KACA,MACA;AACA,WAAO,IAAI,IAAI;AAAA,MACb;AAAA,MACA;AAAA,QACE,UAAU,IAAI,MAAM,CAACC,SAAQ,cAAcA,IAAG,EAAE,QAAQ;AAAA,QACxD,QAAQC,KAAI,wBAAwB;AAAA,UAClC,YAAY;AAAA,YACV;AAAA,cACE,SAAS,CAAC,iBAAiB;AAAA,cAC3B,WAAW,CAAC,GAAG;AAAA,cACf,YAAY;AAAA,gBACV;AAAA,kBACE,MAAM;AAAA,kBACN,aAAa;AAAA,oBACX;AAAA,oBACA;AAAA,oBACA;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC,EAAE;AAAA,MACL;AAAA,MACA;AAAA,QACE,gBAAgB;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAML,iBAAe;AAErB,MAAM,eAAeA;;;ADtpBd,IAAM,wBAAN,cAAoC,UAAU;AAAA,EAClC;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMM,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,WAAWC,SAAO,KAAK,KAAK;AAClC,UAAM,SAASA,SAAO,KAAK,MAAM;AACjC,UAAM,SAAS,KAAK,SAChBA,SAAO,KAAK,MAAM,IAClBA,SAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACL,UAAM,SAAS,aAAa;AAC5B,UAAM,eAAe,mBAAmB;AAExC,SAAK,SAAS;AACd,SAAK,eAAe;AAEpB,aAAS,eAAe;AACtB,aAAO,MAAM,aAAa,GAAG,IAAI,UAAU,QAAQ;AAAA,IACrD;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAIC,IAAG;AAAA,QACZ,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQ,OAAO;AAAA,YACf,QAAQ;AAAA,cACN;AAAA,gBACE,IAAIC,2BAA0B,KAAK,YAAY;AAAA,gBAC/C;AAAA,gBACA;AAAA,gBACA,cAAc,KAAK;AAAA,gBACnB,cAAc,KAAK;AAAA,cACrB;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,MAAM,WAAW,CAAC,MAAM,EAAE;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,MAIb,cAAc,KAAK;AAAA,IACrB;AAAA,EACF;AACF;AAEA,IAAMH,iBAAe;AAErB,sBAAsB,eAAeA;;;AGzHrC;AAAA,EAGE,eAAAI;AAAA,EACA,UAAAC;AAAA,OACK;AAGP,SAAS,OAAAC,MAAK,MAAAC,KAAI,WAAW;AAoCtB,IAAM,wBAAN,cAAoC,UAAU;AAAA,EAClC;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,WAAWC,SAAO,KAAK,KAAK;AAClC,UAAM,SAASA,SAAO,KAAK,MAAM;AACjC,UAAM,SAAS,KAAK,SAChBA,SAAO,KAAK,MAAM,IAClBA,SAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACL,UAAM,SAAS,aAAa;AAC5B,UAAM,eAAe,mBAAmB;AAExC,SAAK,SAAS;AACd,SAAK,eAAe;AAEpB,aAAS,eAAe;AACtB,aAAO,IAAI,IAAI,YAAY,GAAG,IAAI,UAAU;AAAA,QAC1C,KAAK;AAAA,QACL,QAAQH,KAAI,wBAAwB;AAAA,UAClC,YAAY;AAAA,YACV;AAAA,cACE,SAAS,CAAC,aAAa;AAAA,cACvB,WAAW,CAAC,QAAQ;AAAA,cACpB,YAAY;AAAA,gBACV;AAAA,kBACE,MAAM;AAAA,kBACN,aAAa,CAAC,kBAAkB;AAAA,gBAClC;AAAA,cACF;AAAA,cACA,YAAY;AAAA,gBACV;AAAA,kBACE,MAAM;AAAA,kBACN,UAAU;AAAA,kBACV,QAAQ,CAAC,OAAO,GAAG;AAAA,gBACrB;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC,EAAE;AAAA,MACL,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAIC,IAAG;AAAA,QACZ,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQ,OAAO;AAAA,YACf,QAAQ;AAAA,cACN;AAAA,gBACE,IAAIG,2BAA0B,KAAK,YAAY;AAAA,gBAC/C;AAAA,gBACA;AAAA,gBACA,cAAc,KAAK;AAAA,gBACnB,cAAc,KAAK;AAAA,cACrB;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,MAAM,WAAW,CAAC,MAAM,EAAE;AAAA,QACtC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,MAIb,cAAc,KAAK;AAAA,IACrB;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,sBAAsB,eAAeA;;;AC/IrC;AAAA,EAIE,UAAAG;AAAA,OACK;AAGP,SAAS,OAAAC,MAAK,UAAAC,SAAQ,MAAAC,KAAI,OAAAC,YAAW;;;ACRrC,SAA2C,OAAAC,OAAK,UAAAC,gBAAc;;;ACA9D;AAAA,EAGE,iBAAAC;AAAA,EAEA,UAAAC;AAAA,OACK;AAIP,SAAS,UAAAC,SAAQ,OAAAC,YAAW;AA6BrB,IAAM,2BAAN,cAAuC,UAAU;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,QAAQC,SAAO,KAAK,KAAK;AAC/B,UAAM,KAAK,eAAe;AAC1B,UAAMC,cAAa,iBAAiB;AACpC,UAAM,eAAe,mBAAmB;AAExC,SAAK,KAAK;AACV,SAAK,aAAaA;AAClB,SAAK,eAAe;AAEpB,aAAS,iBAAiB;AACxB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAa,iBAAiB,IAAI;AAAA,QACpC;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIC,QAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAW,MAAM;AAAA,QACnB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAIC,KAAI;AAAA,QACb,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,MAAM;AAAA,YACb,UAAU;AAAA,YACV,UAAU,GAAG;AAAA,YACb,cAAc,KAAK,UAAUC,eAAc,KAAK,MAAM;AAAA,UACxD;AAAA,UACA,EAAE,QAAQ,MAAM,WAAW,CAACH,WAAU,EAAE;AAAA,QAC1C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,cAAc,KAAK;AAAA,IACrB;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,yBAAyB,eAAeA;;;AC7HxC;AAAA,EAGE,iBAAAM;AAAA,EACA,UAAAC;AAAA,OACK;AAGP,SAAS,OAAAC,YAAgB;AAoClB,IAAM,0BAAN,cAAsC,UAAU;AAAA,EACpC;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,QAAQC,SAAO,KAAK,KAAK;AAC/B,UAAM,WAAWA,SAAO,KAAK,KAAK,EAAE;AAAA,MAAM,CAAC,UACzC,iBAAiB,QAAQ,MAAM,MAAMA,SAAO,KAAK;AAAA,IACnD;AACA,UAAM,SAAS,aAAa;AAC5B,UAAM,eAAe,mBAAmB;AAExC,SAAK,SAAS;AACd,SAAK,eAAe;AAEpB,aAAS,eAAe;AACtB,aAAO,MAAM,aAAa,GAAG,IAAI,UAAU,UAAU;AAAA,QACnD,QAAQ,KAAK,gBAAgB,SAAY;AAAA,MAC3C,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAIC,KAAI;AAAA,QACb,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,MAAM;AAAA,YACb,UAAU;AAAA,YACV,UAAU;AAAA,YACV,cAAc,KAAK,UAAUC,eAAc,KAAK,MAAM;AAAA,UACxD;AAAA,UACA,EAAE,QAAQ,KAAK,gBAAgB,SAAY,KAAK;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,MAIb,cAAc,KAAK;AAAA,IACrB;AAAA,EACF;AACF;AAEA,IAAMH,iBAAe;AAErB,wBAAwB,eAAeA;;;AF/FvC,SAAS,OAAAI,YAAW;;;AGTpB,SAAgB,UAAAC,gBAAc;AAIvB,SAAS,qBACd,YACA;AACA,MAAI,CAAC,WAAY,QAAOC,SAAO,KAAK;AAEpC,SAAOA,SAAO,UAAU,EAAE;AAAA,IACxB,CAACC,gBACC,OAAOA,gBAAe,YAAY,OAAOA,YAAW,YAAY;AAAA,EACpE;AACF;AAEO,SAAS,kBAAkB,YAAoC;AACpE,MAAI,CAAC,WAAY,QAAOD,SAAO,KAAK;AAEpC,SAAOA,SAAO,UAAU,EAAE;AAAA,IACxB,CAACC,gBACC,OAAOA,gBAAe,YAAYA,uBAAsB;AAAA,EAC5D;AACF;;;AHyIO,IAAM,WAAN,MAAM,kBAAiB,UAAmC;AAAA,EACvD;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAAqB,CAAC,GACtB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,OAAO;AACb,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAEvB,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,QAAQ,IAAI;AACjB;AAAA,IACF;AAEA,UAAM,OAAO,cAAc;AAE3B,SAAK,QAAQ,YAAY;AAEzB,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAM,QAAQC,KAAI,MAAM,IAAI,GAAG,IAAI,SAAS,IAAI,UAAU,QAAW;AAAA,QACnE,QAAQ;AAAA,MACV,CAAC;AAED,aAAO,EAAE,MAAM;AAAA,IACjB;AAEA,aAAS,gBAAgB;AACvB,aAAOC,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,MAAM,KAAK,KAAK;AAAA,IAClD;AAEA,aAAS,cAAc;AACrB,aAAO,IAAID,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW;AAAA,UACb;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,OAAO,KAAK;AAAA,IACd;AAAA,EACF;AAAA,EAuDO,UAAU,kBAAuB,kBAAwB,MAAY;AAC1E,WAAO,qBAAqB,gBAAgB,EAAE;AAAA,MAAM,CAAC,MACnD,IACI,UAAS;AAAA,QACP;AAAA;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA;AAAA,QACA;AAAA,QACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,MAC5C,IACA,UAAS;AAAA,QACP,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA;AAAA,QACA;AAAA;AAAA,QACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,MAC5C;AAAA,IACN;AAAA,EACF;AAAA,EA4DA,OAAc,UACZ,gBACA,sBACA,kBACA,MACA;AACA,WAAO,qBAAqB,gBAAgB,EAAE;AAAA,MAAM,CAAC,MACnD,IACIC,SAAO,oBAAoB,EAAE;AAAA,QAAM,CAAC,aAClC,KAAK;AAAA,UACH;AAAA;AAAA,UACA,YAAY,cAAc,QAAQ,EAAE,SAAS;AAAA,UAC7C;AAAA,UACA;AAAA;AAAA,UACA;AAAA,QACF;AAAA,MACF,IACAA,SAAO,cAAc,EAAE;AAAA,QAAM,CAAC,aAC5B,KAAK;AAAA,UACH,YAAY,cAAc,QAAQ,EAAE,SAAS;AAAA,UAC7C;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,QACF;AAAA,MACF;AAAA,IACN;AAAA,EACF;AAAA,EAEA,OAAe,mBACb,gBACA,MACA,UACA,YACA,OAA+B,CAAC,GAChC,OAAuC,CAAC,GACxC;AACA,WAAOA,SAAO,IAAI,EAAE;AAAA,MAClB,CAACC,UACC,IAAI;AAAA,QACF,GAAG,IAAI,aAAa,cAAc;AAAA,QAClC;AAAA,UACE,OAAO,EAAE,KAAK,SAAS;AAAA,UACvB;AAAA,UACA,GAAGA;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACJ;AAAA,EACF;AAAA,EAEA,OAAe,qBACb,MACA,UACA,YACA,OAA+B,CAAC,GAChC,OAAuC,CAAC,GACxC;AACA,WAAOC,MAAI,CAAC,YAAY,IAAI,CAAC,EAAE,MAAM,CAAC,CAACC,aAAYF,KAAI,MAAM;AAC3D,YAAM,SAAS;AAAA,QACb;AAAA,UACE;AAAA,YACE,OAAO,aAAa,WAAW,WAAW;AAAA,YAC1C,KAAK,UAAUA,MAAK,UAAU,CAAC,CAAC;AAAA,YAChC,OAAOE,gBAAe,WAAWA,cAAaA,YAAW;AAAA,UAC3D,EAAE,KAAK,EAAE;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAEA,aAAO,IAAI;AAAA,QACT,GAAG,IAAI,aAAa,MAAM;AAAA,QAC1B;AAAA,UACE,OAAO,EAAE,KAAK,SAAS;AAAA,UACvB,YAAAA;AAAA,UACA,GAAGF;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAgDO,eAAe,aAAkB,aAAmB,MAAY;AACrE,WAAO,kBAAkB,WAAW,EAAE;AAAA,MAAM,CAAC,MAC3C,IACI,UAAS;AAAA,QACP;AAAA;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA;AAAA,QACA;AAAA,MACF,IACA,UAAS;AAAA,QACP,KAAK;AAAA,QACL,KAAK;AAAA,QACL;AAAA;AAAA,QACA;AAAA;AAAA,MACF;AAAA,IACN;AAAA,EACF;AAAA,EAmDA,OAAc,eACZ,gBACA,iBACA,aACA,MACA;AACA,WAAO,kBAAkB,WAAW,EAAE;AAAA,MAAM,CAAC,MAC3C,IACID,SAAO,eAAe,EAAE;AAAA,QAAM,CAAC,aAC7B,KAAK;AAAA,UACH;AAAA;AAAA,UACA,YAAY,cAAc,QAAQ,EAAE,SAAS;AAAA,UAC7C;AAAA,UACA;AAAA;AAAA,UACA;AAAA,QACF;AAAA,MACF,IACAA,SAAO,cAAc,EAAE;AAAA,QAAM,CAAC,aAC5B,KAAK;AAAA,UACH,YAAY,cAAc,QAAQ,EAAE,SAAS;AAAA,UAC7C;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,QACF;AAAA,MACF;AAAA,IACN;AAAA,EACF;AAAA,EAEA,OAAe,gBACb,gBACA,MACA,UACA,OACA,OAA+B,CAAC,GAChC;AACA,WAAOA,SAAO,IAAI,EAAE;AAAA,MAClB,CAACC,UACC,IAAI,wBAAwB,GAAG,IAAI,aAAa,cAAc,IAAI;AAAA,QAChE,OAAO,EAAE,KAAK,SAAS;AAAA,QACvB;AAAA,QACA,GAAGA;AAAA,MACL,CAAC;AAAA,IACL;AAAA,EACF;AAAA,EAEA,OAAe,kBACb,MACA,UACA,UACA,OAA+B,CAAC,GAChC;AACA,WAAOC,MAAI,CAAC,UAAU,IAAI,CAAC,EAAE,MAAM,CAAC,CAACE,WAAUH,KAAI,MAAM;AACvD,YAAM,SAAS;AAAA,QACb;AAAA,UACE;AAAA,YACE,OAAO,aAAa,WAAW,WAAW;AAAA,YAC1C,KAAK,UAAUA,MAAK,UAAU,CAAC,CAAC;AAAA,YAChCG;AAAA,UACF,EAAE,KAAK,EAAE;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAEA,aAAO,IAAI,wBAAwB,GAAG,IAAI,aAAa,MAAM,IAAI;AAAA,QAC/D,OAAO,EAAE,KAAK,SAAS;AAAA,QACvB,OAAOA;AAAA,QACP,eAAe;AAAA,QACf,GAAGH;AAAA,MACL,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,OAAc,IACZ,MACA,UACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,OAAO;AAAA,UACjB,WAAW,CAAC,KAAK,GAAG;AAAA,QACtB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMH,iBAAe;AAErB,SAAS,eAAeA;;;ADnpBjB,IAAM,qBAAN,cAAiC,UAAU;AAAA,EAC/B;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMO,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,SAASC,SAAO,KAAK,MAAM;AACjC,UAAM,gBAAgB,uBAAuB;AAC7C,UAAM,EAAE,QAAQ,iBAAiB,IAAI,0BAA0B;AAC/D,UAAM,eAAe,mBAAmB;AAExC,SAAK,mBAAmB;AACxB,SAAK,eAAe;AAEpB,aAAS,yBAAyB;AAChC,aAAOA,SAAO,KAAK,aAAa,EAAE;AAAA,QAAM,CAACC,mBACvCA,eAAc,IAAI,CAAC,MAAM;AACvB,gBAAM,SACH,EAAE,WAAW,IAAI,MAAM,EAAE,QAAQ,IAAI,MAAM,EAAE,QAAQ,IAAI;AAC5D,cAAI,UAAU;AACZ,kBAAM,IAAI;AAAA,cACR,kEAAkE,EAAE,IAAI;AAAA,YAC1E;AACF,cAAI,QAAQ;AACV,kBAAM,IAAI;AAAA,cACR,6DAA6D,EAAE,IAAI;AAAA,YACrE;AAEF,iBAAO;AAAA,YACL,GAAG;AAAA,YACH,QAAQ,EAAE,UAAU;AAAA,cAClB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,aAAS,4BAA4B;AACnC,aAAO,cAAc,MAAM,CAACA,mBAAkB;AAC5C,cAAMC,UAASD,eAAc,IAAI,CAAC,MAAM;AACtC,cAAI,EAAE,UAAU;AACd,kBAAM,KAAK;AAAA,cACT,GAAG,IAAI,eAAe,EAAE,IAAI;AAAA,cAC5B,EAAE;AAAA,cACF;AAAA,gBACE,aACE,EAAE,OAAO,SAAS,IACd,eAAe,IAAI,OAAO,EAAE,OAAO,KAAK,IAAI,CAAC,KAC7C,eAAe,IAAI,OAAO,EAAE,OACzB,MAAM,GAAG,CAAC,EACV,KAAK,IAAI,CAAC,SAAS,EAAE,OAAO,SAAS,CAAC;AAAA,cACjD;AAAA,cACA;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAEA,kBAAME,cAAa,IAAIC,QAAO;AAAA,cAC5B,GAAG,IAAI,eAAe,EAAE,IAAI;AAAA,cAC5B;AAAA,gBACE,QAAQ;AAAA,gBACR,UAAU,GAAG;AAAA,gBACb,WAAW;AAAA,gBACX,WAAW,OAAO;AAAA,cACpB;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AACA,mBAAO,EAAE,MAAM,GAAG,iBAAiB,IAAI,WAAWD,YAAW;AAAA,UAC/D;AAEA,cAAI,EAAE,OAAO;AACX,kBAAM,MACJ,EAAE,iBAAiB,WAAW,EAAE,MAAM,MAAMH,SAAO,EAAE,KAAK;AAC5D,kBAAM,SAAS,IAAIK,KAAI;AAAA,cACrB,GAAG,IAAI,eAAe,EAAE,IAAI;AAAA,cAC5B;AAAA,gBACE;AAAA,gBACA,QAAQC,KAAI,wBAAwB;AAAA,kBAClC,YAAY;AAAA,oBACV;AAAA,sBACE,SAAS,CAAC,aAAa;AAAA,sBACvB,WAAW,CAAC,GAAG;AAAA,sBACf,YAAY;AAAA,wBACV;AAAA,0BACE,MAAM;AAAA,0BACN,aAAa,CAAC,kBAAkB;AAAA,wBAClC;AAAA,sBACF;AAAA,sBACA,YAAY;AAAA,wBACV;AAAA,0BACE,MAAM;AAAA,0BACN,UAAU;AAAA,0BACV,QAAQ,CAAC,OAAO,GAAG;AAAA,wBACrB;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF,CAAC,EAAE;AAAA,cACL;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AACA,mBAAO,EAAE,MAAM,GAAG,UAAU,KAAK,WAAW,OAAO;AAAA,UACrD;AAEA,cAAI,EAAE,OAAO;AACX,kBAAM,MACJ,EAAE,iBAAiB,QAAQ,EAAE,MAAM,MAAMN,SAAO,EAAE,KAAK;AACzD,kBAAM,SAAS,MAAM;AAAA,cACnB,GAAG,IAAI,eAAe,EAAE,IAAI;AAAA,cAC5B;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AACA,mBAAO,EAAE,MAAM,GAAG,UAAU,KAAK,WAAW,OAAO;AAAA,UACrD;AAAA,QACF,CAAC;AACD,eAAO;AAAA,UACL,QAAAE;AAAA,UACA,kBAAkBA,QACf,OAAO,CAAC,MAAM,EAAG,eAAe,EAChC,IAAI,CAAC,MAAM,EAAG,eAAgB;AAAA,QACnC;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAIK,IAAG;AAAA,QACZ,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQ,OAAO;AAAA,YACf,iBAAiB,OAAO;AAAA,cAAM,CAACL,YAC7BA,QACG,OAAO,CAAC,MAAM,EAAG,eAAe,EAChC,IAAI,CAAC,OAAO;AAAA,gBACX,IAAI,EAAG,KAAK;AAAA,gBACZ,mBAAmB,EAAG,gBAAiB;AAAA,gBACvC,QAAQ,EAAG,KAAK;AAAA,gBAChB,cAAc,EAAG,KAAK;AAAA,gBACtB,cAAc,EAAG,KAAK;AAAA,cACxB,EAAE;AAAA,YACN;AAAA,YACA,QAAQ,OAAO;AAAA,cAAM,CAACA,YACpBA,QACG,OAAO,CAAC,MAAM,EAAG,QAAQ,EACzB,IAAI,CAAC,OAAO;AAAA,gBACX,IAAI,EAAG,KAAK;AAAA,gBACZ,UAAU,EAAG;AAAA,gBACb,QAAQ,EAAG,KAAK;AAAA,gBAChB,cAAc,EAAG,KAAK;AAAA,gBACtB,cAAc,EAAG,KAAK;AAAA,cACxB,EAAE;AAAA,YACN;AAAA,YACA,QAAQ,OAAO;AAAA,cAAM,CAACA,YACpBA,QACG,OAAO,CAAC,MAAM,EAAG,QAAQ,EACzB,IAAI,CAAC,OAAO;AAAA,gBACX,IAAI,EAAG,KAAK;AAAA,gBACZ,UAAU,EAAG;AAAA,gBACb,QAAQ,EAAG,KAAK;AAAA,gBAChB,cAAc,EAAG,KAAK;AAAA,gBACtB,cAAc,EAAG,KAAK;AAAA,cACxB,EAAE;AAAA,YACN;AAAA,UACF;AAAA,UACA;AAAA,YACE,QAAQ;AAAA,YACR,WAAW,OAAO;AAAA,cAAM,CAACA,YACvBA,QAAO,IAAI,CAAC,MAAM,EAAG,SAAS;AAAA,YAChC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,YAAY;AACd,eAAOF,SAAO,KAAK,gBAAgB,EAAE;AAAA,UAAM,CAAC,qBAC1C,iBAAiB,IAAI,CAAC,YAAY,QAAQ,YAAY,CAAC;AAAA,QACzD;AAAA,MACF;AAAA;AAAA;AAAA;AAAA,MAIA,cAAc,KAAK;AAAA,IACrB;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,mBAAmB,eAAeA;;;A5Buf3B,IAAM,SAAN,MAAM,gBAAe,UAAmC;AAAA,EACrD;AAAA,EACA;AAAA,EACA,eAAwB;AAAA,EACxB;AAAA,EAER,YACE,MACA,OAAmB,CAAC,GACpB,OAAiC,CAAC,GAClC;AACA,UAAMS,gBAAc,MAAM,MAAM,IAAI;AACpC,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAEvB,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,WAAK,SAASC,SAAO,IAAI,MAAM;AAC/B;AAAA,IACF;AAEA,UAAM,SAAS;AACf,UAAM,SAAS,gBAAgB;AAC/B,UAAM,eAAeA,SAAO,KAAK,gBAAgB,IAAI;AACrD,UAAM,aAAa,gBAAgB;AAEnC,UAAM,SAAS,aAAa;AAC5B,qBAAiB;AACjB,UAAM,oBAAoB,mBAAmB;AAC7C,UAAM,SAAS,mBAAmB;AAClC,mBAAe;AAMf,SAAK,SAAS,OAAO,IAAI,MAAM,MAAM,MAAM;AAE3C,aAAS,kBAAkB;AACzB,aAAOC,MAAI,CAAC,KAAK,QAAQ,KAAK,MAAM,CAAC,EAAE;AAAA,QAAM,CAAC,CAAC,KAAKC,OAAM,MACxD,QAAQ,OAAO,WAAWA;AAAA,MAC5B;AAAA,IACF;AAEA,aAAS,kBAAkB;AACzB,aAAOF,SAAO,KAAK,UAAU,CAAC,CAAC,EAAE;AAAA,QAAM,CAACG,YACtCA,QAAO,IAAI,CAAC,OAAO;AAAA,UACjB,GAAG;AAAA,UACH,QACE,EAAE,UAAU,EAAE,OAAO,OAAO,CAAC,EAAE,YAAY,IAAI,EAAE,OAAO,MAAM,CAAC;AAAA,UACjE,YACE,EAAE,eAAe,MACb,CAAC,EAAE,MAAM,KAAK,aAAa,CAAC,GAAG,EAAE,CAAC,IAClC,EAAE,WAAW,IAAI,CAAC,OAAO;AAAA,YACvB,GAAG;AAAA,YACH,MAAM;AAAA,cACJ,KAAK;AAAA,cACL,SAAS;AAAA,cACT,WAAW;AAAA,cACX,WAAW;AAAA,YACb,EAAE,EAAE,IAAI;AAAA,UACV,EAAE;AAAA,UACR,OAAO,EAAE,QACL,EAAE,MAAM,IAAI,CAACC,WAASA,OAAK,QAAQ,OAAO,EAAE,CAAC,IAC7C,CAAC,IAAI,GAAG;AAAA,QACd,EAAE;AAAA,MACJ;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,aAAO,IAAIC,IAAG;AAAA,QACZ,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,cAAc;AAAA,UAChB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAOL,SAAO,KAAK,UAAU,EAAE,MAAM,CAAC,eAAe;AACnD,YAAI,CAAC,WAAY;AAEjB,eAAO,IAAIK,IAAG;AAAA,UACZ,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,QAAQ,OAAO;AAAA,cACf,yBAAyB;AAAA,gBACvB,QAAQ;AAAA,cACV;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,UAAI,KAAK,WAAW,sBAAsB,MAAO;AAEjD,aAAO,IAAIA,IAAG;AAAA,QACZ,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQ,OAAO;AAAA,YACf,iBAAiB;AAAA,YACjB,mBAAmB,OAAO,MAAM,CAAC,MAAM,MAAM,QAAQ;AAAA,YACrD,kBAAkB;AAAA,YAClB,uBAAuB,OAAO,MAAM,CAAC,MAAM,MAAM,QAAQ;AAAA,UAC3D;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,aAAOJ,MAAI,CAAC,QAAQ,cAAc,UAAU,CAAC,EAAE;AAAA,QAC7C,CAAC,CAACC,SAAQI,eAAcC,WAAU,MAAM;AACtC,gBAAM,aAAa,CAAC;AACpB,cAAIL,SAAQ;AACV,uBAAW,KAAK;AAAA,cACd,YAAY;AAAA,gBACVA,YAAW,WACP,EAAE,MAAM,KAAK,aAAa,CAAC,GAAG,EAAE,IAChC;AAAA,kBACE,MAAM;AAAA,kBACN,aAAa,CAAC,0BAA0B;AAAA,gBAC1C;AAAA,cACN;AAAA,cACA,SAAS,CAAC,cAAc;AAAA,cACxB,WAAW,CAACM,eAAc,OAAO,GAAG,IAAI;AAAA,YAC1C,CAAC;AAAA,UACH;AACA,cAAIF,eAAc;AAChB,uBAAW,KAAK;AAAA,cACd,QAAQ;AAAA,cACR,YAAY,CAAC,EAAE,MAAM,KAAK,aAAa,CAAC,GAAG,EAAE,CAAC;AAAA,cAC9C,SAAS,CAAC,MAAM;AAAA,cAChB,WAAW,CAAC,OAAO,KAAKE,eAAc,OAAO,GAAG,IAAI;AAAA,cACpD,YAAY;AAAA,gBACV;AAAA,kBACE,MAAM;AAAA,kBACN,UAAU;AAAA,kBACV,QAAQ,CAAC,OAAO;AAAA,gBAClB;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH;AACA,qBAAW;AAAA,YACT,GAAGD,YAAW,IAAI,CAACJ,aAAY;AAAA,cAC7B,QAAQA,QAAO;AAAA,cACf,YAAYA,QAAO;AAAA,cACnB,SAASA,QAAO;AAAA,cAChB,YAAYA,QAAO;AAAA,cACnB,WAAWA,QAAO,MAAM;AAAA,gBAAI,CAACC,WAC3BA,WAAS,KAAK,OAAO,MAAMI,eAAc,OAAO,GAAG,IAAIJ,MAAI;AAAA,cAC7D;AAAA,YACF,EAAE;AAAA,UACJ;AAEA,iBAAO,IAAIC,IAAG;AAAA,YACZ,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI;AAAA,cACP;AAAA,gBACE,QAAQ,OAAO;AAAA,gBACf,QAAQI,KAAI,wBAAwB,EAAE,WAAW,CAAC,EAAE;AAAA,cACtD;AAAA,cACA;AAAA,gBACE;AAAA,gBACA,WAAW;AAAA,cACb;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAOT,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,YAAI,SAAS,MAAO;AAEpB,eAAO,IAAIK,IAAG;AAAA,UACZ,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,QAAQ,OAAO;AAAA,cACf,WAAW;AAAA,gBACT;AAAA,kBACE,gBAAgB,MAAM,gBAAgB,CAAC,GAAG;AAAA,kBAC1C,gBAAgB,MAAM,gBAAgB;AAAA,oBACpC;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA;AAAA,kBACF;AAAA,kBACA,gBAAgB,MAAM,gBAAgB,CAAC,GAAG;AAAA,kBAC1C,eAAe,MAAM;AAAA,kBACrB,eAAe,UAAU,MAAM,UAAU,WAAW;AAAA,gBACtD;AAAA,cACF;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,SAAS;AAClB,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,OAAc,IACZ,MACA,YACA,MACA;AACA,WAAO,IAAI,QAAO,MAAM;AAAA,MACtB,KAAK;AAAA,MACL,QAAQA,IAAG,SAAS,IAAI,GAAG,IAAI,UAAU,YAAY,QAAW,IAAI;AAAA,IACtE,CAAe;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyFO,OAAO,MAA+B;AAC3C,QAAI,KAAK,cAAc;AACrB,YAAM,IAAI;AAAA,QACR,gCAAgC,KAAK,eAAe;AAAA,MACtD;AAAA,IACF;AACA,SAAK,eAAe;AACpB,UAAM,OAAO,KAAK;AAClB,UAAM,OAAO,KAAK;AAElB,WAAO,IAAI;AAAA,MACT,GAAG,IAAI;AAAA,MACP;AAAA,QACE,QAAQ,EAAE,MAAM,KAAK,OAAO,QAAQ,KAAK,KAAK,OAAO,IAAI;AAAA,QACzD,GAAG;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsDO,UACL,YACA,MACA;AACA,SAAK,oBAAoB;AACzB,WAAO,QAAO;AAAA,MACZ,KAAK;AAAA,MACL,KAAK,OAAO;AAAA,MACZ,KAAK,OAAO;AAAA,MACZ;AAAA,MACA;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsDA,OAAc,UACZ,WACA,YACA,MACA;AACA,WAAOL,SAAO,SAAS,EAAE,MAAM,CAACU,eAAc;AAC5C,YAAM,aAAa,eAAeA,UAAS,EAAE;AAC7C,aAAO,KAAK;AAAA,QACV;AAAA,QACA;AAAA,QACAA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,OAAe,mBACb,MACA,YACA,WACA,YACA,OAA6B,CAAC,GAC9B,OAAiC,CAAC,GAClC;AACA,WAAOT,MAAI,CAAC,WAAW,YAAY,IAAI,CAAC,EAAE;AAAA,MACxC,CAAC,CAACS,YAAWC,aAAYC,KAAI,MAAM;AACjC,cAAM,eAAe,KAAK;AAAA,UACxBF;AAAA,UACA,OAAOC,gBAAe,WAAWA,cAAaA,YAAW;AAAA,QAC3D;AAEA,eAAO,IAAI;AAAA,UACT,GAAG,IAAI,aAAa,YAAY;AAAA,UAChC;AAAA,YACE,QAAQ,EAAE,MAAM,YAAY,KAAKD,WAAU;AAAA,YAC3C,YAAAC;AAAA,YACA;AAAA,YACA,GAAGC;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4CO,eACL,UACA,OAA6B,CAAC,GAC9B;AACA,SAAK,oBAAoB;AACzB,WAAO,QAAO;AAAA,MACZ,KAAK;AAAA,MACL,KAAK,OAAO;AAAA,MACZ,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8CA,OAAc,eACZ,WACA,UACA,MACA;AACA,WAAOZ,SAAO,SAAS,EAAE,MAAM,CAACU,eAAc;AAC5C,YAAM,aAAa,eAAeA,UAAS,EAAE;AAC7C,aAAO,KAAK;AAAA,QACV;AAAA,QACA;AAAA,QACAA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,OAAe,gBACb,MACA,YACA,WACA,UACA,OAA6B,CAAC,GAC9B,OAAiC,CAAC,GAClC;AACA,WAAOT,MAAI,CAAC,WAAW,UAAU,IAAI,CAAC,EAAE;AAAA,MACtC,CAAC,CAACS,YAAWG,WAAUD,KAAI,MAAM;AAC/B,cAAM,eAAe,KAAK,kBAAkBF,YAAWG,SAAQ;AAE/D,eAAO,IAAI;AAAA,UACT,GAAG,IAAI,aAAa,YAAY;AAAA,UAChC;AAAA,YACE,QAAQ,EAAE,MAAM,YAAY,KAAKH,WAAU;AAAA,YAC3C,OAAOG;AAAA,YACP;AAAA,YACA,GAAGD;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4CO,eACL,UACA,OAA6B,CAAC,GAC9B;AACA,SAAK,oBAAoB;AACzB,WAAO,QAAO;AAAA,MACZ,KAAK;AAAA,MACL,KAAK,OAAO;AAAA,MACZ,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8CA,OAAc,eACZ,WACA,UACA,MACA;AACA,WAAOZ,SAAO,SAAS,EAAE,MAAM,CAACU,eAAc;AAC5C,YAAM,aAAa,eAAeA,UAAS,EAAE;AAC7C,aAAO,KAAK;AAAA,QACV;AAAA,QACA;AAAA,QACAA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,OAAe,gBACb,MACA,YACA,WACA,UACA,OAA6B,CAAC,GAC9B,OAAiC,CAAC,GAClC;AACA,WAAOT,MAAI,CAAC,WAAW,UAAU,IAAI,CAAC,EAAE;AAAA,MACtC,CAAC,CAACS,YAAWI,WAAUF,KAAI,MAAM;AAC/B,cAAM,eAAe,KAAK,kBAAkBF,YAAWI,SAAQ;AAE/D,eAAO,IAAI;AAAA,UACT,GAAG,IAAI,aAAa,YAAY;AAAA,UAChC;AAAA,YACE,QAAQ,EAAE,MAAM,YAAY,KAAKJ,WAAU;AAAA,YAC3C,OAAOI;AAAA,YACP;AAAA,YACA,GAAGF;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAe,kBAAkB,WAAmB,gBAAwB;AAC1E,WAAO;AAAA,MACL;AAAA,QACE;AAAA,UACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAoBF,EAAE,KAAK,EAAE;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,sBAAsB;AAC5B,QAAI,KAAK;AACP,YAAM,IAAI;AAAA,QACR,4BAA4B,KAAK,eAAe;AAAA,MAClD;AACF,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,MAAM,KAAK;AAAA,MACb;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,MAAM;AAAA,UAChB,WAAW,CAAC,KAAK,KAAKJ,eAAc,KAAK,GAAG,IAAI;AAAA,QAClD,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMT,iBAAe;AAErB,OAAO,eAAeA;;;AiC/nDtB,SAAS,WAAAgB,gBAAe;AACxB,SAAS,gBAAwB;AAGjC,IAAM,mBAAmB,KAAK,MAAM,oBAAI,IAAsB,CAAC;AAExD,IAAM,cAAc,CAAC,WAAmB;AAC7C,QAAM,QAAQ,iBAAiB;AAC/B,QAAM,WAAW,MAAM,IAAI,MAAM;AACjC,MAAI,SAAU,QAAO;AACrB,QAAM,SAASC,SAAQ,UAAU;AACjC,aAAW,OAAO,QAAQ;AACxB,UAAM,QAAQ,OAAO,GAAG;AACxB,WAAO,OAAO,GAAG;AACjB,UAAM,CAAC,QAAQ,IAAI,IAAI,IAAI,MAAM,GAAG;AACpC,QAAI,WAAW,MAAO;AAQtB,QAAI;AACF,aAAO,IAAI,IAAI,KAAK,MAAM,KAAK;AAAA,IACjC,SAAS,GAAG;AACV,aAAO,IAAI,IAAI;AAAA,IACjB;AAAA,EACF;AACA,QAAM,WAAW,IAAI,SAAS,mBAAmB,MAAM,IAAI;AAAA,IACzD,GAAG;AAAA,IACH;AAAA,EACF,CAAC;AACD,QAAM,IAAI,QAAQ,QAAQ;AAC1B,SAAO;AACT;;;AlC5BA,SAAS,cAAAC,aAAY,MAAAC,WAAU;AAkCxB,IAAM,gBAAN,cAA4B,UAAU;AAAA,EAC3C,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,iBAAa;AACb,UAAM,iBAAiB,UAAU;AACjC,UAAM,SAAS,aAAa;AAC5B,UAAM,gBAAgB,oBAAoB;AAC1C,UAAM,eAAe,mBAAmB;AACxC,qBAAiB;AAEjB,aAAS,eAAe;AACtB,UAAI,CAAC,KAAK,OAAO,CAAC,KAAK;AACrB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,IACJ;AAEA,aAAS,YAAY;AACnB,UAAI,KAAK,KAAM,QAAO,KAAK;AAE3B,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,YAAYC,SAAO,KAAK,aAAa,EAAE,MAAM,CAAC,YAAY,QAAQ,CAAC,CAAC;AAAA,UACpE,kBAAkBA,SAAO,KAAK,aAAa,EAAE;AAAA,YAAM,CAAC,YAClD,QAAQ,MAAM,CAAC;AAAA,UACjB;AAAA,UACA,KAAK,KAAK;AAAA,QACZ;AAAA,QACA,EAAE,QAAQ,UAAU,YAAY,WAAW,EAAE;AAAA,MAC/C,EAAE;AAAA,IACJ;AAEA,aAAS,eAAe;AACtB,aAAO,IAAI,OAAO,GAAG,IAAI,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC;AAAA,IACnD;AAEA,aAAS,sBAAsB;AAC7B,aAAO,IAAIC,IAAG;AAAA,QACZ,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ,OAAO;AAAA,UACf,uBAAuB;AAAA,YACrB,UAAU,KAAK;AAAA,YACf,UAAU;AAAA,UACZ;AAAA,QACF;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,SAAS;AAAA,UACT,mBAAmB;AAAA,UACnB,SAAS,KAAK;AAAA,UACd,cAAc;AAAA,YACZ,gBAAgB;AAAA,cACd,iBAAiB;AAAA,YACnB;AAAA,UACF;AAAA,UACA,SAASC,MAAI,CAAC,KAAK,cAAc,KAAK,aAAa,CAAC,EAAE;AAAA,YACpD,CAAC,CAAC,cAAc,aAAa,MAAM;AACjC,oBAAM,UAAU,eAAe,YAAY,SAAS,cAAc;AAAA,gBAChE;AAAA,cACF,CAAC;AACD,qBAAO,QAAQ,SAAS,MACpB,QAAQ,MAAM,GAAG,GAAG,IAAI,QACxB;AAAA,YACN;AAAA,UACF;AAAA,UACA,YAAY;AAAA,UACZ,mBAAmB;AAAA,YACjB,mBAAmB;AAAA,YACnB,kBAAkB;AAAA,UACpB;AAAA,UACA,sBAAsB;AAAA,YACpB,gBAAgB,CAAC,OAAO,QAAQ,SAAS;AAAA,YACzC,gBAAgB;AAAA,YAChB,sBAAsB;AAAA,YACtB,eAAe,CAAC,OAAO,MAAM;AAAA,YAC7B,iBAAiB;AAAA,cACf,SAAS,EAAE,SAAS,OAAO;AAAA,cAC3B,aAAa;AAAA,YACf;AAAA,YACA,sBAAsB;AAAA,cACpB;AAAA,gBACE,WAAW;AAAA,gBACX,aAAa,IAAID,YAAW;AAAA,kBAC1B,GAAG,IAAI;AAAA,kBACP;AAAA,oBACE,SAAS;AAAA,oBACT,MAAM;AAAA;AAAA;AAAA,IAGtB,iCAAiC;AAAA;AAAA;AAAA,kBAGnB;AAAA,gBACF,EAAE;AAAA,cACJ;AAAA,YACF;AAAA,UACF;AAAA,UACA,SAAS;AAAA,YACP;AAAA,cACE,UAAU;AAAA,cACV,YAAY,cAAc;AAAA,cAC1B,oBAAoB;AAAA,gBAClB,UAAU;AAAA,gBACV,WAAW;AAAA,gBACX,sBAAsB;AAAA,gBACtB,oBAAoB,CAAC,SAAS;AAAA,cAChC;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,KAAK,IAAK;AAEf,MAAAC,MAAI,CAAC,KAAK,KAAK,KAAK,aAAa,CAAC,EAAE,MAAM,CAAC,CAACC,MAAK,aAAa,MAAM;AAClE,mBAAW,cAAc,eAAe;AACtC,UAAAA,KAAI;AAAA,YACF;AAAA,YACA;AAAA,cACE,MAAM;AAAA,cACN,WAAW,aAAa;AAAA,cACxB,WAAW,aAAa;AAAA,YAC1B;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAEA,IAAML,iBAAe;AAErB,cAAc,eAAeA;;;AmChM7B,SAA+C,WAAAM,gBAAe;AAavD,IAAM,+BAAN,cAA2CC,SAAQ,SAAS;AAAA,EACjE,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,kCAAkC;AAAA,MACnD,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;AC1BA,SAA+C,WAAAC,gBAAe;AAWvD,IAAM,mBAAN,cAA+BC,SAAQ,SAAS;AAAA,EACrD,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,sBAAsB;AAAA,MACvC,GAAG,IAAI;AAAA,MACP,EAAE,GAAG,MAAM,QAAQ,OAAU;AAAA,MAC7B;AAAA,IACF;AAAA,EACF;AACF;;;ACYA,SAAmC,UAAAC,gBAAc;AAGjD,SAAS,WAAAC,gBAAe;AAsDjB,SAAS,IAAI,OAAgB,CAAC,GAAG;AACtC,SAAO;AAAA,IACL,UAAU;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,EACF;AASA,WAAS,YACP,YACA,QACA,MACA;AACA,WAAO,CAAC,KAAK,MAAM,EAAE;AAAA,MAAI,CAAC,SACxB;AAAA,QACE;AAAA,QACA;AAAA,UACE;AAAA,UACA,MAAM,OAAO;AAAA,UACb,SAAS;AAAA,YACP;AAAA,cACE,MAAM,OAAO;AAAA,cACb,QAAQ,OAAO;AAAA,cACf,sBAAsB;AAAA,YACxB;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,WAAS,UACP,YACA,YACA,MACA;AAEA,WAAO;AAAA,EACT;AASA,WAAS,aACP,YACA,QACA,MACA;AACA,WAAO;AAAA,MACL;AAAA,MACA;AAAA,QACE,MAAM,OAAO;AAAA,QACb,MAAM,OAAO;AAAA,QACb,KAAK;AAAA,QACL,SAAS,CAAC,OAAO,KAAK;AAAA,MACxB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,WAAS,cACP,YACA,SACA,MACA;AACA,WAAOC,SAAO,OAAO,EAAE,MAAM,CAACC,aAAY;AACxC,YAAM,aAAa,YAAYA,SAAQ,IAAI;AAC3C,YAAM,SAAS,WAAW;AAC1B,YAAM,YAAYC,cAAa;AAC/B,aAAO;AAEP,eAAS,aAAa;AACpB,YAAI,KAAK,MAAM;AACb,iBAAOF,SAAO,KAAK,IAAI,EAAE,MAAM,OAAOG,YAAW;AAC/C,kBAAM,OAAO,MAAMC,SAAQ,QAAQ,EAAE,QAAAD,QAAO,CAAC;AAC7C,gBAAI,CAACF,SAAQ,KAAK,QAAQ,OAAO,EAAE,EAAE,SAAS,KAAK,IAAI,GAAG;AACxD,oBAAM,IAAI;AAAA,gBACR,mBAAmBA,SAAQ,IAAI,+EAA+E,KAAK,IAAI,MAAME,OAAM;AAAA,cACrI;AAAA,YACF;AACA,mBAAOA;AAAA,UACT,CAAC;AAAA,QACH;AAEA,eAAO,IAAI;AAAA,UACT,GAAG,UAAU,GAAGF,SAAQ,IAAI,aAAa,UAAU;AAAA,UACnD;AAAA,YACE,QAAQD,SAAOC,SAAQ,IAAK,EAAE;AAAA,cAAM,CAAC,SACnC,KAAK,QAAQ,OAAO,EAAE;AAAA,YACxB;AAAA,UACF;AAAA,UACA;AAAA,QACF,EAAE;AAAA,MACJ;AAEA,eAASC,gBAAe;AACtB,eAAO,IAAIE,SAAQ;AAAA,UACjB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,UAAU,GAAGH,SAAQ,IAAI,SAAS,UAAU;AAAA,YAC/C;AAAA,cACE;AAAA,cACA,gBAAgB,KAAK;AAAA,cACrB,GAAGA;AAAA,YACL;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;;;AvCzMA,SAAS,cAAAI,mBAAkB;AA0QpB,IAAM,MAAN,MAAM,aAAY,UAAU;AAAA,EACzB;AAAA,EACA;AAAA,EAER,YAAY,MAAc,MAAe,MAAiC;AACxE,UAAM,YAAY,MAAM,MAAM,IAAI;AAClC,UAAM,SAAS;AAEf,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,eAAeC,SAAO,IAAI,YAAY;AAC3C,WAAK,aAAa,IAAI,aAAa,QAAQ;AAAA,QAAM,CAAC,YAChD,SAAS,SAAS,WAAW,QAAQ,CAAC,CAAC,KAAK;AAAA,MAC9C;AACA;AAAA,IACF;AAEA,UAAM,SAAS,gBAAgB;AAE/B,UAAM,iBAAiB,UAAU;AACjC,UAAM,eAAe,mBAAmB;AACxC,UAAM,SAAS,mCAAmC;AAClD,qBAAiB;AACjB,oBAAgB;AAEhB,SAAK,eAAe,OAAO,OAAO,MAAM,MAAM,YAAY;AAC1D,SAAK,aAAa,QAAQ,OACtBC,uBAAsB,OAAO,IAAI,KACjCD,SAAO,MAAS;AAEpB,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAME,gBAAeC,YAAW,aAAa;AAAA,QAC3C,GAAG,IAAI;AAAA,QACP,IAAI;AAAA,QACJ;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAEA,aAAO,EAAE,cAAAD,cAAa;AAAA,IACxB;AAEA,aAAS,kBAAkB;AACzB,UAAI,CAAC,KAAK,OAAQ;AAElB,aAAOF,SAAO,KAAK,MAAM,EAAE,MAAM,CAACI,YAAW;AAC3C,cAAM,OAAO,OAAOA,YAAW,WAAW,EAAE,MAAMA,QAAO,IAAIA;AAG7D,YAAI,CAAC,KAAK,KAAM,OAAM,IAAI,MAAM,4BAA4B;AAC5D,YAAI,KAAK,QAAQ,SAAS,CAAC,KAAK;AAC9B,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,eAAO;AAAA,UACL,MAAM,KAAK;AAAA,UACX,SAAS,KAAK,WAAW,CAAC;AAAA,UAC1B,WAAW,KAAK,aAAa,CAAC;AAAA,UAC9B,KAAK,KAAK,QAAQ,QAAQ,SAAY,KAAK,OAAO,IAAO;AAAA,UACzD,MAAM,KAAK;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,YAAY;AACnB,UAAI,CAAC,OAAQ,QAAOJ,SAAO,MAAS;AAEpC,aAAO,OAAO,KAAK,MAAM,CAAC,SAAS;AACjC,YAAI,KAAM,QAAO,OAAO;AAIxB,eAAO,IAAI;AAAA,UACT,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAY,OAAO;AAAA,YACnB,kBAAkB,OAAO;AAAA,YACzB,KAAK,OAAO,IAAI,MAAM,CAACK,SAAQA,IAAI;AAAA,UACrC;AAAA,UACA,EAAE,QAAQ,UAAU,YAAY,WAAW,EAAE;AAAA,QAC/C,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAIF,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,KAAK;AAAA,YACd,SAAS;AAAA,YACT,SAAS,KAAK;AAAA,YACd,cAAc,KAAK;AAAA,YACnB,sBAAsB,KAAK;AAAA,YAC3B,uBAAuB,KAAK;AAAA,YAC5B,mBAAmB,KAAK;AAAA,YACxB,sBAAsB,KAAK;AAAA,YAC3B,cAAc;AAAA,cACZ,gBAAgB;AAAA,gBACd,iBAAiB;AAAA,cACnB;AAAA,YACF;AAAA,YACA,SAAS,SACLH,SAAO,MAAM,EAAE,MAAM,CAACI,YAAW;AAAA,cAC/BA,QAAO;AAAA,cACP,GAAGA,QAAO;AAAA,YACZ,CAAC,IACD,CAAC;AAAA,YACL,mBAAmB,eAAe;AAAA,cAAM,CAAC,QACvC,MACI;AAAA,gBACE,mBAAmB;AAAA,gBACnB,kBAAkB;AAAA,gBAClB,wBAAwB;AAAA,cAC1B,IACA;AAAA,gBACE,8BAA8B;AAAA,cAChC;AAAA,YACN;AAAA,YACA,mBAAmB;AAAA,YACnB,MAAM,KAAK;AAAA,UACb;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,qCAAqC;AAC5C,aAAOJ,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,eAAO,IAAI;AAAA,UACT,GAAG,IAAI;AAAA,UACP;AAAA,YACE,gBAAgB,aAAa;AAAA,YAC7B,MAAM,aAAa;AAAA,YACnB,MAAM,QAAQ;AAAA,UAChB;AAAA,UACA,EAAE,QAAQ,eAAe,OAAO,SAAY,CAAC,GAAG,EAAE;AAAA,QACpD;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,OAAQ;AAEb,aAAO,MAAM,CAACI,YAAW;AACvB,YAAI,CAACA,QAAO,IAAK;AAEjB,cAAM,WAAqB,CAAC;AAC5B,mBAAW,CAAC,GAAG,UAAU,KAAK;AAAA,UAC5BA,QAAO;AAAA,UACP,GAAGA,QAAO;AAAA,QACZ,EAAE,QAAQ,GAAG;AAgBX,gBAAM,MAAM,YAAY,UAAU;AAClC,gBAAM,aAAa,SAAS,SAAS,GAAG,IAAI,GAAG,IAAI,GAAG,CAAC,KAAK;AAC5D,mBAAS,KAAK,GAAG;AAEjB,UAAAA,QAAO,IAAI;AAAA,YACT;AAAA,YACA;AAAA,cACE,MAAM;AAAA,cACN,WAAW,aAAa;AAAA,cACxB,WAAW,aAAa;AAAA,YAC1B;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,kBAAwB;AAC/B,UAAI,CAAC,OAAQ;AAEb,MAAAE,MAAI,CAAC,OAAO,MAAM,OAAO,WAAW,OAAO,GAAG,CAAC,EAAE;AAAA,QAC/C,CAAC,CAAC,MAAM,WAAWD,IAAG,MAAM;AAC1B,cAAI,CAAC,UAAU,OAAQ;AAEvB,cAAI;AAAA,YACF,GAAG,IAAI;AAAA,YACP;AAAA,cACE,eAAe;AAAA,cACf,cAAc,OAAO;AAAA,cACrB,MAAM,OAAO,OAAO,KAAK,MAAM,CAACE,UAASA,KAAK,IAAI;AAAA,cAClD,KAAKF,OAAM,OAAO,IAAI,MAAM,CAACA,SAAQA,IAAI,IAAI;AAAA,YAC/C;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAOJ,uBAAsB,KAAK,aAAa,UAAU;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,YAAY;AACrB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,cAAc,KAAK;AAAA,IACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAc,IACZ,MACA,gBACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,aAAa;AAEnB,IAAI,eAAe;;;AwCniBnB,SAAuC,WAAAO,gBAAe;AAkB/C,IAAM,cAAN,cAA0BC,SAAQ,SAAS;AAAA,EAChD,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,iBAAiB;AAAA,MAClC,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;AC/BA,SAAS,OAAAC,OAA+B,UAAAC,gBAAsB;AAI9D,SAAS,cAAAC,aAAY,OAAAC,MAAK,UAAAC,eAAc;AA4NjC,IAAM,OAAN,cAAmB,UAAU;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,MAAc,MAAgB,MAAiC;AACzE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,SAAS,kBAAkB;AACjC,UAAM,QAAQC,SAAO,KAAK,SAAS,CAAC,CAAC;AACrC,qBAAiB;AACjB,UAAM,UAAUA,SAAO,KAAK,WAAW,IAAI;AAC3C,UAAM,OAAOC,YAAW;AACxB,UAAM,KAAK,eAAe;AAC1B,UAAM,OAAO,WAAW;AACxB,UAAM,SAAS,aAAa;AAE5B,SAAK,OAAO;AACZ,SAAK,KAAK;AACV,SAAK,OAAO;AACZ,SAAK,SAAS;AAEd,aAAS,oBAAoB;AAC3B,UAAI,KAAK,OAAO,KAAK;AACnB,cAAM,IAAI;AAAA,UACR,wDAAwD,IAAI;AAAA,QAC9D;AAEF,YAAM,QAAQ,KAAK,YAAY,KAAK;AACpC,aAAO,QAAQD,SAAO,KAAK,IAAI;AAAA,IACjC;AAEA,aAAS,mBAAmB;AAC1B,UAAI,UAAU,KAAK;AACjB,cAAM,IAAI;AAAA,UACR,yDAAyD,IAAI;AAAA,QAC/D;AAAA,IACJ;AAEA,aAASC,cAAa;AACpB,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,oBAAoB,KAAK;AAAA,YACzB,OAAO,QAAQ,MAAM,CAAC,MAAO,IAAI,YAAY,UAAW;AAAA,UAC1D;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,UAAI,CAAC,OAAQ;AAEb,YAAMC,MAAK,OAAO;AAAA,QAAM,CAACC,YACvB,gBAAgB,GAAG,IAAI,WAAWA,SAAQ,CAAC,GAAG,QAAW;AAAA,UACvD;AAAA,QACF,CAAC;AAAA,MACH;AAEA,UAAIC,QAAO;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAUF,IAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAW,KAAK;AAAA,QAClB;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAEA,aAAOA;AAAA,IACT;AAEA,aAAS,aAAa;AACpB,UAAI,CAAC,KAAK,KAAM;AAEhB,aAAO,IAAIG,KAAI;AAAA,QACb,GAAG,IAAI;AAAA,QACP;AAAA,UACE,kBAAkBA,KAAI,6BAA6B;AAAA,YACjD,SAAS;AAAA,UACX,CAAC;AAAA,UACD,gBAAgB;AAAA,YACd;AAAA,cACE,MAAM;AAAA,cACN,QAAQA,KAAI,wBAAwB;AAAA,gBAClC,YAAY;AAAA,kBACV;AAAA,oBACE,SAAS,CAAC,aAAa;AAAA,oBACvB,WAAW,CAAC,KAAK,KAAK,MAAM,eAAe,GAAG;AAAA,kBAChD;AAAA,kBACA;AAAA,oBACE,SAAS,CAAC,cAAc;AAAA,oBACxB,WAAW;AAAA,sBACT,KAAK,KAAK,MAAM,cAAc;AAAA,sBAC9B,KAAK,KAAK,MAAM,SAAS;AAAA,oBAC3B;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,CAAC,EAAE;AAAA,YACL;AAAA,UACF;AAAA,QACF;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,aAAO,IAAIJ,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP,KACI;AAAA,YACE,KAAK,GAAG;AAAA,YACR,MAAM,KAAK;AAAA,YACX,OAAO,MAAM,MAAM,CAACK,WAAU,KAAK,UAAUA,MAAK,CAAC;AAAA,UACrD,IACA;AAAA,YACE,KAAK,KAAK,KAAM;AAAA,YAChB,MAAM,KAAK;AAAA,YACX,WAAW;AAAA,cACT,YAAY;AAAA,cACZ,mBAAmB,KAAK,KAAM,MAAM,eAAe;AAAA,cACnD,sBAAsB;AAAA,gBACpB,SAAS,KAAK,KAAM;AAAA,gBACpB,gBAAgB,KAAK,KAAM;AAAA,gBAC3B,gBAAgB,KAAK,KAAM;AAAA,cAC7B;AAAA,YACF;AAAA,YACA,SAAS,KAAM;AAAA,YACf,OAAOC,MAAI,CAAC,OAAO,KAAK,KAAM,UAAU,CAAC,EAAE;AAAA,cACzC,CAAC,CAACD,QAAO,UAAU,MAAM;AACvB,uBAAO,KAAK,UAAU;AAAA,kBACpB,oBAAoB,WAAW,IAAI,CAACE,WAAU;AAAA,oBAC5C,MAAAA;AAAA,oBACA,aAAa;AAAA,sBACX;AAAA,wBACE,MAAM;AAAA,wBACN,OAAO,KAAK,UAAUF,MAAK;AAAA,sBAC7B;AAAA,oBACF;AAAA,kBACF,EAAE;AAAA,gBACJ,CAAC;AAAA,cACH;AAAA,YACF;AAAA,UACF;AAAA,UACJ,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA,MAKL,IAAI,MAAM;AACR,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR,gCAAgC,KAAK,IAAI;AAAA,UAC3C;AACF,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,IAAI,WAAW;AACb,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR,gCAAgC,KAAK,IAAI;AAAA,UAC3C;AACF,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA,MAIX,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AACF;AAEA,IAAMR,iBAAe;AAErB,KAAK,eAAeA;;;ACxapB,OAAOW,WAAU;AAuDV,SAAS,eAAe,UAAkB,cAAsB;AACrE,QAAM,MACJ,SAAS,SAAS,mCAAmC,KACrD,SAAS,SAAS,wCAAwC,IACtD,UACAA,MAAK,QAAQ,QAAQ;AAC3B,QAAM,aAAa;AAAA,IACjB,CAAC,MAAM,GAAG,EAAE,MAAM,cAAc,QAAQ,KAAK;AAAA,IAC7C,CAAC,MAAM,GAAG,EAAE,MAAM,aAAa,QAAQ,KAAK;AAAA,IAC5C,CAAC,OAAO,GAAG,EAAE,MAAM,aAAa,QAAQ,KAAK;AAAA,IAC7C,CAAC,QAAQ,GAAG,EAAE,MAAM,yBAAyB,QAAQ,KAAK;AAAA,IAC1D,CAAC,MAAM,GAAG,EAAE,MAAM,YAAY,QAAQ,KAAK;AAAA,IAC3C,CAAC,KAAK,GAAG,EAAE,MAAM,mBAAmB,QAAQ,KAAK;AAAA,IACjD,CAAC,MAAM,GAAG,EAAE,MAAM,mBAAmB,QAAQ,KAAK;AAAA,IAClD,CAAC,OAAO,GAAG,EAAE,MAAM,cAAc,QAAQ,MAAM;AAAA,IAC/C,CAAC,OAAO,GAAG,EAAE,MAAM,cAAc,QAAQ,MAAM;AAAA,IAC/C,CAAC,MAAM,GAAG,EAAE,MAAM,aAAa,QAAQ,MAAM;AAAA,IAC7C,CAAC,OAAO,GAAG,EAAE,MAAM,cAAc,QAAQ,MAAM;AAAA,IAC/C,CAAC,MAAM,GAAG,EAAE,MAAM,cAAc,QAAQ,MAAM;AAAA,IAC9C,CAAC,MAAM,GAAG,EAAE,MAAM,aAAa,QAAQ,MAAM;AAAA,IAC7C,CAAC,MAAM,GAAG,EAAE,MAAM,iBAAiB,QAAQ,KAAK;AAAA,IAChD,CAAC,MAAM,GAAG,EAAE,MAAM,aAAa,QAAQ,MAAM;AAAA,IAC7C,CAAC,OAAO,GAAG,EAAE,MAAM,cAAc,QAAQ,MAAM;AAAA,IAC/C,CAAC,OAAO,GAAG,EAAE,MAAM,cAAc,QAAQ,MAAM;AAAA,IAC/C,CAAC,MAAM,GAAG,EAAE,MAAM,4BAA4B,QAAQ,MAAM;AAAA,IAC5D,CAAC,MAAM,GAAG,EAAE,MAAM,iCAAiC,QAAQ,MAAM;AAAA,IACjE,CAAC,MAAM,GAAG,EAAE,MAAM,YAAY,QAAQ,MAAM;AAAA,IAC5C,CAAC,MAAM,GAAG,EAAE,MAAM,YAAY,QAAQ,MAAM;AAAA,IAC5C,CAAC,OAAO,GAAG,EAAE,MAAM,aAAa,QAAQ,MAAM;AAAA,IAC9C,CAAC,QAAQ,GAAG,EAAE,MAAM,cAAc,QAAQ,MAAM;AAAA,IAChD,CAAC,OAAO,GAAG,EAAE,MAAM,oBAAoB,QAAQ,KAAK;AAAA,IACpD,CAAC,SAAS,GAAG,EAAE,MAAM,uBAAuB,QAAQ,KAAK;AAAA,IACzD,CAAC,MAAM,GAAG,EAAE,MAAM,mBAAmB,QAAQ,KAAK;AAAA,IAClD,CAAC,MAAM,GAAG,EAAE,MAAM,mBAAmB,QAAQ,MAAM;AAAA,IACnD,CAAC,MAAM,GAAG,EAAE,MAAM,mBAAmB,QAAQ,MAAM;AAAA,IACnD,CAAC,OAAO,GAAG,EAAE,MAAM,oBAAoB,QAAQ,MAAM;AAAA,IACrD,CAAC,cAAc,GAAG,EAAE,MAAM,6BAA6B,QAAQ,KAAK;AAAA,EACtE;AACA,QAAM,gBAAgB,WAAW,GAA8B;AAC/D,QAAM,OAAO,eAAe,QAAQ;AACpC,QAAM,UACJ,eAAe,UAAU,iBAAiB,SACtC,YAAY,YAAY,KACxB;AACN,SAAO,GAAG,IAAI,GAAG,OAAO;AAC1B;;;ACpGA,OAAOC,WAAU;AACjB,OAAOC,SAAQ;AACf,SAA2B,OAAAC,OAAK,UAAAC,gBAAc;;;ACF9C,SAAS,OAAAC,aAAkC;;;ACApC,IAAM,YAAN,MAAgB;AAAA,EAIrB,YAAoB,KAAa;AAAb;AAClB,SAAK,UAAU;AACf,SAAK,QAAQ,CAAC;AAAA,EAChB;AAAA,EANQ;AAAA,EACA;AAAA,EAOR,MAAa,QAAQ,MAA6B;AAChD,QAAI,KAAK,UAAU,KAAK,KAAK;AAC3B,WAAK;AACL,aAAO,QAAQ,QAAQ;AAAA,IACzB;AAEA,WAAO,IAAI,QAAc,CAAC,YAAY;AACpC,WAAK,MAAM,KAAK,OAAO;AAAA,IACzB,CAAC;AAAA,EACH;AAAA,EAEO,UAAgB;AACrB,QAAI,KAAK,MAAM,SAAS,GAAG;AACzB,YAAM,OAAO,KAAK,MAAM,MAAM;AAC9B,aAAO;AACP;AAAA,IACF;AACA,SAAK;AAAA,EACP;AACF;;;AD1BA,SAAS,aAAa;AAEtB,IAAM,UAAU,IAAI;AAAA,EAClB,SAAS,QAAQ,IAAI,8BAA8B,GAAG;AACxD;AAEO,SAAS,YACd,MACA,MACA,MACA;AAEA,SAAOC,MAAI,CAAC,IAAI,CAAC,EAAE,MAAM,OAAO,CAACC,KAAI,MAAM;AACzC,UAAM,QAAQ,QAAQ,IAAI;AAE1B,QAAI;AAEJ,UAAM,UAAU,IAAI,MAAM,QAAQ,MAAMA,OAAM,IAAI;AAClD,aAAS,QAAQ;AAIjB,QAAI,mBAAK,YAAY,QAAQ;AAC3B,eAAS,MAAM;AAAA,QACb;AAAA,UACE,SAASA,MAAK;AAAA,UACd,KAAKA,MAAK;AAAA,UACV,aAAaA,MAAK;AAAA,QACpB;AAAA,QACA;AAAA,MACF,EAAE;AAAA,IACJ;AAEA,WAAO,OAAO,MAAM,MAAM;AACxB,cAAQ,QAAQ;AAChB,aAAO;AAAA,IACT,CAAC;AAAA,EACH,CAAC;AACH;;;ADtBO,SAAS,SACd,QACA,MACA,MACA,UACA,cACA;AACA,SAAOC,MAAI;AAAA,IACT;AAAA,IACA,gBAAgB,KAAK;AAAA,IACrB,KAAK;AAAA,IACL,KAAK;AAAA,EACP,CAAC,EAAE,MAAM,CAAC,CAACC,WAAU,aAAa,OAAO,WAAW,MAAM;AACxD,UAAM,MAAM,oBAAoB;AAChC,UAAMC,UAAS,SAAS;AACxB,WAAOA,QAAO,GAAG,MAAM,MAAMD,SAAQ;AAErC,aAAS,sBAAsB;AAC7B,UAAI,YAAa,QAAO;AAGxB,UAAI,CAAC,aAAa;AAChB,YAAI,CAACE,IAAG,WAAWC,MAAK,KAAKH,WAAU,cAAc,CAAC,GAAG;AACvD,gBAAM,IAAI,aAAa,6BAA6BA,SAAQ,IAAI;AAAA,QAClE;AACA,cAAM,cAAc,KAAK;AAAA,UACvBE,IAAG,aAAaC,MAAK,KAAKH,WAAU,cAAc,CAAC,EAAE,SAAS;AAAA,QAChE;AACA,YAAI,CAAC,YAAY,WAAW,CAAC,YAAY,QAAQ,OAAO;AACtD,gBAAM,IAAI;AAAA,YACR,mDAAmDA,SAAQ;AAAA,UAC7D;AAAA,QACF;AAAA,MACF;AAEA,UACEE,IAAG,WAAWC,MAAK,KAAKH,WAAU,WAAW,CAAC,KAC9CE,IAAG,WAAWC,MAAK,KAAK,mBAAK,MAAM,MAAM,WAAW,CAAC;AAErD,eAAO;AACT,UACED,IAAG,WAAWC,MAAK,KAAKH,WAAU,gBAAgB,CAAC,KACnDE,IAAG,WAAWC,MAAK,KAAK,mBAAK,MAAM,MAAM,gBAAgB,CAAC;AAE1D,eAAO;AACT,UACED,IAAG,WAAWC,MAAK,KAAKH,WAAU,WAAW,CAAC,KAC9CE,IAAG,WAAWC,MAAK,KAAK,mBAAK,MAAM,MAAM,WAAW,CAAC,KACrDD,IAAG,WAAWC,MAAK,KAAKH,WAAU,UAAU,CAAC,KAC7CE,IAAG,WAAWC,MAAK,KAAK,mBAAK,MAAM,MAAM,UAAU,CAAC;AAEpD,eAAO;AAET,aAAO;AAAA,IACT;AAEA,aAAS,WAAW;AAElB,YAAM,WAAW,KAAK,MAAM,SAAS,CAAC,CAAC;AACvC,YAAM,WAAWC,SAAO,QAAQ,EAAE,MAAM,CAACC,cAAa;AACpD,cAAM,OAA+B;AAAA,UACnC,kBAAkB,KAAK,UAAU;AAAA,YAC/B,MAAM,mBAAK;AAAA,YACX,OAAO,mBAAK;AAAA,UACd,CAAC;AAAA,QACH;AACA,mBAAW,SAASA,WAAU;AAC5B,eAAK,gBAAgB,MAAM,IAAI,EAAE,IAAI,KAAK,UAAU,MAAM,UAAU;AAAA,QACtE;AACA,eAAO;AAAA,MACT,CAAC;AAGD,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,KAAKF,MAAK,KAAK,mBAAK,MAAM,MAAMH,SAAQ;AAAA,UACxC,aAAa,SAAS,MAAM,CAACM,eAAc;AAAA,YACzC,KAAK;AAAA,YACL,GAAG,QAAQ;AAAA,YACX,GAAG;AAAA,YACH,GAAGA;AAAA,UACL,EAAE;AAAA,UACF,UAAU,CAAC,KAAK,IAAI,EAAE,SAAS,CAAC;AAAA,QAClC;AAAA,QACA;AAAA,UACE;AAAA,UACA,eAAe,QAAQ,IAAI,OAAO,CAAC,GAAG,IAAI;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAAA,EACF,CAAC;AACH;;;A5ClFA,SAAS,cAAAC,aAAY,mBAAAC,kBAAiB,UAAAC,SAAQ,UAAAC,eAAc;;;A+C3BrD,IAAM,kBAAkB;AAaxB,SAASC,UACd,KACA,IACA;AACA,QAAM,IAAI;AAAA,IACR;AAAA,MACE;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,KAAK,IAAI;AAAA,EACb;AACF;;;AC/BA,SAAuC,WAAAC,gBAAe;AAU/C,IAAM,2BAAN,cAAuCC,SAAQ,SAAS;AAAA,EAC7D,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,8BAA8B;AAAA,MAC/C,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;ACvBA,SAAS,qBAAqB;AAI9B,IAAM,aAAa;AAAA,EACjB,+BAA+B,CAAC,cAAc,YAAY;AAC5D;AACA,IAAM,SAAyC,CAAC;AAEzC,IAAM,cACX;AAEK,SAAS,SAAS,MAA+B;AACtD,MAAI,OAAO,IAAI,EAAG,QAAO,OAAO,IAAI;AAEpC,QAAM,QAAQ,cAAc;AAAA,IAC1B;AAAA,MACE,aAAa,WAAW,IAAI,EAAE,CAAC;AAAA,MAC/B,WAAW,WAAW,IAAI,EAAE,CAAC;AAAA,IAC/B;AAAA,IACA;AAAA,MACE,UAAU,YAAY,WAAW;AAAA,IACnC;AAAA,EACF;AAEA,SAAO,IAAI,IAAI,MAAM;AACrB,SAAO,MAAM;AACf;;;AC3BA,OAAOC,WAAU;AAEV,SAAS,QAAQ,GAAW;AACjC,SAAO,EAAE,MAAMA,MAAK,GAAG,EAAE,KAAKA,MAAK,MAAM,GAAG;AAC9C;;;AlD6CA,IAAM,mBAAmB;AAAA,EACvB,cAAc,EAAE,KAAK,UAAU,KAAK,QAAQ;AAAA;AAAA,EAC5C,aAAa,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAC3C,kBAAkB,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAChD,kBAAkB,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA;AAAA,EAC/C,kBAAkB,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAChD,kBAAkB,EAAE,KAAK,QAAQ,KAAK,SAAS;AAAA;AAAA,EAC/C,kBAAkB,EAAE,KAAK,UAAU,KAAK,SAAS;AAAA;AAAA,EACjD,kBAAkB,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAChD,kBAAkB,EAAE,KAAK,UAAU,KAAK,SAAS;AAAA;AAAA,EACjD,kBAAkB,EAAE,KAAK,OAAO,KAAK,SAAS;AAAA;AAAA,EAC9C,kBAAkB,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAChD,cAAc,EAAE,KAAK,QAAQ,KAAK,QAAQ;AAAA;AAAA,EAC1C,cAAc,EAAE,KAAK,QAAQ,KAAK,QAAQ;AAAA;AAAA,EAC1C,gBAAgB,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAC9C,aAAa,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA;AAAA,EAC5C,cAAc,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAC5C,kBAAkB,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAChD,gBAAgB,EAAE,KAAK,SAAS,KAAK,OAAO;AAAA;AAAA,EAC5C,gBAAgB,EAAE,KAAK,SAAS,KAAK,OAAO;AAAA;AAAA,EAC5C,cAAc,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA;AAAA,EAC3C,cAAc,EAAE,KAAK,SAAS,KAAK,KAAK;AAAA;AAAA,EACxC,cAAc,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA;AAAA,EAC3C,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA;AAAA,EAC1C,aAAa,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA;AAAA,EAC1C,aAAa,EAAE,KAAK,SAAS,KAAK,OAAO;AAAA;AAAA,EACzC,gBAAgB,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA;AAAA,EAC7C,gBAAgB,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA;AAAA,EAC7C,cAAc,EAAE,KAAK,SAAS,KAAK,QAAQ;AAAA;AAAA,EAC3C,gBAAgB,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAC9C,aAAa,EAAE,KAAK,UAAU,KAAK,SAAS;AAAA;AAAA,EAC5C,aAAa,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAC3C,aAAa,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAC3C,iBAAiB,EAAE,KAAK,SAAS,KAAK,SAAS;AAAA;AAAA,EAC/C,iBAAiB,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA;AAAA,EAChD,aAAa,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA;AAAA,EAC5C,aAAa,EAAE,KAAK,SAAS,KAAK,UAAU;AAAA;AAC9C;AAyiBO,IAAe,UAAf,cAA+B,UAAmC;AAAA,EAC/D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAaR,YACE,MACA,MACA,OAAoB,CAAC,GACrB,OAAiC,CAAC,GAClC;AACA,UAAM,MAAM,MAAM,MAAM,IAAI;AAC5B,UAAM,OAAO;AAEb,4BAAwB;AACxB,UAAM,UAAU,iBAAiB;AACjC,UAAM,QAAQ,eAAe;AAC7B,UAAM,OAAO,cAAc;AAC3B,UAAM,gBAAgB,uBAAuB;AAC7C,UAAM,eAAe,KAAK,sBAAsB,IAAI;AACpD,UAAM,WAAW,QAAQ,MAAM,MAAM,kBAAkB,CAAC;AACxD,UAAM,MAAM,aAAa;AACzB,UAAM,QAAQC,SAAO,KAAK,MAAM,EAAE,MAAM,CAAC,WAAW,QAAQ,SAAS,KAAK;AAE1E,QAAI,IAAI,SAAS;AACf,YAAMC,UAAS,gBAAgB;AAC/B,WAAK,SAAS,IAAI;AAClB,WAAK,gBAAgB;AAAA,QACnB,WAAW;AAAA,UACT,MAAM;AAAA,UACN,MAAM;AAAA,UACN,QAAQA,QAAO;AAAA,QACjB;AAAA,QACA,MAAM;AAAA,UACJ,GAAG,IAAI;AAAA,UACP,KAAK,EAAE,MAAMA,QAAO,MAAM,KAAK,IAAI;AAAA,QACrC;AAAA,MACF,CAAC;AACD;AAAA,IACF;AAEA,UAAM,aAAa;AAAA,MACjB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,gBAAgB;AAAA,IAClB;AACA,UAAM,SAAS,eAAe;AAC9B,UAAM,OAAO;AAAA,MACX,KAAK,UAAU,YAAY,MAAM,MAAM,EAAE,OAAO,CAAC;AAAA,IACnD;AACA,UAAM,UAAUC,MAAI,CAAC,eAAe,KAAK,MAAM,CAAC,EAAE;AAAA,MAChD,CAAC,CAAC,aAAaC,KAAI,MAAM,eAAeA,OAAM,WAAW;AAAA,IAC3D;AACA,UAAM,UAAU,cAAc;AAC9B,UAAM,iBAAiB,qBAAqB;AAC5C,UAAM,iBAAiB,aAAa;AACpC,UAAM,cAAcC,kBAAiB;AAErC,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,wBAAoC,CAAC;AACzC,QAAI;AACJ,QAAI,OAAO;AACT,mBAAa,MAAM;AACnB,uBAAiB,MAAM;AACvB,8BAAwB,CAAC,qBAAqB,CAAC;AAC/C,gBAAU,MAAM;AAAA,IAClB,OAAO;AACL,mBAAa,qBAAqB;AAClC,qBAAe,mBAAmB;AAClC,uBAAiB,aAAa,MAAM,aAAa;AACjD,gBAAU,aAAa,UAAU;AAAA,QAAM,CAAC,cACtCJ,SAAO,aAAa,aAAc,GAAG;AAAA,MACvC;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAIK,YAAW;AAAA,QACpB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,SAAS;AAAA,UACT,YAAY;AAAA,UACZ,QAAQ;AAAA;AAAA,UACR,QAAQ;AAAA,UACR,0CAA0C;AAAA,YACxC,eAAe;AAAA,cACb,gBAAgB;AAAA,YAClB;AAAA,YACA,eAAe;AAAA,cACb,gBAAgB;AAAA,cAChB,SAAS;AAAA,gBACP,OAAO,CAAC,uBAAuB;AAAA,cACjC;AAAA,YACF;AAAA,YACA,oBAAoB;AAAA,cAClB,qBAAqB;AAAA,YACvB;AAAA,YACA,4BAA4B;AAAA,YAC5B,0BAA0B;AAAA,UAC5B;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,aAAO,KAAK,MAAM,CAACC,UAAS;AAC1B,cAAM,gBAAgBA,OAAM;AAC5B,YAAI,eAAe,QAAS,QAAON,SAAO,eAAe,OAAO;AAEhE,eAAO,IAAIK,YAAW;AAAA,UACpB,GAAG,IAAI;AAAA,UACP,CAAC;AAAA,UACD,EAAE,QAAQ,KAAK;AAAA,QACjB,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,wBAAwB;AAC/B,aAAO,KAAK,MAAM,CAACC,UAAS;AAC1B,cAAM,gBAAgBA,OAAM,eAAe,aAAa;AACxD,cAAM,8BAA8B,KAAK,SACrC,oCACA;AACJ,eAAO,IAAID,YAAW;AAAA,UACpB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS;AAAA,YACT,2BAA2B,aAAa,CAAC,UAAU,IAAI,CAAC;AAAA,YACxD,MAAME;AAAA;AAAA;AAAA,IAGd,aAAa;AAAA,IACb,2BAA2B;AAAA,IAC3B,mBAAmB;AAAA;AAAA,yBAEE,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAY1B;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,yBAAyB;AAChC,aAAO,KAAK,MAAM,CAACD,UAAS;AAC1B,cAAM,aAAaA,OAAM;AACzB,cAAM,gBAAgB,YAAY;AAClC,cAAME,cAAa,YAAY;AAE/B,YAAI,CAAC,cAAe;AAEpB,eAAO,IAAIH,YAAW;AAAA,UACpB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS;AAAA,YACT,2BAA2BG,cAAa,CAACA,WAAU,IAAI,CAAC;AAAA,YACxD,MAAM;AAAA;AAAA;AAAA,IAGd,aAAa;AAAA;AAAA;AAAA,UAGP;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAI;AAAA,QACT,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,GAAG,IAAI;AAAA,YAChB,QAAQ,KAAK;AAAA,YACb,SAAS;AAAA,cACP;AAAA,gBACE,UAAU;AAAA,gBACV,YAAY;AAAA,gBACZ,oBAAoB;AAAA,kBAClB,UAAU;AAAA,kBACV,WAAW;AAAA,kBACX,sBAAsB;AAAA,kBACtB,mBAAmB;AAAA,kBACnB,oBAAoB,CAAC,SAAS;AAAA,gBAChC;AAAA,cACF;AAAA,YACF;AAAA,YACA,sBAAsB;AAAA,cACpB,gBAAgB;AAAA,cAChB,sBAAsB;AAAA,cACtB,gBAAgB;AAAA,gBACd;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA,eAAe,CAAC,OAAO,MAAM;AAAA,cAC7B,UAAU;AAAA,cACV,eAAe,KAAK,eAAe,kBAAkB,EAAE;AAAA;AAAA,cAEvD,uBAAuB;AAAA,cACvB,sBAAsBN,MAAI;AAAA,gBACxB,sBAAsB;AAAA,gBACtB,uBAAuB;AAAA,cACzB,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,KAAK,MAAM;AAAA,gBAC3B,EAAE,WAAW,kBAAkB,aAAa,MAAM,IAAI;AAAA,gBACtD,GAAI,QACA,CAAC,EAAE,WAAW,mBAAmB,aAAa,MAAM,IAAI,CAAC,IACzD,CAAC;AAAA,cACP,CAAC;AAAA,YACH;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,YAAY,gBAAgB;AAClC,uBAAmB;AAEnB,UAAM,SAAS,QAAQ,MAAM,CAACO,aAAYA,SAAQ,CAAC,GAAG,MAAM;AAC5D,SAAK,SAAS;AACd,SAAK,MAAM;AACX,SAAK,SAAS;AACd,SAAK,UAAU;AAEf,SAAK,gBAAgB;AAAA,MACnB,OAAO,KAAK;AAAA,MACZ,WAAW;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,KAAK,KAAK;AAAA,QACV,MAAM;AAAA,QACN,QAAQ,OAAO;AAAA,MACjB;AAAA,MACA,MAAM;AAAA,QACJ,GAAG,IAAI;AAAA,QACP,KAAK,EAAE,MAAM,OAAO,MAAM,KAAK,IAAI;AAAA,MACrC;AAAA,IACF,CAAC;AAED,aAAS,0BAA0B;AACjC,UAAI,KAAK,QAAQ;AACf,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,IACJ;AAEA,aAAS,eAAe;AACtB,YAAM,UAAU;AAChB,YAAM,UAAU,KAAK,OAAO,CAAC;AAE7B,aAAO;AAAA,QACL;AAAA,QACA,KAAKT,SAAO,QAAQ,OAAO,eAAe;AAAA,QAC1C,SAAS;AAAA,UACP,OAAO,QAAQ;AAAA,UACf,SAASA,SAAO,QAAQ,WAAW,aAAa;AAAA,UAChD,WAAWA,SAAO,QAAQ,aAAa,IAAI;AAAA,UAC3C,WAAWA,SAAO,QAAQ,aAAa,QAAQ;AAAA,UAC/C,aAAa,KAAK;AAAA,UAClB,OAAOA,SAAO,KAAK,QAAQ,CAAC,CAAC,EAC1B,MAAM,KAAK,KAAK,EAChB,MAAM,CAAC,UAAU,MAAM,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;AAAA,QACpD;AAAA,MACF;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,aAAOA,SAAO,KAAK,IAAI,EAAE,MAAM,CAACU,cAAa;AAC3C,YAAI,CAACA,UAAU,QAAO;AAEtB,YAAI,CAACC,IAAG,WAAWD,SAAQ,GAAG;AAC5B,gBAAM,IAAI;AAAA,YACR,gCAAgCE,MAAK;AAAA,cACnCF;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AACA,eAAOA;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,aAAOV;AAAA,QACL,KAAK,WAAW,CAACa,iBAAgB,QAAW,EAAE,QAAQ,KAAK,CAAC,EAAE,IAAI;AAAA,MACpE,EAAE,MAAM,CAACC,aAAY;AACnB,YAAIA,SAAQ,WAAW;AACrB,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,eAAOA,SAAQ,IAAI,CAAC,WAAW;AAC7B,cACE;AAAA,YACE;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,EAAE,SAAS,MAAM;AAEjB,kBAAM,IAAI;AAAA,cACR,UAAU,MAAM;AAAA,YAClB;AAEF,cAAI,CAAC,OAAO,OAAOC,OAAM,EAAE,SAAS,MAAgB;AAClD,kBAAM,IAAI;AAAA,cACR,wBAAwB,MAAM;AAAA,YAChC;AACF,iBAAO;AAAA,QACT,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAEA,aAAS,iBAAiB;AACxB,YAAMC,SAAQ,mBAAmB,KAAK,QAAQ,KAAK,KAAK;AAExD,UAAIA,QAAO;AACT,YAAI,KAAK;AACP,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,YAAI,KAAK;AACP,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,MACJ;AAEA,aAAOA;AAAA,IACT;AAEA,aAAS,gBAAgB;AACvB,aAAOhB,SAAO,CAAC,KAAK,MAAM,KAAK,QAAQ,IAAI,CAAC,EAAE;AAAA,QAC5C,CAAC,CAACM,OAAM,UAAU,MAAM;AACtB,cAAI;AACF,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AAEF,cAAI,CAACA,MAAM,QAAOA;AAClB,iBAAOA;AAAA,QACT;AAAA,MACF;AAAA,IACF;AAEA,aAAS,yBAAyB;AAChC,aAAON,SAAO,KAAK,QAAQ,OAAO,EAAE,MAAM,CAAC,MAAM;AAC/C,YAAI,CAAC,EAAG,QAAO;AAEf,cAAM,UAAU,UAAU,CAAC;AAC3B,YAAI,UAAU,IAAI;AAChB,mBAAS,6BAA6B,EAAE,MAAM,CAAC,UAAU;AACvD,gBAAI,UAAU;AACZ,oBAAM,IAAI;AAAA,gBACR,uBAAuB,IAAI,+DAA+D,KAAK,mEAAmE,WAAW;AAAA,cAC/K;AAAA,UACJ,CAAC;AAAA,QACH;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,kBAAkB;AACzB,aAAO,IAAI;AAAA,QACT,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa,GAAG,IAAI;AAAA,YACpB,SAAS;AAAA,YACT,SAAS;AAAA,YACT,QAAQ;AAAA,YACR,QAAQY,MAAK;AAAA,cACX,mBAAK,MAAM;AAAA,cACX;AAAA,cACA;AAAA,YACF;AAAA,YACA,SAAS;AAAA,YACT,aAAa,KAAK;AAAA,YAClB,aAAa,KAAK;AAAA,YAClB,MAAM,KAAK;AAAA,YACX,KAAK;AAAA,UACP;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,aAAaT,OAAoB;AACxC,aAAOD,MAAI,CAACC,OAAM,KAAK,CAAC,EAAE,MAAM,CAAC,CAACA,OAAMa,MAAK,MAAM;AACjD,YAAIb,MAAK,MAAM;AAEb,UAAAA,MAAK,OAAO,CAACA,MAAK,KAAK,WAAW,GAAG,IAAI,IAAIA,MAAK,IAAI,KAAKA,MAAK;AAEhE,UAAAA,MAAK,OAAOA,MAAK,KAAK,QAAQ,OAAO,EAAE;AAAA,QACzC;AAEA,YAAIa,QAAO,cAAcA,OAAM,eAAe,KAAK;AACjD,cAAI,CAACb,MAAK;AACR,kBAAM,IAAI;AAAA,cACR,iGAAiGa,OAAM,UAAU;AAAA,YACnH;AAEF,cAAI,CAACb,MAAK,KAAK,WAAWa,OAAM,UAAU;AACxC,kBAAM,IAAI;AAAA,cACR,uBAAuBb,MAAK,IAAI,4CAA4Ca,OAAM,UAAU;AAAA,YAC9F;AAAA,QACJ;AAGA,QAAAb,MAAK,OAAO,QAAQ,CAAC,SAAS;AAC5B,eAAK,KAAK,KAAK,GAAG,QAAQ,YAAY,EAAE;AAAA,QAC1C,CAAC;AACD,YAAIA,MAAK,UAAU;AACjB,UAAAA,MAAK,SAAS,KAAKA,MAAK,SAAS,GAAG,QAAQ,YAAY,EAAE;AAAA,QAC5D;AAEA,eAAOA;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAI;AAAA,QACT,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP,EAAE,QAAQ,aAAa;AAAA,UACvB,EAAE,QAAQ,MAAM,gBAAgB,MAAM;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAOD,MAAI,CAAC,SAAS,KAAK,MAAM,CAAC,EAAE,MAAM,CAAC,CAACY,UAAS,UAAU,MAAM;AAClE,YAAI,CAAC,WAAY,QAAO,CAAC;AAEzB,eAAOA,SAAQ,IAAI,CAAC,WAAW;AAC7B,gBAAM,WAAW,YAAY,MAAM;AACnC,gBAAMb,UAAS,IAAI;AAAA,YACjB,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,SAAS,YAAY,MAAM,CAAC;AAAA,cACnC;AAAA,gBACE,GAAG;AAAA,gBACH,aAAa,WAAW,eAAe,GAAG,IAAI;AAAA,gBAC9C,SAASD,SAAO,KAAK,QAAQ,OAAO,EAAE;AAAA,kBACpC,CAAC,MAAM,KAAK,WAAW,WAAW;AAAA,gBACpC;AAAA,gBACA;AAAA,gBACA,QAAQA,SAAO,KAAK,QAAQ,MAAM,EAAE;AAAA,kBAClC,CAAC,MAAM,KAAK,WAAW,UAAU;AAAA,gBACnC;AAAA,gBACA,cAAcA,SAAO,KAAK,QAAQ,YAAY,EAAE;AAAA,kBAC9C,CAAC,MAAM,KAAK,WAAW,gBAAgB;AAAA,gBACzC;AAAA,gBACA,KAAK,KAAK;AAAA,gBACV,QAAQ;AAAA,kBACN,QAAQ;AAAA,kBACR,SAAS,KAAK,QAAQ;AAAA,kBACtB,QAAQ,KAAK,QAAQ;AAAA,kBACrB,GAAG,WAAW;AAAA,gBAChB;AAAA,gBACA,aAAaA,SAAO,KAAK,WAAW,EAAE,MAAM,CAAC,iBAAiB;AAAA,kBAC5D,GAAG;AAAA,kBACH,GAAG,WAAW;AAAA,gBAChB,EAAE;AAAA,gBACF,aAAaA,SAAO,KAAK,WAAW,EAAE,MAAM,CAAC,gBAAgB;AAAA,kBAC3D;AAAA,oBACE,SAAS,CAAC,+BAA+B;AAAA,oBACzC,WAAW,CAAC,GAAG;AAAA,kBACjB;AAAA,kBACA,GAAI,eAAe,CAAC;AAAA,kBACpB,GAAI,WAAW,eAAe,CAAC;AAAA,gBACjC,CAAC;AAAA,gBACD,YAAY;AAAA,kBACV,GAAI,KAAK,OACL,CAAC,0BAA0B,WAAW,SAAS,CAAC,IAChD,CAAC;AAAA,kBACL,GAAI,WAAW,cAAc,CAAC;AAAA,gBAChC;AAAA,gBACA,MAAMA,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AAAA,kBACtC,GAAI,WAAW,QAAQ,CAAC;AAAA,kBACxB,GAAI,QAAQ,CAAC;AAAA,gBACf,CAAC;AAAA,gBACD,QAAQA,SAAO,KAAK,QAAQ,MAAM,EAAE,MAAM,CAAC,WAAW;AAAA,kBACpD,GAAI,WAAW,UAAU,CAAC;AAAA,kBAC1B,GAAI,UAAU,CAAC;AAAA,gBACjB,CAAC;AAAA,gBACD,KAAK;AAAA,gBACL,KAAK;AAAA,gBACL,WAAW;AAAA,cACb;AAAA,cACA,EAAE,UAAU,QAAQ,KAAK;AAAA,YAC3B;AAAA,UACF;AAEA,cAAI,KAAK,MAAM;AAEb,kBAAM,OAAO,IAAI;AAAA,cACf,GAAG,IAAI,SAAS,YAAY,MAAM,CAAC;AAAA,cACnC;AAAA,gBACE,UAAU;AAAA,gBACV,KAAK;AAAA,kBACH,aAAa,GAAG,IAAI;AAAA,kBACpB,QAAQY,MAAK,KAAK,mBAAK,MAAM,UAAU,QAAQ,YAAY;AAAA,kBAC3D,SAAS;AAAA,kBACT,SAAS;AAAA,kBACT,SAAS;AAAA,kBACT,QAAQ;AAAA,kBACR,KAAK;AAAA,kBACL,aAAa;AAAA,oBACX,eAAeX,QAAO,MAAM,SAAS;AAAA,oBACrC,aAAaD,SAAO,KAAK,IAAI,EAAE;AAAA,sBAAM,CAAC,SACpC,KAAK,SAAS;AAAA,oBAChB;AAAA,kBACF;AAAA,kBACA,MAAM,CAACC,OAAM;AAAA,kBACb,eAAe;AAAA,gBACjB;AAAA,gBACA,WAAW;AAAA,kBACT,QAAQ,CAACgB,UAAS;AAChB,oBAAAA,MAAK,cAAc;AAAA,sBACjB,sBAAsB;AAAA,sBACtB,0BAA0B;AAAA,oBAC5B;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,EAAE,UAAU,QAAQ,KAAK;AAAA,YAC3B;AAGA,gBAAIC,QAAO;AAAA,cACT,GAAG,IAAI,UAAU,YAAY,MAAM,CAAC;AAAA,cACpC;AAAA,gBACE,cAAc,KAAK,MAAM,IAAI;AAAA,gBAC7B,UAAU;AAAA,kBACR,SAAS,KAAK,IAAI,EAAE,SAAS;AAAA,gBAC/B;AAAA,gBACA,OAAO,KAAK,UAAU,CAAC,CAAC;AAAA,cAC1B;AAAA,cACA,EAAE,UAAU,QAAQ,KAAK;AAAA,YAC3B;AAAA,UACF;AAEA,iBAAO,EAAE,QAAQ,QAAAjB,QAAO;AAAA,QAC1B,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAEA,aAAS,uBAAuB;AAC9B,aAAOD,SAAO,KAAK,cAAc,EAAE,MAAM,CAACmB,oBAAmB;AAC3D,YAAI,CAACA,gBAAgB;AACrB,eAAO,IAAI;AAAA,UACT,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS;AAAA,YACT,SAAS;AAAA,cACP,WAAW;AAAA,YACb;AAAA,YACA,aAAa;AAAA,cACX;AAAA,gBACE,SAAS,CAAC,cAAc;AAAA,gBACxB,WAAW,CAACZ,gBAAc,OAAO,GAAG,IAAI;AAAA,cAC1C;AAAA,YACF;AAAA,YACA,GAAGY,gBAAe;AAAA,YAClB,KAAK;AAAA,YACL,KAAK;AAAA,YACL,eAAe;AAAA,YACf,WAAW;AAAA,UACb;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,0BAA0B,WAAqB;AACtD,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,GAAI,YACA;AAAA,UACE;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF,IACA,CAAC,aAAa;AAAA,QAClB;AAAA,MACF,EAAE,KAAK,IAAI;AAAA,IACb;AAEA,aAAS,eAAe;AACtB,aAAOjB,MAAI,CAAC,KAAK,QAAQ,OAAO,MAAM,UAAU,CAAC,EAAE;AAAA,QACjD,OAAO,CAAC,QAAQc,QAAOb,OAAMiB,WAAU,MAAM;AAE3C,gBAAM,oBAAoB;AAC1B,gBAAM,uBAAuB;AAE7B,gBAAM,cAA4B,CAAC;AAGnC,qBAAW,QAAQ;AAAA,YACjB,GAAGjB,MAAK;AAAA,YACR,GAAIA,MAAK,WACL,CAAC,EAAE,GAAGA,MAAK,UAAU,iBAAiB,OAAU,CAAC,IACjD,CAAC;AAAA,UACP,GAAG;AAED,kBAAM,cAAqC;AAAA;AAAA,cAEzC;AAAA,gBACE,OAAO;AAAA,gBACP,QAAQ,KAAK,kBACT,QAAQS,MAAK,KAAK,KAAK,iBAAiB,IAAI,CAAC,IAC7C;AAAA,gBACJ,cACE,QAAQ,gCACR,6BAA6B,oBAAoB,2BAA2B,oBAAoB;AAAA,cACpG;AAAA;AAAA,cAEA,GAAI,KAAK,kBACL;AAAA,gBACE;AAAA,kBACE,OAAO,QAAQA,MAAK,KAAK,KAAK,iBAAiB,IAAI,CAAC;AAAA,kBACpD,cACE,QAAQ,6BACR,kBAAkB,iBAAiB;AAAA,gBACvC;AAAA,cACF,IACA,CAAC;AAAA,cACL,GAAI,QAAQ,eAAe,CAAC;AAAA,YAC9B;AAGA,kBAAM,gBAA0B,CAAC;AACjC,uBAAW,cAAc,YAAY,QAAQ,GAAG;AAC9C,oBAAM,QAAQ,SAAS,WAAW,OAAO;AAAA,gBACvC,KAAKA,MAAK,QAAQQ,aAAY,KAAK,IAAI;AAAA,gBACvC,OAAO;AAAA,gBACP,KAAK;AAAA,gBACL,QAAQ,WAAW;AAAA,cACrB,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,cAAc,SAAS,IAAI,CAAC;AAEjD,0BAAY;AAAA,gBACV,GAAI,MAAM,QAAQ;AAAA,kBAChB,MAAM,IAAI,OAAO,SAAS;AACxB,0BAAM,SAASR,MAAK,QAAQQ,aAAY,KAAK,MAAM,IAAI;AACvD,0BAAM,UAAU,MAAMT,IAAG,SAAS,SAAS,QAAQ,OAAO;AAC1D,0BAAM,OAAOU,QACV,WAAW,QAAQ,EACnB,OAAO,OAAO,EACd,OAAO,KAAK;AACf,2BAAO;AAAA,sBACL;AAAA,sBACA,KAAK;AAAA,wBACHT,MAAK;AAAA,0BACH,KAAK;AAAA,0BACLI,QAAO,YAAY,QAAQ,OAAO,EAAE,KAAK;AAAA,0BACzC;AAAA,wBACF;AAAA,sBACF;AAAA,sBACA;AAAA,sBACA,cAAc,WAAW;AAAA,sBACzB,aACE,WAAW,eAAe,eAAe,MAAM,OAAO;AAAA,oBAC1D;AAAA,kBACF,CAAC;AAAA,gBACH;AAAA,cACF;AACA,4BAAc,KAAK,GAAG,KAAK;AAAA,YAC7B;AAAA,UACF;AAEA,iBAAO,IAAI;AAAA,YACT,GAAG,IAAI;AAAA,YACP;AAAA,cACE,YAAY,OAAO;AAAA,cACnB,OAAO;AAAA,cACP;AAAA,cACA,QAAQH,iBAAgB,QAAW,EAAE,QAAQ,KAAK,CAAC,EAAE;AAAA,YACvD;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAST,oBAAmB;AAE1B,aAAOiB,QACJ,WAAW,KAAK,EAChB,OAAO,GAAG,mBAAK,IAAI,IAAI,mBAAK,KAAK,IAAI,IAAI,EAAE,EAC3C,OAAO,KAAK,EACZ,UAAU,GAAG,CAAC;AAAA,IACnB;AAEA,aAAS,kBAAkB;AACzB,YAAM,UAAUnB,MAAI;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,OAAO,MAAM,OAAO;AAAA,QACpB;AAAA,MACF,CAAC,EAAE;AAAA,QACD,CAAC,CAACO,UAASU,iBAAgBC,aAAYjB,OAAM,cAAcmB,QAAO,MAChEpB,MAAI;AAAA,UACFO,SAAQ,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,KAAK,EAAE,OAAQ,IAAI,EAAE;AAAA,UAC7DU,iBAAgB;AAAA,QAClB,CAAC,EAAE,MAAM,CAAC,CAACV,UAAS,iBAAiB,MAAM;AACzC,gBAAM,YAAoC,CAAC;AAC3C,gBAAM,OAAiB,CAAC;AAKxB,gBAAM,aAAa,CAAC,aAAa;AAEjC,UAAAN,MAAK,OAAO,QAAQ,CAAC,SAAS;AAC5B,kBAAM,aAAa,CAAC,YAAY,IAAI,QAAQ,MAAM;AAChD,oBAAM,cAAcS,MAAK,KAAKQ,aAAY,KAAK,MAAM,SAAS;AAC9D,cAAAT,IAAG,YAAY,aAAa,EAAE,eAAe,KAAK,CAAC,EAAE;AAAA,gBACnD,CAAC,SAAS;AAER,sBAAI,KAAK,OAAO,GAAG;AACjB,8BAAU,QAAQC,MAAK,KAAK,KAAK,WAAW,KAAK,IAAI,CAAC,CAAC,IACrD;AACF;AAAA,kBACF;AAOA,sBACE,UAAU,MACT,WAAW,SAAS,KAAK,IAAI,KAC5B,KAAK,SAAS,KAAK,YACrB;AACA,+BAAWA,MAAK,KAAK,WAAW,KAAK,IAAI,GAAG,QAAQ,CAAC;AACrD;AAAA,kBACF;AAEA,uBAAK,KAAK,QAAQA,MAAK,KAAK,KAAK,WAAW,KAAK,IAAI,CAAC,CAAC;AAAA,gBACzD;AAAA,cACF;AAAA,YACF;AACA,uBAAW;AAAA,UACb,CAAC;AAED,oBAAU,UAAU,IAAI,KAAK,UAAU;AAAA,YACrC,MAAMT,MAAK;AAAA,YACX,WAAWA,MAAK;AAAA,YAChB,IAAI;AAAA,cACF,QAAQ;AAAA,cACR,KAAKA,MAAK,OAAO,CAAC,EAAE,KAAK,MAAMA,MAAK,OAAO,CAAC,EAAE,KAAK;AAAA,cACnD,QAAQ;AAAA,YACV;AAAA,YACA,OAAO,oBACH;AAAA,cACE,MAAM,IAAI,IAAI,iBAAkB,EAAE;AAAA,cAClC,OAAOA,MAAK,eAAgB;AAAA,YAC9B,IACA;AAAA,YACJ,SAASM,SAAQ,IAAI,CAAC,MAAM;AAAA,cAC1B,IAAI,IAAI,EAAE,GAAG,EAAE;AAAA,cACf,iBAAiB,EAAE,MAAuC,EAAE;AAAA,cAC5D,iBAAiB,EAAE,MAAuC,EAAE;AAAA,YAC9D,CAAC;AAAA,YACD,QAAQ;AAAA,cACN,UAAU;AAAA,gBACR,aAAa,UAAUa,QAAO;AAAA,cAChC;AAAA,YACF;AAAA,UACF,CAA4B;AAC5B,iBAAO;AAAA,QACT,CAAC;AAAA,MACL;AAEA,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,OAAO;AAAA,UACP,WAAW;AAAA,UACX;AAAA,UACA;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,OAAO,MAAO;AAAA,UACd,WAAW,MAAO;AAAA,UAClB,KAAK;AAAA,UACL,OAAO,MAAO;AAAA,YAAM,CAACN,WACnB,CAAC,QAAQ,aAAaA,OAAO,aAAaA,OAAO,UAAU,EAAE;AAAA,cAC3D;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,MAAAd,MAAI,CAAC,KAAK,cAAc,YAAY,IAAI,CAAC,EAAE;AAAA,QACzC,CAAC,CAAC,iBAAiBkB,aAAYjB,KAAI,MAAM;AAEvC,cAAI,oBAAoB,MAAO;AAC/B,gBAAM,eAAe;AAAA,YACnB,MAAM;AAAA,YACN,OAAO;AAAA,YACP,GAAG;AAAA,UACL;AAIA,gBAAM,WAAWA,MAAK;AACtB,gBAAM,gBAAgB,SAAS,OAAO,CAAC,SAAS,KAAK,MAAM;AAC3D,cAAI,cAAc,WAAW,EAAG;AAGhC,gBAAM,oBAA8B,CAAC;AACrC,cAAI,aAAa,UAAU,OAAO;AAChC,8BAAkB,KAAK,IAAI;AAAA,UAC7B,WAAW,aAAa,UAAU,aAAa;AAC7C,0BAAc,QAAQ,CAAC,SAAS;AAC9B,kBAAI,CAAC,KAAK,gBAAiB;AAC3B,gCAAkB;AAAA,gBAChB,QAAQS,MAAK,KAAK,KAAK,KAAK,IAAI,KAAK,iBAAiB,GAAG,CAAC;AAAA,cAC5D;AAAA,YACF,CAAC;AAAA,UACH,OAAO;AACL,8BAAkB,KAAK,GAAI,cAAc,SAAS,CAAC,CAAE;AAAA,UACvD;AACA,cAAI,kBAAkB,WAAW,EAAG;AAGpC,cAAI;AACJ,cAAIT,MAAK,SAAS;AAChB,kCAAsBA,MAAK;AAAA,UAC7B,OAAO;AACL,kBAAM,OAAOkB,QAAO,WAAW,KAAK;AAEpC,0BAAc,QAAQ,CAAC,SAAS;AAM9B,kBAAI,KAAK,iBAAiB;AACxB,yBAAS,MAAM;AAAA,kBACb,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,QAAQ;AAAA,kBACR,KAAKT,MAAK;AAAA,oBACRQ;AAAA,oBACA,KAAK;AAAA,oBACL,KAAK;AAAA,kBACP;AAAA,gBACF,CAAC,EAAE,QAAQ,CAAC,aAAa,KAAK,OAAO,QAAQ,CAAC;AAAA,cAChD;AAGA,kBAAI,aAAa,UAAU,aAAa;AACtC,yBAAS,MAAM;AAAA,kBACb,QAAQ,KAAK,kBACT,CAAC,QAAQR,MAAK,KAAK,KAAK,iBAAiB,IAAI,CAAC,CAAC,IAC/C;AAAA,kBACJ,KAAK;AAAA,kBACL,OAAO;AAAA,kBACP,QAAQ;AAAA,kBACR,KAAKA,MAAK,QAAQQ,aAAY,KAAK,IAAI;AAAA,gBACzC,CAAC,EAAE;AAAA,kBAAQ,CAAC,aACV,KAAK;AAAA,oBACHT,IAAG;AAAA,sBACDC,MAAK,QAAQQ,aAAY,KAAK,MAAM,QAAQ;AAAA,sBAC5C;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC;AACD,kCAAsB,KAAK,OAAO,KAAK;AAAA,UACzC;AAEA,cAAI;AAAA,YACF,GAAG,IAAI;AAAA,YACP;AAAA,cACE;AAAA,cACA,OAAO;AAAA,cACP,SAAS;AAAA,cACT,MAAM,aAAa;AAAA,YACrB;AAAA,YACA;AAAA,cACE,QAAQ;AAAA,cACR,WAAW,CAAC,gBAAgB,WAAW,GAAG,qBAAqB;AAAA,YACjE;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAOlB,MAAI,CAAC,KAAK,SAAS,KAAK,MAAM,CAAC,EAAE;AAAA,MACtC,CAAC,CAAC,SAAS,MAAM,MAAO,WAAW;AAAA,IACrC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,MAIb,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,MAIb,KAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACF;;;ADhsCO,IAAM,SAAN,cAAqB,QAAQ;AAAA,EAClC,YACE,MACA,OAAmB,CAAC,GACpB,OAAiC,CAAC,GAClC;AACA,UAAMqB,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,wBAAwB;AAAA,EAAE;AAAA,EAE1B,UAAU,YAA0C;AAC5D,WAAO,WAAW,MAAM,CAACC,gBAAe;AACtC,YAAM,QAAQ,KAAK;AAAA,QACjBC,IAAG;AAAA,UACDC,MAAK,KAAKF,aAAY,QAAQ,UAAU,YAAY;AAAA,UACpD;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,CAAC,YAAY,EAAE,SAAS,MAAM,MAAM,GAAG;AAC1C,cAAM,IAAI;AAAA,UACR,sGAAsG,MAAM,MAAM;AAAA,QACpH;AAAA,MACF;AAEA,YAAM,WAAWC,IACd,aAAaC,MAAK,KAAKF,aAAY,gBAAgB,GAAG,OAAO,EAC7D,MAAM,oBAAoB,IAAI,CAAC;AAElC,aAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,aAAa;AAAA,UACb,SAAS;AAAA,UACT,QAAQE,MAAK,KAAKF,aAAY,QAAQ,UAAU,QAAQ;AAAA,QAC1D;AAAA,QACA,QAAQ;AAAA,UACN;AAAA,YACE,MAAME,MAAK,KAAK,QAAQ,UAAU,QAAQ;AAAA,YAC1C,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AACF;AAEA,IAAMH,iBAAe;AAErB,OAAO,eAAeA;;;AoD5dtB;AAAA,EAGE,OAAAI;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;;;ACNP;AAAA,EAIE,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAGP,SAAS,cAAAC,aAAY,UAAAC,eAAc;;;ACTnC,SAAqC,UAAAC,gBAAc;AAEnD,SAAS,kBAAkB;AAmCpB,SAAS,aACd,MACA,MACA,QACA;AACA,QAAM,EAAE,KAAK,QAAQ,YAAY,MAAM,OAAO,IAAI;AAElD,QAAM,WAAWC,SAAO,IAAI,EAAE,MAAM,CAACC,UAAS;AAC5C,QAAI,CAACA,MAAM,QAAO,EAAE,eAAe,OAAO;AAC1C,QAAIA,MAAK,IAAK,QAAO,EAAE,eAAe,UAAU;AAChD,QAAIA,MAAK;AACP,aAAO,EAAE,eAAe,UAAU,cAAcA,MAAK,OAAO;AAC9D,QAAIA,MAAK;AACP,aAAO;AAAA,QACL,eAAe;AAAA,QACf,cAAcA,MAAK,QAAQ;AAAA,QAC3B,qBAAqBA,MAAK,QAAQ;AAAA,MACpC;AACF,WAAO,EAAE,eAAe,OAAO;AAAA,EACjC,CAAC;AAED,SAAO,SAAS;AAAA,IACd,CAACC,cACC,IAAI,WAAW;AAAA,MACb,GAAG;AAAA,QACD,KAAK,WAAW;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,SAASF,SAAO,GAAG,EAAE;AAAA,UACrB;AAAA,UACA,YAAY;AAAA,UACZ,eAAeE,UAAS;AAAA,UACxB,cAAcA,UAAS;AAAA,UACvB,qBAAqBA,UAAS;AAAA,UAC9B,gBAAgB;AAAA,QAClB;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAAA,EACJ;AACF;;;ADxCO,IAAM,0BAAN,cAAsC,UAAU;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAE3B,UAAM,SAAS,aAAa,MAAM,MAAM,IAAI;AAC5C,UAAM,KAAK,eAAe;AAC1B,UAAMC,cAAa,iBAAiB;AACpC,UAAM,cAAc,kBAAkB;AAEtC,SAAK,KAAK;AACV,SAAK,aAAaA;AAClB,SAAK,SAAS;AACd,SAAK,cAAc;AAEnB,aAAS,iBAAiB;AACxB,YAAM,EAAE,QAAAC,SAAQ,MAAAC,OAAK,IAAI;AAEzB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAaC,gBAAc,IAAI,IAAI,UAAUF,OAAM,IAAIC,MAAI;AAAA,QAC7D;AAAA,QACA,KAAK;AAAA,QACL,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIE,QAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAWD,gBAAc,IAAI,YAAY;AAAA,QAC3C;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAIE,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,IAAI;AAAA,YACb,YAAY,KAAK;AAAA,YACjB,YAAY,OAAO;AAAA,YACnB,uBAAuB;AAAA,YACvB,MAAM;AAAA,YACN,KAAK,GAAG;AAAA,UACV;AAAA,UACA,EAAE,QAAQ,MAAM,WAAW,CAACL,WAAU,EAAE;AAAA,QAC1C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,aAAa,KAAK;AAAA;AAAA;AAAA;AAAA,MAIlB,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,wBAAwB,eAAeA;;;AEvIvC;AAAA,EAIE,eAAAQ;AAAA,EACA,UAAAC;AAAA,OACK;AAIP,SAAS,cAAAC,aAAY,UAAAC,gBAAc;AAiC5B,IAAM,yBAAN,cAAqC,UAAU;AAAA,EACnC;AAAA,EACA;AAAA,EAEjB,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAE3B,6BAAyB;AACzB,UAAM,OAAO,QAAQ;AAErB,UAAM,KAAK,eAAe;AAC1B,UAAM,aAAa,iBAAiB;AACpC,qBAAiB;AAEjB,SAAK,KAAK;AACV,SAAK,aAAa;AAElB,aAAS,2BAA2B;AAClC,YAAM,cAAc;AAAA,QAClB,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP,EAAE,OAAO,CAAC,MAAM,CAAC;AAEjB,UAAI,YAAY,WAAW;AACzB,cAAM,IAAI;AAAA,UACR,oFAAoF,KAAK,IAAI;AAAA,QAC/F;AAEF,UAAI,YAAY,SAAS,GAAG;AAC1B,cAAM,IAAI;AAAA,UACR,yFAAyF,KAAK,IAAI;AAAA,QACpG;AAAA,MACF;AAAA,IACF;AAEA,aAAS,UAAU;AACjB,UAAI,KAAK,cAAe,QAAO;AAC/B,UAAI,KAAK,gBAAiB,QAAO;AACjC,UAAI,KAAK,UAAW,QAAO;AAAA,IAC7B;AAEA,aAAS,iBAAiB;AACxB,YAAMC,MAAK,KAAK,iBAAiB,KAAK;AACtC,UAAI,CAACA,IAAI;AAET,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACPA;AAAA,QACA;AAAA,UACE,aAAaC,gBAAc,IAAI,IAAI;AAAA,QACrC;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,GAAI;AAET,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAWD,gBAAc,IAAI,YAAY,gBAAgB,WAAW,EAAE;AAAA,QACxE;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIE,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,IAAI;AAAA,YACb;AAAA,YACA,MAAM,KAAK;AAAA,YACX,cAAc,KAAK;AAAA,YACnB,eAAe,IAAI;AAAA,YACnB,8BAA8B,KAAK;AAAA,YACnC,gBAAgB,KAAK;AAAA,UACvB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,IAAI,WAAW;AACb,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAML,iBAAe;AAErB,uBAAuB,eAAeA;;;AChLtC,SAAS,sBAAAM,qBAAoB,cAAAC,aAAY,OAAAC,YAAW;AACpD;AAAA,EAEE,iBAAAC;AAAA,EACA,eAAAC;AAAA,OACK;AAGA,SAAS,uBACd,YACA,MACA;AACA,QAAM,UAAUH,YAAW,QAAQ;AAAA,IACjC,GAAG,UAAU;AAAA,IACb;AAAA,IACA;AAAA,IACA,EAAE,UAAU,KAAK,SAAS;AAAA,EAC5B;AAEA,SAAO,QAAQ,kBAAkB,MAAM,CAAC,QAAQ;AAC9C,QAAI,IAAK,QAAO;AAEhB,UAAM,YAAYD,oBAAmB,QAAW,IAAI,EAAE;AACtD,UAAM,OAAO,IAAIE,KAAI;AAAA,MACnB;AAAA,MACA;AAAA,QACE,kBAAkBC,eAAc;AAAA,UAC9B,SAAS;AAAA,UACT,WAAW;AAAA,YACT;AAAA,cACE,QAAQ;AAAA,cACR,WAAW;AAAA,gBACT,SAAS;AAAA,cACX;AAAA,cACA,QAAQ;AAAA,YACV;AAAA,UACF;AAAA,QACF,CAAC;AAAA,QACD,mBAAmB;AAAA,UACjBC,oBAAkB,SAAS;AAAA,QAC7B;AAAA,MACF;AAAA,MACA,EAAE,gBAAgB,MAAM,UAAU,KAAK,SAAS;AAAA,IAClD;AAEA,WAAO,IAAIH,YAAW;AAAA,MACpB,GAAG,UAAU;AAAA,MACb;AAAA,QACE,mBAAmB,KAAK;AAAA,MAC1B;AAAA,MACA,EAAE,UAAU,KAAK,SAAS;AAAA,IAC5B;AAAA,EACF,CAAC;AACH;;;AJ9BA,SAAS,cAAAI,aAAY,cAAAC,aAAY,mBAAAC,wBAAuB;;;AKvBxD;AAAA,EAIE,UAAAC;AAAA,OACK;AAGP,SAAS,cAAAC,mBAAkB;AAuBpB,IAAM,+BAAN,cAA2C,UAAU;AAAA,EACzC;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAE3B,UAAM,SAAS,aAAa,MAAM,MAAM,IAAI;AAC5C,UAAM,cAAc,kBAAkB;AAEtC,SAAK,SAAS;AACd,SAAK,cAAc;AAEnB,aAAS,oBAAoB;AAC3B,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,IAAI;AAAA,YACb,YAAY,KAAK;AAAA,YACjB,YAAY,OAAO;AAAA,YACnB,GAAG,KAAK;AAAA,YACR,MAAMD,SAAO,KAAK,YAAY,IAAI,EAAE;AAAA,cAAM,CAAC,MACzC,EAAE,YAAY,EAAE,WAAW,KAAK,GAAG;AAAA,YACrC;AAAA,YACA,qBACE,KAAK,YAAY,uBACjBA,SAAO,KAAK,YAAY,mBAAmB,EAAE;AAAA,cAAM,CAAC,MAClD,EAAE,YAAY,EAAE,WAAW,KAAK,GAAG;AAAA,YACrC;AAAA,UACJ;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,aAAa,KAAK;AAAA;AAAA;AAAA;AAAA,MAIlB,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,6BAA6B,eAAeA;;;AC3F5C,SAAS,cAAAG,mBAAkB;AAC3B,SAA0C,UAAAC,gBAAc;;;ACDxD,SAAS,cAAAC,mBAAkB;AA2BpB,IAAM,qBAAN,cAAiC,UAAmC;AAAA,EACxD;AAAA,EAEjB,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,SAAK,MAAM,IAAIC,YAAW;AAAA,MACxB,GAAG,IAAI;AAAA,MACP;AAAA,QACE,OAAO,KAAK;AAAA,MACd;AAAA,MACA,EAAE,QAAQ,KAAK;AAAA,IACjB;AAEA,QAAIA,YAAW;AAAA,MACb,GAAG,IAAI;AAAA,MACP;AAAA,QACE,OAAO,KAAK,IAAI;AAAA,QAChB,SAAS;AAAA,QACT,aAAa,KAAK;AAAA,MACpB;AAAA,MACA,EAAE,QAAQ,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,OAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,mBAAmB,eAAeA;;;AD3D3B,IAAM,wBAAN,cAAoC,UAAU;AAAA,EAC3C;AAAA,EACA;AAAA,EACS;AAAA,EAEjB,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAME,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,SAAK,OAAO,IAAIC,YAAW;AAAA,MACzB,GAAG,IAAI;AAAA,MACP;AAAA,QACE,WAAW,CAAC,EAAE,OAAO,KAAK,OAAO,OAAO,KAAK,SAAS,CAAC;AAAA,QACvD,eACE,KAAK,SACLC,SAAO,KAAK,KAAK,EAAE,MAAM,CAAC,WAAW;AAAA,UACnC,OAAO,MAAM;AAAA,UACb,QAAQ,MAAM,OAAO,YAAY;AAAA,UACjC,QAAQ,MAAM;AAAA,QAChB,EAAE;AAAA,QACJ,kBACE,KAAK,YACLA,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,cAAc;AAAA,UACzC,YAAY,SAAS;AAAA,UACrB,WAAW,SAAS;AAAA,QACtB,EAAE;AAAA,MACN;AAAA,MACA,EAAE,QAAQ,KAAK;AAAA,IACjB;AAEA,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,WAAW,KAAK;AAAA,IAClB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcO,UAAU,MAAc,MAA+B;AAC5D,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,OAAO,KAAK,gBAAgB;AAAA,QAC5B,aAAa,KAAK,KAAK;AAAA,QACvB,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,sBAAsB,eAAeA;;;AN6nB9B,IAAM,eAAN,cAA2B,UAAmC;AAAA,EAC3D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAA4C,CAAC;AAAA,EAC7C,SACN,CAAC;AAAA,EACK;AAAA,EACA;AAAA,EACA;AAAA,EACA,WAAoB;AAAA,EAE5B,YACE,MACA,OAAyB,CAAC,GAC1B,OAAiC,CAAC,GAClC;AACA,UAAMG,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,SAAS,gBAAgB;AAC/B,UAAM,WAAW,kBAAkB;AACnC,UAAM,cAAc,uBAAuB,MAAM,IAAI;AACrD,UAAM,MAAM,UAAU;AAEtB,SAAK,UAAU,GAAG,IAAI,IAAI;AAC1B,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,MAAM;AACX,SAAK,SAAS;AACd,SAAK,eAAe,SAAS;AAE7B,aAAS,kBAAkB;AACzB,aAAOC,iBAAgB,QAAW,EAAE,OAAO,CAAC,EAAE;AAAA,IAChD;AAEA,aAAS,oBAAoB;AAC3B,aAAOC,SAAO,KAAK,QAAQ,EAAE,MAAM,CAACC,cAAa;AAC/C,YAAI,CAACA,UAAU,QAAO,EAAE,OAAO,OAAgB;AAE/C,YAAIA,UAAS,SAAS,aAAa,CAACA,UAAS;AAC3C,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,eAAOA,UAAS,SAAS,aACrB,EAAE,OAAO,WAAoB,IAC7BA,UAAS,SAAS,YAChB;AAAA,UACA,OAAO;AAAA,UACP,gBAAgBA,UAAS;AAAA,QAC3B,IACE,EAAE,OAAO,OAAgB;AAAA,MACjC,CAAC;AAAA,IACH;AAEA,aAAS,YAAY;AACnB,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,uBAAuB;AAAA,UACzB;AAAA,UACA,EAAE,QAAQ,WAAW,YAAY;AAAA,QACnC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,cAAc,KAAK,aAC3BC,MAAI,CAAC,KAAK,WAAW,YAAY,KAAK,WAAW,QAAQ,CAAC,EAAE;AAAA,MAC5D,CAAC,CAAC,QAAQ,GAAG,MACX,MAAM,WAAW,MAAM,IAAI,GAAG,MAAM,WAAW,MAAM;AAAA,IACzD,IACEC,wBAAsB,KAAK,IAAI,EAAE,gBAAgB,KAAK,MAAM,kBAAkB,mBAAK,KAAK;AAAA,EAC9F;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA,MAIV,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,MAIZ,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA,MAIf,IAAI,aAAa;AACf,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR,mDAAmD,KAAK,eAAe;AAAA,UACzE;AACF,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR,8EAA8E,KAAK,eAAe;AAAA,UACpG;AACF,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0FO,MACL,OACA,SACA,OAA8B,CAAC,GAC/B;AACA,UAAM,EAAE,QAAQ,MAAAC,OAAK,IAAI,KAAK,WAAW,KAAK;AAC9C,SAAK,eAAeA,MAAI;AAExB,UAAM,cAAc;AAAA,MAClB,KAAK,gBAAgB,WAAW,OAAO;AAAA,MACvC,KAAK,aAAa,QAAQA,MAAI;AAAA,MAC9B;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAEA,UAAM,YAAY,IAAI;AAAA,MACpB,YAAY,CAAC;AAAA,MACb;AAAA,QACE,KAAK;AAAA,UACH,MAAM,KAAK;AAAA,UACX,IAAI,KAAK,IAAI;AAAA,UACb,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA;AAAA,QACA,MAAAA;AAAA,QACA,YAAY,KAAK,UAAUA,MAAI;AAAA,QAC/B;AAAA,QACA,kBAAkB,KAAK,gBAAgB,WAAW,OAAO;AAAA,QACzD,GAAG,YAAY,CAAC;AAAA,MAClB;AAAA,MACA,YAAY,CAAC;AAAA,IACf;AAEA,SAAK,OAAO,KAAK,SAAS;AAE1B,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA6BO,iBACL,OACA,aACA,OAA8B,CAAC,GAC/B;AACA,UAAM,EAAE,QAAQ,MAAAA,OAAK,IAAI,KAAK,WAAW,KAAK;AAC9C,SAAK,eAAeA,MAAI;AAExB,UAAM,cAAc;AAAA,MAClB,KAAK,gBAAgB,WAAW,OAAO;AAAA,MACvC,KAAK,aAAa,QAAQA,MAAI;AAAA,MAC9B;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAEA,UAAM,YAAY,IAAI;AAAA,MACpB,YAAY,CAAC;AAAA,MACb;AAAA,QACE,KAAK;AAAA,UACH,MAAM,KAAK;AAAA,UACX,IAAI,KAAK,IAAI;AAAA,UACb,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA;AAAA,QACA,MAAAA;AAAA,QACA,YAAY,KAAK,UAAUA,MAAI;AAAA,QAC/B;AAAA,QACA,GAAG,YAAY,CAAC;AAAA,MAClB;AAAA,MACA,YAAY,CAAC;AAAA,IACf;AAEA,SAAK,OAAO,KAAK,SAAS;AAE1B,WAAO;AAAA,EACT;AAAA,EAEQ,WAAW,OAAe;AAChC,UAAM,QAAQ,MAAM,MAAM,GAAG;AAC7B,QAAI,MAAM,WAAW,GAAG;AACtB,YAAM,IAAI;AAAA,QACR,iBAAiB,KAAK;AAAA,MACxB;AAAA,IACF;AACA,UAAM,CAAC,WAAWA,MAAI,IAAI,MAAM,MAAM,GAAG;AACzC,UAAM,SAAS,UAAU,YAAY;AACrC,QACE,CAAC;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,SAAS,MAAM;AAEjB,YAAM,IAAI,aAAa,kBAAkB,SAAS,aAAa,KAAK,EAAE;AAExE,QAAI,CAACA,OAAK,WAAW,GAAG;AACtB,YAAM,IAAI;AAAA,QACR,gBAAgBA,MAAI,aAAa,KAAK;AAAA,MACxC;AAEF,WAAO,EAAE,QAAQ,MAAAA,OAAK;AAAA,EACxB;AAAA,EAEQ,aAAa,QAAgBA,QAAc;AACjD,UAAM,SAAS;AAAA,MACb,yBAAyB,CAAC,UAAU,QAAQA,MAAI,EAAE,KAAK,EAAE,GAAG,CAAC;AAAA,IAC/D;AACA,WAAO,GAAG,KAAK,eAAe,QAAQ,MAAM;AAAA,EAC9C;AAAA,EAEQ,eAAeA,QAAc;AACnC,UAAM,YAAYA,OAAK,QAAQ,OAAO,EAAE,EAAE,MAAM,GAAG;AACnD,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,KAAK;AAChD,YAAM,aAAa,MAAM,UAAU,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG;AACvD,YAAM,UAAU,MAAM,UAAU,MAAM,GAAG,IAAI,CAAC,EAAE,KAAK,GAAG;AACxD,UAAI,CAAC,KAAK,UAAU,OAAO,GAAG;AAC5B,cAAM,SAAS;AAAA,UACb,yBAAyB,CAAC,KAAK,IAAI,IAAI,OAAO,EAAE,KAAK,EAAE,GAAG,CAAC;AAAA,QAC7D;AACA,cAAM,WAAW,IAAIH,YAAW;AAAA,UAC9B,GAAG,KAAK,eAAe,WAAW,MAAM;AAAA,UACxC;AAAA,YACE,SAAS,KAAK,IAAI;AAAA,YAClB,UACE,eAAe,MACX,KAAK,IAAI,iBACT,KAAK,UAAU,UAAU;AAAA,YAC/B,UAAU,UAAU,CAAC;AAAA,UACvB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,aAAK,UAAU,OAAO,IAAI,SAAS;AAAA,MACrC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA8CO,cAAc,MAAkC;AACrD,UAAM,OAAO;AACb,UAAM,WAAW,KAAK;AACtB,UAAM,aAAa,YAAY,KAAK,IAAI;AAExC,WAAO,IAAI;AAAA,MACT,GAAG,QAAQ,aAAa,UAAU;AAAA,MAClC;AAAA,QACE,KAAK;AAAA,UACH,IAAI,KAAK,IAAI;AAAA,UACb,MAAM;AAAA,UACN,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiEO,aAAa,MAAc,MAAiC;AACjE,QAAI,CAAC,KAAK;AACR,YAAM,IAAI;AAAA,QACR,mCAAmC,KAAK,eAAe;AAAA,MACzD;AAEF,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,OAAO,KAAK,IAAI;AAAA,QAChB,UAAU,KAAK,MAAM;AAAA,QACrB,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYO,SAAS;AACd,UAAM,OAAO,KAAK;AAClB,UAAM,OAAO,KAAK;AAClB,UAAM,SAAS;AACf,UAAM,MAAM,KAAK;AACjB,UAAM,SAAS,KAAK;AACpB,UAAM,SAAS,KAAK;AACpB,UAAM,eAAe,KAAK;AAC1B,UAAM,YAAY,mBAAmB;AACrC,UAAM,SAAS,gBAAgB;AAC/B,UAAM,aAAa,iBAAiB;AACpC,UAAM,gBAAgB,oBAAoB;AAC1C,UAAM,aAAa,iBAAiB;AACpC,UAAM,WAAW,eAAe;AAChC,UAAM,QAAQ,YAAY;AAE1B,UAAM,iBAAiB,UAAU;AACjC,UAAM,aAAa,iBAAiB;AACpC,qBAAiB;AACjB,UAAM,aAAa,oBAAoB;AAEvC,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,aAAa;AAElB,SAAK,gBAAgB;AAAA,MACnB,OAAO,KAAK;AAAA,IACd,CAAC;AAED,aAAS,qBAAqB;AAC5B,aAAOF,SAAO,KAAK,SAAS,EAAE,MAAM,CAACM,gBAAe;AAAA,QAClD,GAAGA;AAAA,QACH,WAAWA,YAAW,aAAa;AAAA,MACrC,EAAE;AAAA,IACJ;AAEA,aAAS,kBAAkB;AACzB,UAAI,CAAC,KAAK,OAAQ;AAElB,aAAON,SAAO,KAAK,MAAM,EAAE,MAAM,CAACO,YAAW;AAE3C,YAAI,OAAOA,YAAW,UAAU;AAC9B,cAAIA,QAAO,QAAQA,QAAO;AACxB,kBAAM,IAAI;AAAA,cACR,6DAA6D,IAAI;AAAA,YACnE;AACF,cAAI,CAACA,QAAO,QAAQ,CAACA,QAAO;AAC1B,kBAAM,IAAI;AAAA,cACR,yDAAyD,IAAI;AAAA,YAC/D;AACF,cAAIA,QAAO,QAAQ,SAAS,CAACA,QAAO;AAClC,kBAAM,IAAI;AAAA,cACR,6DAA6D,IAAI;AAAA,YACnE;AAAA,QACJ;AAGA,cAAM,OAAO,OAAOA,YAAW,WAAW,EAAE,MAAMA,QAAO,IAAIA;AAC7D,eAAO;AAAA,UACL,MAAM,KAAK;AAAA,UACX,QAAQ,KAAK;AAAA,UACb,MAAM,KAAK;AAAA,UACX,KAAK,KAAK,QAAQ,QAAQ,SAAY,KAAK,OAAO,IAAO;AAAA,UACzD,MAAM,KAAK;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,YAAM,cAAc,OAAO;AAAA,QACzB,CAAC,UAAU,MAAM,MAAM,YAAY;AAAA,MACrC;AAEA,aAAOJ,MAAI,CAAC,KAAK,MAAM,WAAW,CAAC,EAAE,MAAM,CAAC,CAAC,MAAMK,YAAW,MAAM;AAClE,YAAI,SAAS,MAAO,QAAO,CAAC;AAG5B,cAAM,oBAAoB,CAAC,GAAG,IAAI,IAAIA,YAAW,CAAC;AAGlD,eAAO,kBAAkB,IAAI,CAAC,eAAe;AAC3C,gBAAM,SAAS,IAAIN,YAAW;AAAA,YAC5B,GAAG,IAAI,aAAa,UAAU;AAAA,YAC9B;AAAA,cACE,SAAS,IAAI;AAAA,cACb;AAAA,cACA,YAAY;AAAA,cACZ,eAAe;AAAA,YACjB;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAEA,gBAAM,iBAAiB,IAAIA,YAAW;AAAA,YACpC,GAAG,IAAI,qBAAqB,UAAU;AAAA,YACtC;AAAA,cACE,SAAS,IAAI;AAAA,cACb;AAAA,cACA,YAAY,OAAO;AAAA,cACnB,YAAY;AAAA,cACZ,oBAAoB;AAAA,gBAClB,uDAAuD;AAAA,gBACvD,uDAAuD;AAAA,gBACvD,sDAAsD;AAAA,cACxD;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAEA,gBAAM,cAAc,IAAIA,YAAW;AAAA,YACjC,GAAG,IAAI,kBAAkB,UAAU;AAAA,YACnC;AAAA,cACE,SAAS,IAAI;AAAA,cACb;AAAA,cACA,YAAY,OAAO;AAAA,cACnB,MAAM;AAAA,cACN,kBAAkB;AAAA,gBAChB,oBAAoB;AAAA,cACtB;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAEA,gBAAM,sBAAsB,IAAIA,YAAW;AAAA,YACzC,GAAG,IAAI,0BAA0B,UAAU;AAAA,YAC3C;AAAA,cACE,SAAS,IAAI;AAAA,cACb;AAAA,cACA,YAAY,OAAO;AAAA,cACnB,YAAY,eAAe;AAAA,cAC3B,oBAAoB;AAAA,gBAClB,uDAAuD;AAAA,gBACvD,uDACE;AAAA,gBACF,sDAAsD;AAAA,cACxD;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,WAAW,CAAC,WAAW,EAAE;AAAA,UACrC;AAEA,iBAAO,EAAE,QAAQ,gBAAgB,aAAa,oBAAoB;AAAA,QACpE,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAEA,aAAS,sBAAsB;AAC7B,aAAOF,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,YAAI,SAAS,MAAO,QAAO,CAAC;AAE5B,eAAO,CAAC,OAAO,KAAK,EAAE;AAAA,UACpB,CAAC,SACC,IAAIE,YAAW;AAAA,YACb,GAAG,IAAI,OAAO,IAAI;AAAA,YAClB;AAAA,cACE,WAAW,IAAI;AAAA,cACf,cAAc,WAAW,IAAI;AAAA,cAC7B,oBAAoB;AAAA,gBAClB,sDAAsD;AAAA,gBACtD,uDAAuD;AAAA,cACzD;AAAA,cACA,mBAAmB;AAAA,gBACjB,oBACE;AAAA,cACJ;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACJ;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,YAAM,YAAYC,MAAI,CAAC,YAAY,aAAa,CAAC,EAAE;AAAA,QACjD,CAAC,CAACM,aAAYC,cAAa,MACzB;AAAA,UACE;AAAA,UACAD,YAAW,IAAI,CAAC,MAAM,OAAO,OAAO,CAAC,CAAC;AAAA,UACtCC;AAAA,UACA,OAAO,IAAI,CAAC,UAAU;AAAA,YACpB,MAAM,MAAM;AAAA,YACZ,MAAM,MAAM;AAAA,UACd,CAAC;AAAA,QACH,EAAE,KAAK,CAAC;AAAA,MACZ;AAGA,YAAM,qBAAqBP,MAAI,CAAC,SAAS,CAAC,EAAE;AAAA,QAAM,CAAC,CAACQ,UAAS,MAC3DA,WAAU;AAAA,UAAI,CAAC,aACb,OAAO;AAAA,YACL,OAAO,QAAQ,QAAQ,EAAE;AAAA,cACvB,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,WAAW,GAAG,KAAK,OAAO,MAAM;AAAA,YACjD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,aAAO,IAAIT,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,IAAI;AAAA,YACb,UAAUC,MAAI,CAAC,kBAAkB,CAAC,EAAE;AAAA,cAAM,CAAC,CAACQ,UAAS,MACnD,OAAO;AAAA,gBACLA,WAAU,IAAI,CAAC,aAAa;AAAA,kBAC1B,SAAS;AAAA,kBACT,KAAK,UAAU,QAAQ;AAAA,gBACzB,CAAC;AAAA,cACH;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,MAAM,wBAAwB,aAAa,IAAI,IAAI,CAAC;AAAA,YACpD,iBAAiB,UAAU;AAAA,cACzB,CAACN,eAAc,UAAUA,WAAU,SAAS;AAAA,YAC9C;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,eAAe,CAAC,MAAM,EAAE;AAAA,QACpC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,cAAc;AACrB,aAAO,IAAIJ,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,IAAI;AAAA,YACb,WAAW,mBAAK;AAAA,YAChB,YAAY,WAAW;AAAA,YACvB,mBAAmB;AAAA,cACjB,gBAAgB,SAAS;AAAA,cACzB,QAAQ,KAAK,UAAU;AAAA;AAAA,gBAErB,aAAa;AAAA,gBACb,WAAW;AAAA,gBACX,YAAY;AAAA,gBACZ,MAAM;AAAA,gBACN,cAAc;AAAA,gBACd,QAAQ;AAAA;AAAA,gBACR,iBAAiB;AAAA;AAAA,gBACjB,aAAa;AAAA;AAAA,gBAEb,wBAAwB;AAAA,gBACxB,sBAAsB;AAAA,gBACtB,oBAAoB;AAAA,gBACpB,0BAA0B;AAAA;AAAA,gBAE1B,IAAI;AAAA,gBACJ,WAAW;AAAA,gBACX,aAAa;AAAA,cACf,CAAC;AAAA,YACH;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,YAAY;AACnB,UAAI,CAAC,OAAQ;AAEb,aAAOC,MAAI,CAAC,QAAQ,cAAc,MAAM,CAAC,EAAE;AAAA,QACzC,CAAC,CAACI,SAAQM,eAAcC,OAAM,MAAM;AAClC,cAAIP,QAAO,KAAM,QAAOP,SAAOO,QAAO,IAAI;AAC1C,cAAIA,QAAO,OAAQ,QAAOP,SAAO,MAAS;AAE1C,iBAAO,IAAI;AAAA,YACT,GAAG,IAAI;AAAA,YACP;AAAA,cACE,YAAYO,QAAO;AAAA,cACnB,KAAKA,QAAO;AAAA,YACd;AAAA,YACA;AAAA,cACE;AAAA,cACA,UACEM,kBAAiB,UAAUC,YAAW,cAClC,YAAY,WAAW,IACvB;AAAA,YACR;AAAA,UACF,EAAE;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,UAAU,CAAC,eAAgB;AAEhC,aAAOX,MAAI,CAAC,QAAQ,YAAY,CAAC,EAAE;AAAA,QAAM,CAAC,CAACI,SAAQM,aAAY,MAC7DN,QAAO,SACHL,YAAW,WAAW;AAAA,UACtB,GAAG,IAAI;AAAA,UACPK,QAAO;AAAA,UACP,CAAC;AAAA,UACD,EAAE,OAAO;AAAA,QACX,IACE,IAAIL,YAAW;AAAA,UACf,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,YAAYK,SAAQ;AAAA,cACpB,uBAAuB,EAAE,OAAOM,cAAa;AAAA,cAC7C,GAAIA,kBAAiB,aACjB;AAAA,gBACA,wBACE;AAAA,cACJ,IACE,EAAE,eAAiD;AAAA,YACzD;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AAEA,aAAS,mBAAyB;AAChC,UAAI,CAAC,UAAU,CAAC,WAAY;AAE5B,aAAO,MAAM,CAACN,YAAW;AACvB,YAAI,CAACA,QAAO,IAAK;AACjB,YAAIA,QAAO,OAAQ;AAEnB,QAAAA,QAAO,IAAI;AAAA,UACT;AAAA,UACA;AAAA,YACE,MAAMA,QAAO;AAAA,YACb,WAAW,aAAa;AAAA,cAAM,CAAC,MAC7B,MAAM,SACF,WAAW,uBACX,WAAW;AAAA,YACjB;AAAA,YACA,WAAW,aAAa;AAAA,cAAM,CAAC,MAC7B,MAAM,SACF,WAAW,mBACX,WAAW;AAAA,YACjB;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,sBAAsB;AAC7B,UAAI,CAAC,UAAU,CAAC,WAAY;AAE5B,aAAO,OAAO,MAAM;AAAA,QAClB,CAACF,WACC,IAAIH,YAAW;AAAA,UACb,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,IAAI;AAAA,YACb,YAAY,WAAW;AAAA,YACvB,WAAW,MAAM;AAAA,YACjB,UAAUG;AAAA,UACZ;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMP,iBAAe;AAErB,aAAa,eAAeA;;;AQ9nD5B,SAA2C,OAAAiB,OAAK,UAAAC,gBAAc;;;ACA9D;AAAA,EAIE,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAGP,SAAS,gBAAAC,eAAc,UAAAC,gBAAc;;;ACTrC,SAAwB,eAAAC,eAAa,UAAAC,gBAAc;AAGnD,SAAS,oBAAoB;AA0BtB,SAAS,eACd,MACA,MACA,eACA,QACA;AACA,QAAM,WAAWC,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACjD,QAAI,CAAC,KAAM,QAAO,EAAE,mBAAmB,OAAO;AAC9C,QAAI,KAAK,IAAK,QAAO,EAAE,mBAAmB,UAAU;AACpD,QAAI,KAAK;AACP,aAAO;AAAA,QACL,mBAAmB;AAAA,QACnB,cAAc,KAAK;AAAA,MACrB;AACF,QAAI,KAAK;AACP,aAAO;AAAA,QACL,mBAAmB;AAAA,QACnB,qBAAqB,KAAK,IAAI;AAAA,QAC9B,cAAc,KAAK,IAAI;AAAA,MACzB;AACF,WAAO,EAAE,mBAAmB,OAAO;AAAA,EACrC,CAAC;AAED,SAAO,SAAS;AAAA,IACd,CAACC,cACC,IAAI,aAAa;AAAA,MACf,GAAG;AAAA,QACD,KAAK,WAAW;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,OAAOD,SAAO,KAAK,GAAG,EAAE;AAAA,UACxB,UAAU,KAAK;AAAA,UACf,QAAQE,6BAA2B,aAAa;AAAA,UAChD,GAAGD;AAAA,QACL;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAAA,EACJ;AACF;;;ADzBO,IAAM,0BAAN,cAAsC,UAAU;AAAA,EACpC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAME,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAC3B,UAAM,QAAQA,SAAO,KAAK,KAAK;AAE/B,UAAM,KAAK,eAAe;AAC1B,UAAMC,cAAa,iBAAiB;AACpC,UAAM,cAAc,kBAAkB;AACtC,UAAM,WAAW,eAAe,MAAM,MAAM,YAAY,IAAI,IAAI;AAEhE,SAAK,KAAK;AACV,SAAK,aAAaA;AAClB,SAAK,WAAW;AAChB,SAAK,cAAc;AAEnB,aAAS,iBAAiB;AACxB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAaC,gBAAc,IAAI,IAAI,UAAU,KAAK;AAAA,UAClD,MAAM,KAAK;AAAA,QACb;AAAA,QACA,KAAK;AAAA,QACL,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAWD,gBAAc,IAAI,YAAY;AAAA,QAC3C;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAIE,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,iBAAiB;AAAA,YACjB,gBAAgB,GAAG;AAAA,YACnB,sBAAsB;AAAA,UACxB;AAAA,UACA,EAAE,QAAQ,MAAM,WAAW,CAACH,WAAU,EAAE;AAAA,QAC1C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,MAIZ,aAAa,KAAK;AAAA,IACpB;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,wBAAwB,eAAeA;;;AE3IvC;AAAA,EAGE,eAAAM;AAAA,EACA,UAAAC;AAAA,OACK;AAGP,SAAS,gBAAAC,eAAc,UAAAC,gBAAc;AAuC9B,IAAM,yBAAN,cAAqC,UAAU;AAAA,EACnC;AAAA,EAEjB,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAC3B,UAAM,OAAO,KAAK,UAAUA,SAAO,KAAK,MAAM;AAC9C,UAAM,MAAM,KAAK,OAAOA,SAAO,KAAK,GAAG;AAEvC,6BAAyB;AACzB,UAAM,KAAK,eAAe;AAC1B,UAAM,aAAa,iBAAiB;AACpC,qBAAiB;AAEjB,SAAK,aAAa;AAElB,aAAS,2BAA2B;AAClC,YAAM,cAAc,CAAC,MAAM,GAAG,EAAE,OAAO,CAAC,MAAM,CAAC;AAE/C,UAAI,YAAY,WAAW;AACzB,cAAM,IAAI;AAAA,UACR,mDAAmD,KAAK,IAAI;AAAA,QAC9D;AAEF,UAAI,YAAY,SAAS;AACvB,cAAM,IAAI;AAAA,UACR,wDAAwD,KAAK,IAAI;AAAA,QACnE;AAAA,IACJ;AAEA,aAAS,iBAAiB;AACxB,UAAI,CAAC,KAAM;AAEX,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAaC,gBAAc,IAAI,IAAI;AAAA,QACrC;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,YAAM,wBACJ,KAAK,SAAS,SACV,kCACA;AAEN,aAAO,IAAIC,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,GAAI,OACA;AAAA,cACE,gBAAgB;AAAA,cAChB,iBAAiB,KAAK;AAAA,gBACpB,CAACC,UAASA,MAAK,mBAAmB,CAAC,qBAAqB;AAAA,cAC1D;AAAA,cACA,eAAe,GAAI;AAAA,cACnB,GAAI,KAAK,SAAS,SACd;AAAA,gBACE,8BAA8B,KAAK;AAAA,kBAAM,CAACA,UACxC,UAAUA,MAAK,OAAO,WAAW;AAAA,gBACnC;AAAA,gBACA,gCAAgC,KAAK;AAAA,kBACnC,CAACA,UAASA,MAAK,WAAW;AAAA,gBAC5B;AAAA,gBACA,uBAAuB,KAAK;AAAA,kBAC1B,CAACA,WAAUA,MAAK,YAAY,cAAc;AAAA,gBAC5C;AAAA,cACF,IACA,CAAC;AAAA,YACP,IACA;AAAA,cACE,gBAAgB;AAAA,cAChB,iBAAiB;AAAA,gBACf,IAAK;AAAA,kBACH,CAACC,SAAQA,KAAI,kBAAkB;AAAA,gBACjC;AAAA,cACF;AAAA,cACA,kBAAkB,IAAK,MAAM,CAACA,UAAS;AAAA,gBACrC,WAAWA,KAAI;AAAA,gBACf,QAAQA,KAAI;AAAA,cACd,EAAE;AAAA,YACJ;AAAA,UACN;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,GAAI;AAET,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAWJ,gBAAc,IAAI,YAAY,gBAAgB,WAAW,EAAE;AAAA,QACxE;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,YAAY,KAAK;AAAA,IACnB;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,uBAAuB,eAAeA;;;AHxKtC,SAAS,gBAAAO,eAAc,cAAAC,mBAAyB;;;AInBhD;AAAA,EAKE,UAAAC;AAAA,OACK;AAEP,SAAS,gBAAAC,qBAAoB;AA6BtB,IAAM,uBAAN,cAAmC,UAAU;AAAA,EACjC;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAE3B,UAAM,cAAc,kBAAkB;AACtC,UAAM,WAAW,eAAe,MAAM,MAAM,YAAY,IAAI,IAAI;AAEhE,SAAK,WAAW;AAChB,SAAK,cAAc;AAEnB,aAAS,oBAAoB;AAC3B,aAAO,IAAIC,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,iBAAiB;AAAA,YACjB,gBAAgB,KAAK;AAAA,YACrB,mBAAmB;AAAA,UACrB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,MAIZ,aAAa,KAAK;AAAA,IACpB;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,qBAAqB,eAAeA;;;ACzFpC;AAAA,EAIE,UAAAG;AAAA,OACK;AAEP,SAAS,gBAAAC,qBAAoB;AAuCtB,IAAM,2BAAN,cAAuC,UAAU;AAAA,EACrC;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAE3B,UAAM,cAAc,kBAAkB;AACtC,UAAM,WAAW,eAAe,MAAM,MAAM,YAAY,IAAI,IAAI;AAEhE,SAAK,WAAW;AAChB,SAAK,cAAc;AAEnB,aAAS,oBAAoB;AAC3B,aAAO,IAAIC,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,cAAc,KAAK;AAAA,YACnB,gBAAgB;AAAA,YAChB,iBAAiB;AAAA,YACjB,gBAAgB,KAAK;AAAA,YACrB,mBAAmB;AAAA,UACrB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,MAIZ,aAAa,KAAK;AAAA,IACpB;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,yBAAyB,eAAeA;;;AL+jBjC,IAAM,eAAN,cAA2B,UAAmC;AAAA,EAC3D;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAAyB,CAAC,GAC1B,OAAiC,CAAC,GAClC;AACA,UAAMG,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,YAAY,mBAAmB;AACrC,UAAM,SAAS,gBAAgB;AAC/B,UAAM,OAAO,cAAc;AAC3B,UAAM,MAAM,aAAa;AAEzB,UAAM,UAAU,cAAc;AAC9B,UAAM,MAAM,UAAU;AACtB,UAAM,WAAW,eAAe;AAChC,UAAM,QAAQ,YAAY;AAE1B,UAAM,iBAAiB,UAAU;AACjC,UAAM,aAAa,iBAAiB;AACpC,qBAAiB;AACjB,UAAM,aAAa,oBAAoB;AAEvC,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,MAAM;AACX,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,WAAW;AAChB,SAAK,UAAU;AAEf,SAAK,gBAAgB;AAAA,MACnB,OAAO,KAAK;AAAA,IACd,CAAC;AAED,aAAS,qBAAqB;AAC5B,aAAOC,SAAO,KAAK,SAAS,EAAE,MAAM,CAACC,gBAAe;AAAA,QAClD,GAAGA;AAAA,QACH,WAAWA,YAAW,aAAa;AAAA,MACrC,EAAE;AAAA,IACJ;AAEA,aAAS,kBAAkB;AACzB,UAAI,CAAC,KAAK,OAAQ;AAElB,aAAOD,SAAO,KAAK,MAAM,EAAE,MAAM,CAACE,YAAW;AAE3C,YAAI,OAAOA,YAAW,UAAU;AAC9B,cAAIA,QAAO,QAAQA,QAAO;AACxB,kBAAM,IAAI;AAAA,cACR,6DAA6D,IAAI;AAAA,YACnE;AACF,cAAI,CAACA,QAAO,QAAQ,CAACA,QAAO;AAC1B,kBAAM,IAAI;AAAA,cACR,yDAAyD,IAAI;AAAA,YAC/D;AACF,cAAIA,QAAO,QAAQ,SAAS,CAACA,QAAO;AAClC,kBAAM,IAAI;AAAA,cACR,6DAA6D,IAAI;AAAA,YACnE;AAAA,QACJ;AAGA,cAAM,OAAO,OAAOA,YAAW,WAAW,EAAE,MAAMA,QAAO,IAAIA;AAC7D,eAAO;AAAA,UACL,MAAM,KAAK;AAAA,UACX,QAAQ,KAAK;AAAA,UACb,MAAM,KAAK;AAAA,UACX,KAAK,KAAK,QAAQ,QAAQ,SAAY,KAAK,OAAO,IAAO;AAAA,UACzD,MAAM,KAAK;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,gBAAgB;AACvB,aAAOF,SAAO,KAAK,IAAI,EAAE,MAAM,CAACG,UAAS;AACvC,YAAIA,UAAS,MAAO,QAAO,CAAC;AAE5B,cAAM,cAA6D;AAAA,UACjE,cAAc,CAAC,GAAG;AAAA,UAClB,cAAc,CAAC,GAAG;AAAA,UAClB,cAAc,CAAC,GAAG;AAAA,QACpB;AACA,eAAOA,UAAS,QAAQA,UAAS,SAC7B,cACA;AAAA,UACA,GAAG;AAAA,UACH,GAAGA;AAAA,UACH,QAAQA,MAAK,UAAU,UAAUA,MAAK,MAAM;AAAA,QAC9C;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,eAAe;AAEtB,UAAI,CAAC,KAAK,IAAK;AAGf,UAAI,KAAK,eAAeC,MAAK;AAC3B,eAAO;AAAA,UACL,SAAS,KAAK,IAAI;AAAA,UAClB,gBAAgB,KAAK,IAAI;AAAA,QAC3B;AAAA,MACF;AAGA,aAAOJ,SAAO,KAAK,GAAG;AAAA,IACxB;AAEA,aAAS,gBAAgB;AACvB,UAAI,CAAC,IAAK;AAEV,aAAO,IAAIK,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkB,IAAI;AAAA,YACtB,WAAW,IAAI;AAAA,UACjB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,YAAY;AACnB,aAAO,IAAIA,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,cAAc;AAAA,YACd,mBAAmB;AAAA,UACrB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,MAAM,wBAAwB,aAAa,IAAI,IAAI,CAAC;AAAA,YACpD,iBAAiB,UAAU;AAAA,cACzB,CAACL,eAAc,UAAUA,WAAU,SAAS;AAAA,YAC9C;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,eAAe,CAAC,MAAM,EAAE;AAAA,QACpC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,cAAc;AACrB,aAAO,IAAII,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,YAAY;AAAA,YACZ,MAAM;AAAA,YACN,mBAAmB;AAAA,cACjB,gBAAgB,SAAS;AAAA,cACzB,QAAQ,KAAK,UAAU;AAAA;AAAA,gBAErB,aAAa;AAAA,gBACb,WAAW;AAAA,gBACX,YAAY;AAAA,gBACZ,MAAM;AAAA,gBACN,UAAU;AAAA,gBACV,QAAQ;AAAA;AAAA,gBACR,iBAAiB;AAAA;AAAA;AAAA,gBAEjB,sBAAsB;AAAA,gBACtB,mBAAmB;AAAA,gBACnB,oBAAoB;AAAA,gBACpB,0BAA0B;AAAA;AAAA,gBAE1B,IAAI;AAAA,gBACJ,WAAW;AAAA;AAAA,cAEb,CAAC;AAAA,YACH;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,YAAY;AACnB,UAAI,CAAC,OAAQ,QAAOL,SAAO,MAAS;AAEpC,aAAO,OAAO,MAAM,CAACE,YAAW;AAC9B,YAAIA,QAAO,KAAM,QAAOF,SAAOE,QAAO,IAAI;AAC1C,YAAIA,QAAO,OAAQ,QAAOF,SAAO,MAAS;AAE1C,eAAO,IAAI;AAAA,UACT,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAYE,QAAO;AAAA,YACnB,KAAKA,QAAO;AAAA,UACd;AAAA,UACA,EAAE,OAAO;AAAA,QACX,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,UAAU,CAAC,eAAgB;AAEhC,aAAOF,SAAO,MAAM,EAAE,MAAM,CAACE,YAAW;AACtC,eAAOA,QAAO,SACVG,cAAa,WAAW;AAAA,UACxB,GAAG,IAAI;AAAA,UACPH,QAAO;AAAA,UACP,CAAC;AAAA,UACD,EAAE,OAAO;AAAA,QACX,IACE,IAAIG,cAAa;AAAA,UACjB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,YAAYH,QAAO;AAAA,cACnB,yBAAyB,eAAe;AAAA,gBACtC,CAACK,qBAAoB;AAAA,kBACnB,gBAAgBA;AAAA,kBAChB,cAAc;AAAA,kBACd,gBAAgB;AAAA,gBAClB;AAAA,cACF;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,mBAAyB;AAChC,UAAI,CAAC,UAAU,CAAC,WAAY;AAE5B,aAAO,MAAM,CAACL,YAAW;AACvB,YAAI,CAACA,QAAO,IAAK;AACjB,YAAIA,QAAO,OAAQ;AAEnB,QAAAA,QAAO,IAAI;AAAA,UACT;AAAA,UACA;AAAA,YACE,MAAMA,QAAO;AAAA,YACb,WAAW,WAAW,wBAAwB;AAAA,YAC9C,WAAW,WAAW,wBAAwB;AAAA,UAChD;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,sBAAsB;AAC7B,UAAI,CAAC,UAAU,CAAC,WAAY;AAE5B,aAAO,OAAO,MAAM;AAAA,QAClB,CAACM,WACC,IAAIH,cAAa;AAAA,UACf,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,YAAY,WAAW;AAAA,YACvB,OAAO,MAAM;AAAA,YACb,eAAeG;AAAA,UACjB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AAGf,WAAO,KAAK,cAAc,KAAK,aAC3BC,MAAI,CAAC,KAAK,WAAW,YAAY,KAAK,WAAW,aAAa,CAAC,EAAE;AAAA,MACjE,CAAC,CAAC,QAAQ,GAAG,MACX,MAAM,WAAW,MAAM,IAAI,GAAG,MAAM,WAAW,MAAM;AAAA,IACzD,IACE,KAAK,IAAI;AAAA,EACf;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA,MAIV,IAAI,aAAa;AACf,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR,8EAA8E,KAAK,eAAe;AAAA,UACpG;AACF,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA,MAIf,SAAS,KAAK;AAAA,IAChtC,UAAM,cAAc;AAAA,MAClB,KAAK,gBAAgB,WAAW,OAAO;AAAA,MACvC,KAAK,aAAa,KAAK;AAAA,MACvB;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AACA,WAAO,IAAI;AAAA,MACT,YAAY,CAAC;AAAA,MACb;AAAA,QACE,KAAK;AAAA,UACH,MAAM,KAAK;AAAA,UACX,IAAI,KAAK,IAAI;AAAA,UACb,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,QACA,aAAa,KAAK,gBAAgB;AAAA,QAClC,kBAAkB,KAAK,gBAAgB,WAAW,OAAO;AAAA,QACzD,GAAG,YAAY,CAAC;AAAA,MAClB;AAAA,MACA,YAAY,CAAC;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BO,SACL,UACA,KACA,OAA8B,CAAC,GAC/B;AACA,UAAM,QAAQ,KAAK,WAAW,QAAQ;AACtC,UAAM,cAAc;AAAA,MAClB,KAAK,gBAAgB,WAAW,OAAO;AAAA,MACvC,KAAK,aAAa,KAAK;AAAA,MACvB;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AACA,WAAO,IAAI;AAAA,MACT,YAAY,CAAC;AAAA,MACb;AAAA,QACE,KAAK;AAAA,UACH,MAAM,KAAK;AAAA,UACX,IAAI,KAAK,IAAI;AAAA,UACb,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,QACA,GAAG,YAAY,CAAC;AAAA,MAClB;AAAA,MACA,YAAY,CAAC;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+DO,aACL,UACA,KACA,OAA8B,CAAC,GAC/B;AACA,QAAI,CAAC,KAAK;AACR,YAAM,IAAI;AAAA,QACR,gFAAgF,KAAK,eAAe;AAAA,MACtG;AAEF,UAAM,QAAQ,KAAK,WAAW,QAAQ;AACtC,UAAM,cAAc;AAAA,MAClB,KAAK,gBAAgB,WAAW,OAAO;AAAA,MACvC,KAAK,aAAa,KAAK;AAAA,MACvB;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AACA,WAAO,IAAI;AAAA,MACT,YAAY,CAAC;AAAA,MACb;AAAA,QACE,KAAK;AAAA,UACH,MAAM,KAAK;AAAA,UACX,IAAI,KAAK,IAAI;AAAA,UACb,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA;AAAA,QACA,SAAS,KAAK,QAAQ;AAAA,QACtB;AAAA,QACA,GAAG,YAAY,CAAC;AAAA,MAClB;AAAA,MACA,YAAY,CAAC;AAAA,IACf;AAAA,EACF;AAAA,EAEQ,WAAW,UAAkB;AACnC,QAAI,SAAS,YAAY,MAAM,WAAY,QAAO;AAElD,UAAM,QAAQ,SAAS,MAAM,GAAG;AAChC,QAAI,MAAM,WAAW,GAAG;AACtB,YAAM,IAAI;AAAA,QACR,iBAAiB,QAAQ;AAAA,MAC3B;AAAA,IACF;AACA,UAAM,CAAC,WAAWD,MAAI,IAAI,SAAS,MAAM,GAAG;AAC5C,UAAM,SAAS,UAAU,YAAY;AACrC,QACE,CAAC;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,EAAE,SAAS,MAAM;AAEjB,YAAM,IAAI;AAAA,QACR,kBAAkB,SAAS,aAAa,QAAQ;AAAA,MAClD;AAEF,QAAI,CAACA,OAAK,WAAW,GAAG;AACtB,YAAM,IAAI;AAAA,QACR,gBAAgBA,MAAI,aAAa,QAAQ;AAAA,MAC3C;AAEF,WAAO,GAAG,MAAM,IAAIA,MAAI;AAAA,EAC1B;AAAA,EAEQ,aAAa,OAAe;AAClC,UAAM,SAAS;AAAA,MACb,yBAAyB,CAAC,UAAU,KAAK,EAAE,KAAK,EAAE,GAAG,CAAC;AAAA,IACxD;AACA,WAAO,GAAG,KAAK,eAAe,QAAQ,MAAM;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0DO,cAAc,MAAkC;AACrD,UAAM,OAAO;AACb,UAAM,WAAW,KAAK;AACtB,UAAM,aAAa,YAAY,KAAK,IAAI;AAExC,WAAO,IAAI;AAAA,MACT,GAAG,QAAQ,aAAa,UAAU;AAAA,MAClC;AAAA,QACE,KAAK;AAAA,UACH,IAAI,KAAK,IAAI;AAAA,UACb,MAAM;AAAA,UACN,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA,MAAM;AAAA,QACN,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMT,iBAAe;AAErB,aAAa,eAAeA;;;AMt4C5B;AAAA,EAGE,OAAAW;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;;;ACNP;AAAA,EAIE,OAAAC;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAIP,SAAS,gBAAAC,eAAc,UAAAC,gBAAc;AA6C9B,IAAM,2BAAN,cAAuC,UAAU;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAC3B,UAAM,QAAQA,SAAO,KAAK,KAAK;AAE/B,UAAM,KAAK,eAAe;AAC1B,UAAMC,cAAa,iBAAiB;AACpC,UAAM,cAAc,kBAAkB;AACtC,UAAM,WAAWC,gBAAe;AAEhC,SAAK,KAAK;AACV,SAAK,aAAaD;AAClB,SAAK,WAAW;AAChB,SAAK,cAAc;AAEnB,aAAS,iBAAiB;AACxB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAaE,gBAAc,IAAI,IAAI,UAAU,KAAK;AAAA,QACpD;AAAA,QACA,KAAK;AAAA,QACL,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAWD,gBAAc,IAAI,YAAY;AAAA,QAC3C;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAIE,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,iBAAiB;AAAA,YACjB,gBAAgB,GAAG,IAAI,MAAM,CAAC,QAAQ;AACpC,oBAAM,CAAC,EAAE,WAAW,EAAE,MAAM,IAAI,IAAI,MAAM,GAAG;AAC7C,qBAAO,OAAO,SAAS,eAAe,MAAM,qCAAqC,GAAG;AAAA,YACtF,CAAC;AAAA,UACH;AAAA,UACA,EAAE,QAAQ,MAAM,WAAW,CAACJ,WAAU,EAAE;AAAA,QAC1C;AAAA,MACF;AAAA,IACF;AAEA,aAASC,kBAAiB;AACxB,YAAM,WAAWI,MAAI,CAAC,KAAK,OAAO,KAAK,IAAI,CAAC,EAAE,MAAM,CAAC,CAACC,QAAO,IAAI,MAAM;AACrE,YAAIA,WAAU,WAAY,QAAO,EAAE,mBAAmB,OAAO;AAC7D,YAAI,CAAC,KAAM,QAAO,EAAE,mBAAmB,OAAO;AAC9C,YAAI,KAAK,IAAK,QAAO,EAAE,mBAAmB,UAAU;AACpD,YAAI,KAAK;AACP,iBAAO;AAAA,YACL,mBAAmB;AAAA,YACnB,cAAc,KAAK;AAAA,UACrB;AACF,YAAI,KAAK;AACP,iBAAO;AAAA,YACL,mBAAmB;AAAA,YACnB,qBAAqB,KAAK,IAAI;AAAA,YAC9B,cAAc,KAAK,IAAI;AAAA,UACzB;AACF,eAAO,EAAE,mBAAmB,OAAO;AAAA,MACrC,CAAC;AAED,aAAO,SAAS;AAAA,QACd,CAACC,cACC,IAAIH,cAAa;AAAA,UACf,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,OAAO,IAAI;AAAA,cACX,UAAU;AAAA,cACV,QAAQF,6BAA2B,YAAY,EAAE;AAAA,cACjD,GAAGK;AAAA,YACL;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,MAIZ,aAAa,KAAK;AAAA,IACpB;AAAA,EACF;AACF;AAEA,IAAMT,iBAAe;AAErB,yBAAyB,eAAeA;;;ADrKxC,SAAS,gBAAAU,eAAc,cAAAC,mBAAkB;AA4WlC,IAAM,sBAAN,cAAkC,UAAmC;AAAA,EAClE;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAAgC,CAAC,GACjC,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,YAAY,mBAAmB;AACrC,UAAM,SAAS,gBAAgB;AAE/B,UAAM,cAAc,uBAAuB,MAAM,IAAI;AACrD,UAAM,MAAM,UAAU;AACtB,UAAM,WAAW,eAAe;AAChC,UAAM,QAAQ,YAAY;AAE1B,UAAM,iBAAiB,UAAU;AACjC,UAAM,aAAa,iBAAiB;AACpC,qBAAiB;AACjB,UAAM,aAAa,oBAAoB;AAEvC,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,WAAW;AAEhB,SAAK,gBAAgB;AAAA,MACnB,OAAO,KAAK;AAAA,IACd,CAAC;AAED,aAAS,qBAAqB;AAC5B,aAAOC,SAAO,KAAK,SAAS,EAAE,MAAM,CAACC,gBAAe;AAAA,QAClD,GAAGA;AAAA,QACH,WAAWA,YAAW,aAAa;AAAA,MACrC,EAAE;AAAA,IACJ;AAEA,aAAS,kBAAkB;AACzB,UAAI,CAAC,KAAK,OAAQ;AAElB,aAAOD,SAAO,KAAK,MAAM,EAAE,MAAM,CAACE,YAAW;AAE3C,YAAI,OAAOA,YAAW,UAAU;AAC9B,cAAIA,QAAO,QAAQA,QAAO;AACxB,kBAAM,IAAI;AAAA,cACR,6DAA6D,IAAI;AAAA,YACnE;AACF,cAAI,CAACA,QAAO,QAAQ,CAACA,QAAO;AAC1B,kBAAM,IAAI;AAAA,cACR,yDAAyD,IAAI;AAAA,YAC/D;AACF,cAAIA,QAAO,QAAQ,SAAS,CAACA,QAAO;AAClC,kBAAM,IAAI;AAAA,cACR,6DAA6D,IAAI;AAAA,YACnE;AAAA,QACJ;AAGA,cAAM,OAAO,OAAOA,YAAW,WAAW,EAAE,MAAMA,QAAO,IAAIA;AAC7D,eAAO;AAAA,UACL,MAAM,KAAK;AAAA,UACX,QAAQ,KAAK;AAAA,UACb,MAAM,KAAK;AAAA,UACX,KAAK,KAAK,QAAQ,QAAQ,SAAY,KAAK,OAAO,IAAO;AAAA,UACzD,MAAM,KAAK;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,YAAY;AACnB,aAAO,IAAIC,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,cAAc;AAAA,YACd,0BAA0B;AAAA,UAC5B;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,MAAM,wBAAwB,aAAa,IAAI,IAAI,CAAC;AAAA,YACpD,iBAAiB,UAAU;AAAA,cACzB,CAACH,eAAc,UAAUA,WAAU,SAAS;AAAA,YAC9C;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,eAAe,CAAC,MAAM,EAAE;AAAA,QACpC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,cAAc;AACrB,aAAO,IAAIE,cAAa;AAAA,QACtB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,YAAY;AAAA,YACZ,MAAM;AAAA,YACN,mBAAmB;AAAA,cACjB,gBAAgB,SAAS;AAAA,cACzB,QAAQ,KAAK,UAAU;AAAA;AAAA,gBAErB,aAAa;AAAA,gBACb,WAAW;AAAA,gBACX,WAAW;AAAA,gBACX,UAAU;AAAA,gBACV,QAAQ;AAAA;AAAA;AAAA,gBAER,sBAAsB;AAAA,gBACtB,mBAAmB;AAAA,gBACnB,oBAAoB;AAAA,gBACpB,0BAA0B;AAAA;AAAA,gBAE1B,IAAI;AAAA,gBACJ,WAAW;AAAA;AAAA,gBAEX,aAAa;AAAA,gBACb,cAAc;AAAA,cAChB,CAAC;AAAA,YACH;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,WAAW,YAAY;AAAA,QACnC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,YAAY;AACnB,UAAI,CAAC,OAAQ,QAAOH,SAAO,MAAS;AAEpC,aAAO,OAAO,MAAM,CAACE,YAAW;AAC9B,YAAIA,QAAO,KAAM,QAAOF,SAAOE,QAAO,IAAI;AAC1C,YAAIA,QAAO,OAAQ,QAAOF,SAAO,MAAS;AAE1C,eAAO,IAAI;AAAA,UACT,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAYE,QAAO;AAAA,YACnB,KAAKA,QAAO;AAAA,UACd;AAAA,UACA,EAAE,OAAO;AAAA,QACX,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,UAAU,CAAC,eAAgB;AAEhC,aAAOG,MAAI,CAAC,QAAQ,cAAc,CAAC,EAAE,MAAM,CAAC,CAACH,SAAQI,eAAc,MAAM;AACvE,eAAOJ,QAAO,SACVC,cAAa,WAAW;AAAA,UACxB,GAAG,IAAI;AAAA,UACPD,QAAO;AAAA,UACP,CAAC;AAAA,UACD,EAAE,OAAO;AAAA,QACX,IACE,IAAIC,cAAa;AAAA,UACjB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,YAAYD,QAAO;AAAA,cACnB,yBAAyB;AAAA,gBACvB,gBAAgBI;AAAA,gBAChB,cAAc;AAAA,gBACd,gBAAgB;AAAA,cAClB;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,mBAAyB;AAChC,UAAI,CAAC,UAAU,CAAC,WAAY;AAE5B,aAAO,MAAM,CAACJ,YAAW;AACvB,YAAI,CAACA,QAAO,IAAK;AACjB,YAAIA,QAAO,OAAQ;AAEnB,QAAAA,QAAO,IAAI;AAAA,UACT;AAAA,UACA;AAAA,YACE,MAAMA,QAAO;AAAA,YACb,WAAW,WAAW,wBAAwB;AAAA,YAC9C,WAAW,WAAW,wBAAwB;AAAA,UAChD;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,sBAAsB;AAC7B,UAAI,CAAC,UAAU,CAAC,WAAY;AAE5B,aAAO,OAAO,MAAM;AAAA,QAClB,CAACK,WACC,IAAIJ,cAAa;AAAA,UACf,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,YAAY,WAAW;AAAA,YACvB,OAAO;AAAA,YACP,eAAeI;AAAA,UACjB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AAGf,WAAO,KAAK,cAAc,KAAK,aAC3BF,MAAI,CAAC,KAAK,WAAW,YAAY,KAAK,WAAW,aAAa,CAAC,EAAE;AAAA,MACjE,CAAC,CAAC,QAAQ,GAAG,MACX,MAAM,SAAS,MAAM,IAAI,GAAG,MAAM,SAAS,MAAM;AAAA,IACrD,IACEG,gBAAc,KAAK,IAAI,WAAW,IAAI,KAAK,MAAM,IAAI;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,IAAW,qBAAqB;AAE9B,WAAO,KAAK,IAAI,YAAY;AAAA,MAC1B,CAAC,aACCA,gBAAc,SAAS,QAAQ,OAAO,OAAO,CAAC,IAAI,KAAK,MAAM,IAAI;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA,MAIV,IAAI,aAAa;AACf,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR,8EAA8E,KAAK,eAAe;AAAA,UACpG;AACF,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwDO,MACL,OACA,SACA,OAAqC,CAAC,GACtC;AACA,UAAM,SAAS,KAAK;AACpB,UAAM,SAAS;AAAA,MACb,CAAC,YAAY,eAAe,UAAU,EAAE,SAAS,KAAK,IAClD,QACA,yBAAyB,GAAG,QAAQ,GAAG,KAAK,IAAI,CAAC;AAAA,IACvD;AAEA,UAAM,cAAc;AAAA,MAClB,KAAK,gBAAgB,WAAW,OAAO;AAAA,MACvC,GAAG,MAAM,QAAQ,MAAM;AAAA,MACvB;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAEA,WAAO,IAAI;AAAA,MACT,YAAY,CAAC;AAAA,MACb;AAAA,QACE,KAAK;AAAA,UACH,MAAM;AAAA,UACN,IAAI,KAAK,IAAI;AAAA,UACb,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA;AAAA,QACA;AAAA,QACA,kBAAkB,KAAK,gBAAgB,WAAW,OAAO;AAAA,QACzD,GAAG,YAAY,CAAC;AAAA,MAClB;AAAA,MACA,YAAY,CAAC;AAAA,IACf;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA4DO,cAAc,MAAc,MAAyC;AAC1E,UAAM,OAAO;AACb,UAAM,kBAAkB,KAAK;AAE7B,WAAO,IAAI;AAAA,MACT,GAAG,eAAe,aAAa,IAAI;AAAA,MACnC;AAAA,QACE,KAAK;AAAA,UACH,IAAI,KAAK,IAAI;AAAA,UACb,MAAM;AAAA,UACN,cAAc,KAAK,IAAI;AAAA,QACzB;AAAA,QACA,MAAM;AAAA,QACN;AAAA,QACA,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,QACV,oBAAoB,KAAK;AAAA,MAC3B;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,+BAA+B;AAAA,UACzC,WAAW,CAACA,gBAAc,KAAK,IAAI,YAAY,qBAAqB;AAAA,QACtE,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMT,iBAAe;AAErB,oBAAoB,eAAeA;;;AE92BnC,OAAOU,SAAQ;AACf,SAAmC,eAAAC,eAAa,UAAAC,gBAAc;;;ACD9D;AAAA,EAIE,UAAAC;AAAA,OACK;AAMP,SAAS,SAAS,OAAAC,YAAW;AAwBtB,IAAM,oBAAN,cAAgC,UAAU;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,UAAM,QAAQC,SAAO,KAAK,KAAK;AAE/B,6BAAyB;AACzB,UAAM,OAAO,QAAQ;AAErB,UAAMC,WAAS,eAAe;AAC9B,UAAM,cAAc,kBAAkB;AACtC,UAAM,aAAa,iBAAiB;AAEpC,SAAK,aAAa;AAClB,SAAK,SAASA;AACd,SAAK,cAAc;AAEnB,aAAS,2BAA2B;AAClC,YAAM,UAAU;AAAA,QACd,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP,EAAE,OAAO,CAAC,WAAW,MAAM;AAE3B,UAAI,QAAQ,SAAS,GAAG;AACtB,cAAM,IAAI;AAAA,UACR,4CAA4C,QAAQ,MAAM;AAAA,QAC5D;AAAA,MACF;AAAA,IACF;AAEA,aAAS,UAAU;AACjB,UAAI,KAAK,OAAQ,QAAO;AACxB,UAAI,KAAK,SAAU,QAAO;AAC1B,UAAI,KAAK,cAAe,QAAO;AAC/B,UAAI,KAAK,YAAa,QAAO;AAC7B,UAAI,KAAK,KAAM,QAAO;AACtB,UAAI,KAAK,WAAY,QAAO;AAC5B,UAAI,KAAK,IAAK,QAAO;AACrB,aAAO;AAAA,IACT;AAEA,aAAS,iBAAiB;AACxB,UAAI,CAAC,KAAK,OAAQ;AAElB,aAAO,gBAAgB,GAAG,IAAI,YAAY,KAAK,QAAQ;AAAA,QACrD,aAAa,GAAG,KAAK,gBAAgB;AAAA,MACvC,CAAC;AAAA,IACH;AAEA,aAAS,oBAAoB;AAC3B,UACE,CAACA,YACD,CAAC,KAAK,YACN,CAAC,KAAK,iBACN,CAAC,KAAK,eACN,CAAC,KAAK;AAEN;AAEF,aAAO,IAAIC,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkBA,KAAI,wBAAwB;AAAA,cAC5C,YAAY;AAAA,gBACV;AAAA,kBACE,SAAS,CAAC,gBAAgB;AAAA,kBAC1B,YAAY;AAAA,oBACV;AAAA,sBACE,MAAM;AAAA,sBACN,aAAa,CAAC,uBAAuB;AAAA,oBACvC;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC,EAAE;AAAA,YACH,gBAAgB;AAAA,cACd;AAAA,gBACE,MAAM;AAAA,gBACN,QAAQA,KAAI,wBAAwB;AAAA,kBAClC,YAAY;AAAA,oBACV,GAAID,WACA,CAAC,EAAE,SAAS,CAAC,UAAU,GAAG,WAAW,CAACA,SAAO,GAAG,EAAE,CAAC,IACnD,CAAC;AAAA,oBACL,GAAI,KAAK,WACL;AAAA,sBACE;AAAA,wBACE,SAAS,CAAC,YAAY;AAAA,wBACtB,WAAW,CAAC,KAAK,QAAQ;AAAA,sBAC3B;AAAA,oBACF,IACA,CAAC;AAAA,oBACL,GAAI,KAAK,gBACL;AAAA,sBACE;AAAA,wBACE,SAAS,CAAC,MAAM;AAAA,wBAChB,WAAW,CAAC,KAAK,aAAa;AAAA,sBAChC;AAAA,oBACF,IACA,CAAC;AAAA,oBACL,GAAI,KAAK,cACL;AAAA,sBACE;AAAA,wBACE,SAAS,CAAC,UAAU;AAAA,wBACpB,WAAW,CAAC,KAAK,WAAW;AAAA,sBAC9B;AAAA,oBACF,IACA,CAAC;AAAA,oBACL,GAAI,KAAK,aACL;AAAA,sBACE;AAAA,wBACE,SAAS,CAAC,cAAc;AAAA,wBACxB,WAAW,CAAC,KAAK,UAAU;AAAA,sBAC7B;AAAA,oBACF,IACA,CAAC;AAAA,kBACP;AAAA,gBACF,CAAC,EAAE;AAAA,cACL;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAI,QAAQ;AAAA,QACjB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE;AAAA,YACA;AAAA,YACA,MAAM,KAAK;AAAA,YACX,gBAAgB,aAAa;AAAA,YAC7B,cAAcA,WAAS,EAAE,aAAaA,SAAO,IAAI,IAAI;AAAA,YACrD,gBAAgB,KAAK,WACjB;AAAA,cACE,WAAWD,SAAO,KAAK,QAAQ,EAAE;AAAA,gBAC/B,CAAC,QAAQ,eAAe,GAAG,EAAE;AAAA,cAC/B;AAAA,YACF,IACA;AAAA,YACJ,qBAAqB,KAAK,gBACtB,EAAE,UAAU,KAAK,cAAc,IAC/B;AAAA,YACJ,mBAAmB,KAAK,cACpB,EAAE,aAAa,KAAK,YAAY,IAChC;AAAA,YACJ,YAAY,KAAK,OAAO,EAAE,UAAU,KAAK,KAAK,IAAI;AAAA,YAClD,yBAAyB,KAAK,aAC1B,EAAE,UAAU,KAAK,WAAW,IAC5B;AAAA,YACJ,0BAA0B,KAAK,MAC3B;AAAA,cACE,oBAAoB;AAAA,gBAClB,qBAAqBA,SAAO,KAAK,GAAG,EAAE;AAAA,gBACtC,mBAAmBA,SAAO,KAAK,GAAG,EAAE;AAAA,cACtC;AAAA,YACF,IACA;AAAA,UACN;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,IAAI,WAAW;AACb,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,KAAK,OAAO,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MACnD;AAAA;AAAA;AAAA;AAAA,MAIA,IAAI,cAAc;AAChB,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,kBAAkB,eAAeA;;;ACvQjC,SAA0C,UAAAI,gBAAc;AAIxD,SAAS,WAAAC,gBAAe;AA2BjB,IAAM,kBAAN,cAA8B,UAAU;AAAA,EAC5B;AAAA,EAEjB,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,UAAM,OAAO,cAAc;AAC3B,UAAM,WAAW,eAAe;AAEhC,SAAK,WAAW;AAEhB,aAAS,gBAAgB;AACvB,aAAOC,SAAO,KAAK,QAAQ,MAAM,EAAE,MAAM,CAACC,UAAS;AACjD,YAAIA,UAAS,UAAU,KAAK;AAC1B,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,YAAIA,UAAS,cAAc,KAAK;AAC9B,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,eAAOA;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAIH,SAAQ;AAAA,QACjB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,KAAK;AAAA,YACZ,MAAM,KAAK,MAAM,CAACG,UAASA,MAAK,YAAY,CAAC;AAAA,YAC7C,MAAM,KAAK;AAAA,YACX,OAAO,KAAK;AAAA,YACZ,YAAY,KAAK;AAAA,YACjB,iBAAiB,KAAK;AAAA,YACtB,kBAAkB,KAAK;AAAA,YACvB,MAAM,KAAK;AAAA,YACX,SAAS,KAAK,OACV;AAAA,cACE,MAAM;AAAA,cACN,gBAAgB;AAAA,YAClB,IACA;AAAA,YACJ,gBAAgB,KAAK,YACjB,EAAE,WAAW,KAAK,UAAU,IAC5B;AAAA,UACN;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,gBAAgB,eAAeA;;;AC1G/B,SAAS,WAAAG,gBAAe;AAmBjB,IAAM,kBAAN,cAA8B,UAAU;AAAA,EAC5B;AAAA,EAEjB,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,UAAM,KAAK,eAAe;AAE1B,SAAK,KAAK;AAEV,aAAS,iBAAiB;AACxB,aAAO,IAAID,SAAQ;AAAA,QACjB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,KAAK;AAAA,YACZ,MAAM,KAAK;AAAA,YACX,YAAY,KAAK;AAAA,YACjB,wBAAwB,KAAK;AAAA,YAC7B,yBAAyB,KAAK;AAAA,YAC9B,MAAM,KAAK;AAAA,YACX,SAAS,KAAK,OACV;AAAA,cACE,MAAM;AAAA,cACN,gBAAgB;AAAA,YAClB,IACA;AAAA,UACN;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AACF;AAEA,IAAMC,iBAAe;AAErB,gBAAgB,eAAeA;;;AH/D/B,SAAS,WAAAC,gBAAoB;AA2dtB,IAAM,UAAN,cAAsB,UAAmC;AAAA,EACtD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,SAAS,gBAAgB;AAE/B,UAAM,SAAS,WAAW;AAC1B,UAAM,MAAM,iBAAiB;AAC7B,UAAM,iBAAiB,UAAU;AACjC,UAAM,aAAa,iBAAiB;AACpC,qBAAiB;AAEjB,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AACvB,SAAK,MAAM;AACX,SAAK,aAAa;AAElB,SAAK,gBAAgB,EAAE,OAAO,KAAK,IAAI,CAAC;AAExC,aAAS,kBAAkB;AACzB,UAAI,CAAC,KAAK,OAAQ;AAGlB,MAAAC,SAAO,KAAK,MAAM,EAAE,MAAM,CAACC,YAAW;AACpC,YAAI,OAAOA,YAAW,SAAU;AAEhC,YAAI,CAACA,QAAO,KAAM,OAAM,IAAI,MAAM,4BAA4B;AAC9D,YAAIA,QAAO,QAAQ,SAAS,CAACA,QAAO;AAClC,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,MACJ,CAAC;AAGD,aAAOD,SAAO,KAAK,MAAM,EAAE,MAAM,CAACC,YAAW;AAC3C,cAAM,OAAO,OAAOA,YAAW,WAAW,EAAE,MAAMA,QAAO,IAAIA;AAE7D,eAAO;AAAA,UACL,MAAM,KAAK;AAAA,UACX,KAAK,KAAK,QAAQ,QAAQ,SAAY,KAAK,OAAO,IAAO;AAAA,UACzD,MAAM,KAAK;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,aAAa;AACpB,aAAOD,SAAO,KAAK,MAAM,EAAE;AAAA,QAAM,OAAOE,YACtCC,IAAG,SAASD,SAAQ,EAAE,UAAU,QAAQ,CAAC;AAAA,MAC3C;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIJ,SAAQ;AAAA,QACjB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE;AAAA,YACA,oBAAoB;AAAA,UACtB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,YAAY;AACnB,UAAI,CAAC,OAAQ;AAEb,aAAO,OAAO,MAAM,CAACG,YAAW;AAC9B,YAAIA,QAAO,KAAM,QAAOD,SAAOC,QAAO,IAAI;AAG1C,eAAO,IAAI;AAAA,UACT,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAYA,QAAO;AAAA,YACnB,KAAKA,QAAO;AAAA,UACd;AAAA,UACA,EAAE,QAAQ,UAAU,YAAY,WAAW,EAAE;AAAA,QAC/C,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,UAAU,CAAC,eAAgB;AAEhC,YAAMG,cAAa,IAAIN,SAAQ;AAAA,QAC7B,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAY,QAAQ;AAAA,YACpB;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAEA,UAAIA,SAAQ,yBAAyB,GAAG,IAAI,qBAAqB;AAAA,QAC/D,OAAO,IAAI;AAAA,QACX,YAAYM,YAAW;AAAA,MACzB,CAAC;AAED,aAAOA;AAAA,IACT;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,UAAU,CAAC,WAAY;AAE5B,aAAO,MAAM,CAACH,YAAW;AACvB,YAAI,CAACA,QAAO,IAAK;AAEjB,QAAAA,QAAO,IAAI;AAAA,UACT;AAAA,UACA;AAAA,YACE,MAAMA,QAAO;AAAA,YACb,WAAW,WAAW;AAAA,YACtB,WAAW,WAAW;AAAA,UACxB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,aACRI,wBAAsB,KAAK,WAAW,UAAU,aAChD,KAAK,IAAI,KAAK,SAAS;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgDO,cAAc,MAA6B;AAChD,UAAM,OAAO;AACb,UAAM,WAAW,KAAK;AACtB,UAAM,aAAa,YAAY,KAAK,IAAI;AAExC,WAAO,IAAI;AAAA,MACT,GAAG,QAAQ,aAAa,UAAU;AAAA,MAClC;AAAA,QACE,OAAO,KAAK,IAAI;AAAA,QAChB,kBAAkB;AAAA,QAClB,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCO,YAAY,MAA2B;AAC5C,UAAM,OAAO;AACb,UAAM,WAAW,KAAK;AACtB,UAAM,aAAa,YAAY,KAAK,IAAI;AAExC,WAAO,IAAI;AAAA,MACT,GAAG,QAAQ,WAAW,UAAU;AAAA,MAChC;AAAA,QACE,OAAO,KAAK,IAAI;AAAA,QAChB,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoDO,YAAY,WAAmB,MAA2B;AAC/D,UAAM,OAAO;AACb,UAAM,WAAW,KAAK;AAGtB,UAAM,QAAQ,UAAU,KAAK,EAAE,MAAM,KAAK;AAC1C,QAAI,MAAM,WAAW;AACnB,YAAM,IAAI,aAAa,oBAAoB,SAAS,EAAE;AACxD,UAAM,CAAC,MAAM,KAAK,IAAI;AAEtB,UAAM,aAAa,GAAG,YAAY,IAAI,CAAC,GAAQ,YAAY,KAAK,CAAC;AACjE,WAAO,IAAI;AAAA,MACT,GAAG,QAAQ,WAAW,UAAU;AAAA,MAChC;AAAA,QACE,OAAO,KAAK,IAAI;AAAA,QAChB;AAAA,QACA;AAAA,QACA,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMN,iBAAe;AAErB,QAAQ,eAAeA;;;AIh1BvB,OAAOO,SAAQ;AACf,OAAOC,WAAU;;;ACDV,SAAS,cAAc,IAAY,IAAoB;AAC5D,MAAI,OAAO,SAAU,QAAO;AAC5B,MAAI,SAAS,KAAK,EAAE,GAAG;AACrB,SAAK,GAAG,UAAU,CAAC;AAAA,EACrB;AACA,MAAI,SAAS,KAAK,EAAE,GAAG;AACrB,SAAK,GAAG,UAAU,CAAC;AAAA,EACrB;AACA,QAAM,CAAC,QAAQ,QAAQ,MAAM,IAAI,GAAG,MAAM,GAAG,EAAE,IAAI,MAAM;AACzD,QAAM,CAAC,QAAQ,QAAQ,MAAM,IAAI,GAAG,MAAM,GAAG,EAAE,IAAI,MAAM;AAEzD,MAAI,WAAW,OAAQ,QAAO,SAAS;AACvC,MAAI,WAAW,OAAQ,QAAO,SAAS;AACvC,SAAO,SAAS;AAClB;AAEO,SAAS,QAAQ,GAAW,GAAoB;AACrD,SAAO,cAAc,GAAG,CAAC,KAAK;AAChC;AAEO,SAAS,OAAO,GAAW,GAAoB;AACpD,SAAO,cAAc,GAAG,CAAC,IAAI;AAC/B;;;ADwYO,IAAM,QAAN,cAAoB,QAAQ;AAAA,EACjC,YACE,MACA,OAAkB,CAAC,GACnB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,wBAAwB;AAAA,EAAE;AAAA,EAE1B,UAAU,YAA0C;AAC5D,WAAO,WAAW,MAAM,CAACC,gBAAe;AACtC,YAAM,uBAAuB;AAC7B,YAAM,WAAWC,MAAK,KAAKD,aAAY,QAAQ,oBAAoB;AACnE,UAAI,CAACE,IAAG,WAAW,QAAQ,GAAG;AAC5B,cAAM,IAAI;AAAA,UACR,qCAAqC,QAAQ;AAAA,QAC/C;AAAA,MACF;AACA,YAAM,YAAY,KAAK,MAAMA,IAAG,aAAa,UAAU,OAAO,CAAC;AAQ/D,YAAM,mBAAmBD,MAAK,KAAKD,aAAY,QAAQ,QAAQ;AAE/D,UACE,UAAU,kBAAkB,UAC5B,OAAO,UAAU,eAAe,OAAO,GACvC;AACA,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAiBA,YAAM,WAAW,UAAU,eAAe;AAC1C,YAAM,OAAO,UAAU,SAAS,MAAM,SAAY,UAAU;AAC5D,aAAO;AAAA,QACL;AAAA,QACA,QAAQ,WACJ,SACA;AAAA,UACA,SAASC,MAAK,KAAK,kBAAkB,eAAe;AAAA,UACpD,QAAQ,EAAE,SAAS,CAAC,OAAO,EAAE;AAAA,UAC7B,WAAW,UAAU,iBAAiB;AAAA,UACtC,WAAWC,IAAG,WAAWD,MAAK,KAAK,kBAAkB,UAAU,CAAC,IAC5D;AAAA,YACA;AAAA,cACE,MAAMA,MAAK,KAAK,kBAAkB,UAAU;AAAA,cAC5C,IAAI;AAAA,YACN;AAAA,UACF,IACE,CAAC;AAAA,QACP;AAAA,QACF,QAAQ;AAAA,UACN;AAAA,YACE,MAAM,UAAU;AAAA,YAChB,IAAI;AAAA,YACJ,QAAQ;AAAA,YACR,iBAAiB,UAAU;AAAA,UAC7B;AAAA,QACF;AAAA,QACA,WACE,YACEC,IAAG;AAAA,UACDD,MAAK,KAAKD,aAAY,UAAU,sBAAsB,UAAU;AAAA,QAClE,IACE,cACA;AAAA,MACR;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AACF;AACA,IAAMD,iBAAe;AAErB,MAAM,eAAeA;;;AEtgBrB;AAAA,EACE,OAAAI;AAAA,EAEA,eAAAC;AAAA,EACA,iBAAAC;AAAA,EACA,UAAAC;AAAA,OAEK;AAIP,SAAS,OAAAC,OAAK,KAAK,sBAAsB;AAGzC,SAAS,sBAAsB;;;ACd/B,SAAmC,UAAAC,gBAAc;AAkG1C,IAAM,aAAN,cAAyB,UAAU;AAAA,EACxC,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,SAAK,gBAAgB;AAAA,MACnB,MAAM;AAAA,QACJ,OAAOC,SAAO,KAAK,QAAQ,CAAC,CAAC,EAC1B,MAAM,KAAK,KAAK,EAChB,MAAM,CAAC,UAAU,MAAM,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;AAAA,QAClD,aAAa,KAAK;AAAA,QAClB,OAAO,KAAK,KAAK;AAAA,QACjB,WAAW,KAAK,KAAK;AAAA,QACrB,WAAW,KAAK,KAAK,cAAc;AAAA,QACnC,SAAS,KAAK,KAAK;AAAA,QACnB,KAAK;AAAA,UACH,MAAM,KAAK,KAAK;AAAA,QAClB;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEA,IAAMD,iBAAe;AAErB,WAAW,eAAeA;;;AC9H1B,SAA+C,WAAAE,gBAAe;AAOvD,IAAM,gBAAN,cAA4BC,SAAQ,SAAS;AAAA,EAClD,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,mBAAmB;AAAA,MACpC,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;AFEA,SAAS,SAAS,KAAU;AAC1B,QAAMC,UAAS,WAAW,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC;AAC3C,SAAOA;AACT;AAomBO,IAAM,SAAN,MAAM,gBAAe,UAAmC;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EASR,YAAY,MAAc,MAAkB,MAAiC;AAC3E,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,OAAO;AAEb,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,UAAU,IAAI;AACnB,WAAK,WAAW,IAAI;AACpB,WAAK,YAAY,IAAI;AACrB,WAAK,QAAQC,SAAO,IAAI,KAAK;AAC7B,WAAK,SAAS,IAAI;AAClB;AAAA,IACF;AAEA,UAAM,SAASA,SAAO,KAAK,MAAM;AACjC,UAAM,UAAUC,MAAI,CAAC,KAAK,SAAS,MAAM,CAAC,EAAE;AAAA,MAC1C,CAAC,CAACC,UAASC,OAAM,MACfD,YAAW,EAAE,UAAU,QAAQ,OAAO,SAAS,EAAEC,OAAM;AAAA,IAC3D;AACA,UAAM,WAAWF,MAAI,CAAC,KAAK,UAAU,MAAM,CAAC,EAAE;AAAA,MAC5C,CAAC,CAACG,WAAUD,OAAM,MAChBC,aAAY,EAAE,UAAU,YAAY,OAAO,OAAO,EAAED,OAAM;AAAA,IAC9D;AACA,UAAM,SAASH,SAAO,KAAK,QAAQ,EAAE;AAAA,MACnC,CAACK,UAASA,SAAQ,mBAAK,KAAK,WAAW,KAAK,GAAG;AAAA,IACjD;AACA,UAAM,UAAUL,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,KAAK;AAC5D,UAAM,UAAU,iBAAiB;AACjC,UAAM,WAAW,kBAAkB;AACnC,UAAM,MAAM,aAAa;AAEzB,UAAM,MAAM,YAAY;AACxB,QAAI,KAAK,SAAS;AAChB,WAAK,MAAM;AACX;AAAA,IACF;AAEA,UAAM,WAAW,eAAe;AAChC,UAAMM,UAAS,aAAa;AAC5B,UAAM,cAAc,kBAAkB;AACtC,UAAM,yBAAyB,6BAA6B;AAC5D,UAAM,wBAAwB,4BAA4B;AAC1D,UAAM,QAAQ,YAAY;AAC1B,UAAM,UAAU,cAAc;AAC9B,UAAM,WAAW,gBAAgB;AACjC,sBAAkB;AAElB,SAAK,UAAU;AACf,SAAK,WAAW;AAChB,SAAK,SAASA;AACd,SAAK,YAAY;AACjB,SAAK,QAAQ;AAEb,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,WAAU,IAAI,QAAQ,IAAI,GAAG,IAAI,WAAW,IAAI,IAAI,QAAW;AAAA,QACnE,QAAQ;AAAA,MACV,CAAC;AAED,YAAMC,YAAW,IAAI,gBAAgB;AAAA,QACnC,GAAG,IAAI;AAAA,QACP,IACG;AAAA,UACC;AAAA,YACE,SAAS;AAAA,cACP;AAAA,gBACE,MAAM;AAAA,gBACN,QAAQ,CAACD,SAAQ,EAAE;AAAA,cACrB;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB,EACC,oBAAoB,MAAM,CAAC,QAAQ;AAClC,cAAI,CAAC,IAAI,QAAQ;AACf,kBAAM,IAAI;AAAA,cACR,0CAA0CA,SAAQ,EAAE;AAAA,YACtD;AAAA,UACF;AACA,iBAAO,IAAI,CAAC;AAAA,QACd,CAAC;AAAA,QACH;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,YAAM,WAAWA,SAAQ,KACtB,MAAM,CAAC,SAAS,OAAO,kBAAkB,CAAC,EAC1C,MAAM,CAAC,gBAAgB;AACtB,YAAI,CAAC;AACH,gBAAM,IAAI;AAAA,YACR,uCAAuC,IAAI;AAAA,UAC7C;AACF,eAAO;AAAA,MACT,CAAC;AAEH,YAAMD,UAAS,eAAe,OAAO;AAAA,QACnC,GAAG,IAAI;AAAA,QACP;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AACA,YAAM,gBAAgB,eAAe;AAAA,QACnC,EAAE,SAAS;AAAA,QACX,EAAE,QAAQ,KAAK;AAAA,MACjB;AACA,YAAMG,YAAW,UAAW,cAAc,YAAY,EAAE;AAAA,QACtD,CAAC,MAAM,EAAE;AAAA,MACX;AAEA,YAAMC,SAAQH,SAAQ,KACnB,MAAM,CAAC,SAAS,OAAO,eAAe,CAAC,EACvC;AAAA,QAAM,CAAC,aACN,WACI,IAAI,MAAM,IAAI,GAAG,IAAI,SAAS,UAAU,QAAW;AAAA,UACjD,QAAQ;AAAA,QACV,CAAC,IACD;AAAA,MACN;AAEF,aAAO,EAAE,SAAAA,UAAS,UAAAC,WAAU,OAAAE,QAAO,UAAAD,WAAU,QAAAH,QAAO;AAAA,IACtD;AAEA,aAAS,mBAAmB;AAC1B,aAAON,SAAO,KAAK,OAAO,EAAE,MAAM,CAACW,aAAY;AAC7C,cAAM,MAAMA,UAAS,OAAO;AAC5B,cAAM,MAAMA,UAAS,OAAO;AAC5B,cAAM,qBAAqB,SAAS,GAAG,MAAM;AAC7C,YAAIA,UAAS,cAAc,CAAC,oBAAoB;AAC9C,gBAAM,IAAI;AAAA,YACR,wEAAwE,IAAI;AAAA,UAC9E;AAAA,QACF;AAEA,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA,YAAY,qBACRA,UAAS,cAAc,cACvB;AAAA,QACN;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,oBAAoB;AAC3B,aAAOX,SAAO,KAAK,YAAY,CAAC,EAAE,MAAM,CAACY,cAAa;AACpD,YAAIA,YAAW,IAAI;AACjB,gBAAM,IAAI;AAAA,YACR,0DAA0D,IAAI;AAAA,UAChE;AAAA,QACF;AACA,eAAOA;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,eAAe;AAEtB,UAAI,KAAK,eAAeC,MAAK;AAC3B,eAAO;AAAA,UACL,SAAS,KAAK,IAAI;AAAA,UAClB,gBAAgB,KAAK,IAAI;AAAA,QAC3B;AAAA,MACF;AAGA,aAAOb,SAAO,KAAK,GAAG;AAAA,IACxB;AAEA,aAAS,cAAc;AACrB,UAAI,CAAC,KAAK,IAAK,QAAO;AAEtB,UACE,OAGA;AACA,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAMc,OAAM;AAAA,QACV,SAAS;AAAA,QACT,MAAMd,SAAO,KAAK,IAAI,QAAQ,WAAW;AAAA,QACzC,MAAMC,MAAI,CAAC,KAAK,IAAI,MAAM,MAAM,CAAC,EAAE;AAAA,UACjC,CAAC,CAAC,MAAME,OAAM,MAAM,QAAQ,EAAE,UAAU,MAAM,OAAO,KAAK,EAAEA,OAAM;AAAA,QACpE;AAAA,QACA,UAAU,KAAK,IAAI,WAAWH,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,QAC1D,UAAUA,SAAO,KAAK,IAAI,YAAY,KAAK,YAAY,EAAE;AAAA,QACzD,UAAU,KAAK,IAAI,WAAWA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,MAC5D;AAEA,UAAI,WAAW,GAAG,IAAI,OAAO;AAAA,QAC3B,KAAK;AAAA,UACH,OAAO;AAAA,UACP,WAAW;AAAA,UACX,SAAS;AAAA,QACX;AAAA,QACA,aAAa;AAAA,UACX,yBAAyBe;AAAA;AAAA,eAEpBD,KAAI,QAAQ;AAAA,eACZA,KAAI,QAAQ;AAAA,eACZA,KAAI,QAAQ;AAAA;AAAA,gBAEXA,KAAI,IAAI,IAAIA,KAAI,IAAI;AAAA,QAC5B;AAAA,MACF,CAAC;AAED,aAAOA;AAAA,IACT;AAEA,aAAS,iBAAiB;AACxB,aAAO,KAAK,WACRd,SAAO,KAAK,QAAQ,IACpB,IAAI;AAAA,QACF,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EAAE;AAAA,IACR;AAEA,aAAS,eAAe;AACtB,YAAMM,UAAS,IAAI,eAAe;AAAA,QAChC,GAAG,IAAI;AAAA,QACP;AAAA,UACE,sBAAsB;AAAA,QACxB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,UAAI,eAAe;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,UAAUA,QAAO;AAAA,UACjB,cAAcU,eAAc,EAAE,UAAU,SAAS,CAAC;AAAA,QACpD;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,aAAOV;AAAA,IACT;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW,IAAI;AAAA,UACjB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,+BAA+B;AACtC,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQL,MAAI,CAAC,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC,CAACE,SAAQD,QAAO,MAAM;AAC1D,kBAAIC,YAAW;AACb,uBAAO,oBAAoBD,SAAQ,MAAM,GAAG,EAAE,CAAC,CAAC;AAClD,qBAAOA,SAAQ,WAAW,GAAG,IACzB,oBACA;AAAA,YACN,CAAC;AAAA,YACD,YAAY,CAAC;AAAA,UACf;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,8BAA8B;AACrC,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQD,MAAI,CAAC,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC,CAACE,SAAQD,QAAO,MAAM;AAC1D,kBAAIC,YAAW;AACb,uBAAO,oBAAoBD,SAAQ,MAAM,GAAG,EAAE,CAAC,CAAC;AAClD,qBAAOA,SAAQ,WAAW,GAAG,IACzB,oBACA;AAAA,YACN,CAAC;AAAA,YACD,YAAY,CAAC;AAAA,UACf;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQ,OAAO;AAAA,cAAM,CAACC,YACpBA,YAAW,aACP,IAAI,WAAW,mBACf,IAAI,WAAW;AAAA,YACrB;AAAA,YACA,YAAY;AAAA,YACZ,eAAeF,MAAI,CAAC,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC,CAACE,SAAQD,QAAO,MAAM;AACjE,kBAAIC,YAAW,WAAY,QAAOD;AAElC,qBAAOA,SAAQ,WAAW,GAAG,IACzB,oBAAoBA,QAAO,KAC3B,oBAAoBA,QAAO;AAAA,YACjC,CAAC;AAAA,YACD,cAAc;AAAA,YACd,gBAAgB;AAAA,YAChB,gBAAgB;AAAA,YAChB,6BAA6B,sBAAsB;AAAA,YACnD,8BAA8B,uBAAuB;AAAA,YACrD,kCAAkC,QAAQ,MAAM,CAACS,cAAa;AAAA,cAC5D,aAAa,SAASA,SAAQ,GAAG;AAAA,cACjC,aAAa,SAASA,SAAQ,GAAG;AAAA,cACjC,uBAAuBA,SAAQ,aAC3B,UAAUA,SAAQ,UAAU,IAC5B;AAAA,YACN,EAAE;AAAA,YACF,mBAAmB;AAAA,YACnB,kBAAkB;AAAA,YAClB,oBAAoB;AAAA,YACpB,mBAAmB,aAAa;AAAA,YAChC,qBAAqB,IAAI;AAAA,YACzB,MAAM,MAAM,MAAM,CAACD,YAAW;AAAA,cAC5B,oBAAoBJ,QAAO;AAAA,cAC3B,GAAII,SAAQ,EAAE,iBAAiBA,OAAM,GAAG,IAAI,CAAC;AAAA,YAC/C,EAAE;AAAA,UACJ;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,kBAAkB;AACzB,YAAM,QAAQ;AAAA,QACZ,mBAAmB,QAAQ;AAAA,QAC3B,eAAe;AAAA,QACf,QAAQ,QAAQ,OAAO,MAAM,CAAC,MAAM,CAAmB;AAAA,QACvD,eAAe,QAAQ;AAAA,QACvB,mBAAmB,QAAQ;AAAA,QAC3B,sBAAsB,uBAAuB;AAAA,MAC/C;AAGA,YAAMF,YAAW,IAAI,IAAI;AAAA,QACvB,GAAG,UAAU,KAAK,WAAW,UAAU,GAAG,IAAI,YAAY,OAAO;AAAA,UAC/D,QAAQ;AAAA,QACV,CAAC;AAAA,MACH;AAGA,eAAS,MAAM,CAACI,cAAa;AAC3B,iBAAS,IAAI,GAAG,IAAIA,WAAU,KAAK;AACjC,cAAI,IAAI;AAAA,YACN,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,UAAU,CAAC;AAAA,cAClB;AAAA,gBACE,GAAG;AAAA,gBACH,eAAe;AAAA,cACjB;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAED,aAAOJ;AAAA,IACT;AAEA,aAAS,cAAc;AACrB,aAAOP,MAAI,CAAC,KAAK,KAAK,CAAC,EAAE,MAAM,CAAC,CAACS,MAAK,MAAM;AAC1C,YAAI,CAACA,OAAO;AAEZ,cAAM,cAAcA,WAAU,OAAO,CAAC,IAAIA,OAAM,eAAe,CAAC;AAGhE,cAAM,UAAU,YAAY,IAAI,CAAC,eAAe;AAC9C,gBAAMJ,UAAS,IAAI,eAAe;AAAA,YAChC,GAAG,IAAI,cAAc,WAAW,QAAQ;AAAA,YACxC;AAAA,cACE,sBAAsB;AAAA,YACxB;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAEA,cAAI,eAAe;AAAA,YACjB,GAAG,IAAI,qBAAqB,WAAW,QAAQ;AAAA,YAC/C;AAAA,cACE,UAAUA,QAAO;AAAA,cACjB,cAAcU,eAAc;AAAA,gBAC1B,UAAU,WAAW;AAAA,gBACrB,UAAU,WAAW;AAAA,cACvB,CAAC;AAAA,YACH;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AACA,iBAAOV;AAAA,QACT,CAAC;AAED,cAAM,OAAO,IAAIW,MAAI;AAAA,UACnB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkBA,MAAI,6BAA6B;AAAA,cACjD,SAAS;AAAA,YACX,CAAC;AAAA,YACD,gBAAgB;AAAA,cACd;AAAA,gBACE,MAAM;AAAA,gBACN,QAAQA,MAAI,wBAAwB;AAAA,kBAClC,YAAY;AAAA,oBACV;AAAA,sBACE,SAAS,CAAC,+BAA+B;AAAA,sBACzC,WAAW,CAACX,QAAO,KAAK,GAAG,QAAQ,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC;AAAA,oBACtD;AAAA,kBACF;AAAA,gBACF,CAAC,EAAE;AAAA,cACL;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,cAAM,SAAS,IAAI;AAAA,UACjB,GAAG,IAAI;AAAA,UACP,EAAE,MAAM,uBAAuB;AAAA,UAC/B,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,eAAO,IAAI,IAAI;AAAA,UACb,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,cAAc,OAAO;AAAA,gBAAM,CAACH,YAC1BA,YAAW,aAAa,eAAe;AAAA,cACzC;AAAA,cACA,OAAO;AAAA,gBACL;AAAA,kBACE,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,WAAWG,QAAO;AAAA,gBACpB;AAAA,gBACA,GAAG,QAAQ,IAAI,CAAC,OAAO;AAAA,kBACrB,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,WAAW,EAAE;AAAA,gBACf,EAAE;AAAA,cACJ;AAAA,cACA,SAAS,KAAK;AAAA,cACd,cAAc,IAAI;AAAA,YACpB;AAAA,YACA,EAAE,QAAQ,MAAM,WAAW,CAAC,MAAM,EAAE;AAAA,UACtC;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,oBAAoB;AAC3B,YAAM,MAAM,CAACI,WAAU;AACrB,YAAI,CAACA,OAAO;AAEZ,cAAM,cAAc,IAAI,IAAI;AAAA,UAC1B,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAaA,OAAM;AAAA,UACrB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,YAAI,IAAI;AAAA,UACN,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAaA,OAAM;AAAA,YACnB,iBAAiB,YAAY;AAAA,YAC7B,qBAAqB,QAAQ;AAAA,UAC/B;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,QAAI,KAAK,KAAK,QAAS,QAAOV,SAAO,aAAa;AAClD,WAAO,KAAK,QAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,aAAa;AACtB,QAAI,KAAK,KAAK,QAAS,QAAOA,SAAO,aAAa;AAClD,WAAO,KAAK,QAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,YAAY;AACrB,QAAI,KAAK,KAAK,QAAS,QAAOA,SAAO,aAAa;AAClD,WAAO,KAAK,OAAQ;AAAA,EACtB;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,QAAS;AAAA,EACvB;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,QAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAOC,MAAI,CAAC,KAAK,QAAS,UAAU,KAAK,KAAM,CAAC,EAAE;AAAA,MAChD,CAAC,CAAC,UAAU,KAAK,MAAM,OAAO,YAAYD,SAAO,SAAS,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,IACzE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,SAAS;AAClB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAOC,MAAI,CAAC,KAAK,QAAS,gBAAgB,KAAK,KAAM,CAAC,EAAE;AAAA,MACtD,CAAC,CAAC,UAAU,KAAK,MAAM;AACrB,YAAI,OAAO;AACT,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,QACF;AACA,eAAOD,SAAO,SAAS,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,MACtC;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAW,QAAQ;AACjB,WAAO;AAAA,MACL,SAAS,KAAK;AAAA,MACd,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,YAAY,KAAK;AAAA,QACjB,WAAW,KAAK;AAAA,QAChB,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,QACf,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,QACX,QAAQ,KAAK,KAAK,UACd,KAAK,IAAI,OACTC,MAAI,CAAC,KAAK,QAAS,gBAAgB,KAAK,KAAM,CAAC,EAAE;AAAA,UAC/C,CAAC,CAAC,UAAU,KAAK,MAAM;AACrB,gBAAI,MAAO,QAAOD,SAAO,MAAS;AAClC,mBAAOA,SAAO,SAAS,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,UACtC;AAAA,QACF;AAAA,MACN;AAAA,MACA,SAAS,KAAK,KAAK,UACf,CAAC,IACD;AAAA,QACE,WAAW;AAAA,UACT,SAAS,CAAC,+BAA+B;AAAA,UACzC,WAAW,CAAC,KAAK,SAAS;AAAA,QAC5B,CAAC;AAAA,QACD,WAAW;AAAA,UACT,SAAS;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,UACA,WAAW,CAAC,KAAK,UAAU;AAAA,QAC7B,CAAC;AAAA,MACH;AAAA,IACN;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,OAAc,IACZ,MACA,IACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,OAAO,eAAeA;;;AGzyCtB;AAAA,EAEE,iBAAAmB;AAAA,OAEK;;;ACJP;AAAA,EAGE,UAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAIP,SAAS,cAAAC,mBAAkB;AAUpB,IAAM,OAAN,cAAmB,UAAmC;AAAA,EAC1C;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAgB,MAAiC;AACzE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,SAAK,OAAO,IAAID,YAAW,GAAG,IAAI,WAAW;AAAA,MAC3C,WAAW;AAAA,IACb,CAAC;AAED,SAAK,iBAAiBE,SAAO,KAAK,aAAa,EAAE,MAAM,CAACC,UAAS;AAC/D,aAAO,IAAI,SAAS,GAAG,IAAI,iBAAiB;AAAA,QAC1C,KAAK;AAAA,QACL,GAAGA;AAAA,QACH,aAAa;AAAA,UACX,GAAGA,MAAK;AAAA,UACR,kBAAkBC,QAAO,KAAK,IAAI,kBAAkB;AAAA,UACpD,iBAAiBA,QAAO,KAAK,IAAI,YAAY;AAAA,QAC/C;AAAA,QACA,WAAW;AAAA,MACb,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,IAAW,MAAM;AACf,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAW,gBAAgB;AACzB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAW,MAAM;AACf,WAAO,KAAK,eAAe;AAAA,EAC7B;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,WAAWA,QAAO,KAAK,IAAI,YAAY;AAAA,MACzC;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMH,iBAAe;AAErB,KAAK,eAAeA;;;ADyJb,IAAMI,QAAN,cAAmB,UAAmC;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AAAA,EACjB,OAAc,KAAK;AAAA,EAEnB,YAAY,MAAc,MAAgB,MAAiC;AACzE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,WAAW;AACjB,UAAM,OAAO;AAEb,SAAK,gBAAgB;AAAA,MACnB,KAAK;AAAA,MACL,KAAK,mBAAK,MAAM,QAAQ,IAAI;AAAA,MAC5B,SAAS;AAAA,QACP;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA,6BAA6B,QAAQ;AAAA,QACrC;AAAA,QACA,sBAAsB,mBAAK,MAAM,QAAQ,IAAI,CAAC;AAAA,QAC9C,+BAA+B,mBAAK,MAAM,QAAQ,IAAI,CAAC;AAAA,MACzD,EAAE,KAAK,IAAI;AAAA,MACX,cAAc,KAAK;AAAA,IACrB,CAAC;AAED,UAAM,QAAQ,YAAY;AAC1B,UAAM,SAAS,aAAa;AAC5B,UAAM,SAAS,aAAa;AAE5B,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,UAAU;AACf,oBAAgB;AAEhB,aAAS,kBAAkB;AACzB,WAAK,gBAAgB;AAAA,QACnB,OAAO,KAAK;AAAA,MACd,CAAC;AAAA,IACH;AAEA,aAAS,cAAc;AACrB,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ,EAAE,IAAI,UAAU,IAAI,SAAS;AAAA,UACrC,cAAc,EAAE,SAAS,MAAM,UAAU,KAAK;AAAA,UAC9C,KAAK;AAAA,QACP;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,YAAM,KAAK,KAAK,cAAc,KAAK;AACnC,UAAI,CAAC,GAAI,OAAM,IAAI,MAAM,gCAAgC;AACzD,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP;AAAA,QACA;AAAA,UACE,MAAM,CAAC,KAAK;AAAA,UACZ,aAAa;AAAA,YACX,kBAAkBC,eAAc;AAAA,cAC9B,MAAM;AAAA,cACN,SAAS,EAAE,OAAO,MAAM,KAAK;AAAA,YAC/B,CAAC;AAAA,UACH;AAAA,UACA,WAAW;AAAA,QACb;AAAA,QACA,CAACC,UAAS;AACR,UAAAA,MAAK,MAAM;AAAA,YACT,MAAM;AAAA,UACR;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EAAE,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC;AAAA,IAChC;AAEA,aAAS,eAAe;AACtB,UAAI,CAAC,KAAK,OAAQ;AAElB,YAAMC,UAAS,IAAI;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ,KAAK;AAAA,UACb,WAAW;AAAA,QACb;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AACA,MAAAA,QAAO,MAAM,KAAK,OAAO,GAAG;AAE5B,aAAOA;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,KAAK,SAAS,OAAO,KAAK,QAAQ,IAAI,MAAM,CAAC,MAAM,EAAE,MAAM,GAAG,EAAE,CAAC;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,OAAO,KAAK;AAAA;AAAA;AAAA;AAAA,MAIZ,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA;AAAA,MAKb,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,IAAI;AAAA,UACF,iBAAiB,KAAK;AAAA,QACxB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMH,iBAAe;AAErBD,MAAK,eAAeC;;;AEnXpB,SAA2C,UAAAI,gBAAc;;;ACAzD;AAAA,EAIE,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;;;ACNP,SAAgB,UAAAC,gBAAc;AAE9B,SAAS,cAAAC,mBAAkB;AAmBpB,SAAS,WACd,MACA,cACA,MACA,QACA;AACA,SAAO,IAAIA,YAAW;AAAA,IACpB,GAAG;AAAA,MACD,MAAM,WAAW;AAAA,MACjB,GAAG,IAAI;AAAA,MACP;AAAA,QACE;AAAA,QACA,cAAc,KAAK,UACfC,SAAO,KAAK,OAAO,EAAE;AAAA,UAAM,CAAC,YAC1B,KAAK,UAAU;AAAA,YACb,eAAe,QAAQ;AAAA,YACvB,QAAQ,QAAQ;AAAA,YAChB,QAAQ,QAAQ;AAAA,UAClB,CAAC;AAAA,QACH,IACA,KAAK,UAAU;AAAA,UACb,QAAQ,CAAC,EAAE,QAAQ,GAAG,CAAC;AAAA,QACzB,CAAC;AAAA,MACP;AAAA,MACA,EAAE,OAAO;AAAA,IACX;AAAA,EACF;AACF;;;ADtCA,SAAS,cAAAC,aAAY,UAAAC,gBAAc;AAoB5B,IAAM,sBAAN,cAAkC,UAAU;AAAA,EAChC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAC3B,UAAM,OAAO,WAAW,MAAM,IAAI,MAAM,MAAM,IAAI;AAClD,UAAM,KAAK,eAAe;AAC1B,UAAMC,cAAa,iBAAiB;AACpC,UAAM,SAAS,aAAa;AAE5B,SAAK,KAAK;AACV,SAAK,aAAaA;AAClB,SAAK,OAAO;AACZ,SAAK,SAAS;AAEd,aAAS,iBAAiB;AACxB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAaC,8BAA4B,IAAI,IAAI;AAAA,QACnD;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG;AAAA,UACb,WAAW;AAAA,UACX,WAAW,KAAK;AAAA,QAClB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,KAAK,GAAG;AAAA,YACR,MAAM,KAAK;AAAA,YACX,cAAc,IAAI;AAAA,UACpB;AAAA,UACA,EAAE,QAAQ,MAAM,WAAW,CAACH,WAAU,EAAE;AAAA,QAC1C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA,MAIX,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,oBAAoB,eAAeA;;;ADnHnC,SAAS,cAAAM,mBAAkB;;;AGP3B,SAA0C,UAAAC,gBAAc;AAGxD,SAAS,cAAAC,mBAAuB;AAoBzB,IAAM,qBAAN,cAAiC,UAAU;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAMC,SAAO,KAAK,GAAG;AAC3B,UAAM,WAAWA,SAAO,KAAK,KAAK,EAAE;AAAA,MAAM,CAAC,UACzC,iBAAiB,QAAQ,MAAM,MAAMA,SAAO,KAAK;AAAA,IACnD;AACA,UAAM,SAAS,aAAa;AAC5B,UAAM,OAAO,WAAW,MAAM,IAAI,MAAM,MAAM,IAAI;AAClD,UAAM,SAAS,aAAa;AAE5B,SAAK,SAAS;AACd,SAAK,OAAO;AACZ,SAAK,SAAS;AAEd,aAAS,eAAe;AACtB,aAAO,MAAM,aAAa,GAAG,IAAI,UAAU,UAAU,EAAE,QAAQ,KAAK,CAAC;AAAA,IACvE;AAEA,aAAS,eAAe;AACtB,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,KAAK;AAAA,YACL,MAAM,KAAK;AAAA,YACX,cAAc,IAAI;AAAA,UACpB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,MAIb,MAAM,KAAK;AAAA;AAAA;AAAA;AAAA,MAIX,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,mBAAmB,eAAeA;;;AHgG3B,IAAM,MAAN,MAAM,aAAY,UAAmC;AAAA,EAClD;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAAgB,CAAC,GACjB,OAAiC,CAAC,GAClC;AACA,UAAMG,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,OAAO;AACb,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAEvB,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,MAAM,IAAI;AACf;AAAA,IACF;AAEA,UAAM,MAAM,UAAU;AACtB,SAAK,MAAM;AAEX,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,OAAMC,YAAW,SAAS;AAAA,QAC9B,GAAG,IAAI;AAAA,QACP,IAAI;AAAA,QACJ;AAAA,QACA;AAAA,UACE,QAAQ;AAAA,QACV;AAAA,MACF;AACA,aAAO,EAAE,KAAAD,KAAI;AAAA,IACf;AAEA,aAAS,YAAY;AACnB,aAAO,IAAIC,YAAW;AAAA,QACpB,GAAG,UAAU,KAAK,WAAW,KAAK,GAAG,IAAI,OAAO,CAAC,GAAG,EAAE,QAAQ,KAAK,CAAC;AAAA,MACtE;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,KAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCO,UACL,MACA,YACA,OAA0B,CAAC,GAC3B;AACA,WAAO,KAAI;AAAA,MACT,KAAK;AAAA,MACL;AAAA,MACA,KAAK,MAAM,IAAI;AAAA,MACf,KAAK,MAAM,IAAI;AAAA,MACf;AAAA,MACA;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2CA,OAAc,UACZ,MACA,QACA,YACA,MACA;AACA,WAAOC,SAAO,MAAM,EAAE,MAAM,CAACC,YAAW;AACtC,YAAM,UAAU,iBAAiBA,OAAM,EAAE;AACzC,aAAO,KAAK;AAAA,QACV;AAAA,QACA;AAAA,QACA;AAAA,QACAA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EAEA,OAAe,mBACb,MACA,gBACA,SACA,QACA,YACA,OAA0B,CAAC,GAC3B,OAAiC,CAAC,GAClC;AACA,WAAOD,SAAO,IAAI,EAAE,MAAM,CAACE,UAAS;AAClC,aAAO,IAAI;AAAA,QACT,GAAG,IAAI,aAAa,cAAc;AAAA,QAClC;AAAA,UACE,KAAK,EAAE,MAAM,SAAS,KAAK,OAAO;AAAA,UAClC;AAAA,UACA,GAAGA;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuCO,eACL,MACA,OACA,OAA0B,CAAC,GAC3B;AACA,WAAO,KAAI;AAAA,MACT,KAAK;AAAA,MACL;AAAA,MACA,KAAK,MAAM,IAAI;AAAA,MACf,KAAK,MAAM,IAAI;AAAA,MACf;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCA,OAAc,eACZ,MACA,QACA,OACA,MACA;AACA,WAAOF,SAAO,MAAM,EAAE,MAAM,CAACC,YAAW;AACtC,YAAM,UAAU,iBAAiBA,OAAM,EAAE;AACzC,aAAO,KAAK,gBAAgB,SAAS,MAAMA,SAAQ,SAAS,OAAO,IAAI;AAAA,IACzE,CAAC;AAAA,EACH;AAAA,EAEA,OAAe,gBACb,MACA,gBACA,QACA,SACA,OACA,OAA0B,CAAC,GAC3B;AACA,WAAOD,SAAO,IAAI,EAAE,MAAM,CAACE,UAAS;AAClC,aAAO,IAAI,mBAAmB,GAAG,IAAI,aAAa,cAAc,IAAI;AAAA,QAClE,KAAK,EAAE,MAAM,SAAS,KAAK,OAAO;AAAA,QAClC;AAAA,QACA,GAAGA;AAAA,MACL,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,MAAM,KAAK;AAAA,QACX,KAAK,KAAK;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,UAAU;AAAA,UACpB,WAAW,CAAC,KAAK,MAAM,IAAI,GAAG;AAAA,QAChC,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCA,OAAc,IACZ,MACA,SACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAML,iBAAe;AAErB,IAAI,eAAeA;;;AI9jBnB,SAA2C,UAAAM,gBAAc;;;ACAzD;AAAA,EAGE,OAAAC;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAOP;AAAA,EACE;AAAA,EACA,OAAAC;AAAA,EACA,OAAAC;AAAA,EACA,mBAAAC;AAAA,EAEA;AAAA,EACA,oBAAAC;AAAA,OACK;;;ACrBP,OAAOC,SAAQ;AACf,OAAOC,WAAU;AACjB,SAAmC,eAAAC,eAAa,UAAAC,eAAc;AAC9D,SAAS,OAAAC,OAAK,UAAAC,gBAAc;AAQ5B,SAAoB,gBAAgB;AAEpC;AAAA,EACE,cAAAC;AAAA,EACA,OAAAC;AAAA,EACA;AAAA,EACA,2BAAAC;AAAA,EACA,sBAAAC;AAAA,EACA,mBAAAC;AAAA,EACA,OAAAC;AAAA,OACK;;;ACrBP,SAAS,OAAAC,aAAqC;AAE9C,SAAS,SAAAC,cAAwB;AAEjC,IAAMC,WAAU,IAAI;AAAA,EAClB,SAAS,QAAQ,IAAI,mCAAmC,GAAG;AAC7D;AAEO,SAAS,aACd,MACA,MACA,MACA;AAEA,SAAOC,MAAI,CAAC,IAAI,CAAC,EAAE,MAAM,OAAO,CAACC,KAAI,MAAM;AACzC,UAAMF,SAAQ,QAAQ,IAAI;AAC1B,UAAM,QAAQ,IAAID;AAAA,MAChB;AAAA,MACA;AAAA,QACE,GAAI,QAAQ,IAAI,iBACZ,EAAE,SAAS,EAAE,MAAM,QAAQ,IAAI,eAAe,EAAE,IAChD,CAAC;AAAA,QACL,GAAGG;AAAA,MACL;AAAA,MACA;AAAA,IACF;AACA,WAAO,MAAM,IAAI,MAAM,MAAM;AAC3B,MAAAF,SAAQ,QAAQ;AAChB,aAAO;AAAA,IACT,CAAC;AAAA,EACH,CAAC;AACH;;;AC7BO,SAAS,SAAS,KAAU;AACjC,QAAM,CAAC,OAAO,IAAI,IAAI,IAAI,MAAM,GAAG;AACnC,QAAM,WAAW,WAAW,KAAK;AACjC,MAAI,SAAS,QAAQ;AACnB,WAAO,WAAW;AAAA,EACpB;AACA,QAAM,IAAI,MAAM,eAAe,GAAG,EAAE;AACtC;;;AFsBO,IAAM,gBAAgB;AAAA,EAC3B,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AACb;AAEO,IAAM,oBAAoB;AAAA,EAC/B,aAAa;AAAA,IACX,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA,YAAY;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA,UAAU;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA,UAAU;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACR,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAAA,EACA,WAAW;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,UAAU;AAAA,IACV,UAAU;AAAA,IACV,UAAU;AAAA,EACZ;AACF;AA2kBO,SAAS,sBAAsB,MAAuB;AAC3D,SAAOG,SAAO,KAAK,gBAAgB,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC;AAC7D;AAEO,SAAS,aAAa,MAAuB;AAClD,SAAOA,SAAO,KAAK,OAAO,WAAW,EAAE,MAAM,CAAC,MAAM;AAClD,QAAI,CAAC,cAAc,CAAC,GAAG;AACrB,YAAM,IAAI;AAAA,QACR,oBAAoB,CAAC,sCAAsC,OAAO;AAAA,UAChE;AAAA,QACF,EAAE,KAAK,IAAI,CAAC;AAAA,MACd;AAAA,IACF;AACA,WAAO;AAAA,EACT,CAAC;AACH;AAEO,SAAS,gBACd,KACA,MACA;AACA,SAAOC,MAAI,CAAC,KAAK,KAAK,UAAU,QAAQ,CAAC,EAAE,MAAM,CAAC,CAACC,MAAK,CAAC,MAAM;AAC7D,QAAI,EAAE,KAAK,kBAAkBA,IAAG,IAAI;AAClC,YAAM,IAAI;AAAA,QACR,uBAAuB,CAAC,2CAA2CA,IAAG,YAAY,OAAO;AAAA,UACvF,kBAAkBA,IAAG;AAAA,QACvB,EAAE,KAAK,IAAI,CAAC;AAAA,MACd;AAAA,IACF;AACA,WAAO;AAAA,EACT,CAAC;AACH;AAEO,SAAS,iBAAiB,MAAuB;AACtD,SAAOF,SAAO,KAAK,WAAW,OAAO,EAAE,MAAM,CAAC,MAAM;AAClD,UAAM,UAAU,MAAM,CAAC;AACvB,QAAI,UAAU,MAAM,UAAU;AAC5B,YAAM,IAAI;AAAA,QACR,wBAAwB,CAAC;AAAA,MAC3B;AACF,WAAO;AAAA,EACT,CAAC;AACH;AAEO,SAAS,oBACd,MACA,MACA,MACA,cACA;AACA,MACE,KAAK,eACJ,KAAK,SACJ,KAAK,WACL,KAAK,eACL,KAAK,oBACL,KAAK,WACL,KAAK,UACL,KAAK,MACP;AACA,UAAM,IAAI;AAAA,MACR,SAAS,YACL,kIACA;AAAA,IACN;AAAA,EACF;AAGA,QAAM,aAAa,KAAK,cAAc;AAAA,IACpC;AAAA,MACE;AAAA,MACA,KAAK;AAAA,MACL,QAAQ;AAAA,MACR,OAAO,KAAK;AAAA,MACZ,SAAS,KAAK;AAAA,MACd,aAAa,KAAK;AAAA,MAClB,kBAAkB,KAAK;AAAA,MACvB,KAAK,KAAK;AAAA,MACV,SAAS,KAAK;AAAA,MACd,SAAS,KAAK;AAAA,MACd,YAAY,KAAK;AAAA,MACjB,QAAQ,SAAS,YAAY,KAAK,SAAS;AAAA,MAC3C,KAAK,SAAS,YAAY,KAAK,MAAM;AAAA,IACvC;AAAA,EACF;AAGA,SAAOA,SAAO,UAAU,EAAE;AAAA,IAAM,CAACG,gBAC/BA,YAAW,IAAI,CAAC,MAAM;AACpB,aAAO;AAAA,QACL,GAAG;AAAA,QACH,SAAS,iBAAiB;AAAA,QAC1B,OAAO,eAAe;AAAA,QACtB,SAAS,iBAAiB;AAAA,MAC5B;AAEA,eAAS,mBAAmB;AAC1B,eAAOH,SAAO,EAAE,OAAO,EAAE;AAAA,UACvB,CAAC,YACC,SAAS,IAAI,CAAC,YAAY;AAAA,YACxB,MAAM,OAAO;AAAA,YACb,KACE,OAAO,eAAe,MAClB;AAAA,cACE,YAAY,OAAO,IAAI;AAAA,cACvB,aAAa,OAAO,IAAI;AAAA,YAC1B,IACA,OAAO;AAAA,UACf,EAAE;AAAA,QACN;AAAA,MACF;AAEA,eAAS,iBAAiB;AACxB,eAAOC,MAAI,CAAC,EAAE,OAAO,YAAY,CAAC,EAAE,MAAM,CAAC,CAAC,OAAOG,aAAY,MAAM;AACnE,cAAI,OAAO,UAAU,SAAU,QAAO;AAEtC,iBAAO;AAAA,YACL,GAAG;AAAA,YACH,SAAS,OAAO,WAAW;AAAA,YAC3B,UACEA,kBAAiB,UACb,SAAS,cACT,SAAS;AAAA,UACjB;AAAA,QACF,CAAC;AAAA,MACH;AAEA,eAAS,mBAAmB;AAC1B,eAAOH,MAAI,CAAC,EAAE,SAAS,KAAK,QAAQ,MAAM,QAAQ,IAAI,CAAC,EAAE;AAAA,UACvD,CAAC,CAAC,SAAS,WAAW,OAAO;AAAA,YAC3B,GAAG;AAAA,YACH,WAAW,SAAS,aAAa;AAAA,YACjC,MACE,SAAS;AAAA;AAAA,YAGT,gBAAgB,WAAW,IAAI,aAAa,IAAI,IAAI,CAAC,IAAI,EAAE,IAAI;AAAA,UACnE;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEO,SAAS,eACd,MACA,MACA,MACA,QACA,KACA,uBACA;AACA,MAAI,KAAK;AACP,WAAOI,MAAI,KAAK,IAAI,GAAG,IAAI,YAAY,KAAK,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC;AAEtE,QAAM,SAASJ,MAAI;AAAA,IACjB,KAAK,eAAe,CAAC;AAAA,IACrB,KAAK,WAAuB,kBAAkB,KAAK,IAAI;AAAA,IACvD,yBAAyB,CAAC;AAAA,EAC5B,CAAC,EAAE;AAAA,IAAM,CAAC,CAAC,iBAAiB,iBAAiBK,sBAAqB,MAChED,MAAI,wBAAwB;AAAA,MAC1B,YAAY;AAAA,QACV,GAAG;AAAA,QACH,GAAG;AAAA,QACH,GAAGC;AAAA,QACH;AAAA,UACE,SAAS;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,UACA,WAAW,CAAC,GAAG;AAAA,QACjB;AAAA,MACF,EAAE,IAAI,CAAC,UAAU;AAAA,QACf,SAAS,MAAM;AACb,gBAAM,SAAS,KAAK,UAAU;AAC9B,iBAAO,OAAO,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,MAAM,CAAC;AAAA,QACxD,GAAG;AAAA,QACH,SAAS,KAAK;AAAA,QACd,WAAW,KAAK;AAAA,MAClB,EAAE;AAAA,IACJ,CAAC;AAAA,EACH;AAEA,SAAO,IAAID,MAAI;AAAA,IACb,GAAG;AAAA,MACD,KAAK,WAAW;AAAA,MAChB,GAAG,IAAI;AAAA,MACP;AAAA,QACE,kBAAkBA,MAAI,6BAA6B;AAAA,UACjD,SAAS;AAAA,UACT,GAAI,MAAM,EAAE,KAAKE,yBAAwB,CAAC,GAAG,IAAI,EAAE,UAAU,IAAI,CAAC;AAAA,QACpE,CAAC;AAAA,QACD,gBAAgB,OAAO;AAAA,UAAM,CAAC,EAAE,WAAW,MACzC,aAAa,CAAC,EAAE,MAAM,UAAU,QAAQ,OAAO,KAAK,CAAC,IAAI,CAAC;AAAA,QAC5D;AAAA,MACF;AAAA,MACA,EAAE,OAAO;AAAA,IACX;AAAA,EACF;AACF;AAEO,SAAS,oBACd,MACA,MACA,MACA,QACA;AACA,MAAI,KAAK;AACP,WAAOF,MAAI,KAAK;AAAA,MACd,GAAG,IAAI;AAAA,MACP,KAAK;AAAA,MACL,CAAC;AAAA,MACD,EAAE,OAAO;AAAA,IACX;AAEF,SAAO,IAAIA,MAAI;AAAA,IACb,GAAG;AAAA,MACD,KAAK,WAAW;AAAA,MAChB,GAAG,IAAI;AAAA,MACP;AAAA,QACE,kBAAkBA,MAAI,6BAA6B;AAAA,UACjD,SAAS;AAAA,QACX,CAAC;AAAA,QACD,mBAAmB;AAAA,UACjBG,oBACEC,oBAAmB,CAAC,GAAG,IAAI,EAAE,SAC/B;AAAA,QACF;AAAA,QACA,gBAAgB;AAAA,UACd;AAAA,YACE,MAAM;AAAA,YACN,QAAQJ,MAAI,wBAAwB;AAAA,cAClC,YAAY;AAAA,gBACV;AAAA,kBACE,KAAK;AAAA,kBACL,SAAS;AAAA,oBACP;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA;AAAA,kBACF;AAAA,kBACA,WAAW,CAAC,GAAG;AAAA,gBACjB;AAAA,gBACA,GAAI,KAAK,mBACL;AAAA,kBACE;AAAA,oBACE,KAAK;AAAA,oBACL,SAAS,CAAC,cAAc;AAAA,oBACxB,WAAW,KAAK;AAAA,kBAClB;AAAA,gBACF,IACA,CAAC;AAAA,cACP;AAAA,YACF,CAAC,EAAE;AAAA,UACL;AAAA,QACF;AAAA,MACF;AAAA,MACA,EAAE,OAAO;AAAA,IACX;AAAA,EACF;AACF;AAEO,SAAS,qBACd,MACA,MACA,MACA,QACA,YACA,cACA,KACA,QACA,SACA,UACA,eACA;AACA,QAAM,cAAc,KAAK,QAAQ,MAAM,QAAQ;AAC/C,QAAM,SAASK,iBAAgB,CAAC,GAAG,IAAI,EAAE;AACzC,QAAM,gBAAgB,OAAO,MAAM,CAACC,YAAW,UAAU,UAAUA,OAAM,CAAC;AAC1E,QAAM,WAAW,KAAK,gBAAgB,KAAK,cAAc,KAAK,IAAI,CAAC;AACnE,QAAM,uBAAuBX,SAAO,UAAU,EAAE;AAAA,IAAM,CAACG,gBACrDA,YAAW,IAAI,CAAC,eAAe;AAAA,MAC7B,MAAM,UAAU;AAAA,MAChB,QAAQ,MAAM;AACZ,YAAI,OAAO,UAAU,UAAU,SAAU,QAAOH,SAAO,UAAU,KAAK;AAEtE,cAAM,iBAAiB,UAAU;AACjC,cAAM,cAAcY,MAAK,KAAK,mBAAK,MAAM,MAAM,UAAU,MAAM,OAAO;AACtE,cAAM,aAAa,UAAU,MAAM,cAAc;AACjD,cAAM,iBAAiBA,MAAK,KAAK,aAAa,UAAU;AACxD,cAAM,mBAAmBC,IAAG;AAAA,UAC1BD,MAAK,KAAK,aAAa,GAAG,UAAU,eAAe;AAAA,QACrD,IACIA,MAAK,KAAK,aAAa,GAAG,UAAU,eAAe,IACnDA,MAAK,KAAK,aAAa,eAAe;AAG1C,cAAM,QAAQC,IAAG,WAAW,gBAAgB,IACxCA,IAAG,aAAa,gBAAgB,EAAE,SAAS,EAAE,MAAM,IAAI,IACvD,CAAC;AACL,YAAI,CAAC,MAAM,KAAK,CAAC,SAAS,SAAS,MAAM,GAAG;AAC1C,UAAAA,IAAG;AAAA,YACD;AAAA,YACA,CAAC,GAAG,OAAO,IAAI,SAAS,MAAM,EAAE,KAAK,IAAI;AAAA,UAC3C;AAAA,QACF;AAGA,cAAM,QAAQ;AAAA,UACZ,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI,QAAQ,UAAU,IAAI;AAAA,YAC7B;AAAA,cACE,SAAS,EAAE,UAAU,YAAY;AAAA,cACjC,YAAY,EAAE,UAAU,eAAe;AAAA,cACvC,WAAW,eAAe;AAAA,cAC1B,SAAS;AAAA,cACT,QAAQ,UAAU,MAAM;AAAA,cACxB,WAAW,CAAC,UAAU,MAAM,QAAQ;AAAA,cACpC,MAAM,CAAC,UAAU,MAAM,GAAI,UAAU,MAAM,QAAQ,CAAC,CAAE,EAAE;AAAA,gBACtD,CAAC,QAAQL,gBAAc,cAAc,WAAW,IAAI,GAAG;AAAA,cACzD;AAAA,cACA,YAAY;AAAA,gBACVM,KACG;AAAA,kBACC;AAAA,oBACE,YAAY,cAAc;AAAA,kBAC5B;AAAA,kBACA,EAAE,OAAO;AAAA,gBACX,EACC,MAAM,CAAC,eAAe;AAAA,kBACrB,SAAS,UAAU;AAAA,kBACnB,UAAUC,QAAO,UAAU,QAAQ;AAAA,kBACnC,UAAU,UAAU;AAAA,gBACtB,EAAE;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT;AAAA,kBACE,UAAU;AAAA,oBACR,KAAKP,gBAAc,cAAc,WAAW,IAAI,UAAU,IAAI;AAAA,kBAChE;AAAA,gBACF;AAAA,cACF;AAAA,cACA,SAAS;AAAA,gBACP;AAAA,kBACE,UAAU;AAAA,oBACR,KAAKA,gBAAc,cAAc,WAAW,IAAI,UAAU,IAAI;AAAA,oBAC9D,eAAe;AAAA,oBACf,eAAe;AAAA,oBACf,MAAM;AAAA,kBACR;AAAA,gBACF;AAAA,cACF;AAAA,cACA,MAAM;AAAA,YACR;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAEA,eAAOA,gBAAc,cAAc,WAAW,IAAI,MAAM,MAAM;AAAA,MAChE,GAAG;AAAA,MACH,KAAK,UAAU,MAAM,SAAS,UAAU,GAAG,IAAI;AAAA,MAC/C,QAAQ,UAAU,SAAS,MAAM,UAAU,MAAM,IAAI;AAAA,MACrD,SAAS,UAAU;AAAA,MACnB,YAAY,UAAU;AAAA,MACtB,aAAa,UAAU,UAAU;AAAA,QAC/B,SAAS,UAAU,OAAO;AAAA,QAC1B,aAAa,UAAU,UAAU,OAAO,eAAe,WAAW;AAAA,QAClE,SAAS,UAAU,UAAU,OAAO,WAAW,WAAW;AAAA,QAC1D,UAAU,UAAU,UAAU,OAAO,YAAY,YAAY;AAAA,QAC7D,SAAS,UAAU,OAAO,WAAW;AAAA,MACvC;AAAA,MACA,gBAAgB;AAAA,MAChB,cAAc,CAAC,EAAE,oBAAoB,UAAU,CAAC;AAAA,MAChD,kBAAkB;AAAA,QAChB,WAAW;AAAA,QACX,SAAS;AAAA,UACP,kBAAkB,MAAM;AACtB,mBAAO,IAAIQ,aAAW;AAAA,cACpB,GAAG;AAAA,gBACD,KAAK,WAAW;AAAA,gBAChB,GAAG,IAAI,WAAW,UAAU,IAAI;AAAA,gBAChC;AAAA,kBACE,MAAM,UAAU,QAAQ;AAAA,kBACxB,iBAAiB,UAAU,UAAU,QAAQ,SAAS;AAAA,gBACxD;AAAA,gBACA,EAAE,QAAQ,eAAe,CAAC,MAAM,EAAE;AAAA,cACpC;AAAA,YACF;AAAA,UACF,GAAG,EAAE;AAAA,UACL,kBAAkB;AAAA,UAClB,yBAAyB;AAAA,QAC3B;AAAA,MACF;AAAA,MACA,aAAa,SAAS;AAAA,QAAM,CAACC,cAC3B,OAAO,QAAQ;AAAA,UACb,GAAG,UAAU;AAAA,UACb,GAAGA;AAAA,QACL,CAAC,EAAE,IAAI,CAAC,CAACC,OAAM,KAAK,OAAO,EAAE,MAAAA,OAAM,MAAM,EAAE;AAAA,MAC7C;AAAA,MACA,kBAAkB,UAAU,kBAAkB,IAAI,CAAC,UAAU;AAAA,QAC3D,MAAM;AAAA,QACN,OAAO;AAAA,MACT,EAAE;AAAA,MACF,iBAAiB;AAAA,QACf,oBAAoB;AAAA,MACtB;AAAA,MACA,aAAa,UAAU,SAAS,IAAI,CAAC,YAAY;AAAA,QAC/C,cAAc,OAAO,IAAI;AAAA,QACzB,eAAe,OAAO;AAAA,MACxB,EAAE;AAAA,MACF,SAAS,OAAO,QAAQ,UAAU,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAACA,OAAM,SAAS,OAAO;AAAA,QACvE,MAAAA;AAAA,QACA;AAAA,MACF,EAAE;AAAA,IACJ,EAAE;AAAA,EACJ;AAEA,SAAO,QAAQ;AAAA,IACb,CAACC,aACC,IAAI,IAAI;AAAA,MACN,GAAG;AAAA,QACD,KAAK,WAAW;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQX,gBAAc,WAAW,IAAI,IAAI;AAAA,UACzC,aAAa;AAAA,UACb,KAAK,IAAI,MAAM,CAAC,MAAM,SAAS,CAAC,EAAE,SAAS,CAAC;AAAA,UAC5C,QAAQ,OAAO,MAAM,CAAC,MAAM,MAAM,CAAC,EAAE,SAAS,CAAC;AAAA,UAC/C,aAAa;AAAA,UACb,mBAAmB,MAAM;AACvB,kBAAM,YAAY,MAAMW,QAAO;AAC/B,mBAAO,cAAc,KAAK,SAAY,EAAE,UAAU;AAAA,UACpD,GAAG;AAAA,UACH,yBAAyB,CAAC,SAAS;AAAA,UACnC,iBAAiB;AAAA,YACf,iBAAiB,aAAa,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC;AAAA,YAC1D,uBAAuB;AAAA,UACzB;AAAA,UACA,kBAAkB,cAAc;AAAA,UAChC,aAAa,SAAS;AAAA,UACtB,SAASnB,SAAO,UAAU,EAAE,MAAM,CAACG,gBAAe;AAChD,kBAAM,qBAAkC,oBAAI,IAAI;AAChD,mBAAOA,YAAW;AAAA,cAAQ,CAAC,eACxB,UAAU,WAAW,CAAC,GAAG,QAAQ,CAAC,WAAW;AAC5C,oBAAI,mBAAmB,IAAI,OAAO,IAAI,WAAW,EAAG,QAAO,CAAC;AAC5D,mCAAmB,IAAI,OAAO,IAAI,WAAW;AAC7C,uBAAO;AAAA,kBACL,MAAM,OAAO,IAAI;AAAA,kBACjB,wBAAwB;AAAA,oBACtB,cAAc,OAAO,IAAI;AAAA,oBACzB,mBAAmB;AAAA,oBACnB,qBAAqB;AAAA,sBACnB,eAAe,OAAO,IAAI;AAAA,oBAC5B;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF,CAAC;AAAA,UACD,sBAAsB,cAAe,oBAAoB;AAAA,QAC3D;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAAA,EACJ;AACF;;;ADoZO,IAAM,UAAN,cAAsB,UAAmC;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAGA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAMiB,gBAAc,MAAM,MAAM,IAAI;AACpC,SAAK,QAAQ;AAEb,UAAM,OAAO;AACb,UAAM,aAAa,KAAK,QAAQ,MAAM,QAAQ;AAC9C,UAAM,cAAc,KAAK,QAAQ,MAAM,QAAQ;AAC/C,UAAM,SAASC,iBAAgB,CAAC,GAAG,IAAI,EAAE;AACzC,UAAM,MAAM,aAAa;AACzB,UAAM,OAAOC,SAAO,KAAK,QAAQ,KAAK;AACtC,UAAM,eAAe,sBAAsB,IAAI;AAC/C,UAAM,MAAM,aAAa,IAAI;AAC7B,UAAM,SAAS,gBAAgB,KAAK,IAAI;AACxC,UAAM,UAAU,iBAAiB,IAAI;AACrC,UAAM,aAAa,oBAAoB,WAAW,MAAM,MAAM,YAAY;AAC1E,UAAM,SAAS,sBAAsB;AACrC,UAAM,UAAU,iBAAiB;AACjC,UAAM,WAAW,kBAAkB;AACnC,UAAM,MAAM,aAAa;AAEzB,UAAM,WAAW,eAAe,MAAM,MAAM,MAAM,MAAM,CAAC,CAAC,GAAG;AAE7D,SAAK,MAAM,CAAC,CAAC;AACb,SAAK,oBAAoB,IAAI;AAC7B,SAAK,WAAW;AAEhB,QAAI,KAAK;AACP,WAAK,SAAS,CAAC,SAAS,SAAY,IAAI;AACxC,uBAAiB;AACjB;AAAA,IACF;AAEA,UAAM,gBAAgB,oBAAoB,MAAM,MAAM,MAAM,IAAI;AAChE,UAAM,iBAAiB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAM,iBAAiB,UAAU;AACjC,UAAM,eAAe,mBAAmB;AACxC,UAAM,eAAe,cAAc;AACnC,oBAAgB;AAChB,UAAM,kBAAkB,sBAAsB;AAC9C,UAAM,UAAU,cAAc;AAC9B,UAAM,oBAAoB,kBAAkB;AAC5C,qBAAiB;AAEjB,SAAK,WAAW;AAChB,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,oBAAoB;AACzB,SAAK,SAAS,QAAQ,SAClB,OAAO,OAAO,MAAM,CAAC,WAAW,QAAQ,IAAI,IAC5CA,SAAO,MAAS;AACpB,SAAK,OAAO,CAAC,KAAK,eACd,SACAC,MAAI,CAAC,KAAK,QAAQ,KAAK,cAAc,OAAO,CAAC,EAAE;AAAA,MAC7C,CAAC,CAAC,QAAQC,aAAY,MACpB,SAAS,WAAW,MAAM,MAAM,UAAUA,aAAY;AAAA,IAC1D;AAEJ,SAAK,gBAAgB,EAAE,OAAO,KAAK,KAAK,CAAC;AACzC,qBAAiB;AAEjB,aAAS,eAAe;AACtB,UAAI,KAAO,QAAO;AAClB,UAAI,KAAK,QAAQ,MAAO,QAAO;AAE/B,aAAO;AAAA,QACL,KAAKF,SAAO,KAAK,KAAK,OAAO,eAAe;AAAA,MAC9C;AAAA,IACF;AAEA,aAAS,eAAe;AAEtB,UAAI,KAAK,QAAQ,eAAeG,MAAK;AACnC,cAAMC,OAAM,KAAK,QAAQ;AACzB,eAAO;AAAA,UACL,UAAU;AAAA,UACV,IAAIA,KAAI;AAAA,UACR,qBAAqB,QAAQ,IAAI;AAAA,YAAM,CAAC,MACtC,IAAIA,KAAI,gBAAgBA,KAAI;AAAA,UAC9B;AAAA,UACA,kBAAkBA,KAAI;AAAA,UACtB,gBAAgBA,KAAI;AAAA,UACpB,qBAAqBA,KAAI,MAAM,kBAAkB;AAAA,UACjD,uBAAuBA,KAAI,MAAM,kBAAkB;AAAA,QACrD;AAAA,MACF;AAGA,aAAOJ,SAAO,KAAK,QAAQ,GAAG,EAAE,MAAM,CAACI,UAAS;AAAA,QAC9C,UAAU;AAAA,QACV,GAAGA;AAAA,MACL,EAAE;AAAA,IACJ;AAEA,aAAS,mBAAmB;AAC1B,aAAOH,MAAI,CAAC,QAAQ,MAAM,KAAK,OAAO,CAAC,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM;AAC5D,YAAI,SAAS,iBAAiB,GAAG;AAC/B,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,eAAO;AAAA,UACL,KAAK,GAAG,OAAO;AAAA,UACf,KAAK,GAAG,OAAO;AAAA,UACf,gBAAgB,GAAG,kBAAkB;AAAA,UACrC,mBAAmB,GAAG,qBAAqB;AAAA,UAC3C,cAAc,GAAG,gBAAgB;AAAA,QACnC;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,oBAAoB;AAC3B,UAAI,CAAC,KAAK,SAAU;AAEpB,aAAOD,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM;AACxC,YAAI,MAAM;AACR,iBAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,SAAS,EAAE,QAAQ,EAAE,EAAE;AACvD,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,wBAAwB;AAC/B,YAAME,gBAAiB,KAAK,gBAC1B,KAAK;AACP,UAAI,CAACA,cAAc;AAGnB,YAAM,QAAQD,MAAI,CAACC,eAAc,UAAU,CAAC,EAAE;AAAA,QAC5C,CAAC,CAACG,KAAIC,WAAU,MAAM;AAEpB,gBAAM,UAAUD,IAAG,SAASA,IAAG;AAC/B,cAAI,CAAC,WAAW,QAAQ,WAAW;AACjC,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AAGF,cAAIC,YAAW,SAAS,GAAG;AACzB,oBAAQ,QAAQ,CAAC,MAAM;AACrB,kBAAI,CAAC,EAAE;AACL,sBAAM,IAAI;AAAA,kBACR;AAAA,gBACF;AAAA,YACJ,CAAC;AAAA,UACH;AAGA,gBAAMC,SAAQ,QAAQ,IAAI,CAAC,MAAM;AAC/B,kBAAM,cAAc,EAAE,OAAO,MAAM,GAAG;AACtC,kBAAM,aAAa,SAAS,YAAY,CAAC,CAAC;AAC1C,kBAAM,iBAAiB,YAAY,CAAC;AACpC,kBAAM,mBACJ,EAAE,cAAc,EAAE,OACd;AAAA,cACE,MAAM,EAAE,YAAY,QAAQ,EAAE;AAAA,cAC9B,OAAO,EAAE,YAAY;AAAA,cACrB,QAAQ,EAAE,YAAY;AAAA,YACxB,IACA;AACN,gBAAI,aAAa,cAAc,MAAM,aAAa;AAChD,oBAAM,IAAI;AAAA,gBACR,gDAAgD,EAAE,MAAM;AAAA,cAC1D;AAEF,kBAAM,gBAAgB,EAAE,UAAU,MAAM,GAAG;AAC3C,kBAAM,eAAe,iBAAiB,SAAS,cAAc,CAAC,CAAC;AAC/D,kBAAM,mBAAmB,iBAAiB,cAAc,CAAC;AACzD,gBAAI,gBAAgB,kBAAkB;AACpC,kBACE,aAAa,cAAc,MAAM,aAAa,gBAAgB;AAE9D,sBAAM,IAAI;AAAA,kBACR,wBAAwB,EAAE,MAAM,uCAAuC,EAAE,QAAQ;AAAA,gBACnF;AACF,qBAAO;AAAA,gBACL,MAAM;AAAA,gBACN;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,YACF;AAEA,kBAAM,eAAe,EAAE,UAAU,EAAE,QAAQ,MAAM,GAAG,IAAI;AACxD,kBAAM,cAAc,gBAAgB,SAAS,aAAa,CAAC,CAAC;AAC5D,kBAAM,kBAAkB,gBAAgB,aAAa,CAAC;AACtD,gBAAI,aAAa,cAAc,MAAM,aAAa,eAAe;AAC/D,oBAAM,IAAI;AAAA,gBACR,wBAAwB,EAAE,MAAM,sCAAsC,EAAE,OAAO;AAAA,cACjF;AACF,mBAAO;AAAA,cACL,MAAM;AAAA,cACN;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA,WAAW,EAAE,aAAaD,YAAW,CAAC,EAAE;AAAA,YAC1C;AAAA,UACF,CAAC;AAGD,gBAAM,eAAeC,OAAM;AAAA,YACzB,CAAC,SAAS,aAAa,KAAK,cAAc,MAAM;AAAA,UAClD;AACA,cAAI,aAAa,SAAS,KAAK,aAAa,SAASA,OAAM;AACzD,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AAGF,UAAAA,OAAM,QAAQ,CAAC,SAAS;AACtB,gBAAI,CAAC,SAAS,KAAK,EAAE,SAAS,KAAK,cAAc,KAAK,CAACF,IAAG,QAAQ;AAChE,oBAAM,IAAI;AAAA,gBACR,wCAAwC,KAAK,eAAe,YAAY,CAAC;AAAA,cAC3E;AAAA,YACF;AAAA,UACF,CAAC;AAED,iBAAOE;AAAA,QACT;AAAA,MACF;AAGA,YAAM,SAASP,SAAOE,aAAY,EAAE,MAAM,CAACG,QAAO;AAChD,YAAI,CAACA,IAAG,OAAQ,QAAO;AAGvB,cAAMG,UACJ,OAAOH,IAAG,WAAW,WAAW,EAAE,MAAMA,IAAG,OAAO,IAAIA,IAAG;AAC3D,eAAO;AAAA,UACL,MAAMG,QAAO;AAAA,UACb,SAASA,QAAO,WAAW,CAAC;AAAA,UAC5B,KAAKA,QAAO,QAAQ,QAAQ,SAAYA,QAAO,OAAO,IAAO;AAAA,UAC7D,MAAMA,QAAO;AAAA,QACf;AAAA,MACF,CAAC;AAGD,YAAM,OAAOR,SAAO,KAAK,EAAE;AAAA,QAAM,CAACO,WAChCA,OAAM,CAAC,EAAE,eAAe,WAAW,MAAM,IAAI,gBAAgB;AAAA,MAC/D;AAGA,YAAM,MAAMP,SAAOE,aAAY,EAAE,MAAM,CAACG,QAAOA,KAAI,UAAU,IAAI;AAGjE,YAAM,SAASJ,MAAI,CAAC,MAAM,OAAOC,aAAY,CAAC,EAAE;AAAA,QAC9C,CAAC,CAACO,OAAMF,QAAOF,GAAE,MACf,OAAO;AAAA,UACL,OAAO,QAAQA,KAAI,UAAU,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM;AAC/C,gBACE,CAACE,OAAM;AAAA,cACL,CAAC,MAAM,GAAG,EAAE,WAAW,IAAI,EAAE,eAAe,OAAO;AAAA,YACrD;AAEA,oBAAM,IAAI;AAAA,gBACR,sCAAsC,CAAC;AAAA,cACzC;AACF,mBAAO;AAAA,cACL;AAAA,cACA;AAAA,gBACE,MAAM,EAAE,QAAQ;AAAA,gBAChB,UAAU,EAAE,WAAW,UAAU,EAAE,QAAQ,IAAI;AAAA,gBAC/C,SAAS,EAAE,UACP,UAAU,EAAE,OAAO,IACnBE,UAAS,gBACP,IACA;AAAA,gBACN,kBAAkB,EAAE,oBAAoB;AAAA,gBACxC,oBAAoB,EAAE,sBAAsB;AAAA,gBAC5C,SAAS,EAAE,gBAAgB;AAAA,cAC7B;AAAA,YACF;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACJ;AAEA,aAAO,EAAE,MAAM,OAAO,QAAQ,KAAK,OAAO;AAAA,IAC5C;AAEA,aAAS,qBAAqB;AAC5B,UAAI,CAAC,OAAQ;AAEb,YAAM,gBAAgB,IAAIC,KAAI;AAAA,QAC5B,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa;AAAA,YACb,OAAO,IAAI;AAAA,YACX,QAAQ;AAAA,cACN;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY,CAAC,WAAW;AAAA,cAC1B;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY,CAAC,WAAW;AAAA,cAC1B;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAEA,aAAO,IAAI,GAAG;AAAA,QACZ,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,UAAU,OAAO,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;AAAA,YACpC,kBAAkB,OAAO;AAAA,YACzB,SAAS,IAAI;AAAA,YACb,gBAAgB,CAAC,cAAc,EAAE;AAAA,YACjC,8BAA8B;AAAA,UAChC;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,UAAI,CAAC,gBAAgB,CAAC,OAAQ;AAE9B,aAAOT,MAAI,CAAC,OAAO,OAAO,OAAO,MAAM,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,MAAM,MAAM;AACnE,cAAM,UAA0C,CAAC;AAEjD,cAAM,QAAQ,CAAC,MAAM;AACnB,cAAI,EAAE,SAAS,UAAW;AAE1B,gBAAM,YAAY,EAAE;AACpB,gBAAM,kBAAkB,EAAE,gBAAgB,YAAY;AACtD,gBAAM,cAAc,EAAE;AACtB,gBAAM,WAAW,GAAG,SAAS,GAAG,eAAe,GAAG,WAAW;AAC7D,gBAAM,SACJ,QAAQ,QAAQ,KAChB,IAAI,GAAG;AAAA,YACL,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,SAAS,QAAQ;AAAA,cACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQE,YAAY;AAAA,gBACZ,MAAM;AAAA,gBACN,UAAU;AAAA,gBACV,YAAY;AAAA,gBACZ,OAAO,IAAI;AAAA,gBACX,aAAa,OAAO,GAAG,EAAE,WAAW,IAAI,EAAE,eAAe,EAAE;AAAA,cAC7D;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AACF,kBAAQ,QAAQ,IAAI;AAAA,QACtB,CAAC;AACD,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,kBAAkB;AACzB,UAAI,CAAC,UAAU,CAAC,gBAAgB,CAAC,aAAc;AAE/C,aAAOA,MAAI,CAAC,OAAO,OAAO,cAAc,cAAc,CAAC,EAAE;AAAA,QACvD,CAAC,CAAC,OAAO,SAAS,IAAI,MAAM;AAI1B,gBAAM,gBAA8C,CAAC;AACrD,gBAAM,QAAQ,CAAC,MAAM;AACnB,kBAAM,iBAAiB,EAAE,eAAe,YAAY;AACpD,kBAAM,aAAa,EAAE;AACrB,kBAAM,aAAa,GAAG,cAAc,GAAG,UAAU;AACjD,0BAAc,UAAU,IAAI,cAAc,UAAU,KAAK,CAAC;AAC1D,0BAAc,UAAU,EAAE,KAAK,CAAC;AAAA,UAClC,CAAC;AAGD,iBAAO,OAAO,QAAQ,aAAa,EAAE,IAAI,CAAC,CAAC,YAAYM,MAAK,MAAM;AAChE,kBAAM,iBAAiBA,OAAM,CAAC,EAAE,eAAe,YAAY;AAC3D,kBAAM,aAAaA,OAAM,CAAC,EAAE;AAC5B,kBAAM,cAAcA,OAAM,KAAK,CAAC,MAAM,CAAC,EAAE,gBAAgB;AACzD,kBAAM,cAAcA,OAAM,OAAO,CAAC,MAAM,EAAE,gBAAgB;AAC1D,kBAAM,eAAe,CAAC,MAA+B;AAAA,cACnD,GAAI,CAAC,IACD;AAAA,gBACE;AAAA,kBACE,MAAM;AAAA,kBACN,eAAe;AAAA,oBACb,YAAY;AAAA,oBACZ,aAAa;AAAA,oBACb,aAAa;AAAA,kBACf;AAAA,gBACF;AAAA,cACF,IACA,CAAC;AAAA,cACL,GAAI,GAAG,SAAS,YACZ;AAAA,gBACE;AAAA,kBACE,MAAM;AAAA,kBACN,gBACE,QACE,GAAG,EAAE,SAAS,GAAG,EAAE,gBAAgB,YAAY,CAAC,GAC9C,EAAE,WACJ,EACF,EAAE;AAAA,gBACN;AAAA,cACF,IACA,CAAC;AAAA,cACL,GAAI,GAAG,SAAS,aACZ;AAAA,gBACE;AAAA,kBACE,MAAM;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM,EAAE,aAAa,SAAS;AAAA,oBAC9B,UAAU,EAAE,iBAAiB,YAAY;AAAA,oBACzC,YAAY;AAAA,kBACd;AAAA,gBACF;AAAA,cACF,IACA,CAAC;AAAA,YACP;AACA,kBAAM,WAAW,IAAI,GAAG;AAAA,cACtB,GAAG;AAAA,gBACD,KAAK,WAAW;AAAA,gBAChB,GAAG,IAAI,WAAW,UAAU;AAAA,gBAC5B;AAAA,kBACE,iBAAiB,aAAa;AAAA,kBAC9B,MAAM;AAAA,kBACN,UAAU;AAAA,kBACV,gBAAgB,CAAC,SAAS,KAAK,EAAE,SAAS,cAAc,IACpD,OACA;AAAA,kBACJ,gBAAgB,aAAa,WAAW;AAAA,gBAC1C;AAAA,gBACA,EAAE,QAAQ,KAAK;AAAA,cACjB;AAAA,YACF;AAEA,wBAAY;AAAA,cACV,CAAC,MACC,IAAI,GAAG;AAAA,gBACL,GAAG,IAAI,WAAW,UAAU,OAAO;AAAA,kBACjC,KAAK,UAAU,EAAE,gBAAgB;AAAA,kBACjC;AAAA,gBACF,CAAC;AAAA,gBACD;AAAA,kBACE,aAAa,SAAS;AAAA,kBACtB,SAAS,aAAa,CAAC;AAAA,kBACvB,YAAY;AAAA,oBACV;AAAA,sBACE,aAAa,EAAE,iBAAkB,OAC7B,EAAE,QAAQ,CAAC,EAAE,iBAAkB,IAAK,EAAE,IACtC;AAAA,sBACJ,cAAc,EAAE,iBAAkB;AAAA,sBAClC,YAAY,EAAE,iBAAkB,SAC5B;AAAA,wBACE,gBAAgB,EAAE,iBAAkB,OAAO;AAAA,wBAC3C,QAAQ,EAAE,iBAAkB,OAAO;AAAA,sBACrC,IACA;AAAA,oBACN;AAAA,kBACF;AAAA,gBACF;AAAA,gBACA,EAAE,QAAQ,KAAK;AAAA,cACjB;AAAA,YACJ;AAEA,mBAAO;AAAA,UACT,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAEA,aAAS,YAAY;AACnB,UAAI,CAAC,OAAQ,QAAOP,SAAO,MAAS;AAEpC,aAAO,OAAO,OAAO,MAAM,CAAC,WAAW;AACrC,YAAI,CAAC,OAAQ,QAAOA,SAAO,MAAS;AACpC,YAAI,OAAO,KAAM,QAAOA,SAAO,OAAO,IAAI;AAE1C,eAAO,IAAI;AAAA,UACT,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAY,OAAO;AAAA,YACnB,kBAAkB,OAAO;AAAA,YACzB,KAAK,OAAO;AAAA,UACd;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,wBAAwB;AAC/B,aAAOA,SAAO,IAAI,mBAAmB,EAAE,MAAM,CAAC,wBAAwB;AACpE,YAAI,CAAC,oBAAqB;AAE1B,eAAO,IAAIW,kBAAiB;AAAA,UAC1B,GAAG,IAAI;AAAA,UACP;AAAA,YACE,MAAM,GAAG,IAAI,IAAI,mBAAK,KAAK,IAAI,mBAAK,IAAI;AAAA,YACxC,aAAaX,SAAO,IAAI,mBAAmB,EAAE,MAAM,CAAC,OAAO,EAAG;AAAA,YAC9D,cAAc;AAAA,YACd,WAAW;AAAA,cACT,aAAaA,SAAO,IAAI,mBAAmB,EAAE,MAAM,CAAC,OAAO,EAAG;AAAA,cAC9D,YAAY;AAAA,gBACV,GAAI,KAAK,kBAAkB,CAAC,EAAE,KAAK,IAAI,MAAM,MAAM,CAAC,IAAI,CAAC;AAAA,gBACzD,EAAE,KAAK,IAAI,MAAM,IAAI;AAAA,cACvB;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,gBAAgB;AACvB,aAAO,gBAAgB;AAAA,QACrB,CAACY,qBACC,IAAIC,KAAI;AAAA,UACN,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE;AAAA,cACA,SAAS;AAAA,cACT,gBAAgB,eAAe;AAAA,cAC/B,cAAc,QAAQ;AAAA,cACtB,GAAI,WACA;AAAA;AAAA;AAAA,gBAGE,oBAAoB;AAAA,gBACpB,4BAA4B,SAAS,MAAM,CAAC,MAAM;AAAA,kBAChD,GAAI,EAAE,UACF;AAAA,oBACE;AAAA,sBACE,kBAAkB;AAAA,sBAClB,MAAM,EAAE,SAAS;AAAA,sBACjB,QAAQ,EAAE,SAAS;AAAA,oBACrB;AAAA,kBACF,IACA,CAAC;AAAA,kBACL,GAAI,EAAE,OACF;AAAA,oBACE;AAAA,sBACE,kBAAkB;AAAA,sBAClB,MAAM,EAAE,MAAM;AAAA,sBACd,QAAQ,EAAE,MAAM;AAAA,oBAClB;AAAA,kBACF,IACA,CAAC;AAAA,gBACP,CAAC;AAAA,cACH;AAAA;AAAA;AAAA,gBAGA;AAAA,kBACE,YAAY;AAAA,gBACd;AAAA;AAAA,cACJ,sBAAsB;AAAA;AAAA;AAAA,gBAGpB,gBAAgB,IAAI;AAAA,gBACpB,SAAS,IAAI;AAAA,gBACb,gBAAgB,IAAI;AAAA,cACtB;AAAA,cACA,0BAA0B;AAAA,gBACxB,QAAQ;AAAA,gBACR,UAAU;AAAA,cACZ;AAAA,cACA,eACE,UACAZ,MAAI,CAAC,OAAO,OAAO,YAAa,CAAC,EAAE;AAAA,gBAAM,CAAC,CAAC,OAAO,OAAO,MACvD,OAAO,OAAO,OAAO,EAAE,IAAI,CAAC,YAAY;AAAA,kBACtC,gBAAgB,OAAO;AAAA,kBACvB,eAAe,OAAO,KAAK;AAAA,oBACzB,CAAC,SACC,MAAM,KAAK,CAAC,MAAM,EAAE,gBAAgB,IAAI,EAAG;AAAA,kBAC/C;AAAA,kBACA,eAAe,OAAO,KAAK,MAAM,CAAC,SAAS,IAAK;AAAA,gBAClD,EAAE;AAAA,cACJ;AAAA,cACF,sBAAsB;AAAA,cACtB,mBAAmBW,oBAAmB;AAAA,gBACpC,aAAaA,iBAAgB;AAAA,gBAC7B,MAAM,KAAK,kBACPZ,SAAO,KAAK,eAAe,EAAE,OAC7B;AAAA,cACN;AAAA,cACA,oBAAoB;AAAA,YACtB;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,YAAM,SAAS,IAAI,eAAe;AAAA,QAChC,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkB;AAAA,YAClB,mBAAmB;AAAA,YACnB,YAAYc,wBAAsB,WAAW,IAAI,QAAQ,IAAI;AAAA,YAC7D,aAAa,QAAQ;AAAA,YACrB,aAAa,QAAQ;AAAA,UACvB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAEA,MAAAd,SAAO,QAAQ,cAAc,EAAE,MAAM,CAAC,mBAAmB;AACvD,YAAI,mBAAmB,MAAO;AAC9B,YAAI,eAAe;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkB,OAAO;AAAA,YACzB,mBAAmB,OAAO;AAAA,YAC1B,YAAY,OAAO;AAAA,YACnB,YAAY;AAAA,YACZ,0CAA0C;AAAA,cACxC,+BAA+B;AAAA,gBAC7B,sBAAsB;AAAA,cACxB;AAAA,cACA,aAAa;AAAA,YACf;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAED,MAAAA,SAAO,QAAQ,iBAAiB,EAAE,MAAM,CAAC,sBAAsB;AAC7D,YAAI,sBAAsB,MAAO;AACjC,YAAI,eAAe;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkB,OAAO;AAAA,YACzB,mBAAmB,OAAO;AAAA,YAC1B,YAAY,OAAO;AAAA,YACnB,YAAY;AAAA,YACZ,0CAA0C;AAAA,cACxC,+BAA+B;AAAA,gBAC7B,sBAAsB;AAAA,cACxB;AAAA,cACA,aAAa;AAAA,YACf;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAED,MAAAC,MAAI,CAAC,QAAQ,cAAc,YAAY,CAAC,EAAE;AAAA,QACxC,CAAC,CAAC,cAAcc,aAAY,MAAM;AAChC,cAAI,iBAAiB,MAAO;AAC5B,cAAI,CAACA,cAAc;AAEnB,gBAAM,cAAc,OAAO,OAAOA,aAAY,EAAE,CAAC;AAEjD,cAAI,eAAe;AAAA,YACjB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,kBAAkB,OAAO;AAAA,cACzB,mBAAmB,OAAO;AAAA,cAC1B,YAAY,OAAO;AAAA,cACnB,YAAY;AAAA,cACZ,0CAA0C;AAAA,gBACxC,+BAA+B;AAAA,kBAC7B,sBAAsB;AAAA,kBACtB,eAAed,MAAI;AAAA,oBACjB,cAAc;AAAA,oBACd,YAAY;AAAA,kBACd,CAAC,EAAE,MAAM,CAAC,CAAC,iBAAiB,cAAc,MAAM;AAG9C,0BAAM,SAAS,iBACX,MAAM,GAAG,EACV,IAAI,GACH,MAAM,GAAG,EACV,MAAM,CAAC,EACP,KAAK,GAAG;AAGX,0BAAM,SAAS,gBAAgB,MAAM,GAAG,EAAE,IAAI;AAC9C,2BAAO,GAAG,MAAM,IAAI,MAAM;AAAA,kBAC5B,CAAC;AAAA,gBACH;AAAA,gBACA,aAAa;AAAA,cACf;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,OAAQ;AAEb,aAAO,OAAO,MAAM,CAAC,WAAW;AAC9B,YAAI,CAAC,QAAQ,IAAK;AAElB,mBAAW,cAAc,CAAC,OAAO,MAAM,GAAG,OAAO,OAAO,GAAG;AACzD,gBAAM,aACJ,eAAe,OAAO,OAAO,OAAO,GAAG,IAAI,GAAG,UAAU;AAC1D,iBAAO,IAAI;AAAA,YACT;AAAA,YACA;AAAA,cACE,MAAM;AAAA,cACN,WAAW,aAAc;AAAA,cACzB,WAAW,aAAc;AAAA,YAC3B;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,MAAAA,MAAI,CAAC,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,MAAM;AACjC,mBAAW,aAAa,KAAK;AAC3B,gBAAM,QAAQ,IAAI,UAAU,IAAI,OAAO,GAAG,IAAI,GAAG,UAAU,IAAI;AAC/D,cAAI,WAAW,GAAG,KAAK,OAAO;AAAA,YAC5B,MAAM,KAAK;AAAA,YACX,KAAK;AAAA,cACH;AAAA,cACA,WAAW;AAAA,cACX,YAAY,MAAM;AAChB,oBAAI,CAAC,UAAU,MAAO,QAAO;AAC7B,oBAAI,OAAO,UAAU,UAAU,SAAU,QAAO;AAChD,oBAAI,UAAU,MAAM,QAAS,QAAO,UAAU,MAAM;AACpD,uBAAO;AAAA,cACT,GAAG;AAAA,cACH,GAAG,UAAU;AAAA,YACf;AAAA,YACA,aAAa;AAAA,cACX,GAAG,UAAU;AAAA,cACb,YAAY;AAAA,YACd;AAAA,YACA,KAAK;AAAA,cACH,MAAM,SAAS;AAAA,YACjB;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,UAAM,eACJ;AACF,QAAI,KAAK,KAAK;AACZ,UAAI,CAAC,KAAK,OAAQ,OAAM,IAAI,aAAa,YAAY;AACrD,aAAO,KAAK;AAAA,IACd;AAEA,QAAI,CAAC,KAAK,KAAM,OAAM,IAAI,aAAa,YAAY;AACnD,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,UAAU;AACnB,WAAOA,MAAI,CAAC,KAAK,mBAAmB,KAAK,eAAe,CAAC,EAAE;AAAA,MACzD,CAAC,CAAC,WAAW,OAAO,MAAM;AACxB,YAAI,CAAC;AACH,gBAAM,IAAI;AAAA,YACR,yDAAyD,KAAK,KAAK;AAAA,UACrE;AAEF,eAAO,KAAK,MACRa,oBAAkB,SAAS,KAC3BA,gBAAc,QAAS,IAAI,IAAI,SAAS;AAAA,MAC9C;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,UAAU;AACZ,YAAI,KAAK;AACP,gBAAM,IAAI,aAAa,4CAA4C;AACrE,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA,MAIpB,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA,MAIf,IAAI,iBAAiB;AACnB,YAAI,KAAK;AACP,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,IAAI,eAAe;AACjB,YAAI,KAAK;AACP,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,IAAI,oBAAoB;AACtB,YAAI,KAAK;AACP,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,IAAI,kBAAkB;AACpB,gBAAQ,IAAI,cAAc;AAC1B,YAAI,KAAK;AACP,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,eAAOd,SAAO,KAAK,eAAe,EAAE,MAAM,CAAC,YAAY;AACrD,cAAI,CAAC;AACH,kBAAM,IAAI;AAAA,cACR,kDAAkD,KAAK,KAAK;AAAA,YAC9D;AACF,iBAAO;AAAA,QACT,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK,MAAM,KAAK,SAAS,KAAK;AAAA,QACnC,SAASA,SAAO,KAAK,iBAAiB,EAAE;AAAA,UAAM,CAAC,cAC7C,YAAY,KAAK,UAAU;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AAEA,SAAS,aAAa,UAAkB;AACtC,SAAO,CAAC,QAAQ,OAAO,EAAE,SAAS,QAAQ,IACrC,gBACA;AACP;AAEA,IAAMF,iBAAe;AAErB,QAAQ,eAAeA;;;AD58EvB,SAAS,OAAAkB,YAAW;;;AKXpB,OAAOC,SAAQ;AACf,OAAOC,WAAU;AACjB;AAAA,EAIE,OAAAC;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AACP,SAAS,SAAAC,QAAO,YAAAC,iBAAgB;AAiBhC;AAAA,EACE,kBAAAC;AAAA,EACA,cAAAC;AAAA,EACA,OAAAC;AAAA,EACA,OAAAC;AAAA,EACA,OAAAC;AAAA,EAEA,mBAAAC;AAAA,EACA,OAAAC;AAAA,EACA,MAAAC;AAAA,OACK;AAkCA,IAAMC,WAAN,cAAsB,UAAmC;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AAEb,UAAM,UAAUC,SAAO,KAAK,OAAO;AACnC,UAAM,MAAM,aAAa;AACzB,UAAM,SAAS,gBAAgB;AAC/B,UAAM,eAAeC,uBAAsB;AAC3C,UAAM,YAAY,eAAe;AACjC,UAAM,MAAMC,cAAa;AACzB,UAAM,SAASC,iBAAgB;AAC/B,UAAM,UAAUC,kBAAiB;AACjC,UAAM,UAAU,iBAAiB;AACjC,UAAM,UAAU,iBAAiB;AACjC,UAAM,MAAM,gBAAgB;AAE5B,UAAM,WAAW,cAAc;AAC/B,UAAM,kBAAkB,qBAAqB;AAE7C,UAAM,WAAWC,gBAAe;AAChC,SAAK,WAAW;AAEhB,QAAI,OAAM;AACR,WAAK,SAAS,CAAC,MAAM,SAAYL,SAAO,KAAK,KAAK,OAAO,eAAe;AACxE,uBAAiB;AACjB;AAAA,IACF;AAEA,UAAM,gBAAgB,OAAO,MAAM,CAACM,YAAW,UAAU,UAAUA,OAAM,CAAC;AAC1E,UAAM,gBAAgBC,qBAAoB;AAC1C,UAAM,QAAQ,YAAY;AAC1B,UAAM,WAAW,eAAe;AAChC,UAAM,iBAAiBC,sBAAqB;AAC5C,UAAM,iBAAiB,UAAU;AACjC,UAAM,EAAE,cAAc,QAAQ,IAAI,mBAAmB;AACrD,UAAM,UAAU,cAAc;AAC9B,sBAAkB;AAClB,qBAAiB;AAEjB,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,eAAe;AACpB,SAAK,SAAS,KAAK,SACf,IAAI,OAAO,MAAM,CAAC,WAAW,QAAQ,IAAI,IACzCR,SAAO,MAAS;AACpB,SAAK,OAAO,CAAC,KAAK,eACd,SACAS,MAAI,CAAC,KAAK,QAAQ,KAAK,cAAc,OAAO,CAAC,EAAE;AAAA,MAC/C,CAAC,CAAC,QAAQC,aAAY,MACpB,SAAS,WAAW,MAAM,MAAM,UAAUA,aAAY;AAAA,IAC1D;AAEF,iBAAa;AACb,qBAAiB;AAEjB,aAAS,eAAe;AAEtB,UAAI,KAAK,eAAeC,MAAK;AAC3B,cAAMC,UAAS;AAAA,UACb,IAAI,KAAK,IAAI;AAAA,UACb,eAAe,KAAK,IAAI;AAAA,UACxB,gBAAgB,KAAK,IAAI;AAAA,UACzB,gBAAgB,KAAK,IAAI;AAAA,QAC3B;AACA,eAAO,KAAK,IAAI,MAAM,YAAY,MAAM,CAAC,gBAAgB;AACvD,cAAI,YAAY,WAAW;AACzB,kBAAM,IAAI;AAAA,cACR;AAAA,YACF;AACF,iBAAOA;AAAA,QACT,CAAC;AAAA,MACH;AAGA,aAAOZ,SAAO,KAAK,GAAG;AAAA,IACxB;AAEA,aAAS,kBAAkB;AACzB,aAAOa,iBAAgB,QAAW,EAAE,QAAQ,KAAK,CAAC,EAAE;AAAA,IACtD;AAEA,aAASZ,yBAAwB;AAC/B,aAAOD,SAAO,KAAK,gBAAgB,QAAQ,EAAE,MAAM,CAAC,MAAM,CAAC;AAAA,IAC7D;AAEA,aAAS,iBAAiB;AACxB,aAAOS,MAAI,CAAC,KAAK,SAAS,CAAC,GAAG,YAAY,CAAC,EAAE;AAAA,QAC3C,CAAC,CAACK,QAAOC,aAAY,OAAO;AAAA,UAC1B,GAAGD;AAAA,UACH,SAASA,OAAM,WAAW;AAAA,UAC1B,UACEC,kBAAiB,UACbC,UAAS,cACTA,UAAS;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAASd,gBAAe;AACtB,aAAOF,SAAO,KAAK,OAAO,WAAW,EAAE,MAAM,CAAC,MAAM;AAClD,YAAI,CAACiB,eAAc,CAAC,GAAG;AACrB,gBAAM,IAAI;AAAA,YACR,oBAAoB,CAAC,sCAAsC,OAAO;AAAA,cAChEA;AAAA,YACF,EAAE,KAAK,IAAI,CAAC;AAAA,UACd;AAAA,QACF;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAASd,mBAAkB;AACzB,aAAOM,MAAI,CAAC,KAAK,KAAK,UAAU,QAAQ,CAAC,EAAE,MAAM,CAAC,CAACS,MAAK,CAAC,MAAM;AAC7D,YAAI,EAAE,KAAKC,mBAAkBD,IAAG,IAAI;AAClC,gBAAM,IAAI;AAAA,YACR,uBAAuB,CAAC,2CAA2CA,IAAG,YAAY,OAAO;AAAA,cACvFC,mBAAkBD,IAAG;AAAA,YACvB,EAAE,KAAK,IAAI,CAAC;AAAA,UACd;AAAA,QACF;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAASd,oBAAmB;AAC1B,aAAOJ,SAAO,KAAK,WAAW,OAAO,EAAE,MAAM,CAAC,MAAM;AAClD,cAAMoB,WAAU,MAAM,CAAC;AACvB,YAAIA,WAAU,MAAMA,WAAU;AAC5B,gBAAM,IAAI;AAAA,YACR,wBAAwB,CAAC;AAAA,UAC3B;AACF,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,mBAAmB;AAC1B,aAAOpB,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,OAAO;AAAA,QACxC,KAAK,GAAG,OAAO;AAAA,QACf,KAAK,GAAG,OAAO;AAAA,QACf,gBAAgB,GAAG,kBAAkB;AAAA,QACrC,mBAAmB,GAAG,qBAAqB;AAAA,MAC7C,EAAE;AAAA,IACJ;AAEA,aAAS,mBAAmB;AAC1B,aAAOA,SAAO,KAAK,OAAO,EAAE,MAAM,CAACqB,cAAa;AAAA,QAC9C,GAAGA;AAAA,QACH,WAAWA,UAAS,aAAa;AAAA,MACnC,EAAE;AAAA,IACJ;AAEA,aAAS,kBAAkB;AACzB,UAAI,CAAC,KAAK,OAAQ;AAElB,YAAM,QAAQrB,SAAO,KAAK,MAAM,EAAE,MAAM,CAACsB,SAAQ;AAE/C,YAAI,CAACA,KAAI,SAASA,KAAI,MAAM,WAAW;AACrC,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAGF,cAAMC,SAAQD,KAAI,MAAM,IAAI,CAAC,MAAM;AACjC,gBAAM,cAAc,EAAE,OAAO,MAAM,GAAG;AACtC,gBAAM,eAAe,EAAE,UAAU,EAAE,QAAQ,MAAM,GAAG,IAAI;AACxD,iBAAO;AAAA,YACL,YAAY,SAAS,YAAY,CAAC,CAAC;AAAA,YACnC,gBAAgB,YAAY,CAAC;AAAA,YAC7B,aAAa,SAAS,aAAa,CAAC,CAAC;AAAA,YACrC,iBAAiB,aAAa,CAAC;AAAA,UACjC;AAAA,QACF,CAAC;AAGD,cAAM,eAAeC,OAAM;AAAA,UACzB,CAAC,SACC,CAAC,QAAQ,OAAO,EAAE,SAAS,KAAK,cAAc,KAC9C,CAAC,QAAQ,OAAO,EAAE,SAAS,KAAK,eAAe;AAAA,QACnD;AACA,YAAI,aAAa,SAAS,KAAK,aAAa,SAASA,OAAM;AACzD,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAGF,QAAAA,OAAM,QAAQ,CAAC,SAAS;AACtB,cAAI,CAAC,SAAS,KAAK,EAAE,SAAS,KAAK,cAAc,KAAK,CAACD,KAAI,QAAQ;AACjE,kBAAM,IAAI;AAAA,cACR,wCAAwC,KAAK,eAAe,YAAY,CAAC;AAAA,YAC3E;AAAA,UACF;AAAA,QACF,CAAC;AAED,eAAOC;AAAA,MACT,CAAC;AAED,YAAM,SAASvB,SAAO,KAAK,MAAM,EAAE,MAAM,CAACsB,SAAQ;AAChD,YAAI,CAACA,KAAI,OAAQ,QAAO;AAGxB,cAAME,UACJ,OAAOF,KAAI,WAAW,WAAW,EAAE,MAAMA,KAAI,OAAO,IAAIA,KAAI;AAC9D,eAAO;AAAA,UACL,MAAME,QAAO;AAAA,UACb,KAAKA,QAAO,QAAQ,QAAQ,SAAYA,QAAO,OAAO,IAAO;AAAA,UAC7D,MAAMA,QAAO;AAAA,QACf;AAAA,MACF,CAAC;AAED,aAAO,EAAE,OAAO,OAAO;AAAA,IACzB;AAEA,aAAS,gBAAgB;AACvB,aAAOxB,SAAO,KAAK,QAAQ,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,KAAK,MAAM,KAAK,CAAC;AAAA,IACnE;AAEA,aAAS,uBAAuB;AAC9B,aAAO,KAAK,WAAuB,kBAAkB,KAAK,IAAI;AAAA,IAChE;AAEA,aAAS,cAAc;AAErB,YAAM,eAAe,UAAU,MAAM,CAACyB,eAAc;AAClD,cAAM,UAAUC,MAAK,KAAK,mBAAK,MAAM,MAAMD,WAAU,OAAO;AAC5D,cAAM,aAAaA,WAAU,cAAc;AAG3C,cAAM,QAAQ,MAAM;AAClB,cAAI,WAAWC,MAAK,KAAK,SAAS,GAAG,UAAU,eAAe;AAC9D,cAAIC,IAAG,WAAW,QAAQ,EAAG,QAAO;AACpC,qBAAWD,MAAK,KAAK,SAAS,eAAe;AAC7C,cAAIC,IAAG,WAAW,QAAQ,EAAG,QAAO;AAAA,QACtC,GAAG;AAGH,cAAM,UAAU,OAAOA,IAAG,aAAa,IAAI,EAAE,SAAS,IAAI;AAC1D,cAAM,QAAQ,QAAQ,MAAM,IAAI;AAChC,YAAI,CAAC,MAAM,KAAK,CAAC,SAAS,SAAS,MAAM,GAAG;AAC1C,UAAAA,IAAG;AAAA,YACD,QAAQD,MAAK,KAAK,SAAS,eAAe;AAAA,YAC1C,CAAC,GAAG,OAAO,IAAI,SAAS,MAAM,EAAE,KAAK,IAAI;AAAA,UAC3C;AAAA,QACF;AACA,eAAOD;AAAA,MACT,CAAC;AAGD,aAAO,IAAIG;AAAA,QACT,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS;AAAA,cACP,UAAU,aAAa;AAAA,gBAAM,CAAC,MAC5BF,MAAK,KAAK,mBAAK,MAAM,MAAM,EAAE,OAAO;AAAA,cACtC;AAAA,YACF;AAAA,YACA,YAAY;AAAA,cACV,UAAU,aAAa;AAAA,gBAAM,CAAC,MAC5B,EAAE,aACEA,MAAK,KAAK,mBAAK,MAAM,MAAM,EAAE,UAAU,IACvCA,MAAK,KAAK,mBAAK,MAAM,MAAM,EAAE,SAAS,YAAY;AAAA,cACxD;AAAA,YACF;AAAA,YACA,WAAW,aAAa,MAAM,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,YACjD,WAAW,CAAC,UAAU,QAAQ;AAAA,YAC9B,MAAM,CAACG,gBAAc,cAAc,WAAW,IAAI,IAAI,EAAE;AAAA,YACxD,YAAY;AAAA,cACVC,KACG,4BAA4B;AAAA,gBAC3B,YAAY,cAAc;AAAA,cAC5B,CAAC,EACA,MAAM,CAAC,eAAe;AAAA,gBACrB,SAAS,UAAU;AAAA,gBACnB,UAAUC,QAAO,UAAU,QAAQ;AAAA,gBACnC,UAAU,UAAU;AAAA,cACtB,EAAE;AAAA,YACN;AAAA,YACA,MAAM;AAAA,UACR;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,UAAI,CAAC,IAAK,QAAO,CAAC;AAElB,YAAM,gBAAgB,IAAIC,KAAI;AAAA,QAC5B,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,OAAO,IAAI;AAAA,YACX,QAAQ;AAAA,cACN;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY,CAAC,WAAW;AAAA,cAC1B;AAAA,YACF;AAAA,YACA,SAAS;AAAA,cACP;AAAA,gBACE,UAAU;AAAA,gBACV,QAAQ;AAAA,gBACR,UAAU;AAAA,gBACV,YAAY,CAAC,WAAW;AAAA,cAC1B;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAEA,YAAMtB,gBAAe,IAAIuB,IAAG;AAAA,QAC1B,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,UAAU;AAAA,YACV,kBAAkB,IAAI,MAAM;AAAA,cAAM,CAAC,UACjC,MAAM,CAAC,EAAE,eAAe,WAAW,MAAM,IACrC,gBACA;AAAA,YACN;AAAA,YACA,SAAS,IAAI;AAAA,YACb,gBAAgB,CAAC,cAAc,EAAE;AAAA,YACjC,8BAA8B;AAAA,UAChC;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAEA,YAAM,MAAMxB,MAAI,CAAC,IAAI,OAAO,cAAc,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,IAAI,MAAM;AACpE,cAAM,YAAyC,CAAC;AAChD,cAAMyB,WAA0C,CAAC;AAEjD,cAAM,QAAQ,CAAC,SAAS;AACtB,gBAAM,kBAAkB,KAAK,gBAAgB,YAAY;AACzD,gBAAM,cAAc,KAAK;AACzB,gBAAM,WAAW,GAAG,eAAe,GAAG,WAAW;AACjD,gBAAM,SACJA,SAAQ,QAAQ,KAChB,IAAID,IAAG;AAAA,YACL,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,SAAS,QAAQ;AAAA,cACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAQE,YAAY;AAAA,gBACZ,MAAM;AAAA,gBACN,UAAU;AAAA,gBACV,YAAY;AAAA,gBACZ,OAAO,IAAI;AAAA,cACb;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AACF,UAAAC,SAAQ,QAAQ,IAAI;AAEpB,gBAAM,iBAAiB,KAAK,eAAe,YAAY;AACvD,gBAAM,aAAa,KAAK;AACxB,gBAAM,aAAa,GAAG,cAAc,GAAG,UAAU;AACjD,gBAAM,WACJ,UAAU,UAAU,KACpB,IAAID,IAAG;AAAA,YACL,GAAG;AAAA,cACD,KAAK,WAAW;AAAA,cAChB,GAAG,IAAI,WAAW,UAAU;AAAA,cAC5B;AAAA,gBACE,iBAAiBvB,cAAa;AAAA,gBAC9B,MAAM;AAAA,gBACN,UAAU;AAAA,gBACV,gBAAgB,CAAC,SAAS,KAAK,EAAE,SAAS,cAAc,IACpD,OACA;AAAA,gBACJ,gBAAgB;AAAA,kBACd;AAAA,oBACE,MAAM;AAAA,oBACN,gBAAgB,OAAO;AAAA,kBACzB;AAAA,gBACF;AAAA,cACF;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AACF,oBAAU,UAAU,IAAI;AAAA,QAC1B,CAAC;AAED,eAAO,EAAE,WAAW,SAAAwB,SAAQ;AAAA,MAC9B,CAAC;AAED,aAAO,EAAE,cAAAxB,eAAc,SAAS,IAAI,QAAQ;AAAA,IAC9C;AAEA,aAAS,YAAY;AACnB,UAAI,CAAC,IAAK,QAAOV,SAAO,MAAS;AAEjC,aAAO,IAAI,OAAO,MAAM,CAAC,WAAW;AAClC,YAAI,CAAC,OAAQ,QAAOA,SAAO,MAAS;AACpC,YAAI,OAAO,KAAM,QAAOA,SAAO,OAAO,IAAI;AAE1C,eAAO,IAAI;AAAA,UACT,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAY,OAAO;AAAA,YACnB,KAAK,OAAO;AAAA,UACd;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAImC,aAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,MAAMN,6BAA2B,QAAQ,IAAI,IAAI,IAAI;AAAA,YACrD,iBAAiB,QAAQ;AAAA,cACvB,CAACR,aAAY,UAAUA,SAAQ,SAAS;AAAA,YAC1C;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAShB,kBAAiB;AACxB,YAAM,SAASI,MAAI,CAAC,KAAK,eAAe,CAAC,GAAG,eAAe,CAAC,EAAE;AAAA,QAC5D,CAAC,CAAC,iBAAiB2B,gBAAe,MAChCC,MAAI,wBAAwB;AAAA,UAC1B,YAAY,CAAC,GAAG,iBAAiB,GAAGD,gBAAe,EAAE;AAAA,YACnD,CAAC,UAAU;AAAA,cACT,SAAS,MAAM;AACb,sBAAM,SAAS,KAAK,UAAU;AAC9B,uBAAO,OAAO,OAAO,CAAC,EAAE,YAAY,IAAI,OAAO,MAAM,CAAC;AAAA,cACxD,GAAG;AAAA,cACH,SAAS,KAAK;AAAA,cACd,WAAW,KAAK;AAAA,YAClB;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACL;AAEA,aAAO,IAAIC,MAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkB,OACdA,MAAI,6BAA6B;AAAA,cACjC,SAAS;AAAA,YACX,CAAC,IACCA,MAAI,6BAA6B;AAAA,cACjC,KAAKR,6BAA2BS,yBAAwB,EAAE,SACxD;AAAA,YACJ,CAAC;AAAA,YACH,gBAAgB,OAAO;AAAA,cAAM,CAAC,EAAE,WAAW,MACzC,aAAa,CAAC,EAAE,MAAM,UAAU,QAAQ,OAAO,KAAK,CAAC,IAAI,CAAC;AAAA,YAC5D;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS/B,uBAAsB;AAC7B,aAAO,IAAI8B,MAAI;AAAA,QACb,GAAG,IAAI;AAAA,QACP;AAAA,UACE,kBAAkBA,MAAI,6BAA6B;AAAA,YACjD,SAAS;AAAA,UACX,CAAC;AAAA,UACD,mBAAmB;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS7B,wBAAuB;AAC9B,aAAO,IAAI+B,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQV,gBAAc,QAAQ,IAAI,IAAI,IAAI;AAAA,YAC1C,aAAa;AAAA,YACb,KAAK,IAAI,MAAM,CAAC,MAAM,SAAS,CAAC,EAAE,SAAS,CAAC;AAAA,YAC5C,QAAQ,OAAO,MAAM,CAAC,MAAM,MAAM,CAAC,EAAE,SAAS,CAAC;AAAA,YAC/C,aAAa;AAAA,YACb,kBAAkB;AAAA,cAChB,WAAW,QAAQ,MAAM,CAAC,MAAM,MAAM,CAAC,CAAC;AAAA,YAC1C;AAAA,YACA,yBAAyB,CAAC,SAAS;AAAA,YACnC,iBAAiB;AAAA,cACf,iBAAiB,aAAa,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC;AAAA,cAC1D,uBAAuB;AAAA,YACzB;AAAA,YACA,kBAAkB,cAAc;AAAA,YAChC,aAAa,SAAS;AAAA,YACtB,sBAAsB,cAAe;AAAA,cACnC;AAAA,gBACE;AAAA,gBACA,OAAOA,gBAAc,cAAc,WAAW,IAAI,MAAM,MAAM;AAAA,gBAC9D,gBAAgB;AAAA,gBAChB,cAAc,KAAK,MAAM;AAAA,kBAAM,CAAC,UAC9B,MACG,IAAI,CAAC,SAAS,KAAK,WAAW,EAE9B;AAAA,oBACC,CAAC,OAAO,OAAOW,UAASA,MAAK,QAAQ,KAAK,MAAM;AAAA,kBAClD,EACC,IAAI,CAAC,WAAW,EAAE,eAAe,MAAM,EAAE;AAAA,gBAC9C;AAAA,gBACA,kBAAkB;AAAA,kBAChB,WAAW;AAAA,kBACX,SAAS;AAAA,oBACP,iBAAiB,SAAS;AAAA,oBAC1B,kBAAkB;AAAA,oBAClB,yBAAyB;AAAA,kBAC3B;AAAA,gBACF;AAAA,gBACA,aAAa/B,MAAI,CAAC,KAAK,eAAe,CAAC,GAAG,QAAQ,CAAC,EAAE;AAAA,kBACnD,CAAC,CAACgC,MAAKC,SAAQ,MAAM;AAAA,oBACnB,GAAG,OAAO,QAAQD,IAAG,EAAE,IAAI,CAAC,CAACE,OAAM,KAAK,OAAO;AAAA,sBAC7C,MAAAA;AAAA,sBACA;AAAA,oBACF,EAAE;AAAA,oBACF,GAAGD,UAAS,IAAI,CAAC,OAAO;AAAA,sBACtB,MAAM,gBAAgB,EAAE,IAAI;AAAA,sBAC5B,OAAO,KAAK,UAAU,EAAE,UAAU;AAAA,oBACpC,EAAE;AAAA,oBACF;AAAA,sBACE,MAAM;AAAA,sBACN,OAAO,KAAK,UAAU;AAAA,wBACpB,MAAM,mBAAK;AAAA,wBACX,OAAO,mBAAK;AAAA,sBACd,CAAC;AAAA,oBACH;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC;AAAA,UACH;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAO,IAAIH,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE;AAAA,YACA,SAAS,QAAQ;AAAA,YACjB,gBAAgB,eAAe;AAAA,YAC/B,cAAc,QAAQ;AAAA,YACtB,YAAY;AAAA,YACZ,sBAAsB;AAAA,cACpB,gBAAgB;AAAA,cAChB,SAAS,IAAI;AAAA,cACb,gBAAgB,IAAI;AAAA,YACtB;AAAA,YACA,0BAA0B;AAAA,cACxB,QAAQ;AAAA,cACR,UAAU;AAAA,YACZ;AAAA,YACA,eACE,WACA,QAAQ;AAAA,cAAM,CAACL,aACb,OAAO,OAAOA,QAAO,EAAE,IAAI,CAAC,YAAY;AAAA,gBACtC,gBAAgB,OAAO;AAAA,gBACvB,eAAe;AAAA,gBACf,eAAe,OAAO,KAAK,MAAM,CAAC,SAAS,IAAK;AAAA,cAClD,EAAE;AAAA,YACJ;AAAA,UACJ;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,YAAM,SAAS,IAAIU,gBAAe;AAAA,QAChC,GAAG,IAAI;AAAA,QACP;AAAA,UACE,kBAAkB;AAAA,UAClB,mBAAmB;AAAA,UACnB,YAAYf,wBAAsB,QAAQ,IAAI,IAAI,QAAQ,IAAI;AAAA,UAC9D,aAAa,QAAQ;AAAA,UACrB,aAAa,QAAQ;AAAA,QACvB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,UAAIe,gBAAe;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,kBAAkB,OAAO;AAAA,UACzB,mBAAmB,OAAO;AAAA,UAC1B,YAAY,OAAO;AAAA,UACnB,YAAY;AAAA,UACZ,0CAA0C;AAAA,YACxC,+BAA+B;AAAA,cAC7B,sBAAsB;AAAA,YACxB;AAAA,YACA,aAAa,QAAQ;AAAA,UACvB;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,UAAIA,gBAAe;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,kBAAkB,OAAO;AAAA,UACzB,mBAAmB,OAAO;AAAA,UAC1B,YAAY,OAAO;AAAA,UACnB,YAAY;AAAA,UACZ,0CAA0C;AAAA,YACxC,+BAA+B;AAAA,cAC7B,sBAAsB;AAAA,YACxB;AAAA,YACA,aAAa,QAAQ;AAAA,UACvB;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,UAAI,CAAC,IAAK;AAEV,UAAI,OAAO,MAAM,CAAC,WAAW;AAC3B,YAAI,CAAC,QAAQ,IAAK;AAElB,eAAO,IAAI;AAAA,UACT;AAAA,UACA;AAAA,YACE,MAAM,OAAO;AAAA,YACb,WAAW,aAAc;AAAA,YACzB,WAAW,aAAc;AAAA,UAC3B;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,eAAe;AACtB,WAAK,gBAAgB,EAAE,OAAO,KAAK,KAAK,CAAC;AAAA,IAC3C;AAEA,aAAS,mBAAmB;AAC1B,WAAK,gBAAgB;AAAA,QACnB,MAAM,UAAU,MAAM,CAACnB,gBAAe;AAAA,UACpC,OAAO,SAAS,MAAM,CAAC,UAAU,MAAM,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC;AAAA,UAC/D,aAAa;AAAA,YACX,GAAG,KAAK;AAAA,YACR,YAAY;AAAA,UACd;AAAA,UACA,KAAK;AAAA,YACH,MAAM,SAAS;AAAA,UACjB;AAAA,UACA,WAAWzB,SAAO,KAAK,KAAK,SAAS,EAAE,MAAM,CAAC,QAAQ,OAAO,IAAI;AAAA,UACjE,WAAWA,SAAO,KAAK,KAAK,SAAS,EAAE;AAAA,YACrC,CAAC,QACC,OACA0B,MAAK;AAAA,cACHD,WAAU,aACNC,MAAK,QAAQD,WAAU,UAAU,IACjCA,WAAU;AAAA,YAChB;AAAA,UACJ;AAAA,UACA,SAAS,KAAK,KAAK;AAAA,QACrB,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,UAAM,eACJ;AACF,QAAI,OAAM;AACR,UAAI,CAAC,KAAK,OAAQ,OAAM,IAAI,aAAa,YAAY;AACrD,aAAO,KAAK;AAAA,IACd;AAEA,QAAI,CAAC,KAAK,KAAM,OAAM,IAAI,aAAa,YAAY;AACnD,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,UAAU;AACZ,YAAI;AACF,gBAAM,IAAI,aAAa,4CAA4C;AACrE,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,IAAI,WAAW;AACb,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,IAAI,iBAAiB;AACnB,YAAI;AACF,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA,MAIA,IAAI,eAAe;AACjB,YAAI;AACF,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,YAAI,CAAC,KAAK;AACR,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY,EAAE,KAAK,QAAO,KAAK,SAAS,KAAK,KAAK;AAAA,IACpD;AAAA,EACF;AACF;AAEA,IAAM1B,iBAAe;AAErBD,SAAQ,eAAeC;;;AC90BvB,SAA0B,OAAA8C,YAAoB;AAGvC,IAAMC,iBAAgB;AAAA,EAC3B,aAAa;AAAA,EACb,YAAY;AAAA,EACZ,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,UAAU;AAAA,EACV,WAAW;AACb;AAEO,IAAMC,qBAAoB;AAAA,EAC/B,aAAa;AAAA,IACX,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA,YAAY;AAAA,IACV,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA,UAAU;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,EACV;AAAA,EACA,UAAU;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACR,QAAQ;AAAA,IACR,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAAA,EACA,UAAU;AAAA,IACR,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,EACX;AAAA,EACA,WAAW;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,SAAS;AAAA,IACT,UAAU;AAAA,IACV,UAAU;AAAA,IACV,UAAU;AAAA,EACZ;AACF;AA8tBO,IAAM,UAAN,cAAsB,UAAU;AAAA,EAC7B;AAAA,EACA;AAAA,EAER,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,UAAU,cAAc;AAE9B,SAAK,OAAO;AACZ,SAAK,UAAU;AAEf,aAAS,gBAAgB;AACvB,aAAO,IAAIH,KAAI;AAAA,QACb,GAAG,UAAU,KAAK,WAAW,SAAS,GAAG,IAAI,WAAW,CAAC,GAAG,EAAE,OAAO,CAAC;AAAA,MACxE;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,SAAS,KAAK;AAAA,IAChB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCO,WAAW,MAAc,MAA2B;AAEzD,WAAO,IAAII,SAAU,MAAM;AAAA,MACzB,SAAS;AAAA,QACP,MAAM,KAAK,QAAQ;AAAA,QACnB,KAAK,KAAK,QAAQ;AAAA,MACpB;AAAA,MACA,KAAK,KAAK,KAAK;AAAA,MACf,GAAG;AAAA,IACL,CAAC;AAAA,EACH;AACF;AAEA,IAAMD,iBAAe;AAErB,QAAQ,eAAeA;;;ACh6BvB,SAAS,OAAAE,OAAuC,UAAAC,gBAAc;AA2QvD,IAAM,OAAN,cAAmB,UAAmC;AAAA,EAC1C;AAAA,EACA;AAAA,EAKA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,MAAM,aAAa;AACzB,UAAM,eAAe,sBAAsB,IAAI;AAC/C,UAAM,MAAM,aAAa,IAAI;AAC7B,UAAM,SAAS,gBAAgB,KAAK,IAAI;AACxC,UAAM,UAAU,iBAAiB,IAAI;AACrC,UAAM,aAAa,oBAAoB,QAAQ,MAAM,MAAM,YAAY;AACvE,UAAM,MAAM,aAAa;AACzB,UAAM,WAAW,kBAAkB;AAEnC,UAAM,WAAW;AAAA,MACf;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MACI;AAAA,QACE;AAAA,UACE,SAAS,CAAC,WAAW;AAAA,UACrB,WAAW,CAAC,GAAG;AAAA,QACjB;AAAA,MACF,IACA,CAAC;AAAA,IACP;AACA,SAAK,MAAM;AACX,SAAK,WAAW;AAEhB,UAAM,gBAAgB,oBAAoB,MAAM,MAAM,MAAM,IAAI;AAChE,UAAM,iBAAiB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,MACI,WAAW,MAAM,OAAO,MAAM;AAC5B,cAAMC,WAAU,MAAM,SAAS,QAAQ;AACvC,eAAO;AAAA,UACL;AAAA,YACE,GAAG,EAAE,CAAC;AAAA,YACN,OAAOC,SAAO,4CAA4C;AAAA,YAC1D,aAAa;AAAA,cACX,GAAG,EAAE,CAAC,EAAE;AAAA,cACR,aAAa;AAAA,cACb,YAAY,QAAQ,IAAI;AAAA,cACxB,kBAAkBD,SAAQ;AAAA,cAC1B,sBAAsBA,SAAQ;AAAA,cAC9B,SAAS,mBAAK;AAAA,cACd,WAAW,mBAAK;AAAA,YAClB;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC,IACD;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,SAAK,WAAW,KAAK;AACrB,SAAK,MAAM;AACX,SAAK,gBAAgB;AACrB,SAAK,kBAAkB;AACvB,SAAK,YAAY;AACjB,SAAK,iBAAiB,WAAW,MAAM,CAAC,MAAM,EAAE,IAAI,CAACE,OAAMD,SAAOC,GAAE,IAAI,CAAC,CAAC;AAC1E,SAAK,gBAAgB;AAAA,MACnB,OAAOC,MAAI,CAAC,KAAK,KAAK,UAAU,CAAC,EAAE,MAAM,CAAC,CAAC,GAAGC,WAAU,OAAO;AAAA,QAC7D,YAAY,MAAM;AAChB,cAAI,CAACA,YAAW,CAAC,EAAE,MAAO,QAAO;AACjC,cAAI,OAAOA,YAAW,CAAC,EAAE,UAAU,SAAU,QAAO;AACpD,cAAIA,YAAW,CAAC,EAAE,MAAM,QAAS,QAAOA,YAAW,CAAC,EAAE,MAAM;AAC5D,iBAAO;AAAA,QACT,GAAG;AAAA,QACH,GAAG;AAAA,MACL,EAAE;AAAA,IACJ,CAAC;AAED,aAAS,eAAe;AACtB,UAAI,KAAO,QAAO;AAClB,UAAI,KAAK,QAAQ,MAAO,QAAO;AAC/B,aAAO;AAAA,IACT;AAEA,aAAS,eAAe;AAEtB,UAAI,KAAK,QAAQ,eAAeC,MAAK;AACnC,cAAMC,OAAM,KAAK,QAAQ;AACzB,eAAO;AAAA,UACL,UAAU;AAAA,UACV,kBAAkBA,KAAI;AAAA,UACtB,gBAAgBA,KAAI;AAAA,QACtB;AAAA,MACF;AAGA,aAAO;AAAA,QACL,UAAU;AAAA,QACV,kBAAkBL,SAAO,KAAK,QAAQ,GAAG,EAAE;AAAA,UAAM,CAAC,MAChD,EAAE,iBAAiB,IAAI,CAACC,OAAMD,SAAOC,EAAC,CAAC;AAAA,QACzC;AAAA,QACA,gBAAgBD,SAAO,KAAK,QAAQ,GAAG,EAAE;AAAA,UAAM,CAAC,MAC9C,EAAE,eAAe,IAAI,CAACC,OAAMD,SAAOC,EAAC,CAAC;AAAA,QACvC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,aAAOC,MAAI,CAAC,KAAK,UAAU,IAAI,QAAQ,CAAC,EAAE;AAAA,QACxC,CAAC,CAACI,WAAU,QAAQ,MAAMA,aAAY;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,iBAAiB;AAC1B,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,aAAa;AACtB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,UAAU;AACnB,WAAO,KAAK,SAAS,MAAM,QAAQ;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,iBAAiB;AAC1B,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,UAAU;AACnB,WAAO,KAAK,IAAI;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,iBAAiB;AAC1B,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,eAAe,KAAK;AAAA;AAAA;AAAA;AAAA,MAIpB,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA,MAIf,gBAAgB,KAAK;AAAA,IACvB;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,SAAS,KAAK;AAAA,QACd,YAAY,KAAK;AAAA,QACjB,gBAAgB,KAAK;AAAA,QACrB,SAAS,KAAK;AAAA,QACd,gBAAgB,KAAK;AAAA,QACrB,gBAAgB,KAAK;AAAA,MACvB;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,OAAO;AAAA,UACjB,WAAW;AAAA,YACT,KAAK,gBAAgB;AAAA;AAAA,YAErB,KAAK,QAAQ;AAAA,cACX,CAAC,MAAM,EAAE,MAAM,WAAW,EAAE,KAAK,QAAQ,IAAI;AAAA,YAC/C;AAAA,UACF;AAAA,QACF,CAAC;AAAA,QACD,WAAW;AAAA,UACT,SAAS,CAAC,cAAc;AAAA,UACxB,WAAW,CAAC,KAAK,cAAc,KAAK,KAAK,SAAS,GAAG;AAAA,QACvD,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMR,iBAAe;AAErB,KAAK,eAAeA;;;APxWb,IAAMS,WAAN,MAAM,iBAAgB,UAAU;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EAMR,OAAc,KAAK;AAAA,EAEnB,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,WAAW,EAAE,OAAO,GAAG,OAAO,EAAE;AACtC,UAAM,OAAO;AACb,SAAK,kBAAkB;AAEvB,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,YAAMC,OAAM,aAAa;AACzB,WAAK,UAAU,IAAI;AACnB,WAAK,OAAOA;AACZ;AAAA,IACF;AAEA,oBAAgB;AAChB,UAAM,MAAM,aAAa;AACzB,UAAM,UAAU,cAAc;AAC9B,4BAAwB;AAExB,SAAK,UAAUC,SAAO,OAAO;AAC7B,SAAK,OAAO;AAEZ,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,WAAUC,KAAI,QAAQ,IAAI,GAAG,IAAI,WAAW,IAAI,IAAI,QAAW;AAAA,QACnE,QAAQ;AAAA,MACV,CAAC;AACD,YAAM,mBAAmBD,SAAQ,KAAK,MAAM,CAAC,SAAS;AACpD,cAAM,aAAa,OAAO,iBAAiB,IACvC,sBAAsB,KAAK,iBAAiB,CAAC,IAC7C;AAEJ,YAAI,YAAY,UAAU,SAAS,OAAO;AACxC,gBAAM,IAAI;AAAA,YACR;AAAA,cACE,6FAA6F,IAAI;AAAA;AAAA,cACjG;AAAA,YACF,EAAE,KAAK,IAAI;AAAA,UACb;AAAA,QACF;AAEA,wBAAgB,UAAU;AAE1B,eAAOA;AAAA,MACT,CAAC;AAED,aAAO,EAAE,SAAS,iBAAiB;AAAA,IACrC;AAEA,aAAS,eAAe;AAEtB,UAAI,KAAK,eAAe,KAAO;AAC7B,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAGA,UAAI,KAAK,eAAeE,MAAK;AAC3B,eAAO,KAAK;AAAA,MACd;AAGA,aAAOH,SAAO,KAAK,GAAG,EAAE,MAAM,CAACD,SAAQ;AACrC,YAAIA,KAAI,oBAAoBA,KAAI;AAC9B,gBAAM,IAAI;AAAA,YACR,mFAAmF,IAAI;AAAA,UACzF;AACF,YAAI,CAACA,KAAI,oBAAoB,CAACA,KAAI;AAChC,gBAAM,IAAI;AAAA,YACR,2CAA2C,IAAI;AAAA,UACjD;AAEF,YACGA,KAAI,uBAAuB,CAACA,KAAI,yBAChC,CAACA,KAAI,uBAAuBA,KAAI;AAEjC,gBAAM,IAAI;AAAA,YACR,4FAA4F,IAAI;AAAA,UAClG;AAEF,eAAO;AAAA,UACL,GAAGA;AAAA,UACH,kBAAmBA,KAAI,oBAAoBA,KAAI;AAAA,UAC/C,gBAAgB;AAAA,QAClB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,gBAAgB;AACvB,aAAO,IAAIG,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,MAAM;AAAA,cACJ,mBAAmB,GAAG,SAAS,KAAK,IAAI,SAAS,KAAK;AAAA,YACxD;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB,iBAAoC;AAC3D,YAAM,kBAAkB,SAAS;AACjC,YAAM,kBACJ,iBAAiB,SAAS,mBAAK,MAAM,QAAQ,IAAI;AACnD,WAAK,gBAAgB;AAAA,QACnB,KAAK;AAAA,QACL,KAAK;AAAA,QACL,SAAS;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA,6BAA6B,eAAe;AAAA,UAC5C;AAAA,UACA,sBAAsB,mBAAK,MAAM,QAAQ,IAAI,CAAC;AAAA,UAC9C,qCAAqC,mBAAK,MAAM,QAAQ,IAAI,CAAC;AAAA,QAC/D,EAAE,KAAK,IAAI;AAAA,QACX,cAAc,KAAK;AAAA,MACrB,CAAC;AAAA,IACH;AAEA,aAAS,0BAA0B;AACjC,aAAO,IAAIA,KAAI;AAAA,QACb,GAAG,IAAI;AAAA,QACP;AAAA,UACE,aAAa,QAAQ;AAAA,UACrB,mBAAmB,CAAC,WAAW,cAAc;AAAA,QAC/C;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,SAAS,KAAK;AAAA,IAChB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAW,MAAM;AACf,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuEO,WACL,MACA,MACA,MACA;AAEA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,UAAU,GAAG,KAAK;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmDO,QACL,MACA,MACA,MACA;AAEA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,SAAS;AAAA,QACT,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,UAAU,GAAG,KAAK;AAAA,IACrD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCA,OAAc,IACZ,MACA,MACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA,EAAE,KAAK,MAAM,IAAI,KAAK,IAAI,KAAK,KAAK,IAAI;AAAA,MACxC;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMJ,iBAAe;AAErBD,SAAQ,eAAeC;;;AQ/gBvB,SAAmC,eAAAM,eAAa,UAAAC,gBAAc;AAK9D,SAAS,SAAS,mBAAAC,kBAAiB,OAAAC,aAAW;AAiIvC,IAAM,sBAAN,MAAM,6BAA4B,UAAmC;AAAA,EAClE;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAAgC,CAAC,GACjC,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,WAAK,eAAe,IAAI;AACxB,WAAK,WAAW,IAAI;AACpB,WAAK,aAAa,IAAI;AACtB;AAAA,IACF;AAEA,UAAM,SAAS;AAEf,UAAM,SAAS,UAAU;AACzB,UAAM,eAAe,mBAAmB;AACxC,UAAM,WAAW,eAAe;AAChC,UAAM,aAAa,iBAAiB;AACpC,yBAAqB;AAErB,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,aAAa;AAElB,aAAS,YAAY;AACnB,aAAOC,iBAAgB,QAAW,EAAE,OAAO,CAAC,EAAE;AAAA,IAChD;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAI,QAAQ;AAAA,QACjB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkB;AAAA,YAClB,gCAAgC;AAAA,YAChC,0BACE,KAAK,aACLC,SAAO,KAAK,SAAS,EAAE;AAAA,cAAM,CAAC,cAC5B,UAAU,IAAI,CAAC,OAAO;AAAA,gBACpB,UAAU,EAAE;AAAA,gBACZ,cAAcC,4BAA0B,MAAM,kBAAkB,EAAE,QAAQ;AAAA,cAC5E,EAAE;AAAA,YACJ;AAAA,YACF,yBAAyB,CAAC;AAAA,UAC5B;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,YAAM,SAASD,SAAO,KAAK,WAAW,EAAE;AAAA,QAAM,CAAC,gBAC7CE,MAAI,wBAAwB;AAAA,UAC1B,YAAY;AAAA,YACV;AAAA,cACE,QAAQ;AAAA,cACR,SAAS;AAAA,gBACP;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA,WAAW,CAAC,GAAG;AAAA,YACjB;AAAA,YACA,GAAI,aAAa,iBAAiB,CAAC;AAAA,UACrC;AAAA,QACF,CAAC;AAAA,MACH;AAEA,aAAO,IAAIA,MAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkBA,MAAI,wBAAwB;AAAA,cAC5C,YAAY;AAAA,gBACV;AAAA,kBACE,QAAQ;AAAA,kBACR,YAAY;AAAA,oBACV;AAAA,sBACE,MAAM;AAAA,sBACN,aAAa,CAAC,gCAAgC;AAAA,oBAChD;AAAA,kBACF;AAAA,kBACA,SAAS,CAAC,+BAA+B;AAAA,kBACzC,YAAY;AAAA,oBACV;AAAA,sBACE,MAAM;AAAA,sBACN,UAAU;AAAA,sBACV,QAAQ,CAAC,aAAa,EAAE;AAAA,oBAC1B;AAAA,oBACA;AAAA,sBACE,MAAM;AAAA,sBACN,UAAU;AAAA,sBACV,QAAQ,CAAC,eAAe;AAAA,oBAC1B;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC,EAAE;AAAA,YACH,gBAAgB,CAAC,EAAE,MAAM,UAAU,QAAQ,OAAO,KAAK,CAAC;AAAA,UAC1D;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,YAAM,SAASF,SAAO,KAAK,WAAW,EAAE;AAAA,QAAM,CAAC,gBAC7CE,MAAI,wBAAwB;AAAA,UAC1B,YAAY;AAAA,YACV;AAAA,cACE,QAAQ;AAAA,cACR,SAAS,CAAC,6BAA6B,gBAAgB;AAAA,cACvD,WAAW,CAAC,GAAG;AAAA,YACjB;AAAA,YACA,GAAI,aAAa,mBAAmB,CAAC;AAAA,UACvC;AAAA,QACF,CAAC;AAAA,MACH;AAEA,aAAO,IAAIA,MAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkBA,MAAI,wBAAwB;AAAA,cAC5C,YAAY;AAAA,gBACV;AAAA,kBACE,QAAQ;AAAA,kBACR,YAAY;AAAA,oBACV;AAAA,sBACE,MAAM;AAAA,sBACN,aAAa,CAAC,gCAAgC;AAAA,oBAChD;AAAA,kBACF;AAAA,kBACA,SAAS,CAAC,+BAA+B;AAAA,kBACzC,YAAY;AAAA,oBACV;AAAA,sBACE,MAAM;AAAA,sBACN,UAAU;AAAA,sBACV,QAAQ,CAAC,aAAa,EAAE;AAAA,oBAC1B;AAAA,oBACA;AAAA,sBACE,MAAM;AAAA,sBACN,UAAU;AAAA,sBACV,QAAQ,CAAC,iBAAiB;AAAA,oBAC5B;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,YACF,CAAC,EAAE;AAAA,YACH,gBAAgB,CAAC,EAAE,MAAM,UAAU,QAAQ,OAAO,KAAK,CAAC;AAAA,UAC1D;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,aAAO,IAAI,QAAQ;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,gBAAgB,aAAa;AAAA,UAC7B,OAAO;AAAA,YACL,eAAe,SAAS;AAAA,YACxB,iBAAiB,WAAW;AAAA,UAC9B;AAAA,QACF;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,cAAc,KAAK;AAAA;AAAA;AAAA;AAAA,MAInB,mBAAmB,KAAK;AAAA;AAAA;AAAA;AAAA,MAIxB,qBAAqB,KAAK;AAAA,IAC5B;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,IAAI,KAAK;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,oBAAoB;AAAA,UAC9B,WAAW,CAAC,KAAK,aAAa,GAAG;AAAA,QACnC,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,OAAc,IACZ,MACA,gBACA,MACA;AACA,UAAM,eAAe,QAAQ,aAAa;AAAA,MACxC,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAM,aAAa,QAAQ,2BAA2B;AAAA,MACpD,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAM,WAAWA,MAAI,KAAK;AAAA,MACxB,GAAG,IAAI;AAAA,MACP,WAAW,MAAM,cAAc,MAAM,CAAC,QAAQ,aAAa,GAAG,EAAE,QAAQ;AAAA,MACxE;AAAA,MACA;AAAA,IACF;AACA,UAAM,aAAaA,MAAI,KAAK;AAAA,MAC1B,GAAG,IAAI;AAAA,MACP,WAAW,MAAM,gBAAgB;AAAA,QAC/B,CAAC,QAAQ,aAAa,GAAG,EAAE;AAAA,MAC7B;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO,IAAI,qBAAoB,MAAM;AAAA,MACnC,KAAK;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAuC;AAAA,EACzC;AACF;AAEA,IAAMJ,iBAAe;AAErB,oBAAoB,eAAeA;;;AChbnC,SAA2C,OAAAK,OAAK,UAAAC,gBAAc;;;ACA9D,SAAmC,UAAAC,gBAAc;AAIjD,SAAS,WAAAC,gBAAe;AAsBjB,IAAM,0BAAN,cAAsC,UAAU;AAAA,EAC7C;AAAA,EAER,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,eAAe,sBAAsB;AAC3C,UAAM,mBAAmB,uBAAuB;AAEhD,SAAK,mBAAmB;AAExB,aAAS,wBAAwB;AAC/B,YAAM,OAAOC,SAAO,KAAK,IAAI,EAAE;AAAA,QAC7B,CAACC,WACE;AAAA,UACC,MAAM;AAAA,UACN,MAAM;AAAA,UACN,UAAU;AAAA,UACV,QAAQ;AAAA,UACR,QAAQ;AAAA,UACR,OAAO;AAAA,QACT,GAAGA,KAAI;AAAA,MACX;AACA,UAAI,CAAC,KAAM,OAAM,IAAI,aAAa,0BAA0B,KAAK,IAAI,EAAE;AACvE,aAAO;AAAA,IACT;AAEA,aAAS,yBAAyB;AAChC,aAAO,IAAIC,SAAQ;AAAA,QACjB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAY,KAAK;AAAA,YACjB,cAAc;AAAA,YACd;AAAA,YACA,iBAAiB,KAAK;AAAA,YACtB,kBAAkB,KAAK;AAAA,UACzB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,eAAe;AACxB,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,kBAAkB,KAAK;AAAA,IACzB;AAAA,EACF;AACF;AAEA,IAAMH,iBAAe;AAErB,wBAAwB,eAAeA;;;AC/FvC,SAAmC,UAAAI,gBAAc;AAKjD,SAAS,WAAAC,gBAAe;AAmBjB,IAAM,wBAAN,cAAoC,UAAmC;AAAA,EACpE;AAAA,EAER,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,YAAY,mBAAmB;AACrC,UAAM,SAAS,aAAa;AAE5B,SAAK,SAAS;AAEd,aAAS,qBAAqB;AAC5B,UAAI,CAAC,KAAK,UAAW,QAAO,CAAC,SAAS;AACtC,aAAOC,SAAO,KAAK,SAAS;AAAA,IAC9B;AAEA,aAAS,eAAe;AACtB,aAAO,IAAIF,SAAQ;AAAA,QACjB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE;AAAA,YACA,YAAY,KAAK;AAAA,YACjB,mBAAmB,CAAC,YAAY,MAAM;AAAA,YACtC,iCAAiC;AAAA,YACjC,oBAAoB;AAAA,cAClB;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,YACA,cAAc,CAAC,qBAAqB;AAAA,YACpC,4BAA4B;AAAA,UAC9B;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,SAAS;AAClB,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,IAAI,KAAK;AAAA,QACT,QAAQ,KAAK;AAAA,MACf;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMC,iBAAe;AAErB,sBAAsB,eAAeA;;;AFnGrC,SAAS,WAAAE,UAAS,UAAAC,gBAAc;AAudzB,IAAM,kBAAN,MAAM,yBAAwB,UAAmC;AAAA,EAC9D;AAAA,EACA;AAAA,EAER,YACE,MACA,OAA4B,CAAC,GAC7B,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,WAAK,kBAAkB;AACvB,WAAK,WAAWC,SAAO,IAAI,QAAQ;AACnC;AAAA,IACF;AAEA,UAAM,SAAS;AAEf,iCAA6B;AAC7B,UAAM,WAAW,kBAAkB;AACnC,UAAM,SAAS,gBAAgB;AAC/B,UAAM,WAAW,eAAe;AAEhC,SAAK,kBAAkB;AACvB,SAAK,WAAW;AAEhB,aAAS,+BAA+B;AACtC,MAAAC,MAAI,CAAC,KAAK,SAAS,KAAK,SAAS,CAAC,EAAE,MAAM,CAAC,CAAC,SAAS,SAAS,MAAM;AAClE,YAAI,WAAW;AACb,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,oBAAoB;AAC3B,UAAI,CAAC,KAAK,SAAU;AAEpB,aAAOD,SAAO,KAAK,QAAQ,EAAE,MAAM,CAACE,cAAa;AAC/C,aACGA,UAAS,qBAAqBA,UAAS,oBACxC,CAACA,UAAS;AAEV,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,eAAO;AAAA,UACL,GAAGA;AAAA,UACH,2BACEA,UAAS,8BAA8B,OAAO,SAAS;AAAA,QAC3D;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,kBAAkB;AACzB,UAAI,CAAC,KAAK,OAAQ;AAElB,aAAOF,SAAO,KAAK,MAAM,EAAE,MAAM,CAACG,YAAW;AAC3C,eAAO;AAAA,UACL,oBAAoB;AAAA,UACpB,cACEA,QAAO,gBACP;AAAA,UACF,cAAcA,QAAO,gBAAgB;AAAA,UACrC,YACEA,QAAO,cACP;AAAA,QACJ;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,iBAAiB;AACxB,aAAOH,SAAO,KAAK,aAAa,EAAE;AAAA,QAChC,CAAC,kBACC,IAAII,SAAQ;AAAA,UACV,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,iBACE,KAAK,WACLJ,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,YAAY;AAAA,gBACtC,GAAI,QAAQ,SAAS,OAAO,IAAI,CAAC,OAAO,IAAI,CAAC;AAAA,gBAC7C,GAAI,QAAQ,SAAS,OAAO,IAAI,CAAC,cAAc,IAAI,CAAC;AAAA,gBACpD,GAAI,QAAQ,SAAS,oBAAoB,IACrC,CAAC,oBAAoB,IACrB,CAAC;AAAA,cACP,CAAC;AAAA,cACH,oBACE,KAAK,aACLA,SAAO,KAAK,SAAS,EAAE,MAAM,CAAC,cAAc;AAAA,gBAC1C,GAAI,UAAU,SAAS,OAAO,IAAI,CAAC,OAAO,IAAI,CAAC;AAAA,gBAC/C,GAAI,UAAU,SAAS,OAAO,IAAI,CAAC,cAAc,IAAI,CAAC;AAAA,cACxD,CAAC;AAAA,cACH,wBAAwB;AAAA,gBACtB,oBAAoB;AAAA,kBAClB;AAAA,oBACE,MAAM;AAAA,oBACN,UAAU;AAAA,kBACZ;AAAA,kBACA;AAAA,oBACE,MAAM;AAAA,oBACN,UAAU;AAAA,kBACZ;AAAA,gBACF;AAAA,cACF;AAAA,cACA,uBAAuB;AAAA,gBACrB,0BAA0B;AAAA,cAC5B;AAAA,cACA,uBAAuB;AAAA,gBACrB,eAAe;AAAA,cACjB;AAAA,cACA,wBAAwBC,MAAI;AAAA,gBAC1B,KAAK,WAAW,CAAC;AAAA,gBACjB,KAAK,aAAa,CAAC;AAAA,cACrB,CAAC,EAAE,MAAM,CAAC,CAAC,SAAS,SAAS,MAAM;AACjC,sBAAM,aAAa,CAAC,GAAG,SAAS,GAAG,SAAS;AAC5C,uBAAO;AAAA,kBACL,GAAI,WAAW,SAAS,OAAO,IAAI,CAAC,OAAO,IAAI,CAAC;AAAA,kBAChD,GAAI,WAAW,SAAS,OAAO,IAAI,CAAC,cAAc,IAAI,CAAC;AAAA,gBACzD;AAAA,cACF,CAAC;AAAA,cACD,oBAAoB;AAAA,gBAClB,qBAAqB;AAAA,cACvB;AAAA,cACA,6BAA6B;AAAA,cAC7B,gBAAgB;AAAA,gBACd,sBAAsBD,SAAO,KAAK,gBAAgB,EAAE;AAAA,kBAClD,CAAC,OAAO,KAAK,OAAO,YAAY;AAAA,gBAClC;AAAA,cACF;AAAA,cACA,kBAAkBA,SAAO,KAAK,GAAG,EAAE;AAAA,gBAAM,CAAC,OACvC,KAAK,OAAO,YAAY;AAAA,cAC3B;AAAA,cACA,0BAA0B,KAAK;AAAA,cAC/B,kBAAkB,KAAK;AAAA,cACvB,+BAA+B,gBAC3B,EAAE,SAAS,KAAK,IAChB;AAAA,cACJ,cACE,YACA,SAAS,MAAM,CAACE,cAAa;AAC3B,uBAAO;AAAA,kBACL,UAAUA,UAAS;AAAA,kBACnB,qBAAqB,cAAc,qBAAqB;AAAA,kBACxD,mBACEA,UAAS,sBAAsB,SAC3B,SACA;AAAA,oBACE,WAAW,cAAc,mBAAmB;AAAA,oBAC5C,eAAe;AAAA,kBACjB;AAAA,kBACN,eAAe,cAAc,eAAe;AAAA,kBAC5C,iBACEA,UAAS,oBAAoB,SACzB,SACA;AAAA,oBACE,WAAW,cAAc,iBAAiB;AAAA,oBAC1C,eAAe;AAAA,kBACjB;AAAA,kBACN,qBAAqB,cAAc,qBAAqB;AAAA,kBACxD,oBAAoB,cAAc,oBAAoB;AAAA,kBACtD,kBAAkB,cAAc,kBAAkB;AAAA,kBAClD,mBAAmB,cAAc,mBAAmB;AAAA,kBACpD,WAAW,cAAc,WAAW;AAAA,kBACpC,0BACEA,UAAS,uBAAuB,SAC5B,SACA;AAAA,oBACE,WAAW,cAAc,oBAAoB;AAAA,oBAC7C,eAAeA,UAAS;AAAA,kBAC1B;AAAA,kBACN,eAAe,cAAc,eAAe;AAAA,kBAC5C,6BAA6B;AAAA,oBAC3B;AAAA,kBACF;AAAA,gBACF;AAEA,yBAAS,cAAc,KAAqB;AAC1C,sBAAI,CAACA,UAAS,GAAG,EAAG;AAEpB,wBAAM,KAAK;AAAA,oBACT,GAAG,IAAI,UAAU,GAAG;AAAA,oBACpBA,UAAS,GAAG;AAAA,oBACZ;AAAA,sBACE,aAAa,iBAAiB,GAAG,SAAS,IAAI;AAAA,oBAChD;AAAA,oBACA;AAAA,oBACA,EAAE,OAAO;AAAA,kBACX;AAEA,sBAAIG,SAAO;AAAA,oBACT,GAAG,IAAI,aAAa,GAAG;AAAA,oBACvB;AAAA,sBACE,QAAQ;AAAA,sBACR,UAAU,GAAG;AAAA,sBACb,WAAW;AAAA,sBACX,WAAW,SAAS;AAAA,oBACtB;AAAA,oBACA,EAAE,OAAO;AAAA,kBACX;AACA,yBAAO,GAAG;AAAA,gBACZ;AAAA,cACF,CAAC;AAAA,YACL;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeO,UAAU,MAAc,MAAkC;AAI/D,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,UAAU,KAAK;AAAA,QACf,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoDO,oBAAoB,MAAc,MAAmC;AAC1E,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,UAAU,KAAK;AAAA,QACf,GAAG;AAAA,MACL;AAAA,MACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,IAAI,KAAK;AAAA,MACX;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,eAAe;AAAA,UACzB,WAAW,CAAC,KAAK,SAAS,GAAG;AAAA,QAC/B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,OAAc,IACZ,MACA,YACA,MACA;AACA,UAAM,WAAWD,SAAQ,SAAS;AAAA,MAChC,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,WAAO,IAAI,iBAAgB,MAAM;AAAA,MAC/B,KAAK;AAAA,MACL;AAAA,IACF,CAAmC;AAAA,EACrC;AACF;AAEA,IAAML,iBAAe;AAErB,gBAAgB,eAAeA;;;AG12B/B;AAAA,EAGE,OAAAO;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;;;ACNP,SAA0C,UAAAC,gBAAc;AAIxD,SAAS,UAAAC,gBAAc;AAqChB,IAAM,yBAAN,cAAqC,UAAU;AAAA,EACnC;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,SAASC,SAAO,KAAK,MAAM;AACjC,UAAM,KAAK,eAAe;AAC1B,UAAM,qBAAqB,yBAAyB;AAEpD,SAAK,KAAK;AACV,SAAK,qBAAqB;AAE1B,aAAS,iBAAiB;AACxB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAa,iBAAiB,IAAI;AAAA,UAClC,aAAa;AAAA,YACX;AAAA,cACE,SAAS;AAAA,gBACP;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA,WAAW,CAAC,OAAO,SAAS;AAAA,YAC9B;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,2BAA2B;AAClC,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,gBAAgB,OAAO;AAAA,YACvB,cAAc,GAAG,IAAI;AAAA,cACnB,CAAC,QAAQ,iBAAiB,GAAG,EAAE;AAAA,YACjC;AAAA,YACA,gBAAgB,KAAK,UACjBD,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,aAAa;AAAA,cACvC,SAAS,QAAQ,IAAI,CAAC,YAAY;AAAA,gBAChC,SAAS,KAAK,UAAU,MAAM;AAAA,cAChC,EAAE;AAAA,YACJ,EAAE,IACF;AAAA,YACJ,kBAAkB;AAAA,UACpB;AAAA,UACA,EAAE,QAAQ,KAAK,gBAAgB,SAAY,KAAK;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,oBAAoB,KAAK;AAAA,IAC3B;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,uBAAuB,eAAeA;;;ADhHtC,SAAS,gBAAwB;AAgZ1B,IAAM,SAAN,MAAM,gBAAe,UAAmC;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA,kBAA2B;AAAA,EAEnC,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAMG,gBAAc,MAAM,MAAM,IAAI;AACpC,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAEvB,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,WAAK,QAAQC,SAAO,IAAI,KAAK;AAC7B;AAAA,IACF;AAEA,UAAM,SAAS;AAEf,UAAM,QAAQ,YAAY;AAE1B,SAAK,QAAQ;AACb,SAAK,kBAAkB,QAAQ,KAAK,MAAM;AAE1C,aAAS,cAAc;AACrB,aAAOC,MAAI;AAAA,QACT,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACP,CAAC,EAAE;AAAA,QACD,CAAC;AAAA,UACC;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF,MACE,IAAI,SAAS;AAAA,UACX,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,YAAY,OAAO,QAAQ,MAAM,EAAE,IAAI,CAAC,CAACC,OAAM,IAAI,OAAO;AAAA,gBACxD,MAAAA;AAAA,gBACA,MAAM,SAAS,WAAW,MAAM,SAAS,WAAW,MAAM;AAAA,cAC5D,EAAE;AAAA,cACF,aAAa;AAAA,cACb,SAAS,aAAa;AAAA,cACtB,UAAU,aAAa;AAAA,cACvB,eAAe,QAAQ,MAAM;AAAA,cAC7B,gBAAgB,SACZ,OAAO,YAAY,EAAE,WAAW,KAAK,GAAG,IACxC;AAAA,cACJ,qBAAqB;AAAA,gBACnB,SAAS;AAAA,cACX;AAAA,cACA,KACE,KAAK,QAAQ,SACT,SACA;AAAA,gBACE,eAAe,KAAK;AAAA,gBACpB,SAAS;AAAA,cACX;AAAA,cACN,wBAAwB,OAAO,QAAQ,iBAAiB,CAAC,CAAC,EAAE;AAAA,gBAC1D,CAAC,CAACA,OAAM,KAAK,OAAO;AAAA,kBAClB,MAAAA;AAAA,kBACA,SAAS,MAAM;AAAA,kBACf,UAAU,MAAM;AAAA,kBAChB,GAAI,MAAM,eAAe,cACrB,EAAE,gBAAgB,YAAY,IAC9B,MAAM,QAAQ,MAAM,UAAU,IAC5B;AAAA,oBACE,gBAAgB;AAAA,oBAChB,kBAAkB,MAAM;AAAA,kBAC1B,IACA,EAAE,gBAAgB,MAAM;AAAA,gBAChC;AAAA,cACF;AAAA,cACA,uBAAuB,OAAO,QAAQ,gBAAgB,CAAC,CAAC,EAAE;AAAA,gBACxD,CAAC,CAACA,OAAM,KAAK,OAAO;AAAA,kBAClB,MAAAA;AAAA,kBACA,UAAU,MAAM;AAAA,kBAChB,GAAI,MAAM,eAAe,cACrB,EAAE,gBAAgB,YAAY,IAC9B,MAAM,QAAQ,MAAM,UAAU,IAC5B;AAAA,oBACE,gBAAgB;AAAA,oBAChB,kBAAkB,MAAM;AAAA,kBAC1B,IACA,EAAE,gBAAgB,MAAM;AAAA,gBAChC;AAAA,cACF;AAAA,cACA,2BAA2B;AAAA,YAC7B;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,MAAM;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,OAAO,KAAK;AAAA,IACd;AAAA,EACF;AAAA,EAmEO,UAAU,kBAAuB,kBAAwB,MAAY;AAC1E,UAAM,aAAa,KAAK;AAGxB,QAAI,CAAC,KAAK;AACR,YAAM,IAAI;AAAA,QACR,wBAAwB,UAAU;AAAA,MACpC;AAEF,WAAO,qBAAqB,gBAAgB,EAAE;AAAA,MAAM,CAAC,MACnD,IACI,QAAO;AAAA,QACL;AAAA;AAAA,QACA,KAAK;AAAA,QACL,KAAK,MAAM,MAAM;AAAA,QACjB;AAAA;AAAA,QACA;AAAA,QACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,MAC5C,IACA,QAAO;AAAA,QACL,KAAK;AAAA,QACL,KAAK,MAAM,MAAM;AAAA,QACjB;AAAA;AAAA,QACA;AAAA;AAAA,QACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,MAC5C;AAAA,IACN;AAAA,EACF;AAAA,EAoEA,OAAc,UACZ,iBACA,uBACA,kBACA,MACA;AACA,WAAO,qBAAqB,gBAAgB,EAAE;AAAA,MAAM,CAAC,MACnD,IACIF,SAAO,qBAAqB,EAAE;AAAA,QAAM,CAAC,cACnC,KAAK;AAAA,UACH;AAAA;AAAA,UACA,YAAY,qBAAqB,SAAS,EAAE,SAAS;AAAA,UACrD;AAAA,UACA;AAAA;AAAA,UACA;AAAA,QACF;AAAA,MACF,IACAA,SAAO,eAAe,EAAE;AAAA,QAAM,CAAC,cAC7B,KAAK;AAAA,UACH,YAAY,qBAAqB,SAAS,EAAE,SAAS;AAAA,UACrD;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,QACF;AAAA,MACF;AAAA,IACN;AAAA,EACF;AAAA,EAEA,OAAe,WACb,gBACA,MACA,WACA,YACA,OAA6B,CAAC,GAC9B,OAAiC,CAAC,GAClC;AACA,WAAOA,SAAO,IAAI,EAAE;AAAA,MAClB,CAACG,UACC,IAAI;AAAA,QACF,GAAG,IAAI,aAAa,cAAc;AAAA,QAClC;AAAA,UACE,QAAQ,EAAE,UAAU;AAAA,UACpB;AAAA,UACA,GAAGA;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACJ;AAAA,EACF;AAAA,EAEA,OAAe,aACb,MACA,WACA,YACA,OAA6B,CAAC,GAC9B,OAAiC,CAAC,GAClC;AACA,WAAOF,MAAI,CAAC,MAAM,YAAY,IAAI,CAAC,EAAE,MAAM,CAAC,CAACC,OAAME,aAAYD,KAAI,MAAM;AACvE,YAAM,SAAS;AAAA,QACb;AAAA,UACE;AAAA,YACE,OAAO,cAAc,WAAW,YAAY;AAAA,YAC5C,KAAK,UAAUA,MAAK,WAAW,CAAC,CAAC;AAAA,YACjC,OAAOC,gBAAe,WAAWA,cAAaA,YAAW;AAAA,UAC3D,EAAE,KAAK,EAAE;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAEA,aAAO,IAAI;AAAA,QACT,GAAGF,KAAI,aAAa,MAAM;AAAA,QAC1B;AAAA,UACE,QAAQ,EAAE,UAAU;AAAA,UACpB,YAAAE;AAAA,UACA,eAAe;AAAA,UACf,GAAGD;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,OAAc,IACZ,MACA,WACA,MACA;AACA,WAAO,IAAI,QAAO,MAAM;AAAA,MACtB,KAAK;AAAA,MACL,OAAO,SAAS,MAAM,IAAI,GAAG,IAAI,SAAS,WAAW,QAAW,IAAI;AAAA,IACtE,CAA8C;AAAA,EAChD;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,MAAM,KAAK;AAAA,MACb;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,YAAY;AAAA,UACtB,WAAW,CAAC,KAAK,KAAKE,gBAAc,KAAK,GAAG,IAAI;AAAA,QAClD,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMN,iBAAe;AAErB,OAAO,eAAeA;;;AEp1BtB;AAAA,EAGE,OAAAO;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAMP,SAAS,KAAK,aAAa;AAoPpB,IAAM,QAAN,MAAM,eAAc,UAAmC;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,MAAc,MAAiB,MAAiC;AAC1E,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,OAAO;AAEb,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,UAAU,IAAI,SAAS;AAC5B,WAAK,WAAW,IAAI;AACpB,WAAK,mBAAmB,IAAI;AAC5B;AAAA,IACF;AAEA,UAAM,WAAW,cAAc;AAC/B,UAAMC,OAAM,aAAa;AACzB,UAAM,QAAQ,eAAe;AAC7B,UAAM,mBAAmB,uBAAuB;AAChD,UAAM,WAAW,eAAe;AAChC,iBAAa;AACb,aAAS,MAAM,CAACC,cAAa;AAC3B,UAAI,CAACA,UAAU;AACf,wBAAkB;AAClB,wBAAkB;AAClB,0BAAoB;AAAA,IACtB,CAAC;AAED,SAAK,UAAUC,SAAO,KAAK,MAAM;AACjC,SAAK,WAAW;AAChB,SAAK,mBAAmB;AAExB,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,YAAW,MAAM,cAAc;AAAA,QACnC,GAAG,IAAI;AAAA,QACP,IAAI;AAAA,QACJ;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AACA,YAAMC,oBAAmB,MAAM,iBAAiB;AAAA,QAC9C,GAAG,IAAI;AAAA,QACPD,UAAS,qBAAqB,MAAM,CAAC,MAAM,CAAE;AAAA,QAC7C;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,aAAO;AAAA,QACL,UAAAA;AAAA,QACA,kBAAAC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAOF,SAAO,KAAK,MAAM,EAAE,MAAM,CAAC,WAAW,CAAC,OAAO,SAAS,GAAG,CAAC;AAAA,IACpE;AAEA,aAAS,eAAe;AACtB,MAAAG,MAAI,CAAC,KAAK,KAAK,QAAQ,CAAC,EAAE,MAAM,CAAC,CAACL,MAAKC,SAAQ,MAAM;AACnD,YAAI,CAACA,aAAYD;AACf,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,MACJ,CAAC;AAED,aAAO,KAAK,OAAO,IAAO;AAAA,IAC5B;AAEA,aAAS,iBAAiB;AACxB,MAAAK,MAAI,CAAC,KAAK,OAAO,QAAQ,CAAC,EAAE,MAAM,CAAC,CAACC,QAAOL,SAAQ,MAAM;AACvD,YAAI,CAACA,aAAYK;AACf,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,MACJ,CAAC;AAED,aAAO,KAAK,SAAS;AAAA,IACvB;AAEA,aAAS,yBAAyB;AAChC,aAAO,IAAI,MAAM;AAAA,QACf,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP,EAAE,sBAAsB,GAAG;AAAA,UAC3B,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAI,MAAM;AAAA,QACf,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,eAAe,KAAK;AAAA,YACpB,sBAAsB,iBAAiB;AAAA,UACzC;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,MAAAJ,SAAO,KAAK,UAAU,CAAC,CAAC,EAAE;AAAA,QAAM,CAAC,WAC/B,OAAO,QAAQ,CAAC,UAAU;AACxB,cAAI,MAAM;AAAA,YACR,GAAG,IAAI,QAAQ,MAAM,IAAI;AAAA,YACzB;AAAA,cACE,sBAAsB,iBAAiB;AAAA,cACvC,sBAAsB,MAAM;AAAA,cAC5B,kBAAkB;AAAA,gBAChB,oBAAoB,MAAM,MAAM;AAAA,kBAAI,CAAC,MACnC,EAAE,YAAY,EAAE,WAAW,KAAK,GAAG;AAAA,gBACrC;AAAA,gBACA,GAAI,MAAM,MACN,EAAE,wBAAwB,EAAE,aAAa,MAAM,IAAI,EAAE,IACrD,CAAC;AAAA,gBACL,GAAI,MAAM,QACN,EAAE,gBAAgB,EAAE,UAAU,MAAM,MAAM,EAAE,IAC5C,CAAC;AAAA,gBACL,SAAS;AAAA,cACX;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,MAAAG,MAAI,CAACL,MAAK,UAAU,sBAAsB,MAAM,CAAC,EAAE;AAAA,QACjD,CAAC,CAACA,MAAK,MAAM,MAAM;AACjB,cAAI,CAACA,KAAK;AAEV,kBAAQ;AAAA,YAAI,CAAC,UACXA,KAAI;AAAA,cACF;AAAA,cACA;AAAA,gBACE,MAAM;AAAA,gBACN,MAAMO,gBAAc,KAAK,eAAe,KAAK,MAAM;AAAA,gBACnD,OAAO,GAAG,KAAK;AAAA,cACjB;AAAA,cACA,EAAE,QAAQ,KAAK;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,MAAAL,SAAOF,IAAG,EAAE,MAAM,CAACA,SAAQ;AACzB,YAAI,CAACA,KAAK;AAEV,QAAAA,KAAI;AAAA,UACF;AAAA,UACA;AAAA,YACE,MAAM;AAAA,YACN,MAAMO,uBAAqB,KAAK,MAAM;AAAA,YACtC,OAAO;AAAA,UACT;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,sBAAsB;AAC7B,UAAI,IAAI;AAAA,QACN,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ,KAAK;AAAA,QACf;AAAA,QACA,EAAE,QAAQ,MAAM,WAAW,SAAS;AAAA,MACtC;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,SAAS;AAClB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,YAAY;AACrB,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,UAAU,KAAK;AAAA;AAAA;AAAA;AAAA,MAIf,kBAAkB,KAAK;AAAA,IACzB;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,QAAQ,KAAK;AAAA,QACb,WAAW,KAAK;AAAA,MAClB;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,OAAO;AAAA,UACjB,WAAW,CAAC,KAAK,SAAS,KAAK,KAAK,iBAAiB,GAAG;AAAA,QAC1D,CAAC;AAAA;AAAA;AAAA,QAGD,WAAW;AAAA,UACT,SAAS;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,UACA,WAAW,CAAC,GAAG;AAAA,QACjB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,OAAc,IACZ,MACA,QACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMR,iBAAe;AAErB,MAAM,eAAeA;;;ACnhBrB,YAAY,SAAS;AAErB,SAA2C,OAAAS,OAAK,UAAAC,gBAAc;;;ACF9D,SAAS,UAAAC,gBAAc;AACvB,SAAS,UAAAC,gBAAc;AAkChB,IAAM,gCAAN,cAA4C,UAAU;AAAA,EAC1C;AAAA,EACA;AAAA,EACjB,YAAY,MAAc,MAAY,MAAuC;AAC3E,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,SAASC,SAAO,KAAK,MAAM;AACjC,UAAM,KAAK,eAAe;AAC1B,UAAM,qBAAqB,yBAAyB;AAEpD,SAAK,KAAK;AACV,SAAK,qBAAqB;AAE1B,aAAS,iBAAiB;AACxB,aAAOA,SAAO,KAAK,UAAU,EAAE,MAAM,CAAC,eAAe;AACnD,eAAO;AAAA,UACL,GAAG,IAAI;AAAA,UACP;AAAA,UACA;AAAA,YACE,aAAa,iBAAiB,IAAI;AAAA,YAClC,aAAa;AAAA,cACX;AAAA,gBACE,SAAS;AAAA,kBACP;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF;AAAA,gBACA,WAAW,CAAC,OAAO,GAAG;AAAA,cACxB;AAAA,YACF;AAAA,UACF;AAAA,UACA;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,2BAA2B;AAClC,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,gBAAgB,OAAO;AAAA,YACvB,cAAc,GAAG,IAAI;AAAA,cACnB,CAAC,QAAQ,iBAAiB,GAAG,EAAE;AAAA,YACjC;AAAA,YACA,kBAAkB;AAAA,YAClB,gBAAgB,KAAK,WAAW;AAAA,cAC9B,SAASD,SAAO,KAAK,OAAO,EAAE;AAAA,gBAAM,CAAC,YACnC,QAAQ,IAAI,CAAC,YAAY;AAAA,kBACvB,SAAS,KAAK,UAAU,MAAM;AAAA,gBAChC,EAAE;AAAA,cACJ;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,oBAAoB,KAAK;AAAA,IAC3B;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,8BAA8B,eAAeA;;;ADJtC,IAAM,gBAAN,MAAM,uBAAsB,UAAmC;AAAA,EAC5D;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAA0B,CAAC,GAC3B,OAAuC,CAAC,GACxC;AACA,UAAMG,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AACf,UAAM,SAAS,aAAa;AAC5B,SAAK,SAAS;AACd,SAAK,kBAAkB;AACvB,SAAK,kBAAkB;AAEvB,aAAS,eAAe;AACtB,aAAO,IAAQ,YAAQ;AAAA,QACrB,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,mBAAmB;AAAA,cACjB,YAAY;AAAA,YACd;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EA4DO,UAAU,kBAAuB,kBAAwB,MAAY;AAC1E,WAAO,qBAAqB,gBAAgB,EAAE;AAAA,MAAM,CAAC,MACnD,IACI,eAAc;AAAA,QACZ;AAAA;AAAA,QACA,KAAK;AAAA,QACL,KAAK,MAAM,OAAO;AAAA,QAClB;AAAA;AAAA,QACA;AAAA,QACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,MAC5C,IACA,eAAc;AAAA,QACZ,KAAK;AAAA,QACL,KAAK,MAAM,OAAO;AAAA,QAClB;AAAA;AAAA,QACA;AAAA;AAAA,QACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,MAC5C;AAAA,IACN;AAAA,EACF;AAAA,EAiEA,OAAc,UACZ,iBACA,uBACA,kBACA,MACA;AACA,WAAO,qBAAqB,gBAAgB,EAAE;AAAA,MAAM,CAAC,MACnD,IACIC,SAAO,qBAAqB,EAAE;AAAA,QAAM,CAAC,cACnC,KAAK;AAAA,UACH;AAAA;AAAA,UACA,YAAY,sBAAsB,SAAS,EAAE,UAAU;AAAA,UACvD;AAAA,UACA;AAAA;AAAA,UACA;AAAA,QACF;AAAA,MACF,IACAA,SAAO,eAAe,EAAE;AAAA,QAAM,CAAC,cAC7B,KAAK;AAAA,UACH,YAAY,sBAAsB,SAAS,EAAE,UAAU;AAAA,UACvD;AAAA,UACA;AAAA;AAAA,UACA;AAAA;AAAA,QACF;AAAA,MACF;AAAA,IACN;AAAA,EACF;AAAA,EAEA,OAAe,WACb,gBACA,MACA,WACA,YACA,OAA0C,CAAC,GAC3C,OAAiC,CAAC,GAClC;AACA,WAAOA,SAAO,IAAI,EAAE;AAAA,MAClB,CAACC,UACC,IAAI;AAAA,QACF,GAAG,IAAI,aAAa,cAAc;AAAA,QAClC;AAAA,UACE,QAAQ,EAAE,KAAK,UAAU;AAAA,UACzB;AAAA,UACA,GAAGA;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACJ;AAAA,EACF;AAAA,EAEA,OAAe,aACb,MACA,WACA,YACA,OAA0C,CAAC,GAC3C,OAAiC,CAAC,GAClC;AACA,WAAOC,MAAI,CAAC,WAAW,YAAY,IAAI,CAAC,EAAE;AAAA,MACxC,CAAC,CAACC,YAAWC,aAAYH,KAAI,MAAM;AACjC,cAAM,SAAS;AAAA,UACb;AAAA,YACE;AAAA,cACEE;AAAA,cACA,KAAK,UAAUF,MAAK,WAAW,CAAC,CAAC;AAAA,cACjC,OAAOG,gBAAe,WAAWA,cAAaA,YAAW;AAAA,YAC3D,EAAE,KAAK,EAAE;AAAA,YACT;AAAA,UACF;AAAA,QACF;AACA,eAAO,IAAI;AAAA,UACT,GAAG,IAAI,aAAa,MAAM;AAAA,UAC1B;AAAA,YACE,QAAQ,EAAE,KAAKD,WAAU;AAAA,YACzB,YAAAC;AAAA,YACA,GAAGH;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,IAAW,OAAO;AAChB,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA,EAEA,IAAW,MAAM;AACf,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAAA;AAAA,EAGA,aAAa;AACX,WAAO;AAAA,MACL,YAAY;AAAA,QACV,MAAM,KAAK,OAAO;AAAA,MACpB;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,WAAW;AAAA,UACrB,WAAW,CAAC,KAAK,MAAM,OAAO,GAAG;AAAA,QACnC,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,cAAc,eAAeA;;;AEha7B,OAAOM,SAAQ;AACf,OAAOC,YAAU;AACjB,SAA2C,OAAAC,OAAK,UAAAC,gBAAc;AAM9D,SAAS,YAAAC,WAAU,mBAAAC,kBAAiB,UAAAC,gBAAc;AAKlD,IAAM,4BAA4B;AAuhB3B,IAAM,SAAN,cAAqB,QAAQ;AAAA,EAC1B;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAAmB,CAAC,GACpB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,sBAAsB,MAAkB;AAChD,WAAOC,MAAI,CAAC,MAAM,cAAc,MAAM,eAAe,CAAC,EAAE;AAAA,MACtD,CAAC,CAAC,cAAc,eAAe,MAAM;AACnC,YAAI,aAAc,QAAO;AACzB,cAAM,UAAU,mBAAmB;AACnC,cAAM,cAAc,QAAQ,SAAS,OAAO,IACxC,cACA;AACJ,eAAO,aAAa,WAAW,IAAI,OAAO;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AAAA,EAEU,UACR,YACA,MACA,MACA,EAAE,OAAO,GACK;AACd,UAAM,SAAS;AAEf,UAAM,MAAMA,MAAI,CAAC,YAAY,MAAM,iBAAiB,CAAC,EAAE;AAAA,MACrD,CAAC,CAACC,aAAY,iBAAiB,MAAM;AACnC,cAAM,EAAE,gBAAgB,SAAS,mBAAmB,KAAK,IACvD,gBAAgB;AAElB,YAAI,OAAO,QAAQ,eAAe,aAAa,EAAE,QAAQ;AACvD,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAEA,cAAM,EAAE,mBAAmB,qBAAqB,IAC9C,wBAAwB;AAC1B,cAAM,oBAAoB,wBAAwB;AAClD,sCAA8B;AAE9B,cAAM,eAAe,eAAe,QAAQ,SAAS;AACrD,cAAM,uBAAuB,eAAe,QAAQ,gBAAgB;AACpE,cAAM,WAAW,eAAe,QAAQ,IAAI;AAC5C,cAAM,OAAOD,MAAI;AAAA,UACf,mBAAmB;AAAA,UACnB,mBAAmB;AAAA,UACnB,OAAO;AAAA,UACP,OAAO;AAAA,UACPE,iBAAgB,QAAW,EAAE,QAAQ,OAAO,CAAC,EAAE;AAAA,UAC/C,mBAAmB;AAAA,UACnB,mBAAmB;AAAA,UACnBA,iBAAgB,QAAW,EAAE,QAAQ,kBAAkB,CAAC,EAAE;AAAA,QAC5D,CAAC,EAAE;AAAA,UACD,CAAC;AAAA,YACC;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,OAAO;AAAA,YACL;AAAA,YACA,QAAQ;AAAA,cACN,aAAa,GAAG,IAAI;AAAA,cACpB,QAAQC,OAAK,KAAKF,aAAY,aAAa,MAAM;AAAA,cACjD,SAAS,aAAa;AAAA,cACtB,WAAW,aAAa;AAAA,cACxB,SAAS;AAAA,cACT,aAAa;AAAA,gBACX,mBAAmB;AAAA,gBACnB,yBAAyB;AAAA,gBACzB,qBAAqB;AAAA,gBACrB,GAAI,YAAY;AAAA,kBACd,wBAAwB;AAAA,kBACxB,2BAA2B;AAAA,gBAC7B;AAAA,gBACA,GAAI,aAAa;AAAA,kBACf,oBAAoB;AAAA,gBACtB;AAAA,cACF;AAAA,cACA,aAAa;AAAA;AAAA,gBAEX;AAAA,kBACE,SAAS,CAAC,gBAAgB,gBAAgB,iBAAiB;AAAA,kBAC3D,WAAW,CAAC,GAAG,SAAS,IAAI;AAAA,gBAC9B;AAAA,gBACA;AAAA,kBACE,SAAS,CAAC,eAAe;AAAA,kBACzB,WAAW,CAAC,SAAS;AAAA,gBACvB;AAAA,gBACA,GAAI,WACA;AAAA,kBACE;AAAA,oBACE,SAAS;AAAA,sBACP;AAAA,sBACA;AAAA,sBACA;AAAA,oBACF;AAAA,oBACA,WAAW,CAAC,QAAQ;AAAA,kBACtB;AAAA,gBACF,IACA,CAAC;AAAA,gBACL,GAAI,WACA;AAAA,kBACE;AAAA,oBACE,SAAS;AAAA,sBACP;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,oBACF;AAAA,oBACA,WAAW,CAAC,UAAU,GAAG,QAAQ,IAAI;AAAA,kBACvC;AAAA,gBACF,IACA,CAAC;AAAA,cACP;AAAA,cACA,YAAY;AAAA,gBACV;AAAA,kBACE;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF,EAAE,KAAK,IAAI;AAAA,cACb;AAAA,YACF;AAAA,YACA,gBAAgB;AAAA,cACd,QAAQ;AAAA,cACR,UAAU;AAAA,gBACR,aAAa,GAAG,IAAI;AAAA,gBACpB,SAAS,qBAAqB;AAAA,gBAC9B,QAAQE,OAAK,KAAKF,aAAY,qBAAqB,MAAM;AAAA,gBACzD,SAAS;AAAA,gBACT,cAAc;AAAA,gBACd,aAAa;AAAA,kBACX,aAAa;AAAA,kBACb,mBAAmB;AAAA,kBACnB,GAAI,mBAAmB,aACnB,EAAE,sBAAsB,OAAO,IAC/B,CAAC;AAAA,gBACP;AAAA,gBACA,QAAQ,mBAAmB,UAAU;AAAA,cACvC;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN;AAAA,gBACE,MAAM;AAAA,gBACN,IAAI;AAAA,gBACJ,QAAQ;AAAA,gBACR,iBAAiB;AAAA,gBACjB,WAAW;AAAA,cACb;AAAA,YACF;AAAA,YACA,UAAU;AAAA,cACR,MAAM;AAAA,cACN,IAAI;AAAA,YACN;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,iBAAS,kBAAkB;AACzB,gBAAM,qBAAqBE,OAAK;AAAA,YAC9BF;AAAA,YACA;AAAA,YACA;AAAA,UACF;AACA,cAAI,CAACG,IAAG,WAAW,kBAAkB,GAAG;AACtC,kBAAM,IAAI;AAAA,cACR,2CAA2C,kBAAkB;AAAA,YAC/D;AAAA,UACF;AACA,gBAAM,UAAUA,IAAG,aAAa,kBAAkB,EAAE,SAAS;AAC7D,gBAAM,OAAO,KAAK,MAAM,OAAO;AAG/B,cAAI,KAAK,iBAAiB,wBAAwB;AAChD,iBAAK,gBAAgB,yBAAyB;AAAA,cAC5C,SAAS;AAAA,cACT,QAAQ;AAAA,YACV;AAAA,UACF;AACA,iBAAO;AAAA,YACL,gBAAgB;AAAA,YAChB,MAAM,aAAa;AAAA,YACnB,SAAS,YAAY;AAAA,YACrB,mBAAmB,sBAAsB;AAAA,UAC3C;AAAA,QACF;AAEA,iBAAS,cAAc;AACrB,cAAI;AACF,mBAAOA,IACJ,aAAaD,OAAK,KAAKF,aAAY,gBAAgB,CAAC,EACpD,SAAS;AAAA,UACd,SAAS,GAAG;AACV,oBAAQ,MAAM,CAAC;AACf,kBAAM,IAAI;AAAA,cACR,oDAAoD,IAAI;AAAA,YAC1D;AAAA,UACF;AAAA,QACF;AAEA,iBAAS,eAAe;AACtB,cAAI;AACF,kBAAM,UAAUG,IAAG;AAAA,cACjBD,OAAK,KAAKF,aAAY,SAAS,sBAAsB;AAAA,cACrD;AAAA,YACF;AACA,kBAAM,OAAO,KAAK,MAAM,OAAO;AAG/B,mBAAO,KAAK,aAAa,KAAK,SAAY,KAAK;AAAA,UACjD,SAAS,GAAG;AACV,oBAAQ,MAAM,CAAC;AACf,kBAAM,IAAI;AAAA,cACR,+EAA+E,IAAI;AAAA,YACrF;AAAA,UACF;AAAA,QACF;AAEA,iBAAS,wBAAwB;AAC/B,cAAI;AACF,kBAAM,UAAUG,IACb;AAAA,cACCD,OAAK,KAAKF,aAAY,+BAA+B;AAAA,YACvD,EACC,SAAS;AACZ,mBAAO,KAAK,MAAM,OAAO;AAAA,UAI3B,SAAS,GAAG;AACV,oBAAQ,MAAM,0CAA0C,CAAC;AAAA,UAC3D;AAAA,QACF;AAEA,iBAAS,0BAA0B;AACjC,cAAI,eAAe,iBAAiB;AAClC,mBAAO,CAAC;AAEV,gBAAMI,wBACJ,eAAe,iBAAiB;AAClC,cAAI,CAACA,sBAAsB,QAAO,CAAC;AAEnC,gBAAM,QAAQ,IAAI;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,MAAM;AAAA,cACN,WAAW;AAAA,gBACT,OAAO,CAACC,UAAS;AACf,kBAAAA,MAAK,yBAAyB;AAAA,gBAChC;AAAA,cACF;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AACA,gBAAM,aAAa,MAAM;AAAA,YACvB;AAAA,cACE,aAAa,GAAG,IAAI;AAAA,cACpB,SAASD,sBAAqB;AAAA,cAC9B,QAAQF,OAAK,KAAKF,aAAYI,sBAAqB,MAAM;AAAA,cACzD,SAAS;AAAA,cACT,SAAS;AAAA,cACT,aAAa;AAAA,gBACX;AAAA,kBACE,SAAS;AAAA,oBACP;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA;AAAA,oBACA;AAAA,kBACF;AAAA,kBACA,WAAW,CAAC,MAAM,GAAG;AAAA,gBACvB;AAAA,cACF;AAAA,cACA,KAAK;AAAA,cACL,eAAe;AAAA,YACjB;AAAA,YACA;AAAA,cACE,WAAW;AAAA,gBACT,oBAAoB,CAACC,UAAS;AAC5B,kBAAAA,MAAK,YAAY;AAAA,gBACnB;AAAA,cACF;AAAA,YACF;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AACA,iBAAO;AAAA,YACL,mBAAmB;AAAA,YACnB,sBAAsB,WAAW,MAAM;AAAA,UACzC;AAAA,QACF;AAEA,iBAAS,0BAA0B;AACjC,cAAI,eAAe,iBAAiB,gBAAiB;AAErD,iBAAO,IAAIC,UAAS;AAAA,YAClB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,YAAY;AAAA,gBACV,EAAE,MAAM,OAAO,MAAM,IAAI;AAAA,gBACzB,EAAE,MAAM,QAAQ,MAAM,IAAI;AAAA,gBAC1B,EAAE,MAAM,iBAAiB,MAAM,IAAI;AAAA,cACrC;AAAA,cACA,SAAS;AAAA,cACT,UAAU;AAAA,cACV,qBAAqB;AAAA,gBACnB,SAAS;AAAA,cACX;AAAA,cACA,aAAa;AAAA,cACb,wBAAwB;AAAA,gBACtB;AAAA,kBACE,MAAM;AAAA,kBACN,SAAS;AAAA,kBACT,UAAU;AAAA,kBACV,gBAAgB;AAAA,gBAClB;AAAA,cACF;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,gBAAgB,MAAM;AAAA,UAClC;AAAA,QACF;AAEA,iBAAS,gCAAgC;AACvC,cAAI,eAAe,iBAAiB,gBAAiB;AACrD,cAAI,CAAC,eAAe,iBAAiB,uBAAwB;AAK7D,gBAAM,wBAAwB,OAAO;AAAA,YACnC,mBAAmB,UAAU,CAAC;AAAA,UAChC,EAAE;AACF,gBAAM,SAAS,IAAI;AAAA,YACjB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,aAAa,GAAG,IAAI;AAAA,cACpB,SACE,eAAe,gBAAgB,uBAAuB;AAAA,cACxD,QAAQJ,OAAK;AAAA,gBACXF;AAAA,gBACA,eAAe,gBAAgB,uBAAuB;AAAA,cACxD;AAAA,cACA,SAAS;AAAA,cACT,SAAS;AAAA,cACT,QAAQ,GAAG,KAAK;AAAA,gBACd;AAAA,gBACA,KAAK,IAAI,KAAK,KAAK,KAAK,wBAAwB,GAAI,IAAI,GAAG;AAAA,cAC7D,CAAC;AAAA,cACD,aAAa;AAAA,gBACX;AAAA,kBACE,SAAS;AAAA,oBACP;AAAA,oBACA;AAAA,oBACA;AAAA,kBACF;AAAA,kBACA,WAAW,CAAC,kBAAmB,GAAG;AAAA,gBACpC;AAAA,cACF;AAAA,cACA,aAAa;AAAA,gBACX,oBAAoB,kBAAmB;AAAA,cACzC;AAAA,cACA,KAAK;AAAA,cACL,eAAe;AAAA,cACf,WAAW;AAAA,YACb;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AACA,cAAIO,SAAO;AAAA,YACT,GAAG,IAAI;AAAA,YACP;AAAA,cACE,cAAc,OAAO,MAAM,SAAS;AAAA,cACpC,UAAU;AAAA,gBACR,SAAS,KAAK,IAAI,EAAE,SAAS;AAAA,cAC/B;AAAA,cACA,OAAO,KAAK,UAAU;AAAA,gBACpB,aAAa;AAAA,cACf,CAAC;AAAA,YACH;AAAA,YACA,EAAE,OAAO;AAAA,UACX;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,SAAK,oBAAoB,IAAI;AAC7B,SAAK,oBAAoB,IAAI;AAC7B,SAAK,uBAAuBC,SAAO,IAAI,oBAAoB;AAE3D,WAAO,IAAI;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA,MACL,GAAG,MAAM;AAAA;AAAA;AAAA;AAAA,MAIT,mBAAmB,KAAK;AAAA;AAAA;AAAA;AAAA,MAIxB,mBAAmB,KAAK;AAAA;AAAA;AAAA;AAAA,MAIxB,sBAAsB,KAAK;AAAA,IAC7B;AAAA,EACF;AACF;AAEA,IAAMV,iBAAe;AAErB,OAAO,eAAeA;;;ACn/BtB,SAAS,kBAAAW,uBAAsB;AAiJxB,IAAM,cAAN,cAA0B,UAAU;AAAA,EACxB;AAAA,EACA;AAAA,EAEjB,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,OAAO;AAEb,UAAM,MAAM,UAAU;AACtB,UAAM,SAAS,aAAa;AAE5B,SAAK,UAAU;AACf,SAAK,OAAO;AACZ,oBAAgB;AAEhB,aAAS,kBAAkB;AACzB,WAAK,gBAAgB;AAAA,QACnB,OAAO,KAAK;AAAA,MACd,CAAC;AAAA,IACH;AAEA,aAAS,YAAY;AACnB,aAAO,IAAIC;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EAAE;AAAA,IACJ;AAEA,aAAS,eAAe;AACtB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,MAAM,CAAC;AAAA,UACP,aAAa;AAAA,YACX,iBAAiB;AAAA,UACnB;AAAA,UACA,KAAK;AAAA,UACL,WAAW;AAAA,QACb;AAAA,QACA,CAACC,UAAS;AACR,UAAAA,MAAK,MAAM;AAAA,YACT,MAAM;AAAA,UACR;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EAAE,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC;AAAA,IAChC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AACF;AAEA,IAAMF,iBAAe;AAErB,YAAY,eAAeA;;;ACzO3B;AAAA,EAEE,eAAAG;AAAA,EACA,iBAAAC;AAAA,EAEA,UAAAC;AAAA,OACK;AAIP,SAAS,OAAAC,OAAK,YAAY,kBAAAC,uBAAsB;AAChD,SAAS,kBAAAC,uBAAsB;AA2OxB,IAAM,aAAN,MAAM,oBAAmB,UAAmC;AAAA,EACzD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAOR,YACE,MACA,OAAuB,CAAC,GACxB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,OAAO;AAEb,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,SAAS,IAAI;AAClB,WAAK,YAAY,IAAI;AACrB,WAAK,YAAY,IAAI;AACrB;AAAA,IACF;AAEA,UAAM,gBAAgBC,SAAO,KAAK,OAAO,EAAE;AAAA,MACzC,CAAC,MAAM,KAAK;AAAA,IACd;AACA,UAAM,eAAeA,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,KAAK,UAAU;AACvE,UAAM,WAAWA,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,KAAK,OAAO;AAChE,UAAM,UAAUC,kBAAiB;AAEjC,UAAM,MAAM,YAAY;AACxB,QAAI,KAAK,SAAS;AAChB,WAAK,MAAM;AACX;AAAA,IACF;AAEA,UAAM,WAAW,eAAe;AAChC,UAAMC,UAAS,aAAa;AAC5B,UAAM,SAAS,aAAa;AAC5B,UAAM,SAAS,aAAa;AAE5B,SAAK,SAAS;AACd,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,gBAAgB;AAAA,MACnB,OAAO,KAAK;AAAA,IACd,CAAC;AAED,aAAS,YAAY;AACnB,YAAM,MAAM;AAOZ,YAAMC,UAAS,WAAW,OAAO,IAAI,GAAG,IAAI,UAAU,IAAI,EAAE;AAE5D,YAAM,QAAQA,QAAO,KAAK,MAAM,CAAC,SAAS;AACxC,YAAI,CAAC,OAAO,kBAAkB;AAC5B,gBAAM,IAAI;AAAA,YACR,yCAAyC,IAAI;AAAA,UAC/C;AACF,YAAI,CAAC,OAAO,kBAAkB;AAC5B,gBAAM,IAAI;AAAA,YACR,yCAAyC,IAAI;AAAA,UAC/C;AAEF,eAAO;AAAA,UACL,UAAU,KAAK,kBAAkB;AAAA,UACjC,UAAU,KAAK,kBAAkB;AAAA,QACnC;AAAA,MACF,CAAC;AAED,YAAMD,UAASE,gBAAe;AAAA,QAC5B,EAAE,UAAU,MAAM,SAAS;AAAA,QAC3B,EAAE,QAAQ,KAAK;AAAA,MACjB;AACA,YAAMC,YAAW,UAAWH,QAAO,YAAY,EAAE;AAAA,QAC/C,CAAC,MAAM,EAAE;AAAA,MACX;AAEA,aAAO,EAAE,QAAAC,SAAQ,UAAU,MAAM,UAAU,UAAAE,UAAS;AAAA,IACtD;AAEA,aAASJ,oBAAmB;AAC1B,aAAOD,SAAO,KAAK,WAAW,OAAO,EAAE,MAAM,CAAC,MAAM;AAClD,cAAM,OAAO,MAAM,CAAC;AACpB,YAAI,OAAO,IAAI;AACb,gBAAM,IAAI;AAAA,YACR,0CAA0C,IAAI;AAAA,UAChD;AAAA,QACF;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,cAAc;AACrB,UAAI,CAAC,KAAK,IAAK,QAAO;AAEtB,UACE,OAGA;AACA,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAMM,OAAM;AAAA,QACV,SAAS;AAAA,QACT,KAAKN,SAAO,KAAK,IAAI,OAAO,uBAAuB;AAAA,QACnD,UAAU,KAAK,IAAI,WAAWA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,QAC1D,UAAUA,SAAO,KAAK,IAAI,YAAY,KAAK,YAAY,EAAE;AAAA,MAC3D;AAEA,UAAI,WAAW,GAAG,IAAI,OAAO;AAAA,QAC3B,KAAK;AAAA,UACH,OAAO;AAAA,UACP,WAAW;AAAA,UACX,SAAS;AAAA,QACX;AAAA,QACA,aAAa;AAAA,UACX,yBAAyBO;AAAA;AAAA,eAEpBD,KAAI,QAAQ;AAAA,eACZA,KAAI,QAAQ;AAAA;AAAA,gBAEXA,KAAI,GAAG;AAAA,QACf;AAAA,MACF,CAAC;AAED,aAAOA;AAAA,IACT;AAEA,aAAS,iBAAiB;AACxB,aAAO,KAAK,WACRN,SAAO,KAAK,QAAQ,IACpB,IAAIQ;AAAA,QACJ,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU;AAAA,UACV,UAAU;AAAA,UACV,YAAY;AAAA,UACZ,YAAY;AAAA,QACd;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EAAE;AAAA,IACN;AAEA,aAAS,eAAe;AACtB,YAAMN,UAAS,IAAIE,gBAAe;AAAA,QAChC,GAAG,IAAI;AAAA,QACP;AAAA,UACE,sBAAsB;AAAA,QACxB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,UAAIA,gBAAe;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,UAAUF,QAAO;AAAA,UACjB,cAAcO,eAAc;AAAA,YAC1B;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,aAAOP;AAAA,IACT;AAEA,aAAS,eAAe;AACtB,aAAO,IAAI,WAAW;AAAA,QACpB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE;AAAA,YACA,eAAe;AAAA,cACb,cAAcK,gBAAc,YAAY;AAAA,cACxC,eAAe;AAAA,cACf,wBAAwB;AAAA,cACxB,sBAAsB;AAAA,YACxB;AAAA,YACA,YAAY;AAAA,cACV,YAAY;AAAA,cACZ,YAAY;AAAA,cACZ,YAAY;AAAA,YACd;AAAA,YACA,yBAAyB;AAAA,cACvB,SAAS;AAAA,cACT,6BAA6B;AAAA,cAC7B,mBAAmB;AAAA,gBACjB,gBAAgB;AAAA,gBAChB,oBAAoB;AAAA,cACtB;AAAA,YACF;AAAA,YACA,sBAAsB;AAAA,cACpB,SAAS;AAAA,YACX;AAAA,YACA,eAAe;AAAA,cACb,SAAS;AAAA,YACX;AAAA,YACA,uBAAuB;AAAA,cACrB,cAAc;AAAA,cACd,mBAAmB;AAAA,YACrB;AAAA,YACA,MAAM;AAAA,cACJ,oBAAoBL,QAAO;AAAA,cAC3B,oBAAoB;AAAA,YACtB;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,aAAO,IAAI,WAAW;AAAA,QACpB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,YAAY,OAAO;AAAA,UACnB,gBAAgBQ,MAAI,wBAAwB;AAAA,YAC1C,YAAY;AAAA,cACV;AAAA,gBACE,YAAY,CAAC,EAAE,MAAM,KAAK,aAAa,CAAC,GAAG,EAAE,CAAC;AAAA,gBAC9C,SAAS,CAAC,GAAG;AAAA,gBACb,WAAW,CAAC,GAAG;AAAA,cACjB;AAAA,YACF;AAAA,UACF,CAAC,EAAE;AAAA,QACL;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,QAAI,KAAK,KAAK,QAAS,QAAOV,SAAO,aAAa;AAClD,WAAO,KAAK,OAAQ;AAAA,EACtB;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAOO,wBAAsB,KAAK,OAAQ,QAAQ;AAAA,EACpD;AAAA,EAEA,IAAW,QAAQ;AACjB,WAAO;AAAA,MACL,QAAQ,KAAK;AAAA,IACf;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,QACf,KAAK,KAAK;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmCA,OAAc,IACZ,MACA,IACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMR,iBAAe;AAErB,WAAW,eAAeA;;;AC5kB1B;AAAA,EACE,OAAAY;AAAA,EAEA,eAAAC;AAAA,EACA,iBAAAC;AAAA,EAEA,UAAAC;AAAA,OACK;AAIP,SAAS,OAAAC,OAAK,OAAAC,MAAK,kBAAAC,uBAAsB;AACzC,SAAS,kBAAAC,uBAAsB;;;ACZ/B;AAAA,EAEE,aAAAC;AAAA,EACA,UAAAC;AAAA,OAEK;AAIP,SAAS,OAAAC,MAAK,kBAAAC,uBAAsB;AAKpC,SAASC,UAAS,KAAU;AAC1B,QAAMC,UAAS,WAAW,IAAI,MAAM,GAAG,EAAE,CAAC,CAAC;AAC3C,SAAOA;AACT;AAuOO,IAAM,WAAN,MAAM,kBAAiB,UAAmC;AAAA,EACvD;AAAA,EACA;AAAA,EAER,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,WAAK,UAAU,IAAI;AACnB,WAAK,WAAW,IAAI;AACpB;AAAA,IACF;AAEA,UAAM,SAAS;AACf,UAAM,UAAU,iBAAiB;AACjC,UAAM,UAAU,iBAAiB;AACjC,UAAM,eAAe,sBAAsB;AAE3C,UAAM,cAAc,kBAAkB;AACtC,UAAM,UAAU,cAAc;AAC9B,UAAM,WAAW,eAAe;AAEhC,SAAK,UAAU;AACf,SAAK,WAAW;AAEhB,aAAS,mBAAmB;AAC1B,aAAOC,SAAO,KAAK,OAAO,EAAE,MAAM,CAACC,cAAa;AAAA,QAC9C,aAAaJ,UAASI,UAAS,OAAO,SAAS;AAAA,QAC/C,aAAaJ,UAASI,UAAS,OAAO,OAAO;AAAA,MAC/C,EAAE;AAAA,IACJ;AAEA,aAAS,mBAAmB;AAC1B,aAAOD,SAAO,KAAK,OAAO,EAAE,MAAM,CAACE,aAAYA,YAAW,MAAM;AAAA,IAClE;AAEA,aAAS,wBAAwB;AAC/B,aAAOF,SAAO,KAAK,YAAY,EAAE;AAAA,QAC/B,CAACG,UAASA,SAAQ,mBAAK,KAAK,WAAW,KAAK,GAAG;AAAA,MACjD;AAAA,IACF;AAEA,aAAS,oBAAoB;AAC3B,UAAI,KAAK,QAAQ,UAAW;AAC5B,aAAO,IAAIC,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAWJ,SAAO,KAAK,GAAG,EAAE;AAAA,UAC9B;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAO,IAAII,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQA,KAAI,WAAW;AAAA,YACvB,YAAY;AAAA,YACZ,eAAe;AAAA,YACf;AAAA,YACA,gBAAgB;AAAA,YAChB,0BAA0B;AAAA,YAC1B,kCAAkC;AAAA,YAClC,mBAAmB;AAAA,YACnB,oBAAoB;AAAA,YACpB,mBAAmB,aAAa;AAAA,YAChC,qBACE,KAAK,QAAQ,YACT,SACAJ,SAAO,KAAK,GAAG,EAAE;AAAA,UACzB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAII,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,mBAAmB,QAAQ;AAAA,YAC3B,eAAe;AAAA,YACf,QAAQA,KAAI,WAAW;AAAA,YACvB,eAAe,QAAQ;AAAA,YACvB,mBAAmB,aAAa;AAAA,UAClC;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEQ;AAAA,EACR,IAAY,SAAS;AACnB,WAAO,KAAK,UAAU,MAAM,CAAC,QAAQ;AACnC,UAAI,KAAK,UAAW,QAAO,KAAK;AAChC,UAAI,CAAC,IAAK;AACV,WAAK,YAAYC,gBAAe,uBAAuB;AAAA,QACrD,UAAU;AAAA,MACZ,CAAC;AACD,aAAO,KAAK;AAAA,IACd,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,YAAY;AACrB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,aAAa;AACtB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,YAAY;AACrB,WAAO,KAAK,QAAQ,kBAAkB,CAAC,EAAE;AAAA,EAC3C;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,WAAO,KAAK,QAAQ,eAAe,MAAM,CAAC,QAAQ;AAChD,UAAI,IAAK,QAAOL,SAAO,GAAG;AAC1B,YAAM,SAASM;AAAA,QACb,KAAK,OAAO;AAAA,UAAM,CAACC,YACjBA,UAASA,QAAO,eAAeP,SAAO,IAAI;AAAA,QAC5C;AAAA,MACF;AACA,aAAO,OAAO;AAAA,IAChB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,WAAO,KAAK,QAAQ;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EAEA,IAAW,QAAQ;AACjB,WAAO;AAAA,MACL,SAAS,KAAK;AAAA,MACd,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,YAAY,KAAK;AAAA,QACjB,WAAW,KAAK;AAAA,QAChB,UAAU,KAAK,QAAQ;AAAA,QACvB,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,QACf,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,MACb;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,+BAA+B;AAAA,UACzC,WAAW;AAAA,YACT,KAAK,QAAQ,kBAAkB,CAAC,EAAE,UAAU;AAAA,cAC1C,CAAC,MAAM,KAAK;AAAA,YACd;AAAA,UACF;AAAA,QACF,CAAC;AAAA,QACD,WAAW;AAAA,UACT,SAAS;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,UACA,WAAW,CAAC,KAAK,QAAQ,GAAG;AAAA,QAC9B,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,OAAc,IAAI,MAAc,WAA0B;AACxD,UAAM,UAAUI,KAAI,QAAQ,IAAI,GAAG,IAAI,WAAW,SAAS;AAC3D,UAAM,YAAYA,KAAI,mBAAmB;AAAA,MACvC,SAAS,CAAC,EAAE,MAAM,iBAAiB,QAAQ,CAAC,SAAS,EAAE,CAAC;AAAA,IAC1D,CAAC;AACD,UAAM,WAAWA,KAAI,gBAAgB;AAAA,MACnC,GAAG,IAAI;AAAA,MACP,UAAU,MAAM,CAACI,eAAc;AAC7B,YAAIA,WAAU,oBAAoB,WAAW;AAC3C,gBAAM,IAAI,MAAM,iCAAiC,SAAS,EAAE;AAC9D,eAAOA,WAAU,oBAAoB,CAAC;AAAA,MACxC,CAAC;AAAA,IACH;AACA,WAAO,IAAI,UAAS,MAAM;AAAA,MACxB,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACF,CAA4B;AAAA,EAC9B;AACF;AAEA,IAAMT,iBAAe;AAErB,SAAS,eAAeA;;;AD/EjB,IAAMU,YAAN,MAAM,kBAAiB,UAAmC;AAAA,EACvD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAQR,OAAc,KAAK;AAAA,EAEnB,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,WAAW;AACjB,UAAM,OAAO;AAEb,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,WAAW,IAAI;AACpB,WAAK,YAAY,IAAI;AACrB,WAAK,QAAQC,SAAO,IAAI,KAAK;AAC7B;AAAA,IACF;AAEA,oBAAgB;AAChB,UAAM,UAAUA,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,KAAK;AAC5D,UAAM,gBAAgBA,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,MAAM;AACnE,UAAM,eAAeA,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,KAAK,WAAW;AACxE,UAAM,WAAWA,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,KAAK,UAAU;AACnE,UAAM,UAAUC,kBAAiB;AACjC,UAAM,SAASD,SAAO,KAAK,QAAQ,EAAE;AAAA,MACnC,CAAC,MAAM,KAAK,mBAAK,KAAK,WAAW,KAAK,GAAG;AAAA,IAC3C;AACA,UAAM,MAAM,aAAa;AAEzB,UAAM,MAAM,YAAY;AACxB,QAAI,KAAK,SAAS;AAChB,WAAK,MAAM;AACX;AAAA,IACF;AAEA,UAAM,WAAW,eAAe;AAChC,UAAME,UAAS,aAAa;AAC5B,UAAM,cAAc,kBAAkB;AACtC,UAAM,iBAAiB,qBAAqB;AAC5C,UAAM,WAAW,eAAe;AAChC,mBAAe;AACf,UAAM,QAAQ,YAAY;AAE1B,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,QAAQ;AAEb,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,YAAWC,KAAI,SAAS,IAAI,GAAG,IAAI,YAAY,IAAI,IAAI,QAAW;AAAA,QACtE,QAAQ;AAAA,MACV,CAAC;AAED,YAAM,QAAQD,UAAS,KAAK,MAAM,CAAC,SAAS;AAC1C;AAAA,UACE,OAAO,uBAAuB,IAC1B,SAAS,KAAK,uBAAuB,CAAC,IACtC;AAAA,QACN;AAEA,eAAO;AAAA,UACL,SAASH,SAAO,IAAI,OAAO;AAAA,UAC3B,aAAa,OAAO,qBAAqB;AAAA,QAC3C;AAAA,MACF,CAAC;AAED,YAAMK,SAAQ,MAAM,QAAQ;AAAA,QAAM,CAAC,YACjC,UACID,KAAI,MAAM,IAAI,GAAG,IAAI,SAAS,SAAS,QAAW;AAAA,UAClD,QAAQ;AAAA,QACV,CAAC,IACC;AAAA,MACN;AAEA,YAAME,YAAW,MAAM,YAAY,MAAM,CAAC,gBAAgB;AACxD,YAAI,CAAC;AACH,gBAAM,IAAI;AAAA,YACR,uCAAuC,IAAI;AAAA,UAC7C;AAEF,cAAMJ,UAASK,gBAAe;AAAA,UAC5B,EAAE,UAAU,YAAY;AAAA,UACxB,EAAE,QAAQ,KAAK;AAAA,QACjB;AACA,eAAO,UAAWL,QAAO,YAAY,EAAE;AAAA,UACrC,CAAC,MAAM,EAAE;AAAA,QACX;AAAA,MACF,CAAC;AAED,aAAO,EAAE,UAAAC,WAAU,OAAAE,QAAO,UAAAC,UAAS;AAAA,IACrC;AAEA,aAAS,gBAAgB,iBAA0B;AACjD,WAAK,gBAAgB;AAAA,QACnB,KAAK;AAAA,QACL,KAAK,mBAAmB,mBAAK,MAAM,QAAQ,IAAI;AAAA,QAC/C,SAAS;AAAA,UACP;AAAA;AAAA,UACA,4CAA4C,mBAAK,MAAM,QAAQ,IAAI,CAAC;AAAA;AAAA,UACpE;AAAA,QACF,EAAE,KAAK,IAAI;AAAA,MACb,CAAC;AAAA,IACH;AAEA,aAASL,oBAAmB;AAC1B,aAAOD,SAAO,KAAK,WAAW,OAAO,EAAE,MAAM,CAAC,MAAM;AAClD,cAAM,OAAO,MAAM,CAAC;AACpB,YAAI,OAAO,IAAI;AACb,gBAAM,IAAI;AAAA,YACR,0CAA0C,IAAI;AAAA,UAChD;AAAA,QACF;AACA,YAAI,OAAO,OAAO;AAChB,gBAAM,IAAI;AAAA,YACR,2DAA2D,IAAI;AAAA,UACjE;AAAA,QACF;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,eAAe;AAEtB,UAAI,KAAK,eAAe,KAAO;AAC7B,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAGA,UAAI,KAAK,eAAeQ,MAAK;AAC3B,eAAO;AAAA,UACL,SAAS,KAAK,IAAI;AAAA,QACpB;AAAA,MACF;AAGA,aAAOR,SAAO,KAAK,GAAG;AAAA,IACxB;AAEA,aAAS,cAAc;AACrB,UAAI,CAAC,KAAK,IAAK,QAAO;AAEtB,UACE,OAGA;AACA,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAMS,OAAM;AAAA,QACV,SAAS;AAAA,QACT,MAAMT,SAAO,KAAK,IAAI,QAAQ,WAAW;AAAA,QACzC,MAAMA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,QAClC,UAAU,KAAK,IAAI,WAAWA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,QAC1D,UAAUA,SAAO,KAAK,IAAI,YAAY,KAAK,YAAY,EAAE;AAAA,QACzD,UAAU,KAAK,IAAI,WAAWA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,MAC5D;AAEA,UAAI,WAAW,GAAG,IAAI,OAAO;AAAA,QAC3B,KAAK;AAAA,UACH,OAAO;AAAA,UACP,WAAW;AAAA,UACX,SAAS;AAAA,QACX;AAAA,QACA,aAAa;AAAA,UACX,yBAAyBU;AAAA;AAAA,eAEpBD,KAAI,QAAQ;AAAA,eACZA,KAAI,QAAQ;AAAA,eACZA,KAAI,QAAQ;AAAA;AAAA,gBAEXA,KAAI,IAAI,IAAIA,KAAI,IAAI;AAAA,QAC5B;AAAA,MACF,CAAC;AAED,aAAOA;AAAA,IACT;AAEA,aAAS,iBAAiB;AACxB,aAAO,KAAK,WACRT,SAAO,KAAK,QAAQ,IACpB,IAAIW;AAAA,QACJ,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EAAE;AAAA,IACN;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAIP,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW,IAAI;AAAA,UACjB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,aAAO,IAAIA,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQ,cAAc,MAAM,CAAC,MAAM,WAAW,EAAE,MAAM,GAAG,EAAE,CAAC,CAAC,EAAE;AAAA,YAC/D,YAAY;AAAA,cACV;AAAA,gBACE,MAAM;AAAA,gBACN,OAAO;AAAA,cACT;AAAA,cACA;AAAA,gBACE,MAAM;AAAA,gBACN,OAAO;AAAA,gBACP,aAAa;AAAA,cACf;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,YAAMF,UAAS,IAAIK,gBAAe;AAAA,QAChC,GAAG,IAAI;AAAA,QACP;AAAA,UACE,sBAAsB;AAAA,QACxB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,UAAIA,gBAAe;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,UAAUL,QAAO;AAAA,UACjB,cAAcU,gBAAc;AAAA,YAC1B;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,aAAOV;AAAA,IACT;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAIE,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE;AAAA,YACA,mBAAmB,YAAY;AAAA,YAC/B,QAAQ;AAAA,YACR;AAAA,YACA,eAAeM,mBAAiB,YAAY;AAAA,YAC5C;AAAA,YACA;AAAA,YACA,oBAAoB,eAAe;AAAA,YACnC,mBAAmB;AAAA,YACnB,kBAAkB;AAAA,YAClB,aAAa;AAAA,YACb,kBAAkB;AAAA,YAClB,qBAAqB;AAAA,YACrB;AAAA,YACA,uBAAuB;AAAA,YACvB,4BAA4B;AAAA,YAC5B,MAAM;AAAA,cACJ,yBAAyB,SAAS,SAAS;AAAA,cAC3C,uBAAuBR,QAAO;AAAA,YAChC;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,MAAM,qBAAqB,KAAK;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAOF,SAAO,KAAK,YAAY,CAAC,EAAE;AAAA,QAAM,CAAC,aACvC,MAAM,KAAK,EAAE,QAAQ,SAAS,CAAC,EAAE;AAAA,UAC/B,CAAC,GAAG,MACF,IAAII,KAAI;AAAA,YACN,GAAG,IAAI,UAAU,CAAC;AAAA,YAClB;AAAA,cACE,mBAAmB,SAAS;AAAA,cAC5B,QAAQM,gBAAc,SAAS,MAAM,WAAW,CAAC;AAAA,cACjD,mBAAmB,SAAS;AAAA,cAC5B,kBAAkB,SAAS;AAAA,cAC3B,QAAQ,SAAS;AAAA,cACjB,eAAe,SAAS;AAAA,cACxB,eAAe,SAAS;AAAA,cACxB,UAAU,SAAS;AAAA,cACnB,UAAU,SAAS,SAAS,MAAM,CAAC,MAAM,CAAE;AAAA,cAC3C,oBAAoB,SAAS;AAAA,cAC7B,mBAAmB;AAAA,cACnB,kBAAkB,SAAS,iBAAiB,MAAM,CAAC,MAAM,CAAE;AAAA,cAC3D,aAAa,SAAS;AAAA,cACtB,kBAAkB,SAAS;AAAA,cAC3B,qBAAqB,SAAS,oBAAoB;AAAA,gBAChD,CAAC,MAAM;AAAA,cACT;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAEA,aAAS,cAAc;AACrB,aAAOV,SAAO,KAAK,KAAK,EAAE,MAAM,CAACK,WAAU;AACzC,YAAI,CAACA,OAAO;AAEZ,cAAM,cAAcA,WAAU,OAAO,CAAC,IAAIA,OAAM,eAAe,CAAC;AAGhE,cAAM,UAAU,YAAY,IAAI,CAAC,eAAe;AAC9C,gBAAMH,UAAS,IAAIK,gBAAe;AAAA,YAChC,GAAG,IAAI,cAAc,WAAW,QAAQ;AAAA,YACxC;AAAA,cACE,sBAAsB;AAAA,YACxB;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAEA,cAAIA,gBAAe;AAAA,YACjB,GAAG,IAAI,qBAAqB,WAAW,QAAQ;AAAA,YAC/C;AAAA,cACE,UAAUL,QAAO;AAAA,cACjB,cAAcU,gBAAc;AAAA,gBAC1B,UAAU,WAAW;AAAA,gBACrB,UAAU,WAAW;AAAA,cACvB,CAAC;AAAA,YACH;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AACA,iBAAOV;AAAA,QACT,CAAC;AAED,cAAM,OAAO,IAAIW,MAAI;AAAA,UACnB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkBA,MAAI,6BAA6B;AAAA,cACjD,SAAS;AAAA,YACX,CAAC;AAAA,YACD,gBAAgB;AAAA,cACd;AAAA,gBACE,MAAM;AAAA,gBACN,QAAQA,MAAI,wBAAwB;AAAA,kBAClC,YAAY;AAAA,oBACV;AAAA,sBACE,SAAS,CAAC,+BAA+B;AAAA,sBACzC,WAAW,CAACX,QAAO,KAAK,GAAG,QAAQ,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC;AAAA,oBACtD;AAAA,kBACF;AAAA,gBACF,CAAC,EAAE;AAAA,cACL;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,cAAM,SAAS,IAAI;AAAA,UACjB,GAAG,IAAI;AAAA,UACP,EAAE,MAAM,uBAAuB;AAAA,UAC/B,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,cAAM,WAAW,IAAIE,KAAI;AAAA,UACvB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,cAAc;AAAA,cACd,OAAO;AAAA,gBACL;AAAA,kBACE,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,WAAWF,QAAO;AAAA,gBACpB;AAAA,gBACA,GAAG,QAAQ,IAAI,CAAC,OAAO;AAAA,kBACrB,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,WAAW,EAAE;AAAA,gBACf,EAAE;AAAA,cACJ;AAAA,cACA,SAAS,KAAK;AAAA,cACd,cAAc,IAAI;AAAA,YACpB;AAAA,YACA,EAAE,QAAQ,MAAM,WAAW,CAAC,MAAM,EAAE;AAAA,UACtC;AAAA,QACF;AAEA,cAAM,cAAc,IAAIE,KAAI;AAAA,UAC1B,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa,SAAS;AAAA,UACxB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,YAAIA,KAAI;AAAA,UACN,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa,SAAS;AAAA,YACtB,iBAAiB,YAAY;AAAA,YAC7B,sBAAsB,SAAS;AAAA,UACjC;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,QAAI,KAAK,KAAK,QAAS,QAAOJ,SAAO,aAAa;AAClD,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,UAAU;AACnB,QAAI,KAAK,KAAK,QAAS,QAAOA,SAAO,aAAa;AAElD,WAAO,KAAK,MAAO,MAAM,CAAC,MAAM;AAC9B,UAAI,CAAC,GAAG;AACN,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AACA,aAAO,EAAE;AAAA,IACX,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AAEvC,WAAOc,MAAI,CAAC,KAAK,SAAU,UAAU,KAAK,KAAM,CAAC,EAAE;AAAA,MACjD,CAAC,CAAC,UAAU,KAAK,MAAM,OAAO,YAAYd,SAAO,SAAS,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,IACzE;AAAA,EACF;AAAA,EAEA,IAAW,QAAQ;AACjB,WAAO;AAAA,MACL,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,QACf,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,MACb;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCA,OAAc,IACZ,MACA,MACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL,IAAI,KAAK;AAAA,QACT,SAAS,KAAK;AAAA,MAChB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErBD,UAAS,eAAeC;;;AE7/BxB;AAAA,EACE,OAAAgB;AAAA,EAEA,eAAAC;AAAA,EACA,iBAAAC;AAAA,EAEA,UAAAC;AAAA,OACK;AAIP,SAAS,OAAAC,OAAK,OAAAC,MAAK,kBAAAC,uBAAsB;AACzC,SAAS,kBAAAC,uBAAsB;AA2axB,IAAM,QAAN,MAAM,eAAc,UAAmC;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EASR,YAAY,MAAc,MAAiB,MAAiC;AAC1E,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,WAAW;AACjB,UAAM,OAAO;AAEb,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,WAAW,IAAI;AACpB,WAAK,YAAY,IAAI;AACrB,WAAK,QAAQC,SAAO,IAAI,KAAK;AAC7B;AAAA,IACF;AAEA,UAAM,UAAUA,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,KAAK;AAC5D,UAAM,gBAAgBA,SAAO,KAAK,OAAO,EAAE,MAAM,CAAC,MAAM,KAAK,QAAQ;AACrE,UAAM,eAAeA,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,KAAK,WAAW;AACxE,UAAM,WAAWA,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,KAAK,MAAM;AAC/D,UAAM,UAAUC,kBAAiB;AACjC,UAAM,SAASD,SAAO,KAAK,QAAQ,EAAE;AAAA,MACnC,CAAC,MAAM,KAAK,mBAAK,KAAK,WAAW,KAAK,GAAG;AAAA,IAC3C;AACA,UAAM,MAAM,aAAa;AAEzB,UAAM,MAAM,YAAY;AACxB,QAAI,KAAK,SAAS;AAChB,WAAK,MAAM;AACX;AAAA,IACF;AAEA,UAAM,WAAW,eAAe;AAChC,UAAME,UAAS,aAAa;AAC5B,UAAM,cAAc,kBAAkB;AACtC,UAAM,iBAAiB,qBAAqB;AAC5C,UAAM,WAAW,eAAe;AAChC,mBAAe;AACf,UAAM,QAAQ,YAAY;AAE1B,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,QAAQ;AAEb,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,YAAWC,KAAI,SAAS,IAAI,GAAG,IAAI,YAAY,IAAI,IAAI,QAAW;AAAA,QACtE,QAAQ;AAAA,MACV,CAAC;AAED,YAAM,QAAQD,UAAS,KAAK,MAAM,CAAC,SAAS;AAC1C,eAAO;AAAA,UACL,SAASH,SAAO,IAAI,OAAO;AAAA,UAC3B,aAAa,OAAO,kBAAkB;AAAA,QACxC;AAAA,MACF,CAAC;AAED,YAAMK,SAAQ,MAAM,QAAQ;AAAA,QAAM,CAAC,YACjC,UACID,KAAI,MAAM,IAAI,GAAG,IAAI,SAAS,SAAS,QAAW;AAAA,UAClD,QAAQ;AAAA,QACV,CAAC,IACC;AAAA,MACN;AAEA,YAAME,YAAW,MAAM,YAAY,MAAM,CAAC,gBAAgB;AACxD,YAAI,CAAC;AACH,gBAAM,IAAI,aAAa,oCAAoC,IAAI,GAAG;AAEpE,cAAMJ,UAASK,gBAAe;AAAA,UAC5B,EAAE,UAAU,YAAY;AAAA,UACxB,EAAE,QAAQ,KAAK;AAAA,QACjB;AACA,eAAO,UAAWL,QAAO,YAAY,EAAE;AAAA,UACrC,CAAC,MAAM,EAAE;AAAA,QACX;AAAA,MACF,CAAC;AAED,aAAO,EAAE,UAAAC,WAAU,OAAAE,QAAO,UAAAC,UAAS;AAAA,IACrC;AAEA,aAASL,oBAAmB;AAC1B,aAAOD,SAAO,KAAK,WAAW,OAAO,EAAE,MAAM,CAAC,MAAM;AAClD,cAAM,OAAO,MAAM,CAAC;AACpB,YAAI,OAAO,IAAI;AACb,gBAAM,IAAI;AAAA,YACR,0CAA0C,IAAI;AAAA,UAChD;AAAA,QACF;AACA,YAAI,OAAO,OAAO;AAChB,gBAAM,IAAI;AAAA,YACR,2DAA2D,IAAI;AAAA,UACjE;AAAA,QACF;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,eAAe;AAEtB,UAAI,KAAK,eAAe,KAAO;AAC7B,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAGA,UAAI,KAAK,eAAeQ,MAAK;AAC3B,eAAO;AAAA,UACL,SAAS,KAAK,IAAI;AAAA,QACpB;AAAA,MACF;AAGA,aAAOR,SAAO,KAAK,GAAG;AAAA,IACxB;AAEA,aAAS,cAAc;AACrB,UAAI,CAAC,KAAK,IAAK,QAAO;AAEtB,UACE,OAGA;AACA,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAEA,YAAMS,OAAM;AAAA,QACV,SAAS;AAAA,QACT,MAAMT,SAAO,KAAK,IAAI,QAAQ,WAAW;AAAA,QACzC,MAAMA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,QAClC,UAAU,KAAK,IAAI,WAAWA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,QAC1D,UAAUA,SAAO,KAAK,IAAI,YAAY,KAAK,YAAY,EAAE;AAAA,QACzD,UAAU,KAAK,IAAI,WAAWA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,MAC5D;AAEA,UAAI,WAAW,GAAG,IAAI,OAAO;AAAA,QAC3B,KAAK;AAAA,UACH,OAAO;AAAA,UACP,WAAW;AAAA,UACX,SAAS;AAAA,QACX;AAAA,QACA,aAAa;AAAA,UACX,yBAAyBU;AAAA;AAAA,eAEpBD,KAAI,QAAQ;AAAA,eACZA,KAAI,QAAQ;AAAA,eACZA,KAAI,QAAQ;AAAA;AAAA,gBAEXA,KAAI,IAAI,IAAIA,KAAI,IAAI;AAAA,QAC5B;AAAA,MACF,CAAC;AAED,aAAOA;AAAA,IACT;AAEA,aAAS,iBAAiB;AACxB,aAAO,KAAK,WACRT,SAAO,KAAK,QAAQ,IACpB,IAAIW;AAAA,QACJ,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,SAAS;AAAA,QACX;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EAAE;AAAA,IACN;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAIP,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,WAAW,IAAI;AAAA,UACjB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,aAAO,IAAIA,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,QAAQ,cAAc,MAAM,CAAC,MAAM;AACjC,oBAAM,CAAC,OAAO,OAAO,MAAM,IAAI,EAAE,MAAM,GAAG;AAC1C,qBAAO,QAAQ,KAAK,IAAI,KAAK;AAAA,YAC/B,CAAC;AAAA,YACD,YAAY;AAAA,cACV;AAAA,gBACE,MAAM;AAAA,gBACN,OAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,YAAMF,UAAS,IAAIK,gBAAe;AAAA,QAChC,GAAG,IAAI;AAAA,QACP;AAAA,UACE,sBAAsB;AAAA,QACxB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,UAAIA,gBAAe;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,UAAUL,QAAO;AAAA,UACjB,cAAcU,gBAAc;AAAA,YAC1B;AAAA,YACA;AAAA,UACF,CAAC;AAAA,QACH;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,aAAOV;AAAA,IACT;AAEA,aAAS,iBAAiB;AACxB,aAAO,IAAIE,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE;AAAA,YACA,mBAAmB,YAAY;AAAA,YAC/B,QAAQ;AAAA,YACR;AAAA,YACA,eAAeM,mBAAiB,YAAY;AAAA,YAC5C;AAAA,YACA;AAAA,YACA,oBAAoB,eAAe;AAAA,YACnC,mBAAmB;AAAA,YACnB,kBAAkB;AAAA,YAClB,aAAa;AAAA,YACb,kBAAkB;AAAA,YAClB,qBAAqB;AAAA,YACrB;AAAA,YACA,uBAAuB;AAAA;AAAA;AAAA,YAGvB,4BAA4B,aAAa;AAAA,cACvC,CAAC,MAAM,CAAC,EAAE,SAAS,QAAQ,KAAK,CAAC,EAAE,SAAS,QAAQ;AAAA,YACtD;AAAA,YACA,MAAM;AAAA,cACJ,yBAAyB,SAAS,SAAS;AAAA,cAC3C,oBAAoBR,QAAO;AAAA,YAC7B;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,MAAM,qBAAqB,KAAK;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAEA,aAAS,iBAAiB;AACxB,aAAOF,SAAO,KAAK,YAAY,CAAC,EAAE;AAAA,QAAM,CAAC,aACvC,MAAM,KAAK,EAAE,QAAQ,SAAS,CAAC,EAAE;AAAA,UAC/B,CAAC,GAAG,MACF,IAAII,KAAI;AAAA,YACN,GAAG,IAAI,UAAU,CAAC;AAAA,YAClB;AAAA,cACE,mBAAmB,SAAS;AAAA,cAC5B,QAAQM,gBAAc,SAAS,MAAM,WAAW,CAAC;AAAA,cACjD,mBAAmB,SAAS;AAAA,cAC5B,kBAAkB,SAAS;AAAA,cAC3B,QAAQ,SAAS;AAAA,cACjB,eAAe,SAAS;AAAA,cACxB,eAAe,SAAS;AAAA,cACxB,UAAU,SAAS;AAAA,cACnB,UAAU,SAAS,SAAS,MAAM,CAAC,MAAM,CAAE;AAAA,cAC3C,oBAAoB,SAAS;AAAA,cAC7B,mBAAmB;AAAA,cACnB,kBAAkB,SAAS,iBAAiB,MAAM,CAAC,MAAM,CAAE;AAAA,cAC3D,aAAa,SAAS;AAAA,cACtB,kBAAkB,SAAS;AAAA,cAC3B,qBAAqB,SAAS,oBAAoB;AAAA,gBAChD,CAAC,MAAM;AAAA,cACT;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACJ;AAAA,MACF;AAAA,IACF;AAEA,aAAS,cAAc;AACrB,aAAOV,SAAO,KAAK,KAAK,EAAE,MAAM,CAACK,WAAU;AACzC,YAAI,CAACA,OAAO;AAEZ,cAAM,cAAcA,WAAU,OAAO,CAAC,IAAIA,OAAM,eAAe,CAAC;AAGhE,cAAM,UAAU,YAAY,IAAI,CAAC,eAAe;AAC9C,gBAAMH,UAAS,IAAIK,gBAAe;AAAA,YAChC,GAAG,IAAI,cAAc,WAAW,QAAQ;AAAA,YACxC;AAAA,cACE,sBAAsB;AAAA,YACxB;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAEA,cAAIA,gBAAe;AAAA,YACjB,GAAG,IAAI,qBAAqB,WAAW,QAAQ;AAAA,YAC/C;AAAA,cACE,UAAUL,QAAO;AAAA,cACjB,cAAcU,gBAAc;AAAA,gBAC1B,UAAU,WAAW;AAAA,gBACrB,UAAU,WAAW;AAAA,cACvB,CAAC;AAAA,YACH;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AACA,iBAAOV;AAAA,QACT,CAAC;AAED,cAAM,OAAO,IAAIW,MAAI;AAAA,UACnB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,kBAAkBA,MAAI,6BAA6B;AAAA,cACjD,SAAS;AAAA,YACX,CAAC;AAAA,YACD,gBAAgB;AAAA,cACd;AAAA,gBACE,MAAM;AAAA,gBACN,QAAQA,MAAI,wBAAwB;AAAA,kBAClC,YAAY;AAAA,oBACV;AAAA,sBACE,SAAS,CAAC,+BAA+B;AAAA,sBACzC,WAAW,CAACX,QAAO,KAAK,GAAG,QAAQ,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC;AAAA,oBACtD;AAAA,kBACF;AAAA,gBACF,CAAC,EAAE;AAAA,cACL;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,cAAM,SAAS,IAAI;AAAA,UACjB,GAAG,IAAI;AAAA,UACP,EAAE,MAAM,uBAAuB;AAAA,UAC/B,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,cAAM,WAAW,IAAIE,KAAI;AAAA,UACvB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,cAAc;AAAA,cACd,OAAO;AAAA,gBACL;AAAA,kBACE,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,WAAWF,QAAO;AAAA,gBACpB;AAAA,gBACA,GAAG,QAAQ,IAAI,CAAC,OAAO;AAAA,kBACrB,YAAY;AAAA,kBACZ,SAAS;AAAA,kBACT,WAAW,EAAE;AAAA,gBACf,EAAE;AAAA,cACJ;AAAA,cACA,SAAS,KAAK;AAAA,cACd,cAAc,IAAI;AAAA,YACpB;AAAA,YACA,EAAE,QAAQ,MAAM,WAAW,CAAC,MAAM,EAAE;AAAA,UACtC;AAAA,QACF;AAEA,cAAM,cAAc,IAAIE,KAAI;AAAA,UAC1B,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa,SAAS;AAAA,UACxB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,YAAIA,KAAI;AAAA,UACN,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa,SAAS;AAAA,YACtB,iBAAiB,YAAY;AAAA,YAC7B,sBAAsB,SAAS;AAAA,UACjC;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAEA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,KAAK;AACd,QAAI,KAAK,KAAK,QAAS,QAAOJ,SAAO,aAAa;AAClD,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,UAAU;AACnB,QAAI,KAAK,KAAK,QAAS,QAAOA,SAAO,aAAa;AAElD,WAAO,KAAK,MAAO,MAAM,CAAC,MAAM;AAC9B,UAAI,CAAC,GAAG;AACN,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AACA,aAAO,EAAE;AAAA,IACX,CAAC;AAAA,EACH;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA,EAGA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AACvC,WAAO,KAAK,SAAU;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,QAAI,KAAK,KAAK,QAAS,QAAO,KAAK,IAAI;AAEvC,WAAOc,MAAI,CAAC,KAAK,SAAU,UAAU,KAAK,KAAM,CAAC,EAAE;AAAA,MACjD,CAAC,CAAC,UAAU,KAAK,MAAM,OAAO,YAAYd,SAAO,SAAS,MAAM,GAAG,EAAE,CAAC,CAAC;AAAA,IACzE;AAAA,EACF;AAAA,EAEA,IAAW,QAAQ;AACjB,WAAO;AAAA,MACL,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,QACf,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,MACb;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCA,OAAc,IACZ,MACA,MACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL,IAAI,KAAK;AAAA,QACT,SAAS,KAAK;AAAA,MAChB;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,MAAM,eAAeA;;;ACl+BrB,SAA2C,OAAAgB,aAAW;;;ACAtD;AAAA,EAIE,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAIP,SAAS,UAAAC,gBAAc;AACvB,SAAS,WAAW;AA8Bb,IAAM,2BAAN,cAAuC,UAAU;AAAA,EACrC;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YAAY,MAAc,MAAY,MAAiC;AACrE,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,OAAO;AACb,UAAM,gBAAgBC,SAAO,KAAK,GAAG;AACrC,UAAM,SAASA,SAAO,KAAK,MAAM;AACjC,UAAM,KAAK,eAAe;AAC1B,UAAM,OAAOC,YAAW;AACxB,UAAMC,cAAa,iBAAiB;AAEpC,SAAK,KAAK;AACV,SAAK,aAAaA;AAClB,SAAK,OAAO;AAEZ,aAAS,iBAAiB;AACxB,aAAO;AAAA,QACL,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAaC,8BAA4B,cAAc,IAAI,OAAO,MAAM;AAAA,QAC1E;AAAA,QACA;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAASF,cAAa;AACpB,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,YAAY;AAAA,YACZ,KAAKE,+BAA6B,MAAM;AAAA,YACxC,SAAS;AAAA,YACT,SAAS,CAAC,EAAE,aAAa,GAAG,IAAI,CAAC;AAAA,UACnC;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,GAAG,IAAI,MAAM,CAAC,QAAQ,iBAAiB,GAAG,EAAE,YAAY;AAAA,UAClE,WAAW;AAAA,UACX,WAAW,KAAK;AAAA,QAClB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,OAAO;AACb,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,WAAW;AACb,eAAO,KAAK,GAAG,MAAM,CAAC,OAAO,GAAG,YAAY,CAAC;AAAA,MAC/C;AAAA;AAAA;AAAA;AAAA,MAIA,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AACF;AAEA,IAAML,iBAAe;AAErB,yBAAyB,eAAeA;;;ADzHxC,SAAS,OAAAM,MAAK,UAAAC,gBAAc;AAsJrB,IAAM,WAAN,cAAuB,UAAmC;AAAA,EAC9C;AAAA,EACT;AAAA,EACS;AAAA,EACA;AAAA,EACA;AAAA,EAEjB,YACE,MACA,MACA,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,aAAa,yBAAyB;AAC5C,UAAM,gBAAgB,iBAAiB;AACvC,qBAAiB;AAEjB,SAAK,kBAAkB;AACvB,SAAK,cAAcC,KAAI;AAAA,MACrB,EAAE,cAAc,eAAe;AAAA,MAC/B,EAAE,OAAO;AAAA,IACX,EAAE;AACF,SAAK,kBAAkB;AACvB,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAErB,aAAS,2BAA2B;AAClC,aAAO,SAAS;AAAA,QACd,GAAG,IAAI;AAAA,QACP,KAAK;AAAA,QACL;AAAA,UACE,aAAa,kBAAkB,IAAI;AAAA,UACnC,aAAa;AAAA,YACX;AAAA,cACE,SAAS,CAAC,OAAO;AAAA,cACjB,WAAW,CAAC,GAAG;AAAA,YACjB;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIA,KAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,iBAAiB;AAAA,YACjB,uBAAuB,WAAW;AAAA,UACpC;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAIC,SAAO;AAAA,QAChB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,UAAU,WAAW;AAAA,UACrB,WAAW;AAAA,UACX,WAAW,cAAc;AAAA,QAC3B;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,aAAa;AACtB,WAAO,KAAK,cAAc;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,YAAY,KAAK;AAAA;AAAA;AAAA;AAAA,MAIjB,aAAa,KAAK;AAAA,IACpB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsCO,UACL,YACA,MACA;AACA,WAAOC,MAAI,CAAC,YAAY,KAAK,MAAM,CAAC,EAAE,MAAM,CAAC,CAACC,aAAY,MAAM,MAAM;AACpE,YAAM,SAAS;AAAA,QACb;AAAA,UACE;AAAA,YACE;AAAA,YACA,OAAOA,gBAAe,WAAWA,cAAaA,YAAW;AAAA,UAC3D,EAAE,KAAK,EAAE;AAAA,UACT;AAAA,QACF;AAAA,MACF;AAEA,aAAO,IAAI;AAAA,QACT,GAAG,KAAK,eAAe,aAAa,MAAM;AAAA,QAC1C;AAAA,UACE,KAAK,EAAE,MAAM,KAAK,gBAAgB;AAAA,UAClC,YAAAA;AAAA,UACA,GAAG;AAAA,QACL;AAAA,QACA,EAAE,UAAU,KAAK,gBAAgB,SAAS;AAAA,MAC5C;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,UAAU,KAAK;AAAA,QACf,YAAY,KAAK;AAAA,MACnB;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,aAAa;AAAA,UACvB,WAAW,CAAC,GAAG;AAAA,QACjB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMJ,iBAAe;AAErB,SAAS,eAAeA;;;AExVxB,OAAOK,UAAQ;AACf,OAAOC,YAAU;AACjB,SAA2C,UAAAC,gBAAc;AAqZlD,IAAM,QAAN,cAAoB,QAAQ;AAAA,EACjC,YACE,MACA,OAAkB,CAAC,GACnB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,wBAAwB;AAAA,EAAE;AAAA,EAE1B,UAAU,YAA0C;AAC5D,WAAOC,SAAO,UAAU,EAAE,MAAM,CAACC,gBAAe;AAC9C,YAAM,aAAaC,OAAK,KAAK,SAAS,QAAQ;AAC9C,YAAM,cAAc,MAAM;AACxB,cAAM,IAAIA,OAAK,KAAK,SAAS,QAAQ;AACrC,eAAOC,KAAG,WAAWD,OAAK,KAAKD,aAAY,CAAC,CAAC,IAAI,IAAI;AAAA,MACvD,GAAG;AACH,YAAM,YAAY;AAGlB,YAAM,YAAY,MAAM;AACtB,YAAI;AACF,gBAAM,aAAaC,OAAK,KAAKD,aAAY,gBAAgB;AACzD,gBAAM,UAAUE,KAAG,aAAa,YAAY,OAAO;AACnD,gBAAM,QAAQ,QAAQ,MAAM,mCAAmC;AAC/D,iBAAO,QAAQ,MAAM,CAAC,IAAI;AAAA,QAC5B,SAAS,GAAG;AAAA,QAAE;AAAA,MAChB,GAAG;AAGH,YAAM,mBAAmB,MAAM;AAC7B,YAAI;AACF,gBAAM,WAAWD,OAAK,KAAKD,aAAY,wBAAwB;AAC/D,gBAAM,UAAUE,KAAG,aAAa,UAAU,OAAO;AACjD,gBAAM,QAAQ,QAAQ,MAAM,uCAAuC;AACnE,iBAAO,QAAQ,MAAM,CAAC,IAAI;AAAA,QAC5B,SAAS,GAAG;AAAA,QAAE;AAAA,MAChB,GAAG;AAEH,UAAI,UAAU;AACZ,YAAI,CAAC,SAAS,SAAS,GAAG;AACxB,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,YAAI,CAAC;AACH,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,MACJ;AACA,UAAI,iBAAiB;AACnB,YAAI,gBAAgB,SAAS,GAAG;AAC9B,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AACF,YAAI,CAAC;AACH,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,MACJ;AAEA,aAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ,cACH,MAAM;AAKP,UAAAA,KAAG;AAAA,YACDD,OAAK;AAAA,cACH,mBAAK,MAAM;AAAA,cACX;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,YACAA,OAAK,KAAKD,aAAY,SAAS,YAAY;AAAA,UAC7C;AAEA,iBAAO;AAAA,YACL,SAASC,OAAK,KAAKD,aAAY,SAAS,gBAAgB;AAAA,YACxD,WAAW;AAAA,UACb;AAAA,QACF,GAAG,IACD;AAAA,QACJ,QAAQ;AAAA,UACN;AAAA,YACE,MAAM;AAAA,YACN,IAAI;AAAA,YACJ,QAAQ;AAAA,YACR,iBAAiB;AAAA,UACnB;AAAA,QACF;AAAA,QACA,WAAW,aAAa,SAAY,IAAI,SAAS;AAAA,MACnD;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AACF;AAEA,IAAMF,iBAAe;AAErB,MAAM,eAAeA;;;ACtgBrB;AAAA,EACE,OAAAK;AAAA,EAEA,eAAAC;AAAA,EACA,iBAAAC;AAAA,EAEA,UAAAC;AAAA,OACK;AACP,SAAS,kBAAAC,uBAAsB;AAI/B,SAAS,eAAAC,cAAa,kBAAAC,uBAAsB;;;ACZ5C;AAAA,EACE,OAAAC;AAAA,EAEA,eAAAC;AAAA,EACA,iBAAAC;AAAA,EAEA,UAAAC;AAAA,OACK;AACP,SAAS,kBAAAC,uBAAsB;AAI/B,SAAS,aAAa,kBAAAC,uBAAsB;AA4QrC,IAAM,QAAN,MAAM,eAAc,UAAmC;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EAQR,YAAY,MAAc,MAAiB,MAAiC;AAC1E,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,WAAK,UAAU,IAAI;AACnB,WAAK,aAAa,IAAI;AACtB;AAAA,IACF;AAEA,UAAM,SAAS;AACf,UAAM,SAASC,SAAO,KAAK,MAAM,EAAE,MAAM,CAAC,MAAM,KAAK,OAAO;AAC5D,UAAM,UAAUC,MAAI,CAAC,QAAQ,KAAK,OAAO,CAAC,EAAE;AAAA,MAC1C,CAAC,CAACC,SAAQ,CAAC,MAAM,MAAMA,YAAW,UAAU,QAAQ;AAAA,IACtD;AACA,UAAM,WAAWF,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,KAAK,WAAW;AACpE,UAAM,QAAQA,SAAO,KAAK,KAAK,EAAE,MAAM,CAAC,MAAM,KAAK,CAAC;AACpD,UAAM,MAAM,aAAa;AAEzB,UAAM,MAAM,YAAY;AACxB,QAAI,KAAK,SAAS;AAChB,WAAK,MAAM;AACX;AAAA,IACF;AAEA,UAAM,EAAE,WAAW,QAAAG,QAAO,IAAI,gBAAgB;AAC9C,UAAM,cAAc,kBAAkB;AACtC,UAAM,UAAU,cAAc;AAE9B,SAAK,UAAU;AACf,SAAK,aAAa;AAElB,aAAS,cAAc;AACrB,UAAI,CAAC,KAAK,IAAK,QAAO;AAEtB,YAAMC,OAAM;AAAA,QACV,SAAS;AAAA,QACT,MAAMJ,SAAO,KAAK,IAAI,QAAQ,WAAW;AAAA,QACzC,MAAMA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,QAClC,UAAUA,SAAO,KAAK,IAAI,YAAY,SAAS;AAAA,QAC/C,UAAU,KAAK,IAAI,WAAWA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,MAC5D;AAEA,UAAI,WAAW,GAAG,IAAI,OAAO;AAAA,QAC3B,KAAK;AAAA,UACH,OAAO;AAAA,UACP,WAAW;AAAA,UACX,SAAS;AAAA,QACX;AAAA,QACA,aAAa;AAAA,UACX,yBAAyBK;AAAA;AAAA,eAEpBD,KAAI,QAAQ;AAAA,cAEvBA,KAAI,WAAW,IAAIA,KAAI,QAAQ,MAAM,kCACvC;AAAA;AAAA,gBAEcA,KAAI,IAAI,IAAIA,KAAI,IAAI;AAAA,QAC5B;AAAA,MACF,CAAC;AAED,aAAOA;AAAA,IACT;AAEA,aAAS,eAAe;AAEtB,UAAI,KAAK,eAAeE,MAAK;AAC3B,eAAON,SAAO;AAAA,UACZ,SAAS,KAAK,IAAI;AAAA,UAClB,gBAAgB,KAAK,IAAI;AAAA,QAC3B,CAAC;AAAA,MACH;AAGA,aAAOA,SAAO,KAAK,GAAG;AAAA,IACxB;AAEA,aAAS,kBAAkB;AACzB,YAAMO,aAAY,IAAIC;AAAA,QACpB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,iBAAiB;AAAA,QACnB;AAAA,QACA,EAAE,OAAO;AAAA,MACX,EAAE;AAEF,YAAML,UAAS,IAAIM,gBAAe;AAAA,QAChC,GAAG,IAAI;AAAA,QACP;AAAA,UACE,sBAAsB;AAAA,QACxB;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAEA,UAAIA,gBAAe;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,UAAUN,QAAO;AAAA,UACjB,cAAcO,gBAAc,EAAE,WAAAH,WAAU,CAAC;AAAA,QAC3C;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAEA,aAAO,EAAE,QAAAJ,SAAQ,WAAAI,WAAU;AAAA,IAC7B;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAI,YAAY;AAAA,QACrB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa;AAAA,YACb,WAAW,IAAI;AAAA,UACjB;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAO,IAAI,YAAY;AAAA,QACrB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa;AAAA,YACb;AAAA,YACA,eAAe;AAAA,YACf,UAAUF,sBAAoB,QAAQ;AAAA,YACtC,oBAAoB,SAAS,MAAM,CAAC,MAAM,EAAE,WAAW,OAAO,CAAC;AAAA,YAC/D,MAAM;AAAA,YACN,0BAA0B;AAAA,YAC1B,aAAa;AAAA,YACb,eAAe;AAAA,YACf,sBAAsB;AAAA,YACtB,gBAAgB;AAAA,YAChB,yBAAyB;AAAA,YACzB,0BAA0B;AAAA,YAC1B,uBAAuB;AAAA,YACvB;AAAA,YACA,iBAAiB,YAAY;AAAA,YAC7B,kBAAkB,IAAI;AAAA,YACtB,MAAM;AAAA,cACJ,sBAAsBF,QAAO;AAAA,YAC/B;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,YAAY;AACrB,WAAO,KAAK,MAAMH,SAAO,aAAa,IAAI,KAAK,QAAS;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,WAAO,KAAK,MAAM,KAAK,IAAI,WAAWA,SAAO,SAAS;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,WAAO,KAAK,MAAM,KAAK,IAAI,YAAYA,SAAO,EAAE,IAAI,KAAK;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,MACR,KAAK,IAAI,OACT,KAAK,QAAS;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,MAAM,KAAK,IAAI,OAAO,KAAK,QAAS,KAAK,MAAM,CAAC,MAAM,CAAE;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,QAAQ;AACd,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,UAAU;AACZ,YAAI,MAAM;AACR,gBAAM,IAAI,aAAa,4CAA4C;AACrE,eAAO,MAAM;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,QACX,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,OAAc,IACZ,MACA,WACA,MACA;AACA,UAAM,UAAU,YAAY,iBAAiB;AAAA,MAC3C,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,MACA;AAAA,IACF;AACA,UAAMG,UAAS,QAAQ,KAAK;AAAA,MAAM,CAAC,SACjC,OAAO,oBAAoB,IACvBM,gBAAe;AAAA,QACb;AAAA,UACE,UAAU,KAAK,oBAAoB;AAAA,QACrC;AAAA,QACA;AAAA,MACF,IACAT,SAAO,MAAS;AAAA,IACtB;AACA,UAAM,YAAYG,QAAO,MAAM,CAAC,MAAM;AACpC,UAAI,CAAC;AACH,cAAM,IAAI,aAAa,sCAAsC,IAAI,GAAG;AACtE,aAAO,KAAK,MAAM,EAAE,YAAY,EAAE;AAAA,IACpC,CAAC;AAED,WAAO,IAAI,OAAM,MAAM;AAAA,MACrB,KAAK;AAAA,MACL;AAAA,MACA;AAAA,IACF,CAAyB;AAAA,EAC3B;AACF;AAEA,IAAMJ,iBAAe;AAErB,MAAM,eAAeA;;;ADlRd,IAAMY,SAAN,MAAM,eAAc,UAAmC;AAAA,EACpD;AAAA,EACA;AAAA,EACA;AAAA,EAOR,OAAc,KAAK;AAAA,EAEnB,YAAY,MAAc,MAAiB,MAAiC;AAC1E,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,WAAW;AACjB,UAAM,OAAO;AAEb,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM,UAAU;AACtB,WAAK,UAAUC,SAAO,IAAI,OAAO;AACjC,WAAK,aAAa,IAAI;AACtB;AAAA,IACF;AAEA,oBAAgB;AAChB,UAAM,SAASA,SAAO,KAAK,MAAM,EAAE,MAAM,CAAC,MAAM,KAAK,OAAO;AAC5D,UAAM,UAAUC,MAAI,CAAC,QAAQ,KAAK,OAAO,CAAC,EAAE;AAAA,MAC1C,CAAC,CAACC,SAAQ,CAAC,MAAM,MAAMA,YAAW,UAAU,QAAQ;AAAA,IACtD;AACA,UAAM,WAAWF,SAAO,KAAK,QAAQ,EAAE,MAAM,CAAC,MAAM,KAAK,WAAW;AACpE,UAAM,cAAc,iBAAiB;AACrC,UAAM,MAAM,aAAa;AAEzB,UAAM,MAAM,YAAY;AACxB,QAAI,KAAK,SAAS;AAChB,WAAK,MAAM;AACX;AAAA,IACF;AAEA,UAAM,EAAE,WAAW,QAAAG,QAAO,IAAI,gBAAgB;AAC9C,UAAM,cAAc,kBAAkB;AACtC,UAAM,iBAAiB,qBAAqB;AAC5C,UAAM,UAAU,cAAc;AAE9B,SAAK,UAAU;AACf,SAAK,aAAa;AAElB,aAAS,YAAY;AACnB,YAAM,MAAM;AACZ,YAAMC,WAAUC,aAAY,iBAAiB;AAAA,QAC3C,GAAG,IAAI;AAAA,QACP,IAAI;AAAA,QACJ;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,YAAM,QAAQD,SAAQ,KAAK,MAAM,CAAC,SAAS;AACzC;AAAA,UACE,OAAO,uBAAuB,IAC1B,SAAS,KAAK,uBAAuB,CAAC,IACtC;AAAA,QACN;AAEA,YAAI,CAAC,OAAO,gBAAgB;AAC1B,gBAAM,IAAI;AAAA,YACR,8CAA8C,IAAI;AAAA,UACpD;AAEF,eAAO;AAAA,UACL,WAAW,OAAO,gBAAgB;AAAA,QACpC;AAAA,MACF,CAAC;AAED,YAAMD,UAASG,gBAAe;AAAA,QAC5B,EAAE,UAAU,MAAM,UAAU;AAAA,QAC5B,EAAE,QAAQ,KAAK;AAAA,MACjB;AACA,YAAMC,aAAYJ,QAAO,aAAa,MAAM,CAAC,MAAM;AACjD,eAAO,KAAK,MAAM,CAAC,EAAE;AAAA,MACvB,CAAC;AAED,aAAO,EAAE,SAAAC,UAAS,WAAAG,WAAU;AAAA,IAC9B;AAEA,aAAS,gBAAgB,iBAA0B;AACjD,YAAM,aAAa,mBAAmB,mBAAK,MAAM,QAAQ,IAAI;AAC7D,WAAK,gBAAgB;AAAA,QACnB,KAAK;AAAA,QACL,KAAK;AAAA,QACL,SAAS;AAAA,UACP;AAAA,UACA;AAAA,UACA,qEAAqE,UAAU;AAAA,UAC/E;AAAA,QACF,EAAE,KAAK,IAAI;AAAA,MACb,CAAC;AAAA,IACH;AAEA,aAAS,cAAc;AACrB,UAAI,CAAC,KAAK,IAAK,QAAO;AAEtB,YAAMC,OAAM;AAAA,QACV,SAAS;AAAA,QACT,MAAMR,SAAO,KAAK,IAAI,QAAQ,WAAW;AAAA,QACzC,MAAMA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,QAClC,UAAUA,SAAO,KAAK,IAAI,YAAY,SAAS;AAAA,QAC/C,UAAU,KAAK,IAAI,WAAWA,SAAO,KAAK,IAAI,QAAQ,IAAI;AAAA,MAC5D;AAEA,UAAI,WAAW,GAAG,IAAI,OAAO;AAAA,QAC3B,KAAK;AAAA,UACH,OAAO;AAAA,UACP,WAAW;AAAA,UACX,SAAS;AAAA,QACX;AAAA,QACA,aAAa;AAAA,UACX,yBAAyBS;AAAA;AAAA,eAEpBD,KAAI,QAAQ;AAAA,cAEvBA,KAAI,WAAW,IAAIA,KAAI,QAAQ,MAAM,kCACvC;AAAA;AAAA,gBAEcA,KAAI,IAAI,IAAIA,KAAI,IAAI;AAAA,QAC5B;AAAA,MACF,CAAC;AAED,aAAOA;AAAA,IACT;AAEA,aAAS,eAAe;AAEtB,UAAI,KAAK,eAAeE,MAAK;AAC3B,eAAOV,SAAO;AAAA,UACZ,SAAS,KAAK,IAAI;AAAA,UAClB,gBAAgB,KAAK,IAAI;AAAA,QAC3B,CAAC;AAAA,MACH;AAGA,aAAOA,SAAO,KAAK,GAAG;AAAA,IACxB;AAEA,aAAS,mBAAmB;AAC1B,aAAOC,MAAI,CAAC,KAAK,SAAS,KAAK,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC,GAAG,KAAK,MAAM;AAC3D,YAAI,MAAM,MAAO,QAAO;AACxB,YAAI,MAAM,KAAM,QAAO,EAAE,OAAO,EAAE;AAClC,YAAI,MAAM,QAAW;AACnB,cAAI,MAAO,QAAO,EAAE,MAAM;AAC1B,iBAAO,EAAE,OAAO,EAAE;AAAA,QACpB;AACA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,aAAS,kBAAkB;AACzB,YAAMM,aAAY,IAAII;AAAA,QACpB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,iBAAiB;AAAA,QACnB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB,EAAE;AAEF,YAAMR,UAAS,IAAIG,gBAAe;AAAA,QAChC,GAAG,IAAI;AAAA,QACP;AAAA,UACE,sBAAsB;AAAA,QACxB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,UAAIA,gBAAe;AAAA,QACjB,GAAG,IAAI;AAAA,QACP;AAAA,UACE,UAAUH,QAAO;AAAA,UACjB,cAAcS,gBAAc,EAAE,WAAAL,WAAU,CAAC;AAAA,QAC3C;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAEA,aAAO,EAAE,QAAAJ,SAAQ,WAAAI,WAAU;AAAA,IAC7B;AAEA,aAAS,oBAAoB;AAC3B,aAAO,IAAIF,aAAY;AAAA,QACrB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa;AAAA,YACb,WAAW,IAAI;AAAA,UACjB;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,aAAO,IAAIA,aAAY;AAAA,QACrB,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,aAAa;AAAA,YACb,QAAQJ,MAAI,CAAC,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC,CAACC,SAAQW,QAAO,MAAM;AAC1D,oBAAM,eAAeA,SAAQ,MAAM,GAAG,EAAE,CAAC;AACzC,oBAAM,gBAAgB,GAAGX,OAAM,GAAG,YAAY;AAC9C,qBACE;AAAA,gBACE,QAAQ;AAAA,gBACR,QAAQ;AAAA,gBACR,QAAQ;AAAA,cACV,EAAE,aAAa,KAAK;AAAA,YAExB,CAAC;AAAA,YACD,YAAYD,MAAI,CAAC,KAAK,cAAc,CAAC,GAAG,WAAW,CAAC,EAAE;AAAA,cACpD,CAAC,CAAC,YAAYa,YAAW,MAAM;AAAA,gBAC7B;AAAA,kBACE,MAAM;AAAA,kBACN,OAAOA,eAAc,QAAQ;AAAA,gBAC/B;AAAA,gBACA,GAAG,OAAO,QAAQ,UAAU,EAAE,IAAI,CAAC,CAACC,OAAM,KAAK,OAAO;AAAA,kBACpD,MAAAA;AAAA,kBACA;AAAA,gBACF,EAAE;AAAA,cACJ;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAO,YAAY;AAAA,QACjB,CAACD,iBACC,IAAIT,aAAY;AAAA,UACd,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,aAAa;AAAA,cACb;AAAA,cACA,eAAe;AAAA,cACf,UAAUI,sBAAoB,QAAQ;AAAA,cACtC,oBAAoB,SAAS;AAAA,gBAAM,CAAC,MAClC,EAAE,WAAW,OAAO;AAAA,cACtB;AAAA,cACA,MAAM;AAAA,cACN,GAAIK,eACA;AAAA,gBACE,aAAa;AAAA,gBACb,eAAeA,aAAY;AAAA,gBAC3B,sBAAsB;AAAA,gBACtB,0BAA0B;AAAA,cAC5B,IACA;AAAA,gBACE,aAAa;AAAA,cACf;AAAA,cACJ,gBAAgB;AAAA,cAChB,yBAAyB;AAAA,cACzB,0BAA0B;AAAA,cAC1B,uBAAuB;AAAA,cACvB;AAAA,cACA,iBAAiB,YAAY;AAAA,cAC7B,oBAAoB,eAAe;AAAA,cACnC,kBAAkB,IAAI;AAAA,cACtB,MAAM;AAAA,gBACJ,yBAAyB,SAAS,SAAS;AAAA,gBAC3C,kBAAkBX,QAAO;AAAA,cAC3B;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,YAAY;AACrB,WAAO,KAAK,MAAMH,SAAO,aAAa,IAAI,KAAK,QAAS;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,WAAO,KAAK,MAAM,KAAK,IAAI,WAAWA,SAAO,SAAS;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,WAAW;AACpB,WAAO,KAAK,MAAM,KAAK,IAAI,YAAYA,SAAO,EAAE,IAAI,KAAK;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,MACR,KAAK,IAAI,OACT,KAAK,QAAS,eAAe;AAAA,MAAM,CAAC,YAClC,UACI,KAAK,QAAS,+BACd,KAAK,QAAS;AAAA,IACpB;AAAA,EACN;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,MAAM,KAAK,IAAI,OAAO,KAAK,QAAS,KAAK,MAAM,CAAC,MAAM,CAAE;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,UAAM,QAAQ;AACd,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,IAAI,UAAU;AACZ,YAAI,MAAM;AACR,gBAAM,IAAI,aAAa,4CAA4C;AACrE,eAAO,MAAM;AAAA,MACf;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,MAAM,KAAK;AAAA,QACX,MAAM,KAAK;AAAA,QACX,UAAU,KAAK;AAAA,QACf,UAAU,KAAK;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAkCA,OAAc,IACZ,MACA,WACA,MACA;AACA,WAAO,IAAI;AAAA,MACT;AAAA,MACA;AAAA,QACE,KAAK;AAAA,QACL;AAAA,MACF;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErBD,OAAM,eAAeC;;;AErsBrB,OAAOiB,UAAQ;AACf,OAAOC,YAAU;AACjB,SAA2C,OAAAC,aAAW;AA6Z/C,IAAM,QAAN,cAAoB,QAAQ;AAAA,EACjC,YACE,MACA,OAAkB,CAAC,GACnB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,wBAAwB;AAAA,EAAE;AAAA,EAE1B,UACR,YACA,OACA,MACc;AACd,WAAOC,MAAI,CAAC,YAAY,KAAK,cAAc,CAAC,EAAE;AAAA,MAC5C,OAAO,CAACC,aAAY,cAAc,MAAM;AAItC,YAAI,aAAa;AACjB,YAAI,wBAAwB;AAC5B,YAAI,YAAYC,OAAK,KAAKD,aAAY,OAAO;AAE7C,cAAM,aAAa,MAAM,eAAe;AACxC,YAAI,YAAY;AACd,uBAAaC,OAAK;AAAA,YAChB,WAAW,qBAAqB,YAAY;AAAA,YAC5C;AAAA,UACF;AACA,kCAAwB;AACxB,sBAAYA,OAAK;AAAA,YACfD;AAAA,YACA,WAAW,qBAAqB,YAAY;AAAA,UAC9C;AAAA,QACF;AAEA,cAAM,WAAWE,KACd,aAAaD,OAAK,KAAKD,aAAY,gBAAgB,GAAG,OAAO,EAC7D,MAAM,oBAAoB,IAAI,CAAC;AAElC,eAAO;AAAA,UACL,MAAM;AAAA,UACN,QAAQ,yBAAyB;AAAA,UACjC,QAAQ;AAAA,YACN;AAAA,cACE,MAAM;AAAA,cACN,IAAI;AAAA,cACJ,QAAQ;AAAA,cACR,iBAAiB;AAAA,YACnB;AAAA,UACF;AAAA,QACF;AAEA,uBAAe,iBAAiB;AAC9B,gBAAM,OAAO;AAAA,YACX;AAAA,YACA;AAAA,YACA;AAAA,YACA;AAAA,UACF,EAAE,KAAK,CAAC,aAAaE,KAAG,WAAWD,OAAK,KAAKD,aAAY,QAAQ,CAAC,CAAC;AACnE,cAAI,CAAC,KAAM;AAEX,cAAI;AACF,kBAAM,OAAO,MAAM,OAAO,MAAM;AAChC,kBAAM,SAAS,MAAM,KAAK;AAAA,cACxB,EAAE,SAAS,SAAS,MAAM,aAAa;AAAA,cACvCC,OAAK,KAAKD,aAAY,IAAI;AAAA,YAC5B;AACA,gBAAI,CAAC,OAAQ,OAAM,IAAI,MAAM;AAE7B,mBAAO;AAAA,cACL,sBAAsB;AAAA,gBACpB,aAAa;AAAA,kBACX,gBAAgB,kBAAkB;AAAA,gBACpC;AAAA,cACF;AAAA,YACF;AAAA,UACF,SAAS,GAAG;AACV,kBAAM,IAAI;AAAA,cACR,2CAA2C,IAAI;AAAA,YACjD;AAAA,UACF;AAAA,QACF;AAEA,iBAAS,2BAA2B;AAoBlC,UAAAE,KAAG,UAAU,WAAW,EAAE,WAAW,KAAK,CAAC;AAI3C,gBAAM,UAAU;AAAA;AAAA;AAAA,YAGd;AAAA,YACA,aACI,2DACA;AAAA,YACJ;AAAA,YACAA,KAAG;AAAA,cACDD,OAAK;AAAA,gBACH,mBAAK,MAAM;AAAA,gBACX;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,YACF;AAAA,UACF,EAAE,KAAK,IAAI;AACX,UAAAC,KAAG,cAAcD,OAAK,KAAK,WAAW,YAAY,GAAG,OAAO;AAS5D,gBAAM,eAAeA,OAAK,KAAK,WAAW,cAAc;AACxD,UAAAC,KAAG;AAAA,YACDD,OAAK;AAAA,cACH,mBAAK,MAAM;AAAA,cACX;AAAA,cACA;AAAA,cACA;AAAA,YACF;AAAA,YACA;AAAA,UACF;AAEA,iBAAO;AAAA,YACL,SAASA,OAAK,KAAK,WAAW,gBAAgB;AAAA,YAC9C,QAAQ;AAAA,cACN,SAAS;AAAA,gBACP,QAAQ,CAACA,OAAK,QAAQ,YAAY,CAAC;AAAA,cACrC;AAAA,YACF;AAAA,YACA,WAAW;AAAA,UACb;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AACF;AAEA,IAAMH,iBAAe;AAErB,MAAM,eAAeA;;;AC7kBrB,OAAOK,UAAQ;AACf,OAAOC,YAAU;AAqZV,IAAM,aAAN,cAAyB,QAAQ;AAAA,EACtC,YACE,MACA,OAAuB,CAAC,GACxB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,wBAAwB;AAAA,EAAE;AAAA,EAE1B,UAAU,YAA0C;AAC5D,WAAO,WAAW,MAAM,CAACC,gBAAe;AAEtC,YAAM,QAAQ,KAAK;AAAA,QACjBC,KAAG;AAAA,UACDC,OAAK,KAAKF,aAAY,WAAW,YAAY;AAAA,UAC7C;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,CAAC,YAAY,EAAE,SAAS,MAAM,MAAM,GAAG;AAC1C,cAAM,IAAI;AAAA,UACR,yGAAyG,MAAM,MAAM;AAAA,QACvH;AAAA,MACF;AAGA,YAAM,YAAYC,KAAG;AAAA,QACnBC,OAAK,KAAKF,aAAY,eAAe;AAAA,QACrC;AAAA,MACF;AACA,YAAM,WAAW,UAAU,MAAM,uBAAuB,IAAI,CAAC;AAK7D,MAAAC,KAAG,OAAOC,OAAK,KAAKF,aAAY,WAAW,UAAU,SAAS,GAAG;AAAA,QAC/D,WAAW;AAAA,QACX,OAAO;AAAA,MACT,CAAC;AAED,aAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,aAAa;AAAA,UACb,SAAS;AAAA,UACT,QAAQE,OAAK,KAAKF,aAAY,WAAW,QAAQ;AAAA,UACjD,WAAW,OAAO,QAAQ,WAAW,cAAc;AAAA,QACrD;AAAA,QACA,QAAQ;AAAA,UACN;AAAA,YACE,MAAME,OAAK,KAAK,WAAW,QAAQ;AAAA,YACnC,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AACF;AAEA,IAAMH,iBAAe;AAErB,WAAW,eAAeA;;;AChe1B;AAAA,EACE,OAAAI;AAAA,EAEA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAEP,SAAS,cAAAC,cAAY,OAAAC,OAAK,WAAW;;;ACPrC,SAAS,mBAAmB;AAOrB,SAAS,UAAU,OAAe;AACvC,SAAO,MAAM,WAAW,IAAI,KAAK,MAAM,SAAS,IAAI;AACtD;AAqKO,IAAe,QAAf,MAAqB;AAAA,EAQ1B,YAAsB,MAAiB;AAAjB;AAAA,EAAkB;AAAA,EAP9B;AAAA;AAAA,EACA,oBAA6B,CAAC;AAAA;AAAA,EAC9B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAIA,cAA+B,OAAa;AACpD,QAAI,MAAM;AACR,YAAM,IAAI;AAAA,QACR,qBAAqB,MAAM,IAAI;AAAA,MACjC;AAEF,SAAK,kBAAkB,KAAK,KAAK;AACjC,UAAM,oBAAoB;AAC1B,WAAO;AAAA,EACT;AAAA,EAEU,QAAyB,OAAa;AAC9C,QAAI,KAAK;AACP,YAAM,IAAI;AAAA,QACR,QAAQ,KAAK,IAAI;AAAA,MACnB;AAEF,SAAK,aAAa;AAClB,UAAM,aAAa;AACnB,WAAO;AAAA,EACT;AAAA,EAEU,SAAS,MAAkB;AACnC,SAAK,WAAW,KAAK,YAAY,CAAC;AAClC,SAAK,SAAS,KAAK;AAAA,MACjB,QAAQ,CAAC,YAAY;AAAA,MACrB,aAAa;AAAA,MACb,UAAU;AAAA,MACV,aAAa;AAAA,MACb,GAAG;AAAA,IACL,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EAEU,SAAS,OAAc,OAAkB,CAAC,GAAG;AACrD,SAAK,WAAW,KAAK,YAAY,CAAC;AAClC,SAAK,SAAS,KAAK;AAAA,MACjB,MAAM,MAAM,QAAQ;AAAA,MACpB,OAAO;AAAA,QACL,QAAQ,KAAK,UAAU,CAAC,YAAY;AAAA,MACtC;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,OAAO;AAChB,WAAO,KAAK,KAAK;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAKO,UAAiB;AACtB,WACE,KAAK,YAAY,QAAQ,KAAK,KAAK,mBAAmB,QAAQ,KAAK;AAAA,EAEvE;AAAA;AAAA;AAAA;AAAA,EAKO,UAAiB;AACtB,WAAO,KAAK,YAAY,QAAQ,KAAK;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,sBAAsB,SAA6B,oBAAI,IAAI,GAAG;AACnE,UAAM,WAAW,OAAO,IAAI,KAAK,IAAI;AACrC,QAAI,YAAY,aAAa;AAC3B,YAAM,IAAI;AAAA,QACR,uCAAuC,KAAK,IAAI;AAAA,MAClD;AAEF,WAAO,IAAI,KAAK,MAAM,IAAI;AAE1B,SAAK,YAAY,sBAAsB,MAAM;AAC7C,SAAK,UAAU,QAAQ,CAAC,MAAM,EAAE,KAAK,sBAAsB,MAAM,CAAC;AAClE,SAAK,kBAAkB,QAAQ,CAAC,MAAM,EAAE,sBAAsB,MAAM,CAAC;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,qBACL,SAA6B,oBAAI,IAAI,GACrC,UAAkB,QAClB;AACA,UAAM,WAAW,OAAO,IAAI,IAAI;AAChC,QAAI,YAAY,aAAa;AAC3B,YAAM,IAAI;AAAA,QACR,qBAAqB,KAAK,IAAI;AAAA,MAChC;AAEF,WAAO,IAAI,MAAM,OAAO;AAExB,SAAK,YAAY,qBAAqB,QAAQ,OAAO;AACrD,SAAK,UAAU,QAAQ,CAAC,MAAM,EAAE,KAAK,qBAAqB,QAAQ,OAAO,CAAC;AAC1E,SAAK,kBAAkB,QAAQ,CAAC,MAAM;AACpC,YAAM,eAAe,YAAY,EAAE,EAAE,SAAS,KAAK;AACnD,QAAE,qBAAqB,QAAQ,YAAY;AAAA,IAC7C,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,iBAA2C;AAChD,WAAO;AAAA,MACL,GAAI,KAAK,YAAY,eAAe,KAAK,CAAC;AAAA,MAC1C,IAAI,KAAK,YAAY,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,KAAK,eAAe,CAAC;AAAA,IACjE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,YAAiC;AACtC,WAAO;AAAA,MACL,CAAC,KAAK,IAAI,GAAG,KAAK,OAAO;AAAA,MACzB,GAAG,KAAK,YAAY,UAAU;AAAA,MAC9B,GAAG,KAAK,UAAU;AAAA,QAChB,CAAC,KAAK,OAAO,EAAE,GAAG,KAAK,GAAG,EAAE,KAAK,UAAU,EAAE;AAAA,QAC7C,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EAEU,SAA8B;AACtC,WAAO;AAAA,MACL,eAAe;AAAA,MACf,SAAS,KAAK,KAAK;AAAA,MACnB,QAAQ,KAAK,KAAK;AAAA,MAClB,QAAQ,KAAK,KAAK;AAAA,MAClB,GAAI,KAAK,aAAa,EAAE,MAAM,KAAK,WAAW,KAAK,IAAI,EAAE,KAAK,KAAK;AAAA,MACnE,OAAO,KAAK,UAAU,IAAI,CAAC,OAAO;AAAA,QAChC,aAAa,EAAE;AAAA,QACf,iBAAiB,UAAU,EAAE,QAAS;AAAA,QACtC,aAAa,EAAE;AAAA,QACf,aAAa,EAAE;AAAA,MACjB,EAAE;AAAA,MACF,OAAO,KAAK,UAAU,IAAI,CAAC,OAAO;AAAA,QAChC,aAAa,EAAE,MAAM;AAAA,QACrB,MAAM,EAAE,KAAK;AAAA,MACf,EAAE;AAAA,IACJ;AAAA,EACF;AACF;;;ACpUO,IAAM,SAAN,cAAqB,MAAM;AAAA,EAOhC,YAAsB,MAAkB;AACtC,UAAM,IAAI;AADU;AAAA,EAEtB;AAAA,EARQ,UAGF,CAAC;AAAA,EACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA2BD,KAAK,WAAoB,MAAa;AAC3C,QAAI,CAAC,UAAU,SAAS;AACtB,YAAM,IAAI,MAAM,mDAAmD;AAErE,SAAK,QAAQ,KAAK,EAAE,WAAW,KAAK,CAAC;AACrC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,UAAU,MAAa;AAC5B,SAAK,cAAc;AACnB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKO,sBAAsB,SAA6B,oBAAI,IAAI,GAAG;AACnE,UAAM,sBAAsB,MAAM;AAClC,SAAK,QAAQ,QAAQ,CAAC,MAAM,EAAE,KAAK,sBAAsB,MAAM,CAAC;AAChE,SAAK,aAAa,sBAAsB,MAAM;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA,EAKO,qBACL,SAA6B,oBAAI,IAAI,GACrC,UAAkB,QAClB;AACA,UAAM,qBAAqB,QAAQ,OAAO;AAC1C,SAAK,QAAQ,QAAQ,CAAC,MAAM,EAAE,KAAK,qBAAqB,QAAQ,OAAO,CAAC;AACxE,SAAK,aAAa,qBAAqB,QAAQ,OAAO;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKO,iBAAiB;AACtB,WAAO;AAAA,MACL,GAAG,KAAK,QAAQ,QAAQ,CAAC,MAAM,EAAE,KAAK,eAAe,CAAC;AAAA,MACtD,GAAI,KAAK,aAAa,eAAe,KAAK,CAAC;AAAA,MAC3C,GAAG,MAAM,eAAe;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKO,YAAY;AACjB,WAAO;AAAA,MACL,GAAG,MAAM,UAAU;AAAA,MACnB,GAAG,KAAK,aAAa,UAAU;AAAA,MAC/B,GAAG,KAAK,QAAQ;AAAA,QACd,CAAC,KAAK,OAAO,EAAE,GAAG,KAAK,GAAG,EAAE,KAAK,UAAU,EAAE;AAAA,QAC7C,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AAAA,EAEU,SAAS;AACjB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,KAAK,QAAQ,IAAI,CAAC,OAAO;AAAA,QAChC,WAAW,EAAE;AAAA,QACb,MAAM,EAAE,KAAK;AAAA,MACf,EAAE;AAAA,MACF,SAAS,KAAK,aAAa;AAAA,MAC3B,GAAG,MAAM,OAAO;AAAA,MAChB,KAAK;AAAA,IACP;AAAA,EACF;AACF;;;ACvEO,IAAM,OAAN,cAAmB,MAAM;AAAA,EAC9B,YAAsB,MAAgB;AACpC,UAAM,IAAI;AADU;AAAA,EAEtB;AAAA;AAAA;AAAA;AAAA,EAKU,SAAS;AACjB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,OAAO,KAAK,KAAK;AAAA,MACjB,OAAO,KAAK,KAAK;AAAA,MACjB,GAAG,MAAM,OAAO;AAAA,MAChB,KAAK;AAAA,IACP;AAAA,EACF;AACF;;;ACpEA,SAAiB,UAAAC,gBAAc;AA2JxB,IAAMC,OAAN,cAAkB,MAAoC;AAAA,EAI3D,YAAsB,MAAe;AACnC,UAAM,IAAI;AADU;AAEpB,SAAK,YAAY,KAAK,UAAU,QAAQ;AACxC,SAAK,cAAc,KAAK,SAAS;AACjC,SAAK,OAAOC,SAAO,KAAK,QAAQ,QAAQ;AAAA,EAC1C;AAAA,EARQ;AAAA,EACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBD,KAAsB,OAAa;AACxC,WAAO,KAAK,QAAQ,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBO,MAAM,MAAkB;AAC7B,WAAO,KAAK,SAAS,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBO,MAAM,OAAc,OAAkB,CAAC,GAAG;AAC/C,WAAO,KAAK,SAAS,OAAO,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKO,iBAAiB;AACtB,WAAO,CAAC,GAAG,KAAK,UAAU,eAAe,GAAG,GAAG,MAAM,eAAe,CAAC;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA,EAKU,SAAS;AACjB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,OAAO,KAAK,KAAK;AAAA,MACjB,cAAc,KAAK,KAAK;AAAA,MACxB,eAAe;AAAA,QACb,iBAAiB,KAAK,KAAK;AAAA,UAAM,CAAC,SAChC,SAAS,WACL,EAAE,MAAM,SAAS,IACjB,EAAE,MAAM,eAAe,eAAe,KAAK,YAAY,EAAE;AAAA,QAC/D;AAAA,QACA,SAAS,KAAK,UAAU;AAAA,QACxB,QAAQ,KAAK,UAAU,UAAU;AAAA,MACnC;AAAA,MACA,gBAAgB,KAAK,KAAK;AAAA,MAC1B,GAAG,MAAM,OAAO;AAAA,IAClB;AAAA,EACF;AACF;;;AC9NO,IAAM,WAAN,cAAuB,MAAoC;AAAA,EAGhE,YAAsB,MAAoB;AACxC,UAAM,IAAI;AADU;AAAA,EAEtB;AAAA,EAJQ,WAAoB,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBtB,OAAO,QAAe;AAC3B,UAAM,OAAO,OAAO,QAAQ;AAC5B,SAAK,SAAS,KAAK,IAAI;AACvB,SAAK,cAAc,IAAI;AACvB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiBO,KAAsB,OAAa;AACxC,WAAO,KAAK,QAAQ,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBO,MAAM,MAAkB;AAC7B,WAAO,KAAK,SAAS,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBO,MAAM,OAAc,OAAkB,CAAC,GAAG;AAC/C,WAAO,KAAK,SAAS,OAAO,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKO,iBAAiB;AACtB,WAAO;AAAA,MACL,GAAG,KAAK,SAAS,QAAQ,CAAC,MAAM,EAAE,eAAe,CAAC;AAAA,MAClD,GAAG,MAAM,eAAe;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKU,SAAS;AACjB,QAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,YAAM,IAAI;AAAA,QACR,QAAQ,KAAK,IAAI;AAAA,MACnB;AAAA,IACF;AAEA,WAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU,KAAK,SAAS,IAAI,CAAC,MAAM;AACjC,eAAO;AAAA,UACL,SAAS,EAAE;AAAA,UACX,QAAQ,EAAE,UAAU;AAAA,QACtB;AAAA,MACF,CAAC;AAAA,MACD,GAAG,MAAM,OAAO;AAAA,IAClB;AAAA,EACF;AACF;;;ACzJO,IAAM,OAAN,cAAmB,MAA0B;AAAA,EAClD,YAAsB,MAAgB;AACpC,UAAM,IAAI;AADU;AAAA,EAEtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeO,KAAsB,OAAa;AACxC,WAAO,KAAK,QAAQ,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKU,SAAS;AACjB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,GAAG,MAAM,OAAO;AAAA,IAClB;AAAA,EACF;AACF;;;AChCO,IAAM,UAAN,cAAsB,MAAM;AAAA,EACjC,YAAsB,MAAmB;AACvC,UAAM,IAAI;AADU;AAAA,EAEtB;AAAA;AAAA;AAAA;AAAA,EAKU,SAAS;AACjB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,GAAG,MAAM,OAAO;AAAA,MAChB,KAAK;AAAA,IACP;AAAA,EACF;AACF;;;AC9BA,SAAS,OAAAC,OAAa,UAAAC,gBAAc;AA6N7B,IAAMC,QAAN,cAAmB,MAAoC;AAAA,EAG5D,YAAsB,MAAgB;AACpC,UAAM,IAAI;AADU;AAGpB,UAAM,cAAcC,SAAO,KAAK,KAAK,eAAe,UAAU;AAC9D,SAAK,WAAWC,MAAI,CAAC,KAAK,KAAK,UAAU,WAAW,CAAC,EAAE;AAAA,MACrD,CAAC,CAAC,UAAUC,YAAW,MAAM;AAC3B,YAAIA,iBAAgB,UAAU,CAAC,SAAS,SAAS,OAAO;AACtD,iBAAO,GAAG,QAAQ;AACpB,YAAIA,iBAAgB,WAAW,CAAC,SAAS,SAAS,mBAAmB;AACnE,iBAAO,GAAG,QAAQ;AACpB,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAAA,EAfQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgCD,KAAsB,OAAa;AACxC,WAAO,KAAK,QAAQ,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBO,MAAM,MAAkB;AAC7B,WAAO,KAAK,SAAS,IAAI;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBO,MAAM,OAAc,OAAkB,CAAC,GAAG;AAC/C,WAAO,KAAK,SAAS,OAAO,IAAI;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKO,iBAAiB;AACtB,WAAO,CAAC,GAAI,KAAK,KAAK,eAAe,CAAC,GAAI,GAAG,MAAM,eAAe,CAAC;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA,EAKU,SAAS;AACjB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,GAAG,MAAM,OAAO;AAAA,MAChB,UAAU,KAAK;AAAA,MACf,aAAa,KAAK,KAAK,QAAQ;AAAA,QAC7B,SAAS,KAAK,KAAK;AAAA,MACrB;AAAA,MACA,SAAS,KAAK,KAAK,UACfF,SAAO,KAAK,KAAK,OAAO,EAAE;AAAA,QAAM,CAAC,MAC/B,UAAU,CAAC,IAAI,IAAI,UAAU,CAAa;AAAA,MAC5C,IACA;AAAA,MACJ,WAAW,KAAK,KAAK;AAAA,IACvB;AAAA,EACF;AACF;;;AC9UA,SAAS,UAAAG,gBAAc;AAkEhB,IAAM,OAAN,cAAmB,MAA0B;AAAA,EAClD,YAAsB,MAAgB;AACpC,UAAM,IAAI;AADU;AAAA,EAEtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBO,KAAsB,OAAa;AACxC,WAAO,KAAK,QAAQ,KAAK;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKU,SAAS;AACjB,WAAO;AAAA,MACL,MAAM;AAAA,MACN,SAAS,KAAK,KAAK,OACfC,SAAO,KAAK,KAAK,IAAI,EAAE;AAAA,QAAM,CAAC,MAC9B,UAAU,CAAC,IAAI,IAAI,UAAU,CAAa;AAAA,MAC5C,IACE;AAAA,MACJ,WAAW,KAAK,KAAK;AAAA,MACrB,GAAG,MAAM,OAAO;AAAA,IAClB;AAAA,EACF;AACF;;;ATsGO,IAAM,gBAAN,cAA4B,UAAmC;AAAA,EAC5D;AAAA,EAER,YACE,MACA,MACA,MACA;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AAEf,UAAM,OAAOC,SAAO,KAAK,QAAQ,UAAU;AAC3C,UAAM,UAAU,iBAAiB;AACjC,UAAM,WAAW,eAAe;AAChC,UAAM,OAAO,WAAW;AACxB,UAAM,eAAe,mBAAmB;AAExC,SAAK,eAAe;AAEpB,aAAS,mBAAmB;AAC1B,aAAOA,SAAO,KAAK,OAAO,EAAE,MAAM,CAACC,aAAY;AAC7C,YAAIA,aAAY,MAAO,QAAO;AAE9B,eAAO;AAAA,UACL,WAAWA,UAAS,aAAa;AAAA,UACjC,OAAOA,UAAS,SAAS;AAAA,UACzB,aAAaA,UAAS,eAAe;AAAA,QACvC;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,iBAAiB;AACxB,aAAO,QAAQ,MAAM,CAACA,aAAY;AAChC,YAAI,CAACA,SAAS;AAEd,eAAO,IAAIC,aAAW;AAAA,UACpB,GAAG;AAAA,YACD,KAAK,WAAW;AAAA,YAChB,GAAG,IAAI;AAAA,YACP;AAAA,cACE,MAAMC,4BAA0B;AAAA,gBAC9B;AAAA,gBACA,GAAG,IAAI;AAAA,cACT,CAAC;AAAA,cACD,iBAAiB,UAAUF,SAAQ,SAAS;AAAA,YAC9C;AAAA,YACA,EAAE,QAAQ,eAAe,CAAC,MAAM,EAAE;AAAA,UACpC;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,aAAa;AACpB,aAAO,IAAIG,MAAI;AAAA,QACb,GAAG,IAAI;AAAA,QACP;AAAA,UACE,kBAAkBA,MAAI,6BAA6B;AAAA,YACjD,SAAS;AAAA,UACX,CAAC;AAAA,UACD,gBAAgB;AAAA,YACd;AAAA,cACE,MAAM;AAAA,cACN,QAAQA,MAAI,wBAAwB;AAAA,gBAClC,YAAY;AAAA,kBACV;AAAA,oBACE,SAAS,CAAC,UAAU;AAAA,oBACpB,WAAW,CAAC,GAAG;AAAA,kBACjB;AAAA,kBACA;AAAA,oBACE,SAAS;AAAA,sBACP;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,sBACA;AAAA,oBACF;AAAA,oBACA,WAAW,CAAC,GAAG;AAAA,kBACjB;AAAA,kBACA;AAAA,oBACE,SAAS;AAAA,sBACP;AAAA,sBACA;AAAA,oBACF;AAAA,oBACA,WAAW,CAAC,GAAG;AAAA,kBACjB;AAAA,kBACA,GAAG,KAAK,WAAW,QAAQ,EAAE,eAAe;AAAA,gBAC9C;AAAA,cACF,CAAC,EAAE;AAAA,YACL;AAAA,UACF;AAAA,QACF;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,YAAM,OAAO,KAAK,WAAW,QAAQ;AACrC,WAAK,sBAAsB;AAC3B,WAAK,qBAAqB;AAE1B,aAAO,IAAI,IAAI;AAAA,QACb,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,MAAM,KAAK,MAAM,CAACC,UAASA,MAAK,YAAY,CAAC;AAAA,YAC7C,YAAY,cAAe;AAAA,cACzB,SAAS,KAAK;AAAA,cACd,QAAQ,KAAK,UAAU;AAAA,YACzB,CAAC;AAAA,YACD,SAAS,KAAK;AAAA,YACd,sBAAsBC,MAAI,CAAC,SAAS,QAAQ,CAAC,EAAE;AAAA,cAC7C,CAAC,CAACL,UAASM,SAAQ,OAAO;AAAA,gBACxB,sBAAsBN,UAAS,eAAe;AAAA,gBAC9C,QAAQA,UAAS,SAAS,OAAO,YAAY;AAAA,gBAC7C,gBAAgBE,gBAAcI,WAAU,GAAG;AAAA,cAC7C;AAAA,YACF;AAAA,UACF;AAAA,UACA,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,MAAM;AACf,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,cAAc,KAAK;AAAA,IACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,OAAc,OAAO,MAAkB;AACrC,WAAO,IAAI,OAAO,IAAI;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,OAAc,KAAK,MAAgB;AACjC,WAAO,IAAI,KAAK,IAAI;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAoBA,OAAc,IAAI,MAAe;AAC/B,WAAO,IAAIC,KAAI,IAAI;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBA,OAAc,SAAS,MAAoB;AACzC,WAAO,IAAI,SAAS,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcA,OAAc,KAAK,MAAgB;AACjC,WAAO,IAAI,KAAK,IAAI;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAc,QAAQ,MAAmB;AACvC,WAAO,IAAI,QAAQ,IAAI;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0BA,OAAc,KAAK,MAAgB;AACjC,WAAO,IAAI,KAAK,IAAI;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,OAAc,KAAK,MAAgB;AACjC,WAAO,IAAIC,MAAK,IAAI;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA+CA,OAAc,aAAa,MAAwB;AACjD,UAAM,KACJ,KAAK,oBAAoB,WACrB,KAAK,WACL,gBAAgB,GAAG,KAAK,IAAI,YAAY,KAAK,UAAU,CAAC,CAAC;AAE/D,WAAO,IAAIA,MAAK;AAAA,MACd,GAAG;AAAA,MACH,UAAU;AAAA,MACV,WAAW;AAAA,QACT,cAAc,GAAG;AAAA,QACjB,SAAS,KAAK;AAAA,MAChB;AAAA,MACA,aAAa;AAAA,QACX;AAAA,UACE,SAAS,CAAC,uBAAuB;AAAA,UACjC,WAAW,CAAC,GAAG,GAAG;AAAA,QACpB;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,OAAc,WAAW,MAAsB;AAC7C,WAAO,IAAIA,MAAK;AAAA,MACd,GAAG;AAAA,MACH,UAAU;AAAA,MACV,WAAW;AAAA,QACT,UAAU,KAAK,MAAM;AAAA,QACrB,SAAS,KAAK;AAAA,QACd,mBAAmB,KAAK;AAAA,QACxB,wBAAwB,KAAK;AAAA,QAC7B,gBAAgB,KAAK;AAAA,QACrB,SAAS,KAAK;AAAA,MAChB;AAAA,MACA,aAAa;AAAA,QACX;AAAA,UACE,SAAS,CAAC,aAAa;AAAA,UACvB,WAAW,CAAC,KAAK,MAAM,GAAG;AAAA,QAC5B;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,OAAc,eAAe,MAA0B;AACrD,WAAO,IAAIA,MAAK;AAAA,MACd,GAAG;AAAA,MACH,UAAU;AAAA,MACV,WAAW;AAAA,QACT,UAAU,KAAK,MAAM;AAAA,QACrB,aAAa,KAAK;AAAA,QAClB,mBAAmB,KAAK;AAAA,QACxB,wBAAwB,KAAK;AAAA,QAC7B,gBAAgB,KAAK;AAAA,MACvB;AAAA,MACA,aAAa;AAAA,QACX;AAAA,UACE,SAAS,CAAC,iBAAiB;AAAA,UAC3B,WAAW,CAAC,KAAK,MAAM,GAAG;AAAA,QAC5B;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,OAAc,WAAW,MAAsB;AAC7C,WAAO,IAAIA,MAAK;AAAA,MACd,GAAG;AAAA,MACH,UAAU;AAAA,MACV,WAAW;AAAA,QACT,SAAS,KAAK,KAAK;AAAA,QACnB,gBAAgB,KAAK,KAAK;AAAA,QAC1B,YAAY;AAAA,QACZ,sBAAsB;AAAA,UACpB,qBAAqB;AAAA,YACnB,SAAS,KAAK,KAAK;AAAA,YACnB,gBAAgB,KAAK,KAAK;AAAA,YAC1B,gBAAgB,KAAK,KAAK,eAAe;AAAA,cAAM,CAAC,MAC9C,IAAI,YAAY;AAAA,YAClB;AAAA,UACF;AAAA,QACF;AAAA,QACA,WACE,KAAK,eACLH,MAAI,CAAC,KAAK,aAAa,KAAK,KAAK,UAAU,CAAC,EAAE;AAAA,UAC5C,CAAC,CAAC,aAAa,UAAU,OAAO;AAAA,YAC9B,oBAAoB,WAAW,IAAI,CAAC,UAAU;AAAA,cAC5C,MAAM;AAAA,cACN,aAAa,OAAO,QAAQ,WAAW,EAAE;AAAA,gBACvC,CAAC,CAACI,OAAM,KAAK,OAAO,EAAE,MAAMA,OAAM,OAAO,MAAM;AAAA,cACjD;AAAA,YACF,EAAE;AAAA,UACJ;AAAA,QACF;AAAA,MACJ;AAAA,MACA,aAAa;AAAA,QACX;AAAA,UACE,SAAS,CAAC,aAAa;AAAA,UACvB,WAAW,CAAC,KAAK,KAAK,MAAM,eAAe,GAAG;AAAA,QAChD;AAAA,QACA;AAAA,UACE,SAAS,CAAC,cAAc;AAAA,UACxB,WAAW;AAAA,YACT,KAAK,KAAK,MAAM,cAAc;AAAA,YAC9B,KAAK,KAAK,MAAM,SAAS;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,OAAc,qBAAqB,MAAgC;AACjE,UAAM,UAAUV,SAAO,KAAK,MAAM,EAAE;AAAA,MAAM,CAAC,WACzCM,MAAI,OAAO,IAAI,CAAC,UAAU,MAAM,IAAI,GAAG,CAAC,EAAE;AAAA,QAAM,CAAC,SAC/C,KAAK,OAAO,CAAC,KAAK,OAAO,SAAS,KAAK,QAAQ,GAAG,MAAM,KAAK;AAAA,MAC/D;AAAA,IACF;AAEA,WAAO,IAAIG,MAAK;AAAA,MACd,GAAG;AAAA,MACH,UAAU;AAAA,MACV,WAAW;AAAA,QACT,SAAST,SAAO,KAAK,MAAM,EAAE;AAAA,UAAM,CAAC,WAClC,OAAO,IAAI,CAAC,WAAW;AAAA,YACrB,cAAc,MAAM,IAAI;AAAA,YACxB,QAAQ,MAAM;AAAA,YACd,YAAY,MAAM;AAAA,YAClB,QAAQ,MAAM;AAAA,UAChB,EAAE;AAAA,QACJ;AAAA,MACF;AAAA,MACA,aAAa;AAAA,QACX;AAAA,UACE,SAAS,CAAC,kBAAkB;AAAA,UAC5B,WAAW;AAAA,QACb;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,UAAU;AAAA,UACpB,WAAW;AAAA,YACT,KAAK;AAAA,YACL,KAAK,IAAI;AAAA,cACP,CAAC,QAAQ,GAAG,IAAI,QAAQ,gBAAgB,WAAW,CAAC;AAAA,YACtD;AAAA,UACF;AAAA,QACF,CAAC;AAAA,QACD,WAAW;AAAA,UACT,SAAS;AAAA,YACP;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,UACA,WAAW,CAAC,GAAG;AAAA,QACjB,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,cAAc,eAAeA;;;AUnyB7B,OAAOY,UAAQ;AACf,OAAOC,YAAU;AAyVV,IAAM,gBAAN,cAA4B,QAAQ;AAAA,EACzC,YACE,MACA,OAA0B,CAAC,GAC3B,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,wBAAwB;AAAA,EAAE;AAAA,EAE1B,UAAU,YAA0C;AAC5D,WAAO,WAAW,MAAM,CAACC,gBAAe;AACtC,YAAM,QAAQ,KAAK;AAAA,QACjBC,KAAG;AAAA,UACDC,OAAK,KAAKF,aAAY,WAAW,YAAY;AAAA,UAC7C;AAAA,QACF;AAAA,MACF;AAEA,UAAI,CAAC,CAAC,YAAY,EAAE,SAAS,MAAM,MAAM,GAAG;AAC1C,cAAM,IAAI;AAAA,UACR,4GAA4G,MAAM,MAAM;AAAA,QAC1H;AAAA,MACF;AAEA,YAAM,mBAAmBE,OAAK,KAAKF,aAAY,WAAW,QAAQ;AAIlE,UAAI;AAaJ,MAAAC,KAAG,OAAOC,OAAK,KAAKF,aAAY,WAAW,UAAU,SAAS,GAAG;AAAA,QAC/D,WAAW;AAAA,QACX,OAAO;AAAA,MACT,CAAC;AACD,MAAAC,KAAG,OAAOC,OAAK,KAAKF,aAAY,WAAW,UAAU,KAAK,GAAG;AAAA,QAC3D,WAAW;AAAA,QACX,OAAO;AAAA,MACT,CAAC;AAED,aAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,aAAa;AAAA,UACb,SAAS;AAAA,UACT,QAAQ;AAAA,UACR,WAAW,OAAO,QAAQ,WAAW,cAAc;AAAA,QACrD;AAAA,QACA,QAAQ;AAAA,UACN;AAAA,YACE,MAAME,OAAK,KAAK,WAAW,QAAQ;AAAA,YACnC,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AACF;AAEA,IAAMH,iBAAe;AAErB,cAAc,eAAeA;;;AC9a7B,OAAOI,UAAQ;AACf,OAAOC,YAAU;AAqeV,IAAM,OAAN,cAAmB,QAAQ;AAAA,EAChC,YACE,MACA,OAAiB,CAAC,GAClB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,wBAAwB;AAAA,EAAE;AAAA,EAE1B,UAAU,YAA0C;AAC5D,WAAO,WAAW,MAAM,CAACC,gBAAe;AACtC,YAAM,WAAWC,KACd,aAAaC,OAAK,KAAKF,aAAY,gBAAgB,GAAG,OAAO,EAC7D,MAAM,uBAAuB,IAAI,CAAC;AAErC,aAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,aAAa;AAAA,UACb,SAAS;AAAA,UACT,QAAQE,OAAK,KAAKF,aAAY,WAAW,QAAQ;AAAA,QACnD;AAAA,QACA,QAAQ;AAAA,UACN;AAAA,YACE,MAAME,OAAK,KAAK,WAAW,QAAQ;AAAA,YACnC,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AACF;AAEA,IAAMH,iBAAe;AAErB,KAAK,eAAeA;;;ACthBpB,OAAOI,UAAQ;AACf,OAAOC,YAAU;AACjB,OAAOC,aAAY;AACnB;AAAA,EAIE,OAAAC;AAAA,EACA,eAAAC;AAAA,EACA,UAAAC;AAAA,OACK;AAMP,SAAS,YAAAC,iBAAgB;;;AChBzB,OAAOC,UAAQ;AACf,OAAOC,YAAU;AACjB,SAAS,OAAAC,OAAK,UAAAC,gBAAwB;AAuM/B,SAAS,QAAQ,MAA0B;AAChD,QAAM,WAAW,kBAAkB;AACnC,QAAM,cAAc,qBAAqB;AACzC,QAAM,YAAY,mBAAmB;AACrC,oBAAkB;AAElB,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,WAAS,oBAAoB;AAC3B,WAAOC,SAAO,KAAK,IAAI,EAAE,MAAM,CAACC,cAAa;AAC3C,UAAI,CAACA,UAAU,QAAO;AAEtB,UAAI,CAACC,KAAG,WAAWD,SAAQ,GAAG;AAC5B,cAAM,IAAI,aAAa,qBAAqBE,OAAK,QAAQF,SAAQ,CAAC,IAAI;AAAA,MACxE;AACA,aAAOA;AAAA,IACT,CAAC;AAAA,EACH;AAEA,WAAS,uBAAuB;AAC9B,WAAOD,SAAO,KAAK,WAAW,EAAE,MAAM,CAACI,iBAAgBA,gBAAe,CAAC,CAAC;AAAA,EAC1E;AAEA,WAAS,qBAAqB;AAC5B,WAAOJ,SAAO,KAAK,SAAS,EAAE;AAAA,MAC5B,CAACK,eAAcA,cAAa;AAAA,IAC9B;AAAA,EACF;AAEA,WAAS,oBAAoB;AAC3B,WAAOC,MAAI,CAAC,UAAU,KAAK,MAAM,WAAW,CAAC,EAAE;AAAA,MAC7C,CAAC,CAACL,WAAU,MAAMG,YAAW,MAAM;AAEjC,YAAI,YAAY,MAAM;AACtB,YAAI,CAAC,WAAW;AACd,cACEF,KAAG,WAAWC,OAAK,KAAKF,WAAU,gBAAgB,CAAC,KACnDC,KAAG,WAAWC,OAAK,KAAKF,WAAU,gBAAgB,CAAC,GACnD;AACA,wBAAY;AAAA,UACd;AAAA,QACF;AACA,YAAI,CAAC,WAAW;AACd;AAAA,QACF;AAGA,cAAM,WAAWE,OAAK,QAAQA,OAAK,KAAKF,WAAU,SAAS,CAAC;AAC5D,cAAM,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA,EAKtB,OAAO,KAAKG,YAAW,EACtB,IAAI,CAAC,QAAQ,cAAc,GAAG,UAAU,EACxC,KAAK,IAAI,CAAC;AAAA;AAAA;AAAA;AAAA;AAML,cAAM,UAAUD,OAAK,QAAQ,QAAQ;AACrC,QAAAD,KAAG,UAAU,SAAS,EAAE,WAAW,KAAK,CAAC;AACzC,QAAAA,KAAG,cAAc,UAAU,OAAO;AAAA,MACpC;AAAA,IACF;AAAA,EACF;AACF;AAEO,SAASK,UACd,QACA,MACA,OACA,UACA,aACA;AACA,MAAI,CAAC,MAAO,QAAO;AAEnB,QAAMC,UAAS;AAAA,IACb,GAAG,IAAI;AAAA,IACP;AAAA,MACE,QAAQR,SAAO,KAAK,EAAE;AAAA,MACtB,QAAQA,SAAO,KAAK,EAAE;AAAA,MACtB,KAAKA,SAAO,QAAQ,EAAE;AAAA,QAAM,CAACC,cAC3BE,OAAK,KAAK,mBAAK,MAAM,MAAMF,SAAQ;AAAA,MACrC;AAAA,MACA;AAAA,MACA,UAAU,CAAC,KAAK,IAAI,EAAE,SAAS,CAAC;AAAA,IAClC;AAAA,IACA;AAAA,MACE;AAAA,MACA,eAAe,QAAQ,IAAI,OAAO,CAAC,GAAG,IAAI;AAAA,IAC5C;AAAA,EACF;AAGA,SAAOK,MAAI,CAAC,UAAU,OAAOE,QAAO,EAAE,CAAC,EAAE,MAAM,CAAC,CAACP,WAAUQ,QAAO,CAAC,MAAM;AACvE,UAAM,aAAaN,OAAK,KAAKF,WAAUQ,OAAM,MAAM;AACnD,QAAI,CAACP,KAAG,WAAW,UAAU,GAAG;AAC9B,YAAM,IAAI;AAAA,QACR,6BAA6BC,OAAK,QAAQ,UAAU,CAAC;AAAA,MACvD;AAAA,IACF;AAEA,WAAO;AAAA,EACT,CAAC;AACH;;;AD9RA,SAAS,cAAAO,aAAY,mBAAAC,kBAAiB,MAAAC,WAAU;AA2sBzC,IAAM,aAAN,cAAyB,UAAmC;AAAA,EACzD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YACE,MACA,OAAuB,CAAC,GACxB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AACpC,UAAM,OAAO;AAEb,4BAAwB;AACxB,UAAM,EAAE,UAAU,aAAa,UAAU,IAAI,QAAQ,IAAI;AACzD,UAAM,MAAM,aAAa;AAEzB,QAAI,IAAI,SAAS;AACf,WAAK,SAAS,IAAI;AAClB,WAAK,gBAAgB;AAAA,QACnB,WAAW;AAAA,UACT,MAAM;AAAA,UACN,MAAM;AAAA,UACN;AAAA,UACA,KAAK,KAAK;AAAA,QACZ;AAAA,QACA,MAAM,IAAI;AAAA,MACZ,CAAC;AACD;AAAA,IACF;AAEA,UAAM,QAAQ,eAAe;AAC7B,UAAM,YAAY,mBAAmB;AACrC,UAAM,SAAS,iBAAiB;AAChC,UAAM,aAAaC,UAAS,MAAM,MAAM,KAAK,OAAO,UAAU,WAAW;AACzE,UAAM,SAAS,aAAa;AAC5B,UAAM,EAAE,YAAY,aAAa,IAAI,iBAAiB;AACtD,UAAM,iBAAiB,aAAa;AACpC,UAAM,cAAcC,kBAAiB;AAErC,QAAI;AACJ,QAAI;AACJ,QAAI;AACJ,QAAI,wBAAoC,CAAC;AACzC,QAAI;AACJ,QAAI,OAAO;AACT,mBAAa,MAAM;AACnB,uBAAiB,MAAM;AACvB,8BAAwB,CAAC,qBAAqB,CAAC;AAC/C,gBAAU,MAAM;AAAA,IAClB,OAAO;AACL,mBAAa,qBAAqB;AAClC,qBAAe,mBAAmB;AAClC,uBAAiB,aAAa,MAAM,aAAa;AACjD,gBAAU,aAAa,UAAU;AAAA,QAAM,CAAC,cACtCC,SAAO,aAAa,aAAc,GAAG;AAAA,MACvC;AAAA,IACF;AAEA,UAAM,YAAY,gBAAgB;AAClC,uBAAmB;AAEnB,SAAK,SAAS;AACd,SAAK,MAAM;AACX,SAAK,UAAU;AAEf,SAAK,gBAAgB;AAAA,MACnB,OAAO,KAAK;AAAA,MACZ,WAAW;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN;AAAA,QACA,KAAK,KAAK;AAAA,MACZ;AAAA,MACA,MAAM,IAAI;AAAA,IACZ,CAAC;AAED,aAAS,0BAA0B;AACjC,UAAI,KAAK,SAAS;AAChB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAEF,UAAI,KAAK,QAAQ;AACf,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,IACJ;AAEA,aAAS,iBAAiB;AACxB,YAAMC,SAAQ,mBAAmB,KAAK,QAAQ,KAAK,KAAK;AAExD,UAAIA,QAAO;AACT,YAAI,KAAK;AACP,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAEF,YAAI,KAAK;AACP,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,MACJ;AAEA,aAAOA;AAAA,IACT;AAEA,aAAS,eAAe;AACtB,YAAM,UAAU;AAChB,YAAM,UAAU,KAAK,OAAO,CAAC;AAE7B,aAAO;AAAA,QACL;AAAA,QACA,KAAKD,SAAO,QAAQ,OAAO,eAAe;AAAA,QAC1C,SAAS;AAAA,UACP,OAAO,QAAQ;AAAA,UACf;AAAA,UACA,SAASA,SAAO,QAAQ,WAAW,aAAa;AAAA,UAChD,WAAWA,SAAO,QAAQ,aAAa,IAAI;AAAA,UAC3C,WAAWA,SAAO,QAAQ,aAAa,QAAQ;AAAA,QACjD;AAAA,MACF;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,aAAOE,MAAI,CAAC,WAAW,KAAK,SAAS,CAAC,EAAE;AAAA,QACtC,CAAC,CAACC,YAAWC,UAAS,MAAM;AAC1B,iBAAO,OAAOA,cAAaD,YAAW,QAAQ,OAAO,EAAE;AAAA,QACzD;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO;AAAA,QACL,GAAG,KAAK;AAAA;AAAA,QAER,MAAM,KAAK,QAAQ,OACfH,SAAO,KAAK,QAAQ,IAAI,EAAE;AAAA,UAAM,CAAC,MACjC,EAAE,QAAQ,OAAO,EAAE,EAAE,QAAQ,OAAO,EAAE;AAAA,QACxC,IACE;AAAA,QACJ,OAAOA,SAAO,KAAK,QAAQ,SAAS,IAAI;AAAA;AAAA,QAExC,QAAQ,KAAK,QAAQ,SACjBA,SAAO,KAAK,QAAQ,MAAM,EAAE;AAAA,UAAM,CAAC,MACnC,EAAE;AAAA,YACA,CAACC,WAAU,MAAMA,OAAM,QAAQ,OAAO,EAAE,EAAE,QAAQ,OAAO,EAAE;AAAA,UAC7D;AAAA,QACF,IACE,CAAC;AAAA,MACP;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,UAAI,OAAO,OAAQ;AAEnB,aAAO,IAAI;AAAA,QACT,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP,EAAE,QAAQ,aAAa;AAAA,UACvB,EAAE,QAAQ,MAAM,gBAAgB,MAAM;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,YAAM,WAAW,SACb,OAAO,MAAM,SACbI,IAAG,SAAS,IAAI,GAAG,IAAI,UAAU,OAAO,QAAS,QAAW;AAAA,QAC5D,QAAQ;AAAA,MACV,CAAC;AAEH,aAAO;AAAA,QACL,YAAY,SAAS;AAAA,QACrB,cAAc,SAAS;AAAA,MACzB;AAAA,IACF;AAEA,aAAS,eAAe;AACtB,aAAOH,MAAI,CAAC,YAAY,QAAQ,KAAK,CAAC,EAAE;AAAA,QACtC,OAAO,CAACI,aAAYC,SAAQN,MAAK,MAAM;AACrC,gBAAM,cAA4B,CAAC;AAGnC,gBAAM,cAAcM,SAAQ,eAAe;AAAA,YACzC;AAAA,cACE,OAAO;AAAA,cACP,cAAc;AAAA,YAChB;AAAA,YACA;AAAA,cACE,OAAO;AAAA,cACP,cAAc;AAAA,YAChB;AAAA,UACF;AAGA,gBAAM,iBAA2B,CAAC;AAClC,qBAAW,cAAc,YAAY,QAAQ,GAAG;AAC9C,kBAAM,QAAQC,UAAS,WAAW,OAAO;AAAA,cACvC,KAAKC,OAAK,QAAQH,WAAU;AAAA,cAC5B,OAAO;AAAA,cACP,KAAK;AAAA,cACL,QAAQ;AAAA,gBACN;AAAA,gBACA,GAAI,OAAO,WAAW,WAAW,WAC7B,CAAC,WAAW,MAAM,IAClB,WAAW,UAAU,CAAC;AAAA,cAC5B;AAAA,YACF,CAAC,EAAE,OAAO,CAAC,SAAS,CAAC,eAAe,SAAS,IAAI,CAAC;AAElD,wBAAY;AAAA,cACV,GAAI,MAAM,QAAQ;AAAA,gBAChB,MAAM,IAAI,OAAO,SAAS;AACxB,wBAAM,SAASG,OAAK,QAAQH,aAAY,IAAI;AAC5C,wBAAM,UAAU,MAAMI,KAAG,SAAS,SAAS,QAAQ,OAAO;AAC1D,wBAAM,OAAOC,QACV,WAAW,QAAQ,EACnB,OAAO,OAAO,EACd,OAAO,KAAK;AACf,yBAAO;AAAA,oBACL;AAAA,oBACA,KAAK;AAAA,sBACHF,OAAK;AAAA,wBACHF,QAAO,QAAQ;AAAA,wBACfN,QAAO,YAAY,QAAQ,OAAO,EAAE,KAAK;AAAA,wBACzC;AAAA,sBACF;AAAA,oBACF;AAAA,oBACA;AAAA,oBACA,cAAc,WAAW;AAAA,oBACzB,aACE,WAAW,eAAe,eAAe,MAAM,OAAO;AAAA,kBAC1D;AAAA,gBACF,CAAC;AAAA,cACH;AAAA,YACF;AACA,2BAAe,KAAK,GAAG,KAAK;AAAA,UAC9B;AAEA,iBAAO,IAAI;AAAA,YACT,GAAG,IAAI;AAAA,YACP;AAAA,cACE;AAAA,cACA,OAAO;AAAA,cACP,OAAOM,QAAO;AAAA,cACd,QAAQK,iBAAgB,QAAW,EAAE,QAAQ,KAAK,CAAC,EAAE;AAAA,YACvD;AAAA,YACA,EAAE,QAAQ,KAAK;AAAA,UACjB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,aAASb,oBAAmB;AAE1B,aAAOY,QACJ,WAAW,KAAK,EAChB,OAAO,GAAG,mBAAK,IAAI,IAAI,mBAAK,KAAK,IAAI,IAAI,EAAE,EAC3C,OAAO,KAAK,EACZ,UAAU,GAAG,CAAC;AAAA,IACnB;AAEA,aAAS,kBAAkB;AACzB,YAAM,UAAUT,MAAI;AAAA,QAClB;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC,EAAE,MAAM,OAAO,CAACI,aAAYC,SAAQM,eAAcT,YAAWH,MAAK,MAAM;AACvE,cAAM,YAAoC,CAAC;AAC3C,cAAM,OAAiB,CAAC;AAKxB,cAAM,aAAa,CAAC,aAAa;AAEjC,cAAM,aAAa,CAAC,YAAY,IAAI,QAAQ,MAAM;AAChD,gBAAM,cAAcQ,OAAK,KAAKH,aAAY,SAAS;AACnD,UAAAI,KAAG,YAAY,aAAa,EAAE,eAAe,KAAK,CAAC,EAAE;AAAA,YACnD,CAAC,SAAS;AAER,kBAAI,KAAK,OAAO,GAAG;AACjB,0BAAU,QAAQD,OAAK,KAAK,KAAK,WAAW,KAAK,IAAI,CAAC,CAAC,IAAI;AAC3D;AAAA,cACF;AAEA,kBAAI,UAAU,KAAK,WAAW,SAAS,KAAK,IAAI,GAAG;AACjD,2BAAWA,OAAK,KAAK,WAAW,KAAK,IAAI,GAAG,QAAQ,CAAC;AACrD;AAAA,cACF;AAEA,mBAAK,KAAK,QAAQA,OAAK,KAAK,KAAK,WAAW,KAAK,IAAI,CAAC,CAAC;AAAA,YACzD;AAAA,UACF;AAAA,QACF;AACA,mBAAW;AAEX,kBAAU,UAAU,IAAI,KAAK,UAAU;AAAA,UACrC,MAAMR,QAAO,eAAe,MAAM,SAAYA,QAAO;AAAA,UACrD,WAAWG;AAAA,UACX,IAAI;AAAA,YACF,QAAQS;AAAA,YACR,KAAKN,QAAO,OAAO,MAAMA,QAAO,OAAO;AAAA,YACvC,QAAQ,CAAC,GAAGA,QAAO,QAAQ,GAAG,IAAI;AAAA,UACpC;AAAA,QACF,CAA4B;AAE5B,eAAO;AAAA,MACT,CAAC;AAED,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,OAAO;AAAA,UACP,WAAW;AAAA,UACX;AAAA,UACA,OAAO,OAAO;AAAA,QAChB;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,OAAO,MAAO;AAAA,UACd,WAAW,MAAO;AAAA,UAClB,KAAK;AAAA,UACL,OAAO,MAAO;AAAA,YAAM,CAACN,WACnB,CAAC,QAAQ,aAAaA,OAAO,aAAaA,OAAO,UAAU,EAAE;AAAA,cAC3D;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,QACA,EAAE,QAAQ,KAAK;AAAA,MACjB;AAAA,IACF;AAEA,aAAS,uBAAuB;AAC9B,aAAOD,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,cAAM,gBAAgB,MAAM;AAC5B,YAAI,eAAe,QAAS,QAAOA,SAAO,eAAe,OAAO;AAEhE,eAAO,IAAIc,YAAW;AAAA,UACpB,GAAG,IAAI;AAAA,UACP,CAAC;AAAA,UACD,EAAE,QAAQ,KAAK;AAAA,QACjB,EAAE;AAAA,MACJ,CAAC;AAAA,IACH;AAEA,aAAS,wBAAwB;AAC/B,aAAOd,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,cAAM,gBAAgB,MAAM,eAAe,aAAa;AACxD,cAAM,8BAA8B,KAAK,SACrC,oCACA;AACJ,eAAO,IAAIc,YAAW;AAAA,UACpB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS;AAAA,YACT,2BAA2B,aAAa,CAAC,UAAU,IAAI,CAAC;AAAA,YACxD,MAAMC;AAAA;AAAA;AAAA,IAGd,aAAa;AAAA,IACb,2BAA2B;AAAA,IAC3B,mBAAmB;AAAA;AAAA,yBAEE,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAY1B;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,yBAAyB;AAChC,aAAOf,SAAO,KAAK,IAAI,EAAE,MAAM,CAAC,SAAS;AACvC,cAAM,aAAa,MAAM;AACzB,cAAM,gBAAgB,YAAY;AAClC,cAAMgB,cAAa,YAAY,WAAW,YAAY,WAAW,CAAC;AAElE,YAAI,CAAC,cAAe;AAEpB,eAAO,IAAIF,YAAW;AAAA,UACpB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS;AAAA,YACT,2BAA2BE,cAAa,CAACA,WAAU,IAAI,CAAC;AAAA,YACxD,MAAM;AAAA;AAAA;AAAA,IAGd,aAAa;AAAA;AAAA;AAAA,UAGP;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF,CAAC;AAAA,IACH;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAI;AAAA,QACT,GAAG;AAAA,UACD,KAAK,WAAW;AAAA,UAChB,GAAG,IAAI;AAAA,UACP;AAAA,YACE,SAAS,GAAG,IAAI;AAAA,YAChB,QAAQ,KAAK;AAAA,YACb,SAAS;AAAA,cACP;AAAA,gBACE,UAAU;AAAA,gBACV,YAAY;AAAA,gBACZ,oBAAoB;AAAA,kBAClB,UAAU;AAAA,kBACV,WAAW;AAAA,kBACX,sBAAsB;AAAA,kBACtB,mBAAmB;AAAA,kBACnB,oBAAoB,CAAC,SAAS;AAAA,gBAChC;AAAA,cACF;AAAA,YACF;AAAA,YACA,sBAAsB;AAAA,cACpB,gBAAgB;AAAA,cAChB,sBAAsB;AAAA,cACtB,gBAAgB;AAAA,gBACd;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA,eAAe,CAAC,OAAO,MAAM;AAAA,cAC7B,UAAU;AAAA;AAAA,cAEV,eAAe;AAAA,cACf,sBAAsBd,MAAI;AAAA,gBACxB,sBAAsB;AAAA,gBACtB,uBAAuB;AAAA,cACzB,CAAC,EAAE,MAAM,CAAC,CAAC,OAAO,KAAK,MAAM;AAAA,gBAC3B,EAAE,WAAW,kBAAkB,aAAa,MAAM,IAAI;AAAA,gBACtD,GAAI,QACA,CAAC,EAAE,WAAW,mBAAmB,aAAa,MAAM,IAAI,CAAC,IACzD,CAAC;AAAA,cACP,CAAC;AAAA,YACH;AAAA,UACF;AAAA,UACA,EAAE,QAAQ,KAAK;AAAA,QACjB;AAAA,MACF;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,MAAAA,MAAI,CAAC,YAAY,KAAK,QAAQ,KAAK,YAAY,CAAC,EAAE;AAAA,QAChD,CAAC,CAACI,aAAYC,SAAQ,eAAe,MAAM;AAEzC,cAAI,oBAAoB,MAAO;AAC/B,gBAAM,eAAe;AAAA,YACnB,MAAM;AAAA,YACN,OAAO;AAAA,YACP,GAAG;AAAA,UACL;AAGA,gBAAM,oBACJ,aAAa,UAAU,QAAQ,CAAC,IAAI,IAAI,aAAa;AACvD,cAAI,kBAAkB,WAAW,EAAG;AAQpC,gBAAM,OAAOI,QAAO,WAAW,KAAK;AACpC,eAAK,OAAO,KAAK,UAAUJ,WAAU,CAAC,CAAC,CAAC;AACxC,UAAAC,UAAS,MAAM;AAAA,YACb,KAAK;AAAA,YACL,OAAO;AAAA,YACP,QAAQ;AAAA,YACR,KAAKC,OAAK,QAAQH,WAAU;AAAA,UAC9B,CAAC,EAAE;AAAA,YAAQ,CAAC,aACV,KAAK;AAAA,cACHI,KAAG,aAAaD,OAAK,QAAQH,aAAY,QAAQ,GAAG,OAAO;AAAA,YAC7D;AAAA,UACF;AAEA,cAAI;AAAA,YACF,GAAG,IAAI;AAAA,YACP;AAAA,cACE;AAAA,cACA,OAAO;AAAA,cACP,SAAS,KAAK,OAAO,KAAK;AAAA,cAC1B,MAAM,aAAa;AAAA,YACrB;AAAA,YACA;AAAA,cACE,QAAQ;AAAA,cACR,WAAW,CAAC,gBAAgB,WAAW,GAAG,qBAAqB;AAAA,YACjE;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAOJ,MAAI,CAAC,KAAK,SAAS,KAAK,MAAM,CAAC,EAAE;AAAA,MACtC,CAAC,CAAC,SAAS,MAAM,MAAO,WAAW;AAAA,IACrC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,QAAQ,KAAK;AAAA;AAAA;AAAA;AAAA,MAIb,KAAK,KAAK;AAAA,IACZ;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA,QACV,KAAK,KAAK;AAAA,MACZ;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAML,iBAAe;AAErB,WAAW,eAAeA;;;AEvxC1B,OAAOoB,UAAQ;AACf,OAAOC,YAAU;AAuZV,IAAM,YAAN,cAAwB,QAAQ;AAAA,EACrC,YACE,MACA,OAAsB,CAAC,GACvB,OAAiC,CAAC,GAClC;AACA,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAAA,EACtC;AAAA,EAEU,wBAAwB;AAAA,EAAE;AAAA,EAE1B,UAAU,YAA0C;AAC5D,WAAO,WAAW,MAAM,CAACC,gBAAe;AACtC,YAAM,mBAAmBC,OAAK;AAAA,QAC5BD;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,UAAI;AACJ,UAAI;AACF,cAAM,WAAWE,KACd,aAAaD,OAAK,KAAK,kBAAkB,aAAa,CAAC,EACvD,SAAS;AACZ,cAAM,SAAS,SAAS,MAAM,iBAAiB,IAAI,CAAC;AACpD,cAAM,UAAU,SAAS,MAAM,kBAAkB,IAAI,CAAC;AACtD,YAAI,UAAU,WAAW,QAAQ,SAAS,MAAM,GAAG;AACjD,qBAAW,QAAQ,UAAU,GAAG,QAAQ,SAAS,OAAO,MAAM;AAAA,QAChE;AAAA,MACF,SAAS,GAAG;AAAA,MAAE;AAEd,aAAO;AAAA,QACL,MAAM;AAAA,QACN,QAAQ;AAAA,UACN,SAASA,OAAK;AAAA,YACZ;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,UACA,QAAQ;AAAA,YACN,SAAS;AAAA,cACP,QAAQ,QAAQ,IAAI,YAAY,QAAQ;AAAA,cACxC,WAAW,QAAQ,IAAI,YAAa,WAAqB;AAAA,cACzD,QAAQ;AAAA,gBACN,yBAAyB,QAAQ,IAAI,YACjC,SACA;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,WAAW;AAAA,YACT;AAAA,cACE,MAAMA,OAAK;AAAA,gBACTD;AAAA,gBACA;AAAA,gBACA;AAAA,gBACA;AAAA,cACF;AAAA,cACA,IAAI;AAAA,YACN;AAAA,UACF;AAAA,QACF;AAAA,QACA,QAAQ;AAAA,UACN;AAAA,YACE,MAAMC,OAAK,KAAK,eAAe,kBAAkB,QAAQ;AAAA,YACzD,IAAI;AAAA,YACJ,QAAQ;AAAA,YACR,iBAAiB;AAAA,UACnB;AAAA,UACA;AAAA,YACE,MAAMA,OAAK,KAAK,eAAe,kBAAkB,aAAa;AAAA,YAC9D,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAW,MAAM;AACf,WAAO,MAAM;AAAA,EACf;AACF;AAEA,IAAMF,iBAAe;AAErB,UAAU,eAAeA;;;ACpfzB,OAAOI,YAAU;;;ACAjB,SAAuC,WAAAC,iBAAe;AAW/C,IAAM,cAAN,cAA0BC,UAAQ,SAAS;AAAA,EAChD,YACE,MACA,MACA,MACA;AACA;AAAA,MACE,IAAI,IAAI,SAAS,iBAAiB;AAAA,MAClC,GAAG,IAAI;AAAA,MACP;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;;;AD2DO,IAAM,SAAN,MAAM,gBAAe,UAAmC;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EAER,YAAY,MAAc,MAAkB,MAAiC;AAC3E,UAAMC,gBAAc,MAAM,MAAM,IAAI;AAEpC,UAAM,SAAS;AACf,UAAM,YAAY,mBAAmB;AAErC,QAAI;AACJ,QAAI,QAAQ,SAAS,MAAM;AACzB,YAAM,MAAM;AACZ,iBAAW,IAAI;AAAA,IACjB,OAAO;AACL,iBAAW,SAAS;AACpB,oBAAc;AAAA,IAChB;AAEA,UAAM,eAAe,mBAAmB;AACxC,UAAM,aAAa,iBAAiB;AACpC,UAAM,gBAAgB,oBAAoB;AAE1C,SAAK,WAAW;AAChB,SAAK,eAAe;AACpB,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAErB,aAAS,qBAAqB;AAC5B,aAAO;AAAA,IACT;AAEA,aAAS,WAAW;AAClB,aAAO,IAAI;AAAA,QACT,GAAG;AAAA,UACD,MAAM,WAAW;AAAA,UACjB,GAAG,IAAI;AAAA,UACP,EAAE,KAAK,UAAU;AAAA,UACjB,EAAE,OAAO;AAAA,QACX;AAAA,MACF;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,UAAI;AAAA,QACF,GAAG,IAAI;AAAA,QACP;AAAA,UACE,YAAY,SAAS,MAAM,QAAQ;AAAA,UACnC,WAAW,SAAS,MAAM,QAAQ,kBAAkB,CAAC,EAAE;AAAA,UACvD,cAAc,SAAS;AAAA,UACvB;AAAA,UACA,WAAW,KAAK;AAAA,QAClB;AAAA,QACA,EAAE,QAAQ,WAAW,SAAS,MAAM,SAAS;AAAA,MAC/C;AAAA,IACF;AAEA,aAAS,qBAAqB;AAC5B,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,aAAa,GAAG,IAAI;AAAA,UACpB,QAAQ,cAAc;AAAA,UACtB,SAAS;AAAA,UACT,aAAa,sBAAsB;AAAA,UACnC,aAAa,sBAAsB;AAAA,UACnC,KAAK;AAAA,QACP;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,mBAAmB;AAC1B,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,aAAa,GAAG,IAAI;AAAA,UACpB,QAAQ,cAAc;AAAA,UACtB,SAAS;AAAA,UACT,aAAa,sBAAsB;AAAA,UACnC,aAAa,sBAAsB;AAAA,UACnC,KAAK;AAAA,QACP;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,sBAAsB;AAC7B,aAAO,IAAI;AAAA,QACT,GAAG,IAAI;AAAA,QACP;AAAA,UACE,aAAa,GAAG,IAAI;AAAA,UACpB,QAAQ,cAAc;AAAA,UACtB,SAAS;AAAA,UACT,aAAa,sBAAsB;AAAA,UACnC,aAAa,sBAAsB;AAAA,UACnC,KAAK;AAAA,QACP;AAAA,QACA,EAAE,OAAO;AAAA,MACX;AAAA,IACF;AAEA,aAAS,gBAAgB;AACvB,aAAOC,OAAK,KAAK,mBAAK,MAAM,UAAU,QAAQ,gBAAgB;AAAA,IAChE;AAEA,aAAS,wBAAwB;AAC/B,aAAO;AAAA,QACL,aAAa,SAAS,MAAM,QAAQ;AAAA,QACpC,YAAY,SAAS,MAAM,QAAQ,kBAAkB,CAAC,EAAE;AAAA,QACxD,eAAe,SAAS;AAAA,QACxB,YAAY;AAAA,MACd;AAAA,IACF;AAEA,aAAS,wBAAwB;AAC/B,aAAO;AAAA,QACL;AAAA,UACE,SAAS,CAAC,+BAA+B;AAAA,UACzC,WAAW,CAAC,SAAS,MAAM,QAAQ,kBAAkB,CAAC,EAAE,SAAS;AAAA,QACnE;AAAA,QACA;AAAA,UACE,SAAS,CAAC,2BAA2B;AAAA,UACrC,WAAW,CAAC,SAAS,MAAM,QAAQ,GAAG;AAAA,QACxC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAyCA,OAAc,IAAI,MAAc,WAA0B;AACxD,UAAM,WAAW,SAAS,IAAI,GAAG,IAAI,YAAY,SAAS;AAC1D,WAAO,IAAI,QAAO,MAAM;AAAA,MACtB,KAAK;AAAA,MACL;AAAA,IACF,CAA0B;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,YAAY;AACrB,WAAO,KAAK,SAAS,MAAM,QAAQ;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,IAAW,QAAQ;AACjB,WAAO;AAAA;AAAA;AAAA;AAAA,MAIL,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA,EAGO,aAAa;AAClB,WAAO;AAAA,MACL,YAAY;AAAA;AAAA,QAEV,eAAe,KAAK,aAAa;AAAA;AAAA,QAEjC,aAAa,KAAK,WAAW;AAAA;AAAA,QAE7B,gBAAgB,KAAK,cAAc;AAAA,MACrC;AAAA,MACA,SAAS;AAAA,QACP,WAAW;AAAA,UACT,SAAS,CAAC,uBAAuB;AAAA,UACjC,WAAW;AAAA,YACT,KAAK,aAAa,MAAM,SAAS;AAAA,YACjC,KAAK,WAAW,MAAM,SAAS;AAAA,YAC/B,KAAK,cAAc,MAAM,SAAS;AAAA,UACpC;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAMD,iBAAe;AAErB,OAAO,eAAeA;;;AEnTtB,SAAgB,iBAAAE,iBAAe,UAAAC,gBAA+B;AAC9D,SAAS,OAAAC,aAAW;AAqCb,SAAS,QACd,QACA,IACA;AACA,SAAOD,SAAO,MAAM,EAAE,MAAM,CAAC,MAAM;AACjC,UAAM,OAAO,OAAO,MAAM,WAAW,KAAK,MAAM,CAAC,IAAI;AACrD,OAAG,IAAI;AACP,WAAOC,MAAI,wBAAwB;AAAA,MACjC,uBAAuB,CAACF,gBAAc,IAAI,CAAC;AAAA,IAC7C,CAAC,EAAE;AAAA,EACL,CAAC;AACH;;;ACjCO,IAAMG,YAAW,KAAK;;;ArIX7B,IAAO,qBAAQ,QAAQ;AAAA,EACrB,IAAI,OAAO;AACT,WAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,SAAS,OAAO,UAAU,eAAe,WAAW;AAAA,IACtD;AAAA,EACF;AAAA,EAEA,MAAM,MAAM;AAEV,UAAM,WAAW,IAAQ,YAAI,gBAAgB,cAAc;AAAA,MACzD,UAAU;AAAA,QACR,WAAW;AAAA,UACT,SAAS;AAAA,QACX;AAAA,MACF;AAAA,IACF,CAAC;AAGD,UAAM,SAAS,SAAS,UAAU,KAAK;AAGvC,UAAM,eAAe,IAAQ,YAAI,oBAAoB,kBAAkB;AAAA,MACrE,WAAW,CAAC,EAAE,UAAU,SAAS,IAAI,QAAQ,OAAO,GAAG,CAAC;AAAA,IAC1D,CAAC;AAGD,UAAM,SAAS,aAAa,mBAAK,IAAI,IAAI,mBAAK,KAAK;AAGnD,QAAQ,SAAI,UAAU,0BAA0B;AAAA,MAC9C,MAAM,GAAG,MAAM;AAAA,MACf,MAAM;AAAA,MACN,OAAO,SAAS;AAAA,MAChB,WAAW;AAAA,IACb,CAAC;AAED,QAAQ,SAAI,UAAU,0BAA0B;AAAA,MAC9C,MAAM,GAAG,MAAM;AAAA,MACf,MAAM;AAAA,MACN,OAAO,SAAS;AAAA,MAChB,WAAW;AAAA,IACb,CAAC;AAED,QAAQ,SAAI,UAAU,2BAA2B;AAAA,MAC/C,MAAM,GAAG,MAAM;AAAA,MACf,MAAM;AAAA,MACN,OAAO,SAAS;AAAA,MAChB,WAAW;AAAA,IACb,CAAC;AAED,QAAQ,SAAI,UAAU,wBAAwB;AAAA,MAC5C,MAAM,GAAG,MAAM;AAAA,MACf,MAAM;AAAA,MACN,OAAO,OAAO;AAAA,MACd,WAAW;AAAA,IACb,CAAC;AAED,QAAQ,SAAI,UAAU,8BAA8B;AAAA,MAClD,MAAM,GAAG,MAAM;AAAA,MACf,MAAM;AAAA,MACN,OAAO,aAAa;AAAA,MACpB,WAAW;AAAA,IACb,CAAC;AAKD,WAAO;AAAA,MACL,UAAU,SAAS;AAAA,MACnB,QAAQ,OAAO;AAAA,MACf,cAAc,aAAa;AAAA,IAC7B;AAAA,EACF;AACF,CAAC;;;AsI7EK,IAAM,SAAS,MAAM,IAAI,mBAAI,GAAG;AAChC,IAAO,eAAQ;",
  "names": ["runtime", "output", "all", "ComponentResource", "output", "output", "all", "transform", "args", "name", "output", "suffix", "output", "env", "Link", "ComponentResource", "runtime", "isLinkable", "all", "link", "output", "links", "properties", "env", "linkable", "runtime", "output", "runtime", "output", "aws", "Auth", "Cluster", "Postgres", "Redis", "Vpc", "linkable", "fs", "path", "path", "fs", "crypto", "output", "all", "interpolate", "output", "interpolate", "all", "all", "dns", "all", "domainName", "records", "all", "output", "output", "interpolate", "all", "interpolate", "output", "lambda", "s3", "all", "output", "crypto", "all", "interpolate", "output", "rpc", "Provider", "getPartitionOutput", "iam", "all", "interpolate", "output", "ec2", "getAvailabilityZonesOutput", "all", "output", "__pulumiType", "output", "zones", "all", "ret", "Vpc", "__pulumiType", "output", "vpc", "ec2", "internetGateway", "securityGroup", "privateSubnets", "privateRouteTables", "publicSubnets", "publicRouteTables", "natGateways", "elasticIps", "nat", "natInstances", "bastionInstance", "vpcId", "cloudmapNamespace", "privateKeyValue", "interpolate", "all", "zones", "getAvailabilityZonesOutput", "az", "keyPair", "ret", "result", "all", "output", "ec2", "__pulumiType", "output", "all", "Vpc", "vpc", "ec2", "all", "interpolate", "output", "crypto", "dynamic", "dynamic", "all", "crypto", "jsonStringify", "dynamic", "dynamic", "dynamic", "dynamic", "path", "crypto", "jsonStringify", "__pulumiType", "all", "all", "output", "__pulumiType", "all", "output", "__pulumiType", "output", "cdn", "tags", "routes", "path", "kvNamespace", "kvStoreArn", "crypto", "interpolate", "all", "pattern", "args", "route", "routeDeprecated", "__pulumiType", "all", "dev", "getPartitionOutput", "region", "runtime", "output", "normalizeMemory", "name", "links", "handler", "bundle", "copyFiles", "injections", "timeout", "memory", "environment", "bootstrap", "result", "linkable", "appsync", "streaming", "logging", "volume", "url", "Vpc", "vpc", "isContainer", "linkData", "iam", "linkPermissions", "interpolate", "policies", "authToken", "wrapper", "sourcemaps", "item", "crypto", "logGroup", "imageAsset", "zipAsset", "fnUrl", "definition", "output", "definition", "all", "__pulumiType", "output", "permission", "events", "lambda", "s3", "interpolate", "iam", "s3", "interpolate", "output", "s3", "output", "jsonStringify", "output", "lambda", "__pulumiType", "output", "lambda", "iam", "__pulumiType", "output", "jsonStringify", "queueArn", "arn", "iam", "__pulumiType", "output", "s3", "interpolate", "interpolate", "output", "iam", "s3", "__pulumiType", "output", "interpolate", "output", "iam", "lambda", "s3", "sns", "all", "output", "jsonStringify", "output", "lambda", "sns", "__pulumiType", "output", "permission", "lambda", "sns", "jsonStringify", "jsonStringify", "output", "sns", "__pulumiType", "output", "sns", "jsonStringify", "sns", "output", "output", "subscriber", "__pulumiType", "sns", "output", "args", "all", "subscriber", "queueArn", "__pulumiType", "output", "notifications", "config", "permission", "lambda", "sns", "iam", "s3", "__pulumiType", "output", "all", "access", "policy", "path", "s3", "enforceHttps", "policyArgs", "interpolate", "iam", "bucketArn", "subscriber", "args", "queueArn", "topicArn", "runtime", "runtime", "cloudfront", "s3", "__pulumiType", "output", "s3", "cloudfront", "all", "dns", "dynamic", "dynamic", "dynamic", "dynamic", "output", "route53", "output", "partial", "createRecord", "zoneId", "route53", "cloudfront", "output", "interpolate", "distribution", "cloudfront", "domain", "dns", "all", "cert", "dynamic", "dynamic", "all", "output", "cloudwatch", "iam", "lambda", "__pulumiType", "output", "createRule", "cloudwatch", "fn", "fnArgs", "lambda", "iam", "event", "all", "name", "path", "path", "fs", "all", "output", "all", "all", "args", "all", "sitePath", "result", "fs", "path", "output", "linkData", "linkEnvs", "cloudfront", "getRegionOutput", "lambda", "Region", "linkable", "dynamic", "dynamic", "path", "output", "server", "all", "plan", "buildKvNamespace", "cloudfront", "edge", "interpolate", "kvStoreArn", "servers", "sitePath", "fs", "path", "getRegionOutput", "regions", "Region", "route", "args", "lambda", "imageOptimizer", "outputPath", "crypto", "timeout", "__pulumiType", "outputPath", "fs", "path", "all", "interpolate", "output", "interpolate", "output", "apigateway", "lambda", "output", "output", "auth", "authArgs", "__pulumiType", "output", "permission", "method", "path", "interpolate", "lambda", "apigateway", "interpolate", "output", "apigateway", "lambda", "__pulumiType", "output", "fn", "interpolate", "lambda", "apigateway", "getPartitionOutput", "apigateway", "iam", "jsonStringify", "interpolate", "apigateway", "cloudwatch", "getRegionOutput", "output", "apigateway", "__pulumiType", "output", "apigateway", "apigateway", "output", "apigateway", "__pulumiType", "apigateway", "__pulumiType", "apigateway", "output", "__pulumiType", "getRegionOutput", "output", "endpoint", "apigateway", "all", "interpolate", "path", "accessLog", "domain", "resourceIds", "corsRoutes", "corsResponses", "resources", "cloudwatch", "endpointType", "region", "all", "output", "interpolate", "output", "apigatewayv2", "lambda", "interpolate", "output", "output", "authArgs", "interpolate", "__pulumiType", "output", "permission", "interpolate", "lambda", "apigatewayv2", "interpolate", "output", "apigatewayv2", "lambda", "__pulumiType", "output", "interpolate", "apigatewayv2", "lamb", "jwt", "lambda", "apigatewayv2", "cloudwatch", "output", "apigatewayv2", "__pulumiType", "output", "apigatewayv2", "output", "apigatewayv2", "__pulumiType", "output", "apigatewayv2", "__pulumiType", "output", "accessLog", "domain", "cors", "Vpc", "apigatewayv2", "cloudwatch", "certificateArn", "path", "all", "all", "interpolate", "output", "all", "interpolate", "output", "apigatewayv2", "lambda", "__pulumiType", "output", "permission", "createApiRoute", "interpolate", "lambda", "apigatewayv2", "all", "route", "authArgs", "apigatewayv2", "cloudwatch", "__pulumiType", "output", "accessLog", "domain", "apigatewayv2", "cloudwatch", "all", "certificateArn", "path", "interpolate", "fs", "interpolate", "output", "output", "iam", "__pulumiType", "output", "lambda", "iam", "output", "appsync", "__pulumiType", "output", "kind", "appsync", "__pulumiType", "appsync", "__pulumiType", "output", "domain", "schema", "fs", "domainName", "interpolate", "fs", "path", "__pulumiType", "outputPath", "path", "fs", "all", "interpolate", "jsonStringify", "output", "iam", "output", "__pulumiType", "output", "dynamic", "dynamic", "result", "__pulumiType", "output", "all", "version", "engine", "username", "name", "secret", "cluster", "instance", "password", "proxy", "scaling", "replicas", "Vpc", "dev", "interpolate", "jsonStringify", "iam", "jsonStringify", "output", "secret", "PrivateKey", "__pulumiType", "output", "args", "secret", "Auth", "__pulumiType", "jsonStringify", "args", "router", "output", "interpolate", "output", "output", "cloudwatch", "output", "cloudwatch", "lambda", "__pulumiType", "output", "permission", "interpolate", "lambda", "cloudwatch", "cloudwatch", "output", "cloudwatch", "__pulumiType", "output", "cloudwatch", "__pulumiType", "bus", "cloudwatch", "output", "busArn", "args", "output", "all", "interpolate", "output", "ec2", "ecs", "getRegionOutput", "servicediscovery", "fs", "path", "interpolate", "secret", "all", "output", "cloudwatch", "ecr", "getCallerIdentityOutput", "getPartitionOutput", "getRegionOutput", "iam", "all", "Image", "limiter", "all", "args", "output", "all", "cpu", "containers", "architecture", "iam", "additionalPermissions", "getCallerIdentityOutput", "interpolate", "getPartitionOutput", "getRegionOutput", "region", "path", "fs", "ecr", "secret", "cloudwatch", "linkEnvs", "name", "storage", "__pulumiType", "getRegionOutput", "output", "all", "loadBalancer", "Vpc", "vpc", "lb", "containers", "rules", "domain", "type", "ec2", "servicediscovery", "cloudmapService", "ecs", "interpolate", "targetGroups", "ecs", "fs", "path", "all", "interpolate", "output", "secret", "Image", "Platform", "appautoscaling", "cloudwatch", "ec2", "ecr", "ecs", "getRegionOutput", "iam", "lb", "Service", "__pulumiType", "output", "normalizeArchitecture", "normalizeCpu", "normalizeMemory", "normalizeStorage", "createTaskRole", "region", "createExecutionRole", "createTaskDefinition", "all", "loadBalancer", "Vpc", "result", "getRegionOutput", "image", "architecture", "Platform", "supportedCpus", "cpu", "supportedMemories", "storage", "logging", "pub", "ports", "domain", "imageArgs", "path", "fs", "Image", "interpolate", "ecr", "secret", "ec2", "lb", "targets", "cloudwatch", "linkPermissions", "iam", "getCallerIdentityOutput", "ecs", "self", "env", "linkData", "name", "appautoscaling", "ecs", "supportedCpus", "supportedMemories", "__pulumiType", "Service", "all", "output", "__pulumiType", "appsync", "output", "v", "all", "containers", "Vpc", "vpc", "publicIp", "Cluster", "__pulumiType", "vpc", "output", "cluster", "ecs", "Vpc", "interpolate", "output", "getRegionOutput", "iam", "__pulumiType", "getRegionOutput", "output", "interpolate", "iam", "all", "output", "output", "cognito", "__pulumiType", "output", "type", "cognito", "output", "cognito", "__pulumiType", "output", "cognito", "lambda", "__pulumiType", "output", "all", "triggers", "verify", "cognito", "lambda", "all", "interpolate", "output", "output", "lambda", "__pulumiType", "output", "lambda", "__pulumiType", "output", "all", "name", "args", "subscriber", "interpolate", "all", "interpolate", "output", "__pulumiType", "dns", "isDomain", "output", "identity", "configurationSet", "all", "dmarc", "interpolate", "all", "output", "lambda", "output", "__pulumiType", "output", "lambda", "__pulumiType", "output", "args", "all", "streamArn", "subscriber", "fs", "path", "all", "output", "dynamodb", "getRegionOutput", "lambda", "__pulumiType", "all", "outputPath", "getRegionOutput", "path", "fs", "revalidationFunction", "args", "dynamodb", "lambda", "output", "RandomPassword", "__pulumiType", "RandomPassword", "args", "interpolate", "jsonStringify", "output", "iam", "secretsmanager", "RandomPassword", "__pulumiType", "output", "normalizeStorage", "secret", "domain", "secretsmanager", "password", "dev", "interpolate", "RandomPassword", "jsonStringify", "iam", "all", "interpolate", "jsonStringify", "output", "iam", "rds", "secretsmanager", "RandomPassword", "jsonParse", "output", "rds", "secretsmanager", "parseACU", "result", "__pulumiType", "output", "scaling", "version", "name", "rds", "secretsmanager", "jsonParse", "secret", "instances", "Postgres", "__pulumiType", "output", "normalizeStorage", "secret", "instance", "rds", "proxy", "password", "secretsmanager", "Vpc", "dev", "interpolate", "RandomPassword", "jsonStringify", "iam", "all", "all", "interpolate", "jsonStringify", "output", "iam", "rds", "secretsmanager", "RandomPassword", "__pulumiType", "output", "normalizeStorage", "secret", "instance", "rds", "proxy", "password", "secretsmanager", "Vpc", "dev", "interpolate", "RandomPassword", "jsonStringify", "iam", "all", "all", "interpolate", "output", "lambda", "__pulumiType", "output", "createRule", "permission", "interpolate", "lambda", "iot", "lambda", "__pulumiType", "iot", "lambda", "all", "subscriber", "fs", "path", "output", "__pulumiType", "output", "outputPath", "path", "fs", "all", "interpolate", "jsonStringify", "output", "RandomPassword", "elasticache", "secretsmanager", "all", "interpolate", "jsonStringify", "output", "RandomPassword", "secretsmanager", "__pulumiType", "output", "all", "engine", "secret", "dev", "interpolate", "Vpc", "authToken", "RandomPassword", "secretsmanager", "jsonStringify", "Redis", "__pulumiType", "output", "all", "engine", "secret", "cluster", "elasticache", "secretsmanager", "authToken", "dev", "interpolate", "Vpc", "RandomPassword", "jsonStringify", "version", "argsCluster", "name", "fs", "path", "all", "__pulumiType", "all", "outputPath", "path", "fs", "fs", "path", "__pulumiType", "outputPath", "fs", "path", "all", "interpolate", "output", "cloudwatch", "iam", "output", "Map", "output", "all", "output", "Task", "output", "all", "integration", "output", "output", "__pulumiType", "output", "logging", "cloudwatch", "interpolate", "iam", "type", "all", "logGroup", "Map", "Task", "name", "fs", "path", "__pulumiType", "outputPath", "fs", "path", "fs", "path", "__pulumiType", "outputPath", "fs", "path", "fs", "path", "crypto", "all", "interpolate", "output", "globSync", "fs", "path", "all", "output", "output", "sitePath", "fs", "path", "environment", "indexPage", "all", "buildApp", "result", "build", "cloudfront", "getRegionOutput", "s3", "__pulumiType", "buildApp", "buildKvNamespace", "output", "route", "all", "indexPage", "errorPage", "s3", "outputPath", "assets", "globSync", "path", "fs", "crypto", "getRegionOutput", "bucketDomain", "cloudfront", "interpolate", "kvStoreArn", "fs", "path", "__pulumiType", "outputPath", "path", "fs", "path", "dynamic", "dynamic", "__pulumiType", "path", "jsonStringify", "output", "iam", "linkable"]
}
